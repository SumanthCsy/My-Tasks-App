{"dependencies":[{"name":"@babel/runtime/helpers/callSuper","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"378KbBHdmndC3iMXZ2Ix8oB3LeE=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/inherits","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"y0uNg4LxF1CLscQChxzgo5dfjvA=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/objectWithoutProperties","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"fnQVLibs90KHiJ7y48fLgPWzDS0=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"],"imports":1}},{"name":"@firebase/util","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":11,"index":26},"end":{"line":3,"column":36,"index":51}}],"key":"R3im+0n/eSh8gKTMLLPoTxcvyH0=","exportNames":["*"],"imports":1}},{"name":"@firebase/app","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":10,"index":63},"end":{"line":4,"column":34,"index":87}}],"key":"lENqTkRf5ylEITQI/k3wCDumleU=","exportNames":["*"],"imports":1}},{"name":"@firebase/component","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":16,"index":105},"end":{"line":5,"column":46,"index":135}}],"key":"eDsH+fiRQ6A04XOvKTChGPEhs0I=","exportNames":["*"],"imports":1}},{"name":"@firebase/logger","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":13,"index":150},"end":{"line":6,"column":40,"index":177}}],"key":"pLe/ZFQGfNWvdh/0rG0JuGxrOpM=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var _callSuper = require(_dependencyMap[0], \"@babel/runtime/helpers/callSuper\").default;\n  var _inherits = require(_dependencyMap[1], \"@babel/runtime/helpers/inherits\").default;\n  var _objectWithoutProperties = require(_dependencyMap[2], \"@babel/runtime/helpers/objectWithoutProperties\").default;\n  var _slicedToArray = require(_dependencyMap[3], \"@babel/runtime/helpers/slicedToArray\").default;\n  var _asyncToGenerator = require(_dependencyMap[4], \"@babel/runtime/helpers/asyncToGenerator\").default;\n  var _classCallCheck = require(_dependencyMap[5], \"@babel/runtime/helpers/classCallCheck\").default;\n  var _createClass = require(_dependencyMap[6], \"@babel/runtime/helpers/createClass\").default;\n  var _excluded = [\"providerId\"],\n    _excluded2 = [\"uid\", \"auth\", \"stsTokenManager\"],\n    _excluded3 = [\"providerId\", \"signInMethod\"];\n  var util = require(_dependencyMap[7], \"@firebase/util\");\n  var app = require(_dependencyMap[8], \"@firebase/app\");\n  var component = require(_dependencyMap[9], \"@firebase/component\");\n  var logger = require(_dependencyMap[10], \"@firebase/logger\");\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _debugErrorMap() {\n    return {\n      [\"admin-restricted-operation\" /* AuthErrorCode.ADMIN_ONLY_OPERATION */]: 'This operation is restricted to administrators only.',\n      [\"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */]: '',\n      [\"app-not-authorized\" /* AuthErrorCode.APP_NOT_AUTHORIZED */]: \"This app, identified by the domain where it's hosted, is not \" + 'authorized to use Firebase Authentication with the provided API key. ' + 'Review your key configuration in the Google API console.',\n      [\"app-not-installed\" /* AuthErrorCode.APP_NOT_INSTALLED */]: 'The requested mobile application corresponding to the identifier (' + 'Android package name or iOS bundle ID) provided is not installed on ' + 'this device.',\n      [\"captcha-check-failed\" /* AuthErrorCode.CAPTCHA_CHECK_FAILED */]: 'The reCAPTCHA response token provided is either invalid, expired, ' + 'already used or the domain associated with it does not match the list ' + 'of whitelisted domains.',\n      [\"code-expired\" /* AuthErrorCode.CODE_EXPIRED */]: 'The SMS code has expired. Please re-send the verification code to try ' + 'again.',\n      [\"cordova-not-ready\" /* AuthErrorCode.CORDOVA_NOT_READY */]: 'Cordova framework is not ready.',\n      [\"cors-unsupported\" /* AuthErrorCode.CORS_UNSUPPORTED */]: 'This browser is not supported.',\n      [\"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */]: 'This credential is already associated with a different user account.',\n      [\"custom-token-mismatch\" /* AuthErrorCode.CREDENTIAL_MISMATCH */]: 'The custom token corresponds to a different audience.',\n      [\"requires-recent-login\" /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */]: 'This operation is sensitive and requires recent authentication. Log in ' + 'again before retrying this request.',\n      [\"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */]: 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' + 'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' + 'starting any other Firebase SDK.',\n      [\"dynamic-link-not-activated\" /* AuthErrorCode.DYNAMIC_LINK_NOT_ACTIVATED */]: 'Please activate Dynamic Links in the Firebase Console and agree to the terms and ' + 'conditions.',\n      [\"email-change-needs-verification\" /* AuthErrorCode.EMAIL_CHANGE_NEEDS_VERIFICATION */]: 'Multi-factor users must always have a verified email.',\n      [\"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */]: 'The email address is already in use by another account.',\n      [\"emulator-config-failed\" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */]: 'Auth instance has already been used to make a network call. Auth can ' + 'no longer be configured to use the emulator. Try calling ' + '\"connectAuthEmulator()\" sooner.',\n      [\"expired-action-code\" /* AuthErrorCode.EXPIRED_OOB_CODE */]: 'The action code has expired.',\n      [\"cancelled-popup-request\" /* AuthErrorCode.EXPIRED_POPUP_REQUEST */]: 'This operation has been cancelled due to another conflicting popup being opened.',\n      [\"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */]: 'An internal AuthError has occurred.',\n      [\"invalid-app-credential\" /* AuthErrorCode.INVALID_APP_CREDENTIAL */]: 'The phone verification request contains an invalid application verifier.' + ' The reCAPTCHA token response is either invalid or expired.',\n      [\"invalid-app-id\" /* AuthErrorCode.INVALID_APP_ID */]: 'The mobile app identifier is not registered for the current project.',\n      [\"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */]: \"This user's credential isn't valid for this project. This can happen \" + \"if the user's token has been tampered with, or if the user isn't for \" + 'the project associated with this API key.',\n      [\"invalid-auth-event\" /* AuthErrorCode.INVALID_AUTH_EVENT */]: 'An internal AuthError has occurred.',\n      [\"invalid-verification-code\" /* AuthErrorCode.INVALID_CODE */]: 'The SMS verification code used to create the phone auth credential is ' + 'invalid. Please resend the verification code sms and be sure to use the ' + 'verification code provided by the user.',\n      [\"invalid-continue-uri\" /* AuthErrorCode.INVALID_CONTINUE_URI */]: 'The continue URL provided in the request is invalid.',\n      [\"invalid-cordova-configuration\" /* AuthErrorCode.INVALID_CORDOVA_CONFIGURATION */]: 'The following Cordova plugins must be installed to enable OAuth sign-in: ' + 'cordova-plugin-buildinfo, cordova-universal-links-plugin, ' + 'cordova-plugin-browsertab, cordova-plugin-inappbrowser and ' + 'cordova-plugin-customurlscheme.',\n      [\"invalid-custom-token\" /* AuthErrorCode.INVALID_CUSTOM_TOKEN */]: 'The custom token format is incorrect. Please check the documentation.',\n      [\"invalid-dynamic-link-domain\" /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */]: 'The provided dynamic link domain is not configured or authorized for the current project.',\n      [\"invalid-email\" /* AuthErrorCode.INVALID_EMAIL */]: 'The email address is badly formatted.',\n      [\"invalid-emulator-scheme\" /* AuthErrorCode.INVALID_EMULATOR_SCHEME */]: 'Emulator URL must start with a valid scheme (http:// or https://).',\n      [\"invalid-api-key\" /* AuthErrorCode.INVALID_API_KEY */]: 'Your API key is invalid, please check you have copied it correctly.',\n      [\"invalid-cert-hash\" /* AuthErrorCode.INVALID_CERT_HASH */]: 'The SHA-1 certificate hash provided is invalid.',\n      [\"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */]: 'The supplied auth credential is incorrect, malformed or has expired.',\n      [\"invalid-message-payload\" /* AuthErrorCode.INVALID_MESSAGE_PAYLOAD */]: 'The email template corresponding to this action contains invalid characters in its message. ' + 'Please fix by going to the Auth email templates section in the Firebase Console.',\n      [\"invalid-multi-factor-session\" /* AuthErrorCode.INVALID_MFA_SESSION */]: 'The request does not contain a valid proof of first factor successful sign-in.',\n      [\"invalid-oauth-provider\" /* AuthErrorCode.INVALID_OAUTH_PROVIDER */]: 'EmailAuthProvider is not supported for this operation. This operation ' + 'only supports OAuth providers.',\n      [\"invalid-oauth-client-id\" /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */]: 'The OAuth client ID provided is either invalid or does not match the ' + 'specified API key.',\n      [\"unauthorized-domain\" /* AuthErrorCode.INVALID_ORIGIN */]: 'This domain is not authorized for OAuth operations for your Firebase ' + 'project. Edit the list of authorized domains from the Firebase console.',\n      [\"invalid-action-code\" /* AuthErrorCode.INVALID_OOB_CODE */]: 'The action code is invalid. This can happen if the code is malformed, ' + 'expired, or has already been used.',\n      [\"wrong-password\" /* AuthErrorCode.INVALID_PASSWORD */]: 'The password is invalid or the user does not have a password.',\n      [\"invalid-persistence-type\" /* AuthErrorCode.INVALID_PERSISTENCE */]: 'The specified persistence type is invalid. It can only be local, session or none.',\n      [\"invalid-phone-number\" /* AuthErrorCode.INVALID_PHONE_NUMBER */]: 'The format of the phone number provided is incorrect. Please enter the ' + 'phone number in a format that can be parsed into E.164 format. E.164 ' + 'phone numbers are written in the format [+][country code][subscriber ' + 'number including area code].',\n      [\"invalid-provider-id\" /* AuthErrorCode.INVALID_PROVIDER_ID */]: 'The specified provider ID is invalid.',\n      [\"invalid-recipient-email\" /* AuthErrorCode.INVALID_RECIPIENT_EMAIL */]: 'The email corresponding to this action failed to send as the provided ' + 'recipient email address is invalid.',\n      [\"invalid-sender\" /* AuthErrorCode.INVALID_SENDER */]: 'The email template corresponding to this action contains an invalid sender email or name. ' + 'Please fix by going to the Auth email templates section in the Firebase Console.',\n      [\"invalid-verification-id\" /* AuthErrorCode.INVALID_SESSION_INFO */]: 'The verification ID used to create the phone auth credential is invalid.',\n      [\"invalid-tenant-id\" /* AuthErrorCode.INVALID_TENANT_ID */]: \"The Auth instance's tenant ID is invalid.\",\n      [\"login-blocked\" /* AuthErrorCode.LOGIN_BLOCKED */]: 'Login blocked by user-provided method: {$originalMessage}',\n      [\"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */]: 'An Android Package Name must be provided if the Android App is required to be installed.',\n      [\"auth-domain-config-required\" /* AuthErrorCode.MISSING_AUTH_DOMAIN */]: 'Be sure to include authDomain when calling firebase.initializeApp(), ' + 'by following the instructions in the Firebase console.',\n      [\"missing-app-credential\" /* AuthErrorCode.MISSING_APP_CREDENTIAL */]: 'The phone verification request is missing an application verifier ' + 'assertion. A reCAPTCHA response token needs to be provided.',\n      [\"missing-verification-code\" /* AuthErrorCode.MISSING_CODE */]: 'The phone auth credential was created with an empty SMS verification code.',\n      [\"missing-continue-uri\" /* AuthErrorCode.MISSING_CONTINUE_URI */]: 'A continue URL must be provided in the request.',\n      [\"missing-iframe-start\" /* AuthErrorCode.MISSING_IFRAME_START */]: 'An internal AuthError has occurred.',\n      [\"missing-ios-bundle-id\" /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */]: 'An iOS Bundle ID must be provided if an App Store ID is provided.',\n      [\"missing-or-invalid-nonce\" /* AuthErrorCode.MISSING_OR_INVALID_NONCE */]: 'The request does not contain a valid nonce. This can occur if the ' + 'SHA-256 hash of the provided raw nonce does not match the hashed nonce ' + 'in the ID token payload.',\n      [\"missing-password\" /* AuthErrorCode.MISSING_PASSWORD */]: 'A non-empty password must be provided',\n      [\"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */]: 'No second factor identifier is provided.',\n      [\"missing-multi-factor-session\" /* AuthErrorCode.MISSING_MFA_SESSION */]: 'The request is missing proof of first factor successful sign-in.',\n      [\"missing-phone-number\" /* AuthErrorCode.MISSING_PHONE_NUMBER */]: 'To send verification codes, provide a phone number for the recipient.',\n      [\"missing-verification-id\" /* AuthErrorCode.MISSING_SESSION_INFO */]: 'The phone auth credential was created with an empty verification ID.',\n      [\"app-deleted\" /* AuthErrorCode.MODULE_DESTROYED */]: 'This instance of FirebaseApp has been deleted.',\n      [\"multi-factor-info-not-found\" /* AuthErrorCode.MFA_INFO_NOT_FOUND */]: 'The user does not have a second factor matching the identifier provided.',\n      [\"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */]: 'Proof of ownership of a second factor is required to complete sign-in.',\n      [\"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */]: 'An account already exists with the same email address but different ' + 'sign-in credentials. Sign in using a provider associated with this ' + 'email address.',\n      [\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */]: 'A network AuthError (such as timeout, interrupted connection or unreachable host) has occurred.',\n      [\"no-auth-event\" /* AuthErrorCode.NO_AUTH_EVENT */]: 'An internal AuthError has occurred.',\n      [\"no-such-provider\" /* AuthErrorCode.NO_SUCH_PROVIDER */]: 'User was not linked to an account with the given provider.',\n      [\"null-user\" /* AuthErrorCode.NULL_USER */]: 'A null user object was provided as the argument for an operation which ' + 'requires a non-null user object.',\n      [\"operation-not-allowed\" /* AuthErrorCode.OPERATION_NOT_ALLOWED */]: 'The given sign-in provider is disabled for this Firebase project. ' + 'Enable it in the Firebase console, under the sign-in method tab of the ' + 'Auth section.',\n      [\"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */]: 'This operation is not supported in the environment this application is ' + 'running on. \"location.protocol\" must be http, https or chrome-extension' + ' and web storage must be enabled.',\n      [\"popup-blocked\" /* AuthErrorCode.POPUP_BLOCKED */]: 'Unable to establish a connection with the popup. It may have been blocked by the browser.',\n      [\"popup-closed-by-user\" /* AuthErrorCode.POPUP_CLOSED_BY_USER */]: 'The popup has been closed by the user before finalizing the operation.',\n      [\"provider-already-linked\" /* AuthErrorCode.PROVIDER_ALREADY_LINKED */]: 'User can only be linked to one identity for the given provider.',\n      [\"quota-exceeded\" /* AuthErrorCode.QUOTA_EXCEEDED */]: \"The project's quota for this operation has been exceeded.\",\n      [\"redirect-cancelled-by-user\" /* AuthErrorCode.REDIRECT_CANCELLED_BY_USER */]: 'The redirect operation has been cancelled by the user before finalizing.',\n      [\"redirect-operation-pending\" /* AuthErrorCode.REDIRECT_OPERATION_PENDING */]: 'A redirect sign-in operation is already pending.',\n      [\"rejected-credential\" /* AuthErrorCode.REJECTED_CREDENTIAL */]: 'The request contains malformed or mismatching credentials.',\n      [\"second-factor-already-in-use\" /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */]: 'The second factor is already enrolled on this account.',\n      [\"maximum-second-factor-count-exceeded\" /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */]: 'The maximum allowed number of second factors on a user has been exceeded.',\n      [\"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */]: \"The provided tenant ID does not match the Auth instance's tenant ID\",\n      [\"timeout\" /* AuthErrorCode.TIMEOUT */]: 'The operation has timed out.',\n      [\"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */]: \"The user's credential is no longer valid. The user must sign in again.\",\n      [\"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */]: 'We have blocked all requests from this device due to unusual activity. ' + 'Try again later.',\n      [\"unauthorized-continue-uri\" /* AuthErrorCode.UNAUTHORIZED_DOMAIN */]: 'The domain of the continue URL is not whitelisted.  Please whitelist ' + 'the domain in the Firebase console.',\n      [\"unsupported-first-factor\" /* AuthErrorCode.UNSUPPORTED_FIRST_FACTOR */]: 'Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.',\n      [\"unsupported-persistence-type\" /* AuthErrorCode.UNSUPPORTED_PERSISTENCE */]: 'The current environment does not support the specified persistence type.',\n      [\"unsupported-tenant-operation\" /* AuthErrorCode.UNSUPPORTED_TENANT_OPERATION */]: 'This operation is not supported in a multi-tenant context.',\n      [\"unverified-email\" /* AuthErrorCode.UNVERIFIED_EMAIL */]: 'The operation requires a verified email.',\n      [\"user-cancelled\" /* AuthErrorCode.USER_CANCELLED */]: 'The user did not grant your application the permissions it requested.',\n      [\"user-not-found\" /* AuthErrorCode.USER_DELETED */]: 'There is no user record corresponding to this identifier. The user may ' + 'have been deleted.',\n      [\"user-disabled\" /* AuthErrorCode.USER_DISABLED */]: 'The user account has been disabled by an administrator.',\n      [\"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */]: 'The supplied credentials do not correspond to the previously signed in user.',\n      [\"user-signed-out\" /* AuthErrorCode.USER_SIGNED_OUT */]: '',\n      [\"weak-password\" /* AuthErrorCode.WEAK_PASSWORD */]: 'The password must be 6 characters long or more.',\n      [\"web-storage-unsupported\" /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */]: 'This browser is not supported or 3rd party cookies and data may be disabled.',\n      [\"already-initialized\" /* AuthErrorCode.ALREADY_INITIALIZED */]: 'initializeAuth() has already been called with ' + 'different options. To avoid this error, call initializeAuth() with the ' + 'same options as when it was originally called, or call getAuth() to return the' + ' already initialized instance.',\n      [\"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */]: 'The reCAPTCHA token is missing when sending request to the backend.',\n      [\"invalid-recaptcha-token\" /* AuthErrorCode.INVALID_RECAPTCHA_TOKEN */]: 'The reCAPTCHA token is invalid when sending request to the backend.',\n      [\"invalid-recaptcha-action\" /* AuthErrorCode.INVALID_RECAPTCHA_ACTION */]: 'The reCAPTCHA action is invalid when sending request to the backend.',\n      [\"recaptcha-not-enabled\" /* AuthErrorCode.RECAPTCHA_NOT_ENABLED */]: 'reCAPTCHA Enterprise integration is not enabled for this project.',\n      [\"missing-client-type\" /* AuthErrorCode.MISSING_CLIENT_TYPE */]: 'The reCAPTCHA client type is missing when sending request to the backend.',\n      [\"missing-recaptcha-version\" /* AuthErrorCode.MISSING_RECAPTCHA_VERSION */]: 'The reCAPTCHA version is missing when sending request to the backend.',\n      [\"invalid-req-type\" /* AuthErrorCode.INVALID_REQ_TYPE */]: 'Invalid request parameters.',\n      [\"invalid-recaptcha-version\" /* AuthErrorCode.INVALID_RECAPTCHA_VERSION */]: 'The reCAPTCHA version is invalid when sending request to the backend.',\n      [\"unsupported-password-policy-schema-version\" /* AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION */]: 'The password policy received from the backend uses a schema version that is not supported by this version of the Firebase SDK.',\n      [\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */]: 'The password does not meet the requirements.',\n      [\"invalid-hosting-link-domain\" /* AuthErrorCode.INVALID_HOSTING_LINK_DOMAIN */]: 'The provided Hosting link domain is not configured in Firebase Hosting or is not owned by ' + 'the current project. This cannot be a default Hosting domain (`web.app` or `firebaseapp.com`).'\n    };\n  }\n  function _prodErrorMap() {\n    // We will include this one message in the prod error map since by the very\n    // nature of this error, developers will never be able to see the message\n    // using the debugErrorMap (which is installed during auth initialization).\n    return {\n      [\"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */]: 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' + 'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' + 'starting any other Firebase SDK.'\n    };\n  }\n  /**\n   * A verbose error map with detailed descriptions for most error codes.\n   *\n   * See discussion at {@link AuthErrorMap}\n   *\n   * @public\n   */\n  var debugErrorMap = _debugErrorMap;\n  /**\n   * A minimal error map with all verbose error messages stripped.\n   *\n   * See discussion at {@link AuthErrorMap}\n   *\n   * @public\n   */\n  var prodErrorMap = _prodErrorMap;\n  var _DEFAULT_AUTH_ERROR_FACTORY = new util.ErrorFactory('auth', 'Firebase', _prodErrorMap());\n  /**\n   * A map of potential `Auth` error codes, for easier comparison with errors\n   * thrown by the SDK.\n   *\n   * @remarks\n   * Note that you can't tree-shake individual keys\n   * in the map, so by using the map you might substantially increase your\n   * bundle size.\n   *\n   * @public\n   */\n  var AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY = {\n    ADMIN_ONLY_OPERATION: 'auth/admin-restricted-operation',\n    ARGUMENT_ERROR: 'auth/argument-error',\n    APP_NOT_AUTHORIZED: 'auth/app-not-authorized',\n    APP_NOT_INSTALLED: 'auth/app-not-installed',\n    CAPTCHA_CHECK_FAILED: 'auth/captcha-check-failed',\n    CODE_EXPIRED: 'auth/code-expired',\n    CORDOVA_NOT_READY: 'auth/cordova-not-ready',\n    CORS_UNSUPPORTED: 'auth/cors-unsupported',\n    CREDENTIAL_ALREADY_IN_USE: 'auth/credential-already-in-use',\n    CREDENTIAL_MISMATCH: 'auth/custom-token-mismatch',\n    CREDENTIAL_TOO_OLD_LOGIN_AGAIN: 'auth/requires-recent-login',\n    DEPENDENT_SDK_INIT_BEFORE_AUTH: 'auth/dependent-sdk-initialized-before-auth',\n    DYNAMIC_LINK_NOT_ACTIVATED: 'auth/dynamic-link-not-activated',\n    EMAIL_CHANGE_NEEDS_VERIFICATION: 'auth/email-change-needs-verification',\n    EMAIL_EXISTS: 'auth/email-already-in-use',\n    EMULATOR_CONFIG_FAILED: 'auth/emulator-config-failed',\n    EXPIRED_OOB_CODE: 'auth/expired-action-code',\n    EXPIRED_POPUP_REQUEST: 'auth/cancelled-popup-request',\n    INTERNAL_ERROR: 'auth/internal-error',\n    INVALID_API_KEY: 'auth/invalid-api-key',\n    INVALID_APP_CREDENTIAL: 'auth/invalid-app-credential',\n    INVALID_APP_ID: 'auth/invalid-app-id',\n    INVALID_AUTH: 'auth/invalid-user-token',\n    INVALID_AUTH_EVENT: 'auth/invalid-auth-event',\n    INVALID_CERT_HASH: 'auth/invalid-cert-hash',\n    INVALID_CODE: 'auth/invalid-verification-code',\n    INVALID_CONTINUE_URI: 'auth/invalid-continue-uri',\n    INVALID_CORDOVA_CONFIGURATION: 'auth/invalid-cordova-configuration',\n    INVALID_CUSTOM_TOKEN: 'auth/invalid-custom-token',\n    INVALID_DYNAMIC_LINK_DOMAIN: 'auth/invalid-dynamic-link-domain',\n    INVALID_EMAIL: 'auth/invalid-email',\n    INVALID_EMULATOR_SCHEME: 'auth/invalid-emulator-scheme',\n    INVALID_IDP_RESPONSE: 'auth/invalid-credential',\n    INVALID_LOGIN_CREDENTIALS: 'auth/invalid-credential',\n    INVALID_MESSAGE_PAYLOAD: 'auth/invalid-message-payload',\n    INVALID_MFA_SESSION: 'auth/invalid-multi-factor-session',\n    INVALID_OAUTH_CLIENT_ID: 'auth/invalid-oauth-client-id',\n    INVALID_OAUTH_PROVIDER: 'auth/invalid-oauth-provider',\n    INVALID_OOB_CODE: 'auth/invalid-action-code',\n    INVALID_ORIGIN: 'auth/unauthorized-domain',\n    INVALID_PASSWORD: 'auth/wrong-password',\n    INVALID_PERSISTENCE: 'auth/invalid-persistence-type',\n    INVALID_PHONE_NUMBER: 'auth/invalid-phone-number',\n    INVALID_PROVIDER_ID: 'auth/invalid-provider-id',\n    INVALID_RECIPIENT_EMAIL: 'auth/invalid-recipient-email',\n    INVALID_SENDER: 'auth/invalid-sender',\n    INVALID_SESSION_INFO: 'auth/invalid-verification-id',\n    INVALID_TENANT_ID: 'auth/invalid-tenant-id',\n    MFA_INFO_NOT_FOUND: 'auth/multi-factor-info-not-found',\n    MFA_REQUIRED: 'auth/multi-factor-auth-required',\n    MISSING_ANDROID_PACKAGE_NAME: 'auth/missing-android-pkg-name',\n    MISSING_APP_CREDENTIAL: 'auth/missing-app-credential',\n    MISSING_AUTH_DOMAIN: 'auth/auth-domain-config-required',\n    MISSING_CODE: 'auth/missing-verification-code',\n    MISSING_CONTINUE_URI: 'auth/missing-continue-uri',\n    MISSING_IFRAME_START: 'auth/missing-iframe-start',\n    MISSING_IOS_BUNDLE_ID: 'auth/missing-ios-bundle-id',\n    MISSING_OR_INVALID_NONCE: 'auth/missing-or-invalid-nonce',\n    MISSING_MFA_INFO: 'auth/missing-multi-factor-info',\n    MISSING_MFA_SESSION: 'auth/missing-multi-factor-session',\n    MISSING_PHONE_NUMBER: 'auth/missing-phone-number',\n    MISSING_SESSION_INFO: 'auth/missing-verification-id',\n    MODULE_DESTROYED: 'auth/app-deleted',\n    NEED_CONFIRMATION: 'auth/account-exists-with-different-credential',\n    NETWORK_REQUEST_FAILED: 'auth/network-request-failed',\n    NULL_USER: 'auth/null-user',\n    NO_AUTH_EVENT: 'auth/no-auth-event',\n    NO_SUCH_PROVIDER: 'auth/no-such-provider',\n    OPERATION_NOT_ALLOWED: 'auth/operation-not-allowed',\n    OPERATION_NOT_SUPPORTED: 'auth/operation-not-supported-in-this-environment',\n    POPUP_BLOCKED: 'auth/popup-blocked',\n    POPUP_CLOSED_BY_USER: 'auth/popup-closed-by-user',\n    PROVIDER_ALREADY_LINKED: 'auth/provider-already-linked',\n    QUOTA_EXCEEDED: 'auth/quota-exceeded',\n    REDIRECT_CANCELLED_BY_USER: 'auth/redirect-cancelled-by-user',\n    REDIRECT_OPERATION_PENDING: 'auth/redirect-operation-pending',\n    REJECTED_CREDENTIAL: 'auth/rejected-credential',\n    SECOND_FACTOR_ALREADY_ENROLLED: 'auth/second-factor-already-in-use',\n    SECOND_FACTOR_LIMIT_EXCEEDED: 'auth/maximum-second-factor-count-exceeded',\n    TENANT_ID_MISMATCH: 'auth/tenant-id-mismatch',\n    TIMEOUT: 'auth/timeout',\n    TOKEN_EXPIRED: 'auth/user-token-expired',\n    TOO_MANY_ATTEMPTS_TRY_LATER: 'auth/too-many-requests',\n    UNAUTHORIZED_DOMAIN: 'auth/unauthorized-continue-uri',\n    UNSUPPORTED_FIRST_FACTOR: 'auth/unsupported-first-factor',\n    UNSUPPORTED_PERSISTENCE: 'auth/unsupported-persistence-type',\n    UNSUPPORTED_TENANT_OPERATION: 'auth/unsupported-tenant-operation',\n    UNVERIFIED_EMAIL: 'auth/unverified-email',\n    USER_CANCELLED: 'auth/user-cancelled',\n    USER_DELETED: 'auth/user-not-found',\n    USER_DISABLED: 'auth/user-disabled',\n    USER_MISMATCH: 'auth/user-mismatch',\n    USER_SIGNED_OUT: 'auth/user-signed-out',\n    WEAK_PASSWORD: 'auth/weak-password',\n    WEB_STORAGE_UNSUPPORTED: 'auth/web-storage-unsupported',\n    ALREADY_INITIALIZED: 'auth/already-initialized',\n    RECAPTCHA_NOT_ENABLED: 'auth/recaptcha-not-enabled',\n    MISSING_RECAPTCHA_TOKEN: 'auth/missing-recaptcha-token',\n    INVALID_RECAPTCHA_TOKEN: 'auth/invalid-recaptcha-token',\n    INVALID_RECAPTCHA_ACTION: 'auth/invalid-recaptcha-action',\n    MISSING_CLIENT_TYPE: 'auth/missing-client-type',\n    MISSING_RECAPTCHA_VERSION: 'auth/missing-recaptcha-version',\n    INVALID_RECAPTCHA_VERSION: 'auth/invalid-recaptcha-version',\n    INVALID_REQ_TYPE: 'auth/invalid-req-type',\n    INVALID_HOSTING_LINK_DOMAIN: 'auth/invalid-hosting-link-domain'\n  };\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  var logClient = new logger.Logger('@firebase/auth');\n  function _logWarn(msg) {\n    if (logClient.logLevel <= logger.LogLevel.WARN) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key2 = 1; _key2 < _len; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n      logClient.warn(`Auth (${app.SDK_VERSION}): ${msg}`, ...args);\n    }\n  }\n  function _logError(msg) {\n    if (logClient.logLevel <= logger.LogLevel.ERROR) {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key3 = 1; _key3 < _len2; _key3++) {\n        args[_key3 - 1] = arguments[_key3];\n      }\n      logClient.error(`Auth (${app.SDK_VERSION}): ${msg}`, ...args);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _fail(authOrCode) {\n    for (var _len3 = arguments.length, rest = new Array(_len3 > 1 ? _len3 - 1 : 0), _key4 = 1; _key4 < _len3; _key4++) {\n      rest[_key4 - 1] = arguments[_key4];\n    }\n    throw createErrorInternal(authOrCode, ...rest);\n  }\n  function _createError(authOrCode) {\n    for (var _len4 = arguments.length, rest = new Array(_len4 > 1 ? _len4 - 1 : 0), _key5 = 1; _key5 < _len4; _key5++) {\n      rest[_key5 - 1] = arguments[_key5];\n    }\n    return createErrorInternal(authOrCode, ...rest);\n  }\n  function _errorWithCustomMessage(auth, code, message) {\n    var errorMap = {\n      ...prodErrorMap(),\n      [code]: message\n    };\n    var factory = new util.ErrorFactory('auth', 'Firebase', errorMap);\n    return factory.create(code, {\n      appName: auth.name\n    });\n  }\n  function _serverAppCurrentUserOperationNotSupportedError(auth) {\n    return _errorWithCustomMessage(auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */, 'Operations that alter the current user are not supported in conjunction with FirebaseServerApp');\n  }\n  function _assertInstanceOf(auth, object, instance) {\n    var constructorInstance = instance;\n    if (!(object instanceof constructorInstance)) {\n      if (constructorInstance.name !== object.constructor.name) {\n        _fail(auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      }\n      throw _errorWithCustomMessage(auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */, `Type of ${object.constructor.name} does not match expected instance.` + `Did you pass a reference from a different Auth SDK?`);\n    }\n  }\n  function createErrorInternal(authOrCode) {\n    for (var _len5 = arguments.length, rest = new Array(_len5 > 1 ? _len5 - 1 : 0), _key6 = 1; _key6 < _len5; _key6++) {\n      rest[_key6 - 1] = arguments[_key6];\n    }\n    if (typeof authOrCode !== 'string') {\n      var code = rest[0];\n      var fullParams = [...rest.slice(1)];\n      if (fullParams[0]) {\n        fullParams[0].appName = authOrCode.name;\n      }\n      return authOrCode._errorFactory.create(code, ...fullParams);\n    }\n    return _DEFAULT_AUTH_ERROR_FACTORY.create(authOrCode, ...rest);\n  }\n  function _assert(assertion, authOrCode) {\n    if (!assertion) {\n      for (var _len6 = arguments.length, rest = new Array(_len6 > 2 ? _len6 - 2 : 0), _key7 = 2; _key7 < _len6; _key7++) {\n        rest[_key7 - 2] = arguments[_key7];\n      }\n      throw createErrorInternal(authOrCode, ...rest);\n    }\n  }\n  /**\n   * Unconditionally fails, throwing an internal error with the given message.\n   *\n   * @param failure type of failure encountered\n   * @throws Error\n   */\n  function debugFail(failure) {\n    // Log the failure in addition to throw an exception, just in case the\n    // exception is swallowed.\n    var message = `INTERNAL ASSERTION FAILED: ` + failure;\n    _logError(message);\n    // NOTE: We don't use FirebaseError here because these are internal failures\n    // that cannot be handled by the user. (Also it would create a circular\n    // dependency between the error and assert modules which doesn't work.)\n    throw new Error(message);\n  }\n  /**\n   * Fails if the given assertion condition is false, throwing an Error with the\n   * given message if it did.\n   *\n   * @param assertion\n   * @param message\n   */\n  function debugAssert(assertion, message) {\n    if (!assertion) {\n      debugFail(message);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _getCurrentUrl() {\n    return typeof self !== 'undefined' && self.location?.href || '';\n  }\n  function _isHttpOrHttps() {\n    return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';\n  }\n  function _getCurrentScheme() {\n    return typeof self !== 'undefined' && self.location?.protocol || null;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Determine whether the browser is working online\n   */\n  function _isOnline() {\n    if (typeof navigator !== 'undefined' && navigator && 'onLine' in navigator && typeof navigator.onLine === 'boolean' && (\n    // Apply only for traditional web apps and Chrome extensions.\n    // This is especially true for Cordova apps which have unreliable\n    // navigator.onLine behavior unless cordova-plugin-network-information is\n    // installed which overwrites the native navigator.onLine value and\n    // defines navigator.connection.\n    _isHttpOrHttps() || util.isBrowserExtension() || 'connection' in navigator)) {\n      return navigator.onLine;\n    }\n    // If we can't determine the state, assume it is online.\n    return true;\n  }\n  function _getUserLanguage() {\n    if (typeof navigator === 'undefined') {\n      return null;\n    }\n    var navigatorLanguage = navigator;\n    return (\n      // Most reliable, but only supported in Chrome/Firefox.\n      navigatorLanguage.languages && navigatorLanguage.languages[0] ||\n      // Supported in most browsers, but returns the language of the browser\n      // UI, not the language set in browser settings.\n      navigatorLanguage.language ||\n      // Couldn't determine language.\n      null\n    );\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * A structure to help pick between a range of long and short delay durations\n   * depending on the current environment. In general, the long delay is used for\n   * mobile environments whereas short delays are used for desktop environments.\n   */\n  var Delay = /*#__PURE__*/function () {\n    function Delay(shortDelay, longDelay) {\n      _classCallCheck(this, Delay);\n      this.shortDelay = shortDelay;\n      this.longDelay = longDelay;\n      // Internal error when improperly initialized.\n      debugAssert(longDelay > shortDelay, 'Short delay should be less than long delay!');\n      this.isMobile = util.isMobileCordova() || util.isReactNative();\n    }\n    return _createClass(Delay, [{\n      key: \"get\",\n      value: function get() {\n        if (!_isOnline()) {\n          // Pick the shorter timeout.\n          return Math.min(5000 /* DelayMin.OFFLINE */, this.shortDelay);\n        }\n        // If running in a mobile environment, return the long delay, otherwise\n        // return the short delay.\n        // This could be improved in the future to dynamically change based on other\n        // variables instead of just reading the current environment.\n        return this.isMobile ? this.longDelay : this.shortDelay;\n      }\n    }]);\n  }();\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _emulatorUrl(config, path) {\n    debugAssert(config.emulator, 'Emulator should always be set here');\n    var url = config.emulator.url;\n    if (!path) {\n      return url;\n    }\n    return `${url}${path.startsWith('/') ? path.slice(1) : path}`;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  var FetchProvider = /*#__PURE__*/function () {\n    function FetchProvider() {\n      _classCallCheck(this, FetchProvider);\n    }\n    return _createClass(FetchProvider, null, [{\n      key: \"initialize\",\n      value: function initialize(fetchImpl, headersImpl, responseImpl) {\n        this.fetchImpl = fetchImpl;\n        if (headersImpl) {\n          this.headersImpl = headersImpl;\n        }\n        if (responseImpl) {\n          this.responseImpl = responseImpl;\n        }\n      }\n    }, {\n      key: \"fetch\",\n      value: function (_fetch) {\n        function fetch() {\n          return _fetch.apply(this, arguments);\n        }\n        fetch.toString = function () {\n          return _fetch.toString();\n        };\n        return fetch;\n      }(function () {\n        if (this.fetchImpl) {\n          return this.fetchImpl;\n        }\n        if (typeof self !== 'undefined' && 'fetch' in self) {\n          return self.fetch;\n        }\n        if (typeof globalThis !== 'undefined' && globalThis.fetch) {\n          return globalThis.fetch;\n        }\n        if (typeof fetch !== 'undefined') {\n          return fetch;\n        }\n        debugFail('Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\n      })\n    }, {\n      key: \"headers\",\n      value: function headers() {\n        if (this.headersImpl) {\n          return this.headersImpl;\n        }\n        if (typeof self !== 'undefined' && 'Headers' in self) {\n          return self.Headers;\n        }\n        if (typeof globalThis !== 'undefined' && globalThis.Headers) {\n          return globalThis.Headers;\n        }\n        if (typeof Headers !== 'undefined') {\n          return Headers;\n        }\n        debugFail('Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\n      }\n    }, {\n      key: \"response\",\n      value: function response() {\n        if (this.responseImpl) {\n          return this.responseImpl;\n        }\n        if (typeof self !== 'undefined' && 'Response' in self) {\n          return self.Response;\n        }\n        if (typeof globalThis !== 'undefined' && globalThis.Response) {\n          return globalThis.Response;\n        }\n        if (typeof Response !== 'undefined') {\n          return Response;\n        }\n        debugFail('Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\n      }\n    }]);\n  }();\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Map from errors returned by the server to errors to developer visible errors\n   */\n  var SERVER_ERROR_MAP = {\n    // Custom token errors.\n    [\"CREDENTIAL_MISMATCH\" /* ServerError.CREDENTIAL_MISMATCH */]: \"custom-token-mismatch\" /* AuthErrorCode.CREDENTIAL_MISMATCH */,\n\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_CUSTOM_TOKEN\" /* ServerError.MISSING_CUSTOM_TOKEN */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n    // Create Auth URI errors.\n    [\"INVALID_IDENTIFIER\" /* ServerError.INVALID_IDENTIFIER */]: \"invalid-email\" /* AuthErrorCode.INVALID_EMAIL */,\n\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_CONTINUE_URI\" /* ServerError.MISSING_CONTINUE_URI */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n    // Sign in with email and password errors (some apply to sign up too).\n    [\"INVALID_PASSWORD\" /* ServerError.INVALID_PASSWORD */]: \"wrong-password\" /* AuthErrorCode.INVALID_PASSWORD */,\n\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_PASSWORD\" /* ServerError.MISSING_PASSWORD */]: \"missing-password\" /* AuthErrorCode.MISSING_PASSWORD */,\n\n    // Thrown if Email Enumeration Protection is enabled in the project and the email or password is\n    // invalid.\n    [\"INVALID_LOGIN_CREDENTIALS\" /* ServerError.INVALID_LOGIN_CREDENTIALS */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\n\n    // Sign up with email and password errors.\n    [\"EMAIL_EXISTS\" /* ServerError.EMAIL_EXISTS */]: \"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */,\n    [\"PASSWORD_LOGIN_DISABLED\" /* ServerError.PASSWORD_LOGIN_DISABLED */]: \"operation-not-allowed\" /* AuthErrorCode.OPERATION_NOT_ALLOWED */,\n\n    // Verify assertion for sign in with credential errors:\n    [\"INVALID_IDP_RESPONSE\" /* ServerError.INVALID_IDP_RESPONSE */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\n    [\"INVALID_PENDING_TOKEN\" /* ServerError.INVALID_PENDING_TOKEN */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\n    [\"FEDERATED_USER_ID_ALREADY_LINKED\" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */]: \"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */,\n\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_REQ_TYPE\" /* ServerError.MISSING_REQ_TYPE */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n    // Send Password reset email errors:\n    [\"EMAIL_NOT_FOUND\" /* ServerError.EMAIL_NOT_FOUND */]: \"user-not-found\" /* AuthErrorCode.USER_DELETED */,\n    [\"RESET_PASSWORD_EXCEED_LIMIT\" /* ServerError.RESET_PASSWORD_EXCEED_LIMIT */]: \"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */,\n    [\"EXPIRED_OOB_CODE\" /* ServerError.EXPIRED_OOB_CODE */]: \"expired-action-code\" /* AuthErrorCode.EXPIRED_OOB_CODE */,\n    [\"INVALID_OOB_CODE\" /* ServerError.INVALID_OOB_CODE */]: \"invalid-action-code\" /* AuthErrorCode.INVALID_OOB_CODE */,\n\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_OOB_CODE\" /* ServerError.MISSING_OOB_CODE */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n    // Operations that require ID token in request:\n    [\"CREDENTIAL_TOO_OLD_LOGIN_AGAIN\" /* ServerError.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */]: \"requires-recent-login\" /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */,\n    [\"INVALID_ID_TOKEN\" /* ServerError.INVALID_ID_TOKEN */]: \"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */,\n    [\"TOKEN_EXPIRED\" /* ServerError.TOKEN_EXPIRED */]: \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */,\n    [\"USER_NOT_FOUND\" /* ServerError.USER_NOT_FOUND */]: \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */,\n\n    // Other errors.\n    [\"TOO_MANY_ATTEMPTS_TRY_LATER\" /* ServerError.TOO_MANY_ATTEMPTS_TRY_LATER */]: \"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */,\n    [\"PASSWORD_DOES_NOT_MEET_REQUIREMENTS\" /* ServerError.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */]: \"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */,\n\n    // Phone Auth related errors.\n    [\"INVALID_CODE\" /* ServerError.INVALID_CODE */]: \"invalid-verification-code\" /* AuthErrorCode.INVALID_CODE */,\n    [\"INVALID_SESSION_INFO\" /* ServerError.INVALID_SESSION_INFO */]: \"invalid-verification-id\" /* AuthErrorCode.INVALID_SESSION_INFO */,\n    [\"INVALID_TEMPORARY_PROOF\" /* ServerError.INVALID_TEMPORARY_PROOF */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\n    [\"MISSING_SESSION_INFO\" /* ServerError.MISSING_SESSION_INFO */]: \"missing-verification-id\" /* AuthErrorCode.MISSING_SESSION_INFO */,\n    [\"SESSION_EXPIRED\" /* ServerError.SESSION_EXPIRED */]: \"code-expired\" /* AuthErrorCode.CODE_EXPIRED */,\n\n    // Other action code errors when additional settings passed.\n    // MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.\n    // This is OK as this error will be caught by client side validation.\n    [\"MISSING_ANDROID_PACKAGE_NAME\" /* ServerError.MISSING_ANDROID_PACKAGE_NAME */]: \"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */,\n    [\"UNAUTHORIZED_DOMAIN\" /* ServerError.UNAUTHORIZED_DOMAIN */]: \"unauthorized-continue-uri\" /* AuthErrorCode.UNAUTHORIZED_DOMAIN */,\n\n    // getProjectConfig errors when clientId is passed.\n    [\"INVALID_OAUTH_CLIENT_ID\" /* ServerError.INVALID_OAUTH_CLIENT_ID */]: \"invalid-oauth-client-id\" /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */,\n\n    // User actions (sign-up or deletion) disabled errors.\n    [\"ADMIN_ONLY_OPERATION\" /* ServerError.ADMIN_ONLY_OPERATION */]: \"admin-restricted-operation\" /* AuthErrorCode.ADMIN_ONLY_OPERATION */,\n\n    // Multi factor related errors.\n    [\"INVALID_MFA_PENDING_CREDENTIAL\" /* ServerError.INVALID_MFA_PENDING_CREDENTIAL */]: \"invalid-multi-factor-session\" /* AuthErrorCode.INVALID_MFA_SESSION */,\n    [\"MFA_ENROLLMENT_NOT_FOUND\" /* ServerError.MFA_ENROLLMENT_NOT_FOUND */]: \"multi-factor-info-not-found\" /* AuthErrorCode.MFA_INFO_NOT_FOUND */,\n    [\"MISSING_MFA_ENROLLMENT_ID\" /* ServerError.MISSING_MFA_ENROLLMENT_ID */]: \"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */,\n    [\"MISSING_MFA_PENDING_CREDENTIAL\" /* ServerError.MISSING_MFA_PENDING_CREDENTIAL */]: \"missing-multi-factor-session\" /* AuthErrorCode.MISSING_MFA_SESSION */,\n    [\"SECOND_FACTOR_EXISTS\" /* ServerError.SECOND_FACTOR_EXISTS */]: \"second-factor-already-in-use\" /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */,\n    [\"SECOND_FACTOR_LIMIT_EXCEEDED\" /* ServerError.SECOND_FACTOR_LIMIT_EXCEEDED */]: \"maximum-second-factor-count-exceeded\" /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */,\n\n    // Blocking functions related errors.\n    [\"BLOCKING_FUNCTION_ERROR_RESPONSE\" /* ServerError.BLOCKING_FUNCTION_ERROR_RESPONSE */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n    // Recaptcha related errors.\n    [\"RECAPTCHA_NOT_ENABLED\" /* ServerError.RECAPTCHA_NOT_ENABLED */]: \"recaptcha-not-enabled\" /* AuthErrorCode.RECAPTCHA_NOT_ENABLED */,\n    [\"MISSING_RECAPTCHA_TOKEN\" /* ServerError.MISSING_RECAPTCHA_TOKEN */]: \"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */,\n    [\"INVALID_RECAPTCHA_TOKEN\" /* ServerError.INVALID_RECAPTCHA_TOKEN */]: \"invalid-recaptcha-token\" /* AuthErrorCode.INVALID_RECAPTCHA_TOKEN */,\n    [\"INVALID_RECAPTCHA_ACTION\" /* ServerError.INVALID_RECAPTCHA_ACTION */]: \"invalid-recaptcha-action\" /* AuthErrorCode.INVALID_RECAPTCHA_ACTION */,\n    [\"MISSING_CLIENT_TYPE\" /* ServerError.MISSING_CLIENT_TYPE */]: \"missing-client-type\" /* AuthErrorCode.MISSING_CLIENT_TYPE */,\n    [\"MISSING_RECAPTCHA_VERSION\" /* ServerError.MISSING_RECAPTCHA_VERSION */]: \"missing-recaptcha-version\" /* AuthErrorCode.MISSING_RECAPTCHA_VERSION */,\n    [\"INVALID_RECAPTCHA_VERSION\" /* ServerError.INVALID_RECAPTCHA_VERSION */]: \"invalid-recaptcha-version\" /* AuthErrorCode.INVALID_RECAPTCHA_VERSION */,\n    [\"INVALID_REQ_TYPE\" /* ServerError.INVALID_REQ_TYPE */]: \"invalid-req-type\" /* AuthErrorCode.INVALID_REQ_TYPE */\n  };\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  var CookieAuthProxiedEndpoints = [\"/v1/accounts:signInWithCustomToken\" /* Endpoint.SIGN_IN_WITH_CUSTOM_TOKEN */, \"/v1/accounts:signInWithEmailLink\" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, \"/v1/accounts:signInWithIdp\" /* Endpoint.SIGN_IN_WITH_IDP */, \"/v1/accounts:signInWithPassword\" /* Endpoint.SIGN_IN_WITH_PASSWORD */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, \"/v1/token\" /* Endpoint.TOKEN */];\n  var DEFAULT_API_TIMEOUT_MS = new Delay(30000, 60000);\n  function _addTidIfNecessary(auth, request) {\n    if (auth.tenantId && !request.tenantId) {\n      return {\n        ...request,\n        tenantId: auth.tenantId\n      };\n    }\n    return request;\n  }\n  function _performApiRequest(_x, _x2, _x3, _x4) {\n    return _performApiRequest2.apply(this, arguments);\n  }\n  function _performApiRequest2() {\n    _performApiRequest2 = _asyncToGenerator(function* (auth, method, path, request) {\n      var customErrorMap = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n      return _performFetchWithErrorHandling(auth, customErrorMap, /*#__PURE__*/_asyncToGenerator(function* () {\n        var body = {};\n        var params = {};\n        if (request) {\n          if (method === \"GET\" /* HttpMethod.GET */) {\n            params = request;\n          } else {\n            body = {\n              body: JSON.stringify(request)\n            };\n          }\n        }\n        var query = util.querystring({\n          key: auth.config.apiKey,\n          ...params\n        }).slice(1);\n        var headers = yield auth._getAdditionalHeaders();\n        headers[\"Content-Type\" /* HttpHeader.CONTENT_TYPE */] = 'application/json';\n        if (auth.languageCode) {\n          headers[\"X-Firebase-Locale\" /* HttpHeader.X_FIREBASE_LOCALE */] = auth.languageCode;\n        }\n        var fetchArgs = {\n          method,\n          headers,\n          ...body\n        };\n        /* Security-conscious server-side frameworks tend to have built in mitigations for referrer\n           problems\". See the Cloudflare GitHub issue #487: Error: The 'referrerPolicy' field on\n           'RequestInitializerDict' is not implemented.\"\n           https://github.com/cloudflare/next-on-pages/issues/487 */\n        if (!util.isCloudflareWorker()) {\n          fetchArgs.referrerPolicy = 'no-referrer';\n        }\n        if (auth.emulatorConfig && util.isCloudWorkstation(auth.emulatorConfig.host)) {\n          fetchArgs.credentials = 'include';\n        }\n        return FetchProvider.fetch()(yield _getFinalTarget(auth, auth.config.apiHost, path, query), fetchArgs);\n      }));\n    });\n    return _performApiRequest2.apply(this, arguments);\n  }\n  function _performFetchWithErrorHandling(_x5, _x6, _x7) {\n    return _performFetchWithErrorHandling2.apply(this, arguments);\n  }\n  function _performFetchWithErrorHandling2() {\n    _performFetchWithErrorHandling2 = _asyncToGenerator(function* (auth, customErrorMap, fetchFn) {\n      auth._canInitEmulator = false;\n      var errorMap = {\n        ...SERVER_ERROR_MAP,\n        ...customErrorMap\n      };\n      try {\n        var networkTimeout = new NetworkTimeout(auth);\n        var response = yield Promise.race([fetchFn(), networkTimeout.promise]);\n        // If we've reached this point, the fetch succeeded and the networkTimeout\n        // didn't throw; clear the network timeout delay so that Node won't hang\n        networkTimeout.clearNetworkTimeout();\n        var json = yield response.json();\n        if ('needConfirmation' in json) {\n          throw _makeTaggedError(auth, \"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */, json);\n        }\n        if (response.ok && !('errorMessage' in json)) {\n          return json;\n        } else {\n          var errorMessage = response.ok ? json.errorMessage : json.error.message;\n          var _errorMessage$split = errorMessage.split(' : '),\n            _errorMessage$split2 = _slicedToArray(_errorMessage$split, 2),\n            serverErrorCode = _errorMessage$split2[0],\n            serverErrorMessage = _errorMessage$split2[1];\n          if (serverErrorCode === \"FEDERATED_USER_ID_ALREADY_LINKED\" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */) {\n            throw _makeTaggedError(auth, \"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */, json);\n          } else if (serverErrorCode === \"EMAIL_EXISTS\" /* ServerError.EMAIL_EXISTS */) {\n            throw _makeTaggedError(auth, \"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */, json);\n          } else if (serverErrorCode === \"USER_DISABLED\" /* ServerError.USER_DISABLED */) {\n            throw _makeTaggedError(auth, \"user-disabled\" /* AuthErrorCode.USER_DISABLED */, json);\n          }\n          var authError = errorMap[serverErrorCode] || serverErrorCode.toLowerCase().replace(/[_\\s]+/g, '-');\n          if (serverErrorMessage) {\n            throw _errorWithCustomMessage(auth, authError, serverErrorMessage);\n          } else {\n            _fail(auth, authError);\n          }\n        }\n      } catch (e) {\n        if (e instanceof util.FirebaseError) {\n          throw e;\n        }\n        // Changing this to a different error code will log user out when there is a network error\n        // because we treat any error other than NETWORK_REQUEST_FAILED as token is invalid.\n        // https://github.com/firebase/firebase-js-sdk/blob/4fbc73610d70be4e0852e7de63a39cb7897e8546/packages/auth/src/core/auth/auth_impl.ts#L309-L316\n        _fail(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */, {\n          'message': String(e)\n        });\n      }\n    });\n    return _performFetchWithErrorHandling2.apply(this, arguments);\n  }\n  function _performSignInRequest(_x8, _x9, _x0, _x1) {\n    return _performSignInRequest2.apply(this, arguments);\n  }\n  function _performSignInRequest2() {\n    _performSignInRequest2 = _asyncToGenerator(function* (auth, method, path, request) {\n      var customErrorMap = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n      var serverResponse = yield _performApiRequest(auth, method, path, request, customErrorMap);\n      if ('mfaPendingCredential' in serverResponse) {\n        _fail(auth, \"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */, {\n          _serverResponse: serverResponse\n        });\n      }\n      return serverResponse;\n    });\n    return _performSignInRequest2.apply(this, arguments);\n  }\n  function _getFinalTarget(_x10, _x11, _x12, _x13) {\n    return _getFinalTarget2.apply(this, arguments);\n  }\n  function _getFinalTarget2() {\n    _getFinalTarget2 = _asyncToGenerator(function* (auth, host, path, query) {\n      var base = `${host}${path}?${query}`;\n      var authInternal = auth;\n      var finalTarget = authInternal.config.emulator ? _emulatorUrl(auth.config, base) : `${auth.config.apiScheme}://${base}`;\n      // Cookie auth works by MiTMing the signIn and token endpoints from the developer's backend,\n      // saving the idToken and refreshToken into cookies, and then redacting the refreshToken\n      // from the response\n      if (CookieAuthProxiedEndpoints.includes(path)) {\n        // Persistence manager is async, we need to await it. We can't just wait for auth initialized\n        // here since auth initialization calls this function.\n        yield authInternal._persistenceManagerAvailable;\n        if (authInternal._getPersistenceType() === \"COOKIE\" /* PersistenceType.COOKIE */) {\n          var cookiePersistence = authInternal._getPersistence();\n          return cookiePersistence._getFinalTarget(finalTarget).toString();\n        }\n      }\n      return finalTarget;\n    });\n    return _getFinalTarget2.apply(this, arguments);\n  }\n  function _parseEnforcementState(enforcementStateStr) {\n    switch (enforcementStateStr) {\n      case 'ENFORCE':\n        return \"ENFORCE\" /* EnforcementState.ENFORCE */;\n      case 'AUDIT':\n        return \"AUDIT\" /* EnforcementState.AUDIT */;\n      case 'OFF':\n        return \"OFF\" /* EnforcementState.OFF */;\n      default:\n        return \"ENFORCEMENT_STATE_UNSPECIFIED\" /* EnforcementState.ENFORCEMENT_STATE_UNSPECIFIED */;\n    }\n  }\n  var NetworkTimeout = /*#__PURE__*/function () {\n    function NetworkTimeout(auth) {\n      _classCallCheck(this, NetworkTimeout);\n      this.auth = auth;\n      // Node timers and browser timers are fundamentally incompatible, but we\n      // don't care about the value here\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.timer = null;\n      this.promise = new Promise((_, reject) => {\n        this.timer = setTimeout(() => {\n          return reject(_createError(this.auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\n        }, DEFAULT_API_TIMEOUT_MS.get());\n      });\n    }\n    return _createClass(NetworkTimeout, [{\n      key: \"clearNetworkTimeout\",\n      value: function clearNetworkTimeout() {\n        clearTimeout(this.timer);\n      }\n    }]);\n  }();\n  function _makeTaggedError(auth, code, response) {\n    var errorParams = {\n      appName: auth.name\n    };\n    if (response.email) {\n      errorParams.email = response.email;\n    }\n    if (response.phoneNumber) {\n      errorParams.phoneNumber = response.phoneNumber;\n    }\n    var error = _createError(auth, code, errorParams);\n    // We know customData is defined on error because errorParams is defined\n    error.customData._tokenResponse = response;\n    return error;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function isV2(grecaptcha) {\n    return grecaptcha !== undefined && grecaptcha.getResponse !== undefined;\n  }\n  function isEnterprise(grecaptcha) {\n    return grecaptcha !== undefined && grecaptcha.enterprise !== undefined;\n  }\n  var RecaptchaConfig = /*#__PURE__*/function () {\n    function RecaptchaConfig(response) {\n      _classCallCheck(this, RecaptchaConfig);\n      /**\n       * The reCAPTCHA site key.\n       */\n      this.siteKey = '';\n      /**\n       * The list of providers and their enablement status for reCAPTCHA Enterprise.\n       */\n      this.recaptchaEnforcementState = [];\n      if (response.recaptchaKey === undefined) {\n        throw new Error('recaptchaKey undefined');\n      }\n      // Example response.recaptchaKey: \"projects/proj123/keys/sitekey123\"\n      this.siteKey = response.recaptchaKey.split('/')[3];\n      this.recaptchaEnforcementState = response.recaptchaEnforcementState;\n    }\n    /**\n     * Returns the reCAPTCHA Enterprise enforcement state for the given provider.\n     *\n     * @param providerStr - The provider whose enforcement state is to be returned.\n     * @returns The reCAPTCHA Enterprise enforcement state for the given provider.\n     */\n    return _createClass(RecaptchaConfig, [{\n      key: \"getProviderEnforcementState\",\n      value: function getProviderEnforcementState(providerStr) {\n        if (!this.recaptchaEnforcementState || this.recaptchaEnforcementState.length === 0) {\n          return null;\n        }\n        for (var recaptchaEnforcementState of this.recaptchaEnforcementState) {\n          if (recaptchaEnforcementState.provider && recaptchaEnforcementState.provider === providerStr) {\n            return _parseEnforcementState(recaptchaEnforcementState.enforcementState);\n          }\n        }\n        return null;\n      }\n      /**\n       * Returns true if the reCAPTCHA Enterprise enforcement state for the provider is set to ENFORCE or AUDIT.\n       *\n       * @param providerStr - The provider whose enablement state is to be returned.\n       * @returns Whether or not reCAPTCHA Enterprise protection is enabled for the given provider.\n       */\n    }, {\n      key: \"isProviderEnabled\",\n      value: function isProviderEnabled(providerStr) {\n        return this.getProviderEnforcementState(providerStr) === \"ENFORCE\" /* EnforcementState.ENFORCE */ || this.getProviderEnforcementState(providerStr) === \"AUDIT\" /* EnforcementState.AUDIT */;\n      }\n      /**\n       * Returns true if reCAPTCHA Enterprise protection is enabled in at least one provider, otherwise\n       * returns false.\n       *\n       * @returns Whether or not reCAPTCHA Enterprise protection is enabled for at least one provider.\n       */\n    }, {\n      key: \"isAnyProviderEnabled\",\n      value: function isAnyProviderEnabled() {\n        return this.isProviderEnabled(\"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */) || this.isProviderEnabled(\"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */);\n      }\n    }]);\n  }();\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function getRecaptchaParams(_x14) {\n    return _getRecaptchaParams.apply(this, arguments);\n  }\n  function _getRecaptchaParams() {\n    _getRecaptchaParams = _asyncToGenerator(function* (auth) {\n      return (yield _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v1/recaptchaParams\" /* Endpoint.GET_RECAPTCHA_PARAM */)).recaptchaSiteKey || '';\n    });\n    return _getRecaptchaParams.apply(this, arguments);\n  }\n  function getRecaptchaConfig(_x15, _x16) {\n    return _getRecaptchaConfig.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _getRecaptchaConfig() {\n    _getRecaptchaConfig = _asyncToGenerator(function* (auth, request) {\n      return _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v2/recaptchaConfig\" /* Endpoint.GET_RECAPTCHA_CONFIG */, _addTidIfNecessary(auth, request));\n    });\n    return _getRecaptchaConfig.apply(this, arguments);\n  }\n  function deleteAccount(_x17, _x18) {\n    return _deleteAccount.apply(this, arguments);\n  }\n  function _deleteAccount() {\n    _deleteAccount = _asyncToGenerator(function* (auth, request) {\n      return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:delete\" /* Endpoint.DELETE_ACCOUNT */, request);\n    });\n    return _deleteAccount.apply(this, arguments);\n  }\n  function deleteLinkedAccounts(_x19, _x20) {\n    return _deleteLinkedAccounts.apply(this, arguments);\n  }\n  function _deleteLinkedAccounts() {\n    _deleteLinkedAccounts = _asyncToGenerator(function* (auth, request) {\n      return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request);\n    });\n    return _deleteLinkedAccounts.apply(this, arguments);\n  }\n  function getAccountInfo(_x21, _x22) {\n    return _getAccountInfo.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _getAccountInfo() {\n    _getAccountInfo = _asyncToGenerator(function* (auth, request) {\n      return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:lookup\" /* Endpoint.GET_ACCOUNT_INFO */, request);\n    });\n    return _getAccountInfo.apply(this, arguments);\n  }\n  function utcTimestampToDateString(utcTimestamp) {\n    if (!utcTimestamp) {\n      return undefined;\n    }\n    try {\n      // Convert to date object.\n      var date = new Date(Number(utcTimestamp));\n      // Test date is valid.\n      if (!isNaN(date.getTime())) {\n        // Convert to UTC date string.\n        return date.toUTCString();\n      }\n    } catch (e) {\n      // Do nothing. undefined will be returned.\n    }\n    return undefined;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Returns a JSON Web Token (JWT) used to identify the user to a Firebase service.\n   *\n   * @remarks\n   * Returns the current token if it has not expired or if it will not expire in the next five\n   * minutes. Otherwise, this will refresh the token and return a new one.\n   *\n   * @param user - The user.\n   * @param forceRefresh - Force refresh regardless of token expiration.\n   *\n   * @public\n   */\n  function getIdToken(user) {\n    var forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return util.getModularInstance(user).getIdToken(forceRefresh);\n  }\n  /**\n   * Returns a deserialized JSON Web Token (JWT) used to identify the user to a Firebase service.\n   *\n   * @remarks\n   * Returns the current token if it has not expired or if it will not expire in the next five\n   * minutes. Otherwise, this will refresh the token and return a new one.\n   *\n   * @param user - The user.\n   * @param forceRefresh - Force refresh regardless of token expiration.\n   *\n   * @public\n   */\n  function _getIdTokenResult2(_x23) {\n    return _getIdTokenResult.apply(this, arguments);\n  }\n  function _getIdTokenResult() {\n    _getIdTokenResult = _asyncToGenerator(function* (user) {\n      var forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var userInternal = util.getModularInstance(user);\n      var token = yield userInternal.getIdToken(forceRefresh);\n      var claims = _parseToken(token);\n      _assert(claims && claims.exp && claims.auth_time && claims.iat, userInternal.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      var firebase = typeof claims.firebase === 'object' ? claims.firebase : undefined;\n      var signInProvider = firebase?.['sign_in_provider'];\n      return {\n        claims,\n        token,\n        authTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.auth_time)),\n        issuedAtTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.iat)),\n        expirationTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.exp)),\n        signInProvider: signInProvider || null,\n        signInSecondFactor: firebase?.['sign_in_second_factor'] || null\n      };\n    });\n    return _getIdTokenResult.apply(this, arguments);\n  }\n  function secondsStringToMilliseconds(seconds) {\n    return Number(seconds) * 1000;\n  }\n  function _parseToken(token) {\n    var _token$split = token.split('.'),\n      _token$split2 = _slicedToArray(_token$split, 3),\n      algorithm = _token$split2[0],\n      payload = _token$split2[1],\n      signature = _token$split2[2];\n    if (algorithm === undefined || payload === undefined || signature === undefined) {\n      _logError('JWT malformed, contained fewer than 3 sections');\n      return null;\n    }\n    try {\n      var decoded = util.base64Decode(payload);\n      if (!decoded) {\n        _logError('Failed to decode base64 JWT payload');\n        return null;\n      }\n      return JSON.parse(decoded);\n    } catch (e) {\n      _logError('Caught error parsing JWT payload as JSON', e?.toString());\n      return null;\n    }\n  }\n  /**\n   * Extract expiresIn TTL from a token by subtracting the expiration from the issuance.\n   */\n  function _tokenExpiresIn(token) {\n    var parsedToken = _parseToken(token);\n    _assert(parsedToken, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    _assert(typeof parsedToken.exp !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    _assert(typeof parsedToken.iat !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    return Number(parsedToken.exp) - Number(parsedToken.iat);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _logoutIfInvalidated(_x24, _x25) {\n    return _logoutIfInvalidated2.apply(this, arguments);\n  }\n  function _logoutIfInvalidated2() {\n    _logoutIfInvalidated2 = _asyncToGenerator(function* (user, promise) {\n      var bypassAuthState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      if (bypassAuthState) {\n        return promise;\n      }\n      try {\n        return yield promise;\n      } catch (e) {\n        if (e instanceof util.FirebaseError && isUserInvalidated(e)) {\n          if (user.auth.currentUser === user) {\n            yield user.auth.signOut();\n          }\n        }\n        throw e;\n      }\n    });\n    return _logoutIfInvalidated2.apply(this, arguments);\n  }\n  function isUserInvalidated(_ref) {\n    var code = _ref.code;\n    return code === `auth/${\"user-disabled\" /* AuthErrorCode.USER_DISABLED */}` || code === `auth/${\"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */}`;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  var ProactiveRefresh = /*#__PURE__*/function () {\n    function ProactiveRefresh(user) {\n      _classCallCheck(this, ProactiveRefresh);\n      this.user = user;\n      this.isRunning = false;\n      // Node timers and browser timers return fundamentally different types.\n      // We don't actually care what the value is but TS won't accept unknown and\n      // we can't cast properly in both environments.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.timerId = null;\n      this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */;\n    }\n    return _createClass(ProactiveRefresh, [{\n      key: \"_start\",\n      value: function _start() {\n        if (this.isRunning) {\n          return;\n        }\n        this.isRunning = true;\n        this.schedule();\n      }\n    }, {\n      key: \"_stop\",\n      value: function _stop() {\n        if (!this.isRunning) {\n          return;\n        }\n        this.isRunning = false;\n        if (this.timerId !== null) {\n          clearTimeout(this.timerId);\n        }\n      }\n    }, {\n      key: \"getInterval\",\n      value: function getInterval(wasError) {\n        if (wasError) {\n          var interval = this.errorBackoff;\n          this.errorBackoff = Math.min(this.errorBackoff * 2, 960000 /* Duration.RETRY_BACKOFF_MAX */);\n          return interval;\n        } else {\n          // Reset the error backoff\n          this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */;\n          var expTime = this.user.stsTokenManager.expirationTime ?? 0;\n          var _interval = expTime - Date.now() - 300000 /* Duration.OFFSET */;\n          return Math.max(0, _interval);\n        }\n      }\n    }, {\n      key: \"schedule\",\n      value: function schedule() {\n        var _this = this;\n        var wasError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        if (!this.isRunning) {\n          // Just in case...\n          return;\n        }\n        var interval = this.getInterval(wasError);\n        this.timerId = setTimeout(/*#__PURE__*/_asyncToGenerator(function* () {\n          yield _this.iteration();\n        }), interval);\n      }\n    }, {\n      key: \"iteration\",\n      value: function () {\n        var _iteration = _asyncToGenerator(function* () {\n          try {\n            yield this.user.getIdToken(true);\n          } catch (e) {\n            // Only retry on network errors\n            if (e?.code === `auth/${\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */}`) {\n              this.schedule(/* wasError */true);\n            }\n            return;\n          }\n          this.schedule();\n        });\n        function iteration() {\n          return _iteration.apply(this, arguments);\n        }\n        return iteration;\n      }()\n    }]);\n  }();\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  var UserMetadata = /*#__PURE__*/function () {\n    function UserMetadata(createdAt, lastLoginAt) {\n      _classCallCheck(this, UserMetadata);\n      this.createdAt = createdAt;\n      this.lastLoginAt = lastLoginAt;\n      this._initializeTime();\n    }\n    return _createClass(UserMetadata, [{\n      key: \"_initializeTime\",\n      value: function _initializeTime() {\n        this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);\n        this.creationTime = utcTimestampToDateString(this.createdAt);\n      }\n    }, {\n      key: \"_copy\",\n      value: function _copy(metadata) {\n        this.createdAt = metadata.createdAt;\n        this.lastLoginAt = metadata.lastLoginAt;\n        this._initializeTime();\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return {\n          createdAt: this.createdAt,\n          lastLoginAt: this.lastLoginAt\n        };\n      }\n    }]);\n  }();\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _reloadWithoutSaving(_x26) {\n    return _reloadWithoutSaving2.apply(this, arguments);\n  }\n  /**\n   * Reloads user account data, if signed in.\n   *\n   * @param user - The user.\n   *\n   * @public\n   */\n  function _reloadWithoutSaving2() {\n    _reloadWithoutSaving2 = _asyncToGenerator(function* (user) {\n      var auth = user.auth;\n      var idToken = yield user.getIdToken();\n      var response = yield _logoutIfInvalidated(user, getAccountInfo(auth, {\n        idToken\n      }));\n      _assert(response?.users.length, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      var coreAccount = response.users[0];\n      user._notifyReloadListener(coreAccount);\n      var newProviderData = coreAccount.providerUserInfo?.length ? extractProviderData(coreAccount.providerUserInfo) : [];\n      var providerData = mergeProviderData(user.providerData, newProviderData);\n      // Preserves the non-nonymous status of the stored user, even if no more\n      // credentials (federated or email/password) are linked to the user. If\n      // the user was previously anonymous, then use provider data to update.\n      // On the other hand, if it was not anonymous before, it should never be\n      // considered anonymous now.\n      var oldIsAnonymous = user.isAnonymous;\n      var newIsAnonymous = !(user.email && coreAccount.passwordHash) && !providerData?.length;\n      var isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;\n      var updates = {\n        uid: coreAccount.localId,\n        displayName: coreAccount.displayName || null,\n        photoURL: coreAccount.photoUrl || null,\n        email: coreAccount.email || null,\n        emailVerified: coreAccount.emailVerified || false,\n        phoneNumber: coreAccount.phoneNumber || null,\n        tenantId: coreAccount.tenantId || null,\n        providerData,\n        metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),\n        isAnonymous\n      };\n      Object.assign(user, updates);\n    });\n    return _reloadWithoutSaving2.apply(this, arguments);\n  }\n  function _reload2(_x27) {\n    return _reload.apply(this, arguments);\n  }\n  function _reload() {\n    _reload = _asyncToGenerator(function* (user) {\n      var userInternal = util.getModularInstance(user);\n      yield _reloadWithoutSaving(userInternal);\n      // Even though the current user hasn't changed, update\n      // current user will trigger a persistence update w/ the\n      // new info.\n      yield userInternal.auth._persistUserIfCurrent(userInternal);\n      userInternal.auth._notifyListenersIfCurrent(userInternal);\n    });\n    return _reload.apply(this, arguments);\n  }\n  function mergeProviderData(original, newData) {\n    var deduped = original.filter(o => !newData.some(n => n.providerId === o.providerId));\n    return [...deduped, ...newData];\n  }\n  function extractProviderData(providers) {\n    return providers.map(_ref3 => {\n      var providerId = _ref3.providerId,\n        provider = _objectWithoutProperties(_ref3, _excluded);\n      return {\n        providerId,\n        uid: provider.rawId || '',\n        displayName: provider.displayName || null,\n        email: provider.email || null,\n        phoneNumber: provider.phoneNumber || null,\n        photoURL: provider.photoUrl || null\n      };\n    });\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function requestStsToken(_x28, _x29) {\n    return _requestStsToken.apply(this, arguments);\n  }\n  function _requestStsToken() {\n    _requestStsToken = _asyncToGenerator(function* (auth, refreshToken) {\n      var response = yield _performFetchWithErrorHandling(auth, {}, /*#__PURE__*/_asyncToGenerator(function* () {\n        var body = util.querystring({\n          'grant_type': 'refresh_token',\n          'refresh_token': refreshToken\n        }).slice(1);\n        var _auth$config = auth.config,\n          tokenApiHost = _auth$config.tokenApiHost,\n          apiKey = _auth$config.apiKey;\n        var url = yield _getFinalTarget(auth, tokenApiHost, \"/v1/token\" /* Endpoint.TOKEN */, `key=${apiKey}`);\n        var headers = yield auth._getAdditionalHeaders();\n        headers[\"Content-Type\" /* HttpHeader.CONTENT_TYPE */] = 'application/x-www-form-urlencoded';\n        var options = {\n          method: \"POST\" /* HttpMethod.POST */,\n          headers,\n          body\n        };\n        if (auth.emulatorConfig && util.isCloudWorkstation(auth.emulatorConfig.host)) {\n          options.credentials = 'include';\n        }\n        return FetchProvider.fetch()(url, options);\n      }));\n      // The response comes back in snake_case. Convert to camel:\n      return {\n        accessToken: response.access_token,\n        expiresIn: response.expires_in,\n        refreshToken: response.refresh_token\n      };\n    });\n    return _requestStsToken.apply(this, arguments);\n  }\n  function revokeToken(_x30, _x31) {\n    return _revokeToken.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * We need to mark this class as internal explicitly to exclude it in the public typings, because\n   * it references AuthInternal which has a circular dependency with UserInternal.\n   *\n   * @internal\n   */\n  function _revokeToken() {\n    _revokeToken = _asyncToGenerator(function* (auth, request) {\n      return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts:revokeToken\" /* Endpoint.REVOKE_TOKEN */, _addTidIfNecessary(auth, request));\n    });\n    return _revokeToken.apply(this, arguments);\n  }\n  var StsTokenManager = /*#__PURE__*/function () {\n    function StsTokenManager() {\n      _classCallCheck(this, StsTokenManager);\n      this.refreshToken = null;\n      this.accessToken = null;\n      this.expirationTime = null;\n    }\n    return _createClass(StsTokenManager, [{\n      key: \"isExpired\",\n      get: function () {\n        return !this.expirationTime || Date.now() > this.expirationTime - 30000 /* Buffer.TOKEN_REFRESH */;\n      }\n    }, {\n      key: \"updateFromServerResponse\",\n      value: function updateFromServerResponse(response) {\n        _assert(response.idToken, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        _assert(typeof response.idToken !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        _assert(typeof response.refreshToken !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        var expiresIn = 'expiresIn' in response && typeof response.expiresIn !== 'undefined' ? Number(response.expiresIn) : _tokenExpiresIn(response.idToken);\n        this.updateTokensAndExpiration(response.idToken, response.refreshToken, expiresIn);\n      }\n    }, {\n      key: \"updateFromIdToken\",\n      value: function updateFromIdToken(idToken) {\n        _assert(idToken.length !== 0, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        var expiresIn = _tokenExpiresIn(idToken);\n        this.updateTokensAndExpiration(idToken, null, expiresIn);\n      }\n    }, {\n      key: \"getToken\",\n      value: function () {\n        var _getToken = _asyncToGenerator(function* (auth) {\n          var forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n          if (!forceRefresh && this.accessToken && !this.isExpired) {\n            return this.accessToken;\n          }\n          _assert(this.refreshToken, auth, \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */);\n          if (this.refreshToken) {\n            yield this.refresh(auth, this.refreshToken);\n            return this.accessToken;\n          }\n          return null;\n        });\n        function getToken(_x32) {\n          return _getToken.apply(this, arguments);\n        }\n        return getToken;\n      }()\n    }, {\n      key: \"clearRefreshToken\",\n      value: function clearRefreshToken() {\n        this.refreshToken = null;\n      }\n    }, {\n      key: \"refresh\",\n      value: function () {\n        var _refresh = _asyncToGenerator(function* (auth, oldToken) {\n          var _yield$requestStsToke = yield requestStsToken(auth, oldToken),\n            accessToken = _yield$requestStsToke.accessToken,\n            refreshToken = _yield$requestStsToke.refreshToken,\n            expiresIn = _yield$requestStsToke.expiresIn;\n          this.updateTokensAndExpiration(accessToken, refreshToken, Number(expiresIn));\n        });\n        function refresh(_x33, _x34) {\n          return _refresh.apply(this, arguments);\n        }\n        return refresh;\n      }()\n    }, {\n      key: \"updateTokensAndExpiration\",\n      value: function updateTokensAndExpiration(accessToken, refreshToken, expiresInSec) {\n        this.refreshToken = refreshToken || null;\n        this.accessToken = accessToken || null;\n        this.expirationTime = Date.now() + expiresInSec * 1000;\n      }\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return {\n          refreshToken: this.refreshToken,\n          accessToken: this.accessToken,\n          expirationTime: this.expirationTime\n        };\n      }\n    }, {\n      key: \"_assign\",\n      value: function _assign(stsTokenManager) {\n        this.accessToken = stsTokenManager.accessToken;\n        this.refreshToken = stsTokenManager.refreshToken;\n        this.expirationTime = stsTokenManager.expirationTime;\n      }\n    }, {\n      key: \"_clone\",\n      value: function _clone() {\n        return Object.assign(new StsTokenManager(), this.toJSON());\n      }\n    }, {\n      key: \"_performRefresh\",\n      value: function _performRefresh() {\n        return debugFail('not implemented');\n      }\n    }], [{\n      key: \"fromJSON\",\n      value: function fromJSON(appName, object) {\n        var refreshToken = object.refreshToken,\n          accessToken = object.accessToken,\n          expirationTime = object.expirationTime;\n        var manager = new StsTokenManager();\n        if (refreshToken) {\n          _assert(typeof refreshToken === 'string', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n            appName\n          });\n          manager.refreshToken = refreshToken;\n        }\n        if (accessToken) {\n          _assert(typeof accessToken === 'string', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n            appName\n          });\n          manager.accessToken = accessToken;\n        }\n        if (expirationTime) {\n          _assert(typeof expirationTime === 'number', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n            appName\n          });\n          manager.expirationTime = expirationTime;\n        }\n        return manager;\n      }\n    }]);\n  }();\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function assertStringOrUndefined(assertion, appName) {\n    _assert(typeof assertion === 'string' || typeof assertion === 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n      appName\n    });\n  }\n  var UserImpl = /*#__PURE__*/function () {\n    function UserImpl(_ref4) {\n      var uid = _ref4.uid,\n        auth = _ref4.auth,\n        stsTokenManager = _ref4.stsTokenManager,\n        opt = _objectWithoutProperties(_ref4, _excluded2);\n      _classCallCheck(this, UserImpl);\n      // For the user object, provider is always Firebase.\n      this.providerId = \"firebase\" /* ProviderId.FIREBASE */;\n      this.proactiveRefresh = new ProactiveRefresh(this);\n      this.reloadUserInfo = null;\n      this.reloadListener = null;\n      this.uid = uid;\n      this.auth = auth;\n      this.stsTokenManager = stsTokenManager;\n      this.accessToken = stsTokenManager.accessToken;\n      this.displayName = opt.displayName || null;\n      this.email = opt.email || null;\n      this.emailVerified = opt.emailVerified || false;\n      this.phoneNumber = opt.phoneNumber || null;\n      this.photoURL = opt.photoURL || null;\n      this.isAnonymous = opt.isAnonymous || false;\n      this.tenantId = opt.tenantId || null;\n      this.providerData = opt.providerData ? [...opt.providerData] : [];\n      this.metadata = new UserMetadata(opt.createdAt || undefined, opt.lastLoginAt || undefined);\n    }\n    return _createClass(UserImpl, [{\n      key: \"getIdToken\",\n      value: function () {\n        var _getIdToken = _asyncToGenerator(function* (forceRefresh) {\n          var accessToken = yield _logoutIfInvalidated(this, this.stsTokenManager.getToken(this.auth, forceRefresh));\n          _assert(accessToken, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          if (this.accessToken !== accessToken) {\n            this.accessToken = accessToken;\n            yield this.auth._persistUserIfCurrent(this);\n            this.auth._notifyListenersIfCurrent(this);\n          }\n          return accessToken;\n        });\n        function getIdToken(_x35) {\n          return _getIdToken.apply(this, arguments);\n        }\n        return getIdToken;\n      }()\n    }, {\n      key: \"getIdTokenResult\",\n      value: function getIdTokenResult(forceRefresh) {\n        return _getIdTokenResult2(this, forceRefresh);\n      }\n    }, {\n      key: \"reload\",\n      value: function reload() {\n        return _reload2(this);\n      }\n    }, {\n      key: \"_assign\",\n      value: function _assign(user) {\n        if (this === user) {\n          return;\n        }\n        _assert(this.uid === user.uid, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        this.displayName = user.displayName;\n        this.photoURL = user.photoURL;\n        this.email = user.email;\n        this.emailVerified = user.emailVerified;\n        this.phoneNumber = user.phoneNumber;\n        this.isAnonymous = user.isAnonymous;\n        this.tenantId = user.tenantId;\n        this.providerData = user.providerData.map(userInfo => ({\n          ...userInfo\n        }));\n        this.metadata._copy(user.metadata);\n        this.stsTokenManager._assign(user.stsTokenManager);\n      }\n    }, {\n      key: \"_clone\",\n      value: function _clone(auth) {\n        var newUser = new UserImpl({\n          ...this,\n          auth,\n          stsTokenManager: this.stsTokenManager._clone()\n        });\n        newUser.metadata._copy(this.metadata);\n        return newUser;\n      }\n    }, {\n      key: \"_onReload\",\n      value: function _onReload(callback) {\n        // There should only ever be one listener, and that is a single instance of MultiFactorUser\n        _assert(!this.reloadListener, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        this.reloadListener = callback;\n        if (this.reloadUserInfo) {\n          this._notifyReloadListener(this.reloadUserInfo);\n          this.reloadUserInfo = null;\n        }\n      }\n    }, {\n      key: \"_notifyReloadListener\",\n      value: function _notifyReloadListener(userInfo) {\n        if (this.reloadListener) {\n          this.reloadListener(userInfo);\n        } else {\n          // If no listener is subscribed yet, save the result so it's available when they do subscribe\n          this.reloadUserInfo = userInfo;\n        }\n      }\n    }, {\n      key: \"_startProactiveRefresh\",\n      value: function _startProactiveRefresh() {\n        this.proactiveRefresh._start();\n      }\n    }, {\n      key: \"_stopProactiveRefresh\",\n      value: function _stopProactiveRefresh() {\n        this.proactiveRefresh._stop();\n      }\n    }, {\n      key: \"_updateTokensIfNecessary\",\n      value: function () {\n        var _updateTokensIfNecessary2 = _asyncToGenerator(function* (response) {\n          var reload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n          var tokensRefreshed = false;\n          if (response.idToken && response.idToken !== this.stsTokenManager.accessToken) {\n            this.stsTokenManager.updateFromServerResponse(response);\n            tokensRefreshed = true;\n          }\n          if (reload) {\n            yield _reloadWithoutSaving(this);\n          }\n          yield this.auth._persistUserIfCurrent(this);\n          if (tokensRefreshed) {\n            this.auth._notifyListenersIfCurrent(this);\n          }\n        });\n        function _updateTokensIfNecessary(_x36) {\n          return _updateTokensIfNecessary2.apply(this, arguments);\n        }\n        return _updateTokensIfNecessary;\n      }()\n    }, {\n      key: \"delete\",\n      value: function () {\n        var _delete2 = _asyncToGenerator(function* () {\n          if (app._isFirebaseServerApp(this.auth.app)) {\n            return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this.auth));\n          }\n          var idToken = yield this.getIdToken();\n          yield _logoutIfInvalidated(this, deleteAccount(this.auth, {\n            idToken\n          }));\n          this.stsTokenManager.clearRefreshToken();\n          // TODO: Determine if cancellable-promises are necessary to use in this class so that delete()\n          //       cancels pending actions...\n          return this.auth.signOut();\n        });\n        function _delete() {\n          return _delete2.apply(this, arguments);\n        }\n        return _delete;\n      }()\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return {\n          uid: this.uid,\n          email: this.email || undefined,\n          emailVerified: this.emailVerified,\n          displayName: this.displayName || undefined,\n          isAnonymous: this.isAnonymous,\n          photoURL: this.photoURL || undefined,\n          phoneNumber: this.phoneNumber || undefined,\n          tenantId: this.tenantId || undefined,\n          providerData: this.providerData.map(userInfo => ({\n            ...userInfo\n          })),\n          stsTokenManager: this.stsTokenManager.toJSON(),\n          // Redirect event ID must be maintained in case there is a pending\n          // redirect event.\n          _redirectEventId: this._redirectEventId,\n          ...this.metadata.toJSON(),\n          // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):\n          apiKey: this.auth.config.apiKey,\n          appName: this.auth.name\n          // Missing authDomain will be tolerated by the legacy SDK.\n          // stsTokenManager.apiKey isn't actually required (despite the legacy SDK persisting it).\n        };\n      }\n    }, {\n      key: \"refreshToken\",\n      get: function () {\n        return this.stsTokenManager.refreshToken || '';\n      }\n    }], [{\n      key: \"_fromJSON\",\n      value: function _fromJSON(auth, object) {\n        var displayName = object.displayName ?? undefined;\n        var email = object.email ?? undefined;\n        var phoneNumber = object.phoneNumber ?? undefined;\n        var photoURL = object.photoURL ?? undefined;\n        var tenantId = object.tenantId ?? undefined;\n        var _redirectEventId = object._redirectEventId ?? undefined;\n        var createdAt = object.createdAt ?? undefined;\n        var lastLoginAt = object.lastLoginAt ?? undefined;\n        var uid = object.uid,\n          emailVerified = object.emailVerified,\n          isAnonymous = object.isAnonymous,\n          providerData = object.providerData,\n          plainObjectTokenManager = object.stsTokenManager;\n        _assert(uid && plainObjectTokenManager, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        var stsTokenManager = StsTokenManager.fromJSON(this.name, plainObjectTokenManager);\n        _assert(typeof uid === 'string', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        assertStringOrUndefined(displayName, auth.name);\n        assertStringOrUndefined(email, auth.name);\n        _assert(typeof emailVerified === 'boolean', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        _assert(typeof isAnonymous === 'boolean', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        assertStringOrUndefined(phoneNumber, auth.name);\n        assertStringOrUndefined(photoURL, auth.name);\n        assertStringOrUndefined(tenantId, auth.name);\n        assertStringOrUndefined(_redirectEventId, auth.name);\n        assertStringOrUndefined(createdAt, auth.name);\n        assertStringOrUndefined(lastLoginAt, auth.name);\n        var user = new UserImpl({\n          uid,\n          auth,\n          email,\n          emailVerified,\n          displayName,\n          isAnonymous,\n          photoURL,\n          phoneNumber,\n          tenantId,\n          stsTokenManager,\n          createdAt,\n          lastLoginAt\n        });\n        if (providerData && Array.isArray(providerData)) {\n          user.providerData = providerData.map(userInfo => ({\n            ...userInfo\n          }));\n        }\n        if (_redirectEventId) {\n          user._redirectEventId = _redirectEventId;\n        }\n        return user;\n      }\n      /**\n       * Initialize a User from an idToken server response\n       * @param auth\n       * @param idTokenResponse\n       */\n    }, {\n      key: \"_fromIdTokenResponse\",\n      value: (function () {\n        var _fromIdTokenResponse2 = _asyncToGenerator(function* (auth, idTokenResponse) {\n          var isAnonymous = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n          var stsTokenManager = new StsTokenManager();\n          stsTokenManager.updateFromServerResponse(idTokenResponse);\n          // Initialize the Firebase Auth user.\n          var user = new UserImpl({\n            uid: idTokenResponse.localId,\n            auth,\n            stsTokenManager,\n            isAnonymous\n          });\n          // Updates the user info and data and resolves with a user instance.\n          yield _reloadWithoutSaving(user);\n          return user;\n        });\n        function _fromIdTokenResponse(_x37, _x38) {\n          return _fromIdTokenResponse2.apply(this, arguments);\n        }\n        return _fromIdTokenResponse;\n      }()\n      /**\n       * Initialize a User from an idToken server response\n       * @param auth\n       * @param idTokenResponse\n       */\n      )\n    }, {\n      key: \"_fromGetAccountInfoResponse\",\n      value: (function () {\n        var _fromGetAccountInfoResponse2 = _asyncToGenerator(function* (auth, response, idToken) {\n          var coreAccount = response.users[0];\n          _assert(coreAccount.localId !== undefined, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          var providerData = coreAccount.providerUserInfo !== undefined ? extractProviderData(coreAccount.providerUserInfo) : [];\n          var isAnonymous = !(coreAccount.email && coreAccount.passwordHash) && !providerData?.length;\n          var stsTokenManager = new StsTokenManager();\n          stsTokenManager.updateFromIdToken(idToken);\n          // Initialize the Firebase Auth user.\n          var user = new UserImpl({\n            uid: coreAccount.localId,\n            auth,\n            stsTokenManager,\n            isAnonymous\n          });\n          // update the user with data from the GetAccountInfo response.\n          var updates = {\n            uid: coreAccount.localId,\n            displayName: coreAccount.displayName || null,\n            photoURL: coreAccount.photoUrl || null,\n            email: coreAccount.email || null,\n            emailVerified: coreAccount.emailVerified || false,\n            phoneNumber: coreAccount.phoneNumber || null,\n            tenantId: coreAccount.tenantId || null,\n            providerData,\n            metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),\n            isAnonymous: !(coreAccount.email && coreAccount.passwordHash) && !providerData?.length\n          };\n          Object.assign(user, updates);\n          return user;\n        });\n        function _fromGetAccountInfoResponse(_x39, _x40, _x41) {\n          return _fromGetAccountInfoResponse2.apply(this, arguments);\n        }\n        return _fromGetAccountInfoResponse;\n      }())\n    }]);\n  }();\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  var instanceCache = new Map();\n  function _getInstance(cls) {\n    debugAssert(cls instanceof Function, 'Expected a class definition');\n    var instance = instanceCache.get(cls);\n    if (instance) {\n      debugAssert(instance instanceof cls, 'Instance stored in cache mismatched with class');\n      return instance;\n    }\n    instance = new cls();\n    instanceCache.set(cls, instance);\n    return instance;\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  var InMemoryPersistence = /*#__PURE__*/function () {\n    function InMemoryPersistence() {\n      _classCallCheck(this, InMemoryPersistence);\n      this.type = \"NONE\" /* PersistenceType.NONE */;\n      this.storage = {};\n    }\n    return _createClass(InMemoryPersistence, [{\n      key: \"_isAvailable\",\n      value: function () {\n        var _isAvailable2 = _asyncToGenerator(function* () {\n          return true;\n        });\n        function _isAvailable() {\n          return _isAvailable2.apply(this, arguments);\n        }\n        return _isAvailable;\n      }()\n    }, {\n      key: \"_set\",\n      value: function () {\n        var _set2 = _asyncToGenerator(function* (key, value) {\n          this.storage[key] = value;\n        });\n        function _set(_x42, _x43) {\n          return _set2.apply(this, arguments);\n        }\n        return _set;\n      }()\n    }, {\n      key: \"_get\",\n      value: function () {\n        var _get2 = _asyncToGenerator(function* (key) {\n          var value = this.storage[key];\n          return value === undefined ? null : value;\n        });\n        function _get(_x44) {\n          return _get2.apply(this, arguments);\n        }\n        return _get;\n      }()\n    }, {\n      key: \"_remove\",\n      value: function () {\n        var _remove2 = _asyncToGenerator(function* (key) {\n          delete this.storage[key];\n        });\n        function _remove(_x45) {\n          return _remove2.apply(this, arguments);\n        }\n        return _remove;\n      }()\n    }, {\n      key: \"_addListener\",\n      value: function _addListener(_key, _listener) {\n        // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\n        return;\n      }\n    }, {\n      key: \"_removeListener\",\n      value: function _removeListener(_key, _listener) {\n        // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\n        return;\n      }\n    }]);\n  }();\n  InMemoryPersistence.type = 'NONE';\n  /**\n   * An implementation of {@link Persistence} of type 'NONE'.\n   *\n   * @public\n   */\n  var inMemoryPersistence = InMemoryPersistence;\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _persistenceKeyName(key, apiKey, appName) {\n    return `${\"firebase\" /* Namespace.PERSISTENCE */}:${key}:${apiKey}:${appName}`;\n  }\n  var PersistenceUserManager = /*#__PURE__*/function () {\n    function PersistenceUserManager(persistence, auth, userKey) {\n      _classCallCheck(this, PersistenceUserManager);\n      this.persistence = persistence;\n      this.auth = auth;\n      this.userKey = userKey;\n      var _this$auth = this.auth,\n        config = _this$auth.config,\n        name = _this$auth.name;\n      this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name);\n      this.fullPersistenceKey = _persistenceKeyName(\"persistence\" /* KeyName.PERSISTENCE_USER */, config.apiKey, name);\n      this.boundEventHandler = auth._onStorageEvent.bind(auth);\n      this.persistence._addListener(this.fullUserKey, this.boundEventHandler);\n    }\n    return _createClass(PersistenceUserManager, [{\n      key: \"setCurrentUser\",\n      value: function setCurrentUser(user) {\n        return this.persistence._set(this.fullUserKey, user.toJSON());\n      }\n    }, {\n      key: \"getCurrentUser\",\n      value: function () {\n        var _getCurrentUser = _asyncToGenerator(function* () {\n          var blob = yield this.persistence._get(this.fullUserKey);\n          if (!blob) {\n            return null;\n          }\n          if (typeof blob === 'string') {\n            var response = yield getAccountInfo(this.auth, {\n              idToken: blob\n            }).catch(() => undefined);\n            if (!response) {\n              return null;\n            }\n            return UserImpl._fromGetAccountInfoResponse(this.auth, response, blob);\n          }\n          return UserImpl._fromJSON(this.auth, blob);\n        });\n        function getCurrentUser() {\n          return _getCurrentUser.apply(this, arguments);\n        }\n        return getCurrentUser;\n      }()\n    }, {\n      key: \"removeCurrentUser\",\n      value: function removeCurrentUser() {\n        return this.persistence._remove(this.fullUserKey);\n      }\n    }, {\n      key: \"savePersistenceForRedirect\",\n      value: function savePersistenceForRedirect() {\n        return this.persistence._set(this.fullPersistenceKey, this.persistence.type);\n      }\n    }, {\n      key: \"setPersistence\",\n      value: function () {\n        var _setPersistence = _asyncToGenerator(function* (newPersistence) {\n          if (this.persistence === newPersistence) {\n            return;\n          }\n          var currentUser = yield this.getCurrentUser();\n          yield this.removeCurrentUser();\n          this.persistence = newPersistence;\n          if (currentUser) {\n            return this.setCurrentUser(currentUser);\n          }\n        });\n        function setPersistence(_x46) {\n          return _setPersistence.apply(this, arguments);\n        }\n        return setPersistence;\n      }()\n    }, {\n      key: \"delete\",\n      value: function _delete() {\n        this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);\n      }\n    }], [{\n      key: \"create\",\n      value: function () {\n        var _create = _asyncToGenerator(function* (auth, persistenceHierarchy) {\n          var userKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"authUser\";\n          if (!persistenceHierarchy.length) {\n            return new PersistenceUserManager(_getInstance(inMemoryPersistence), auth, userKey);\n          }\n          // Eliminate any persistences that are not available\n          var availablePersistences = (yield Promise.all(persistenceHierarchy.map(/*#__PURE__*/function () {\n            var _ref5 = _asyncToGenerator(function* (persistence) {\n              if (yield persistence._isAvailable()) {\n                return persistence;\n              }\n              return undefined;\n            });\n            return function (_x49) {\n              return _ref5.apply(this, arguments);\n            };\n          }()))).filter(persistence => persistence);\n          // Fall back to the first persistence listed, or in memory if none available\n          var selectedPersistence = availablePersistences[0] || _getInstance(inMemoryPersistence);\n          var key = _persistenceKeyName(userKey, auth.config.apiKey, auth.name);\n          // Pull out the existing user, setting the chosen persistence to that\n          // persistence if the user exists.\n          var userToMigrate = null;\n          // Note, here we check for a user in _all_ persistences, not just the\n          // ones deemed available. If we can migrate a user out of a broken\n          // persistence, we will (but only if that persistence supports migration).\n          for (var persistence of persistenceHierarchy) {\n            try {\n              var blob = yield persistence._get(key);\n              if (blob) {\n                var user = void 0;\n                if (typeof blob === 'string') {\n                  var response = yield getAccountInfo(auth, {\n                    idToken: blob\n                  }).catch(() => undefined);\n                  if (!response) {\n                    break;\n                  }\n                  user = yield UserImpl._fromGetAccountInfoResponse(auth, response, blob);\n                } else {\n                  user = UserImpl._fromJSON(auth, blob); // throws for unparsable blob (wrong format)\n                }\n                if (persistence !== selectedPersistence) {\n                  userToMigrate = user;\n                }\n                selectedPersistence = persistence;\n                break;\n              }\n            } catch {}\n          }\n          // If we find the user in a persistence that does support migration, use\n          // that migration path (of only persistences that support migration)\n          var migrationHierarchy = availablePersistences.filter(p => p._shouldAllowMigration);\n          // If the persistence does _not_ allow migration, just finish off here\n          if (!selectedPersistence._shouldAllowMigration || !migrationHierarchy.length) {\n            return new PersistenceUserManager(selectedPersistence, auth, userKey);\n          }\n          selectedPersistence = migrationHierarchy[0];\n          if (userToMigrate) {\n            // This normally shouldn't throw since chosenPersistence.isAvailable() is true, but if it does\n            // we'll just let it bubble to surface the error.\n            yield selectedPersistence._set(key, userToMigrate.toJSON());\n          }\n          // Attempt to clear the key in other persistences but ignore errors. This helps prevent issues\n          // such as users getting stuck with a previous account after signing out and refreshing the tab.\n          yield Promise.all(persistenceHierarchy.map(/*#__PURE__*/function () {\n            var _ref6 = _asyncToGenerator(function* (persistence) {\n              if (persistence !== selectedPersistence) {\n                try {\n                  yield persistence._remove(key);\n                } catch {}\n              }\n            });\n            return function (_x50) {\n              return _ref6.apply(this, arguments);\n            };\n          }()));\n          return new PersistenceUserManager(selectedPersistence, auth, userKey);\n        });\n        function create(_x47, _x48) {\n          return _create.apply(this, arguments);\n        }\n        return create;\n      }()\n    }]);\n  }();\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Determine the browser for the purposes of reporting usage to the API\n   */\n  function _getBrowserName(userAgent) {\n    var ua = userAgent.toLowerCase();\n    if (ua.includes('opera/') || ua.includes('opr/') || ua.includes('opios/')) {\n      return \"Opera\" /* BrowserName.OPERA */;\n    } else if (_isIEMobile(ua)) {\n      // Windows phone IEMobile browser.\n      return \"IEMobile\" /* BrowserName.IEMOBILE */;\n    } else if (ua.includes('msie') || ua.includes('trident/')) {\n      return \"IE\" /* BrowserName.IE */;\n    } else if (ua.includes('edge/')) {\n      return \"Edge\" /* BrowserName.EDGE */;\n    } else if (_isFirefox(ua)) {\n      return \"Firefox\" /* BrowserName.FIREFOX */;\n    } else if (ua.includes('silk/')) {\n      return \"Silk\" /* BrowserName.SILK */;\n    } else if (_isBlackBerry(ua)) {\n      // Blackberry browser.\n      return \"Blackberry\" /* BrowserName.BLACKBERRY */;\n    } else if (_isWebOS(ua)) {\n      // WebOS default browser.\n      return \"Webos\" /* BrowserName.WEBOS */;\n    } else if (_isSafari(ua)) {\n      return \"Safari\" /* BrowserName.SAFARI */;\n    } else if ((ua.includes('chrome/') || _isChromeIOS(ua)) && !ua.includes('edge/')) {\n      return \"Chrome\" /* BrowserName.CHROME */;\n    } else if (_isAndroid(ua)) {\n      // Android stock browser.\n      return \"Android\" /* BrowserName.ANDROID */;\n    } else {\n      // Most modern browsers have name/version at end of user agent string.\n      var re = /([a-zA-Z\\d\\.]+)\\/[a-zA-Z\\d\\.]*$/;\n      var matches = userAgent.match(re);\n      if (matches?.length === 2) {\n        return matches[1];\n      }\n    }\n    return \"Other\" /* BrowserName.OTHER */;\n  }\n  function _isFirefox() {\n    var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : util.getUA();\n    return /firefox\\//i.test(ua);\n  }\n  function _isSafari() {\n    var userAgent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : util.getUA();\n    var ua = userAgent.toLowerCase();\n    return ua.includes('safari/') && !ua.includes('chrome/') && !ua.includes('crios/') && !ua.includes('android');\n  }\n  function _isChromeIOS() {\n    var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : util.getUA();\n    return /crios\\//i.test(ua);\n  }\n  function _isIEMobile() {\n    var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : util.getUA();\n    return /iemobile/i.test(ua);\n  }\n  function _isAndroid() {\n    var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : util.getUA();\n    return /android/i.test(ua);\n  }\n  function _isBlackBerry() {\n    var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : util.getUA();\n    return /blackberry/i.test(ua);\n  }\n  function _isWebOS() {\n    var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : util.getUA();\n    return /webos/i.test(ua);\n  }\n  function _isIOS() {\n    var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : util.getUA();\n    return /iphone|ipad|ipod/i.test(ua) || /macintosh/i.test(ua) && /mobile/i.test(ua);\n  }\n  function _isIOS7Or8() {\n    var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : util.getUA();\n    return /(iPad|iPhone|iPod).*OS 7_\\d/i.test(ua) || /(iPad|iPhone|iPod).*OS 8_\\d/i.test(ua);\n  }\n  function _isIOSStandalone() {\n    var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : util.getUA();\n    return _isIOS(ua) && !!window.navigator?.standalone;\n  }\n  function _isIE10() {\n    return util.isIE() && document.documentMode === 10;\n  }\n  function _isMobileBrowser() {\n    var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : util.getUA();\n    // TODO: implement getBrowserName equivalent for OS.\n    return _isIOS(ua) || _isAndroid(ua) || _isWebOS(ua) || _isBlackBerry(ua) || /windows phone/i.test(ua) || _isIEMobile(ua);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /*\n   * Determine the SDK version string\n   */\n  function _getClientVersion(clientPlatform) {\n    var frameworks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var reportedPlatform;\n    switch (clientPlatform) {\n      case \"Browser\" /* ClientPlatform.BROWSER */:\n        // In a browser environment, report the browser name.\n        reportedPlatform = _getBrowserName(util.getUA());\n        break;\n      case \"Worker\" /* ClientPlatform.WORKER */:\n        // Technically a worker runs from a browser but we need to differentiate a\n        // worker from a browser.\n        // For example: Chrome-Worker/JsCore/4.9.1/FirebaseCore-web.\n        reportedPlatform = `${_getBrowserName(util.getUA())}-${clientPlatform}`;\n        break;\n      default:\n        reportedPlatform = clientPlatform;\n    }\n    var reportedFrameworks = frameworks.length ? frameworks.join(',') : 'FirebaseCore-web'; /* default value if no other framework is used */\n    return `${reportedPlatform}/${\"JsCore\" /* ClientImplementation.CORE */}/${app.SDK_VERSION}/${reportedFrameworks}`;\n  }\n\n  /**\n   * @license\n   * Copyright 2022 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  var AuthMiddlewareQueue = /*#__PURE__*/function () {\n    function AuthMiddlewareQueue(auth) {\n      _classCallCheck(this, AuthMiddlewareQueue);\n      this.auth = auth;\n      this.queue = [];\n    }\n    return _createClass(AuthMiddlewareQueue, [{\n      key: \"pushCallback\",\n      value: function pushCallback(callback, onAbort) {\n        // The callback could be sync or async. Wrap it into a\n        // function that is always async.\n        var wrappedCallback = user => new Promise((resolve, reject) => {\n          try {\n            var result = callback(user);\n            // Either resolve with existing promise or wrap a non-promise\n            // return value into a promise.\n            resolve(result);\n          } catch (e) {\n            // Sync callback throws.\n            reject(e);\n          }\n        });\n        // Attach the onAbort if present\n        wrappedCallback.onAbort = onAbort;\n        this.queue.push(wrappedCallback);\n        var index = this.queue.length - 1;\n        return () => {\n          // Unsubscribe. Replace with no-op. Do not remove from array, or it will disturb\n          // indexing of other elements.\n          this.queue[index] = () => Promise.resolve();\n        };\n      }\n    }, {\n      key: \"runMiddleware\",\n      value: function () {\n        var _runMiddleware = _asyncToGenerator(function* (nextUser) {\n          if (this.auth.currentUser === nextUser) {\n            return;\n          }\n          // While running the middleware, build a temporary stack of onAbort\n          // callbacks to call if one middleware callback rejects.\n          var onAbortStack = [];\n          try {\n            for (var beforeStateCallback of this.queue) {\n              yield beforeStateCallback(nextUser);\n              // Only push the onAbort if the callback succeeds\n              if (beforeStateCallback.onAbort) {\n                onAbortStack.push(beforeStateCallback.onAbort);\n              }\n            }\n          } catch (e) {\n            // Run all onAbort, with separate try/catch to ignore any errors and\n            // continue\n            onAbortStack.reverse();\n            for (var onAbort of onAbortStack) {\n              try {\n                onAbort();\n              } catch (_) {\n                /* swallow error */\n              }\n            }\n            throw this.auth._errorFactory.create(\"login-blocked\" /* AuthErrorCode.LOGIN_BLOCKED */, {\n              originalMessage: e?.message\n            });\n          }\n        });\n        function runMiddleware(_x51) {\n          return _runMiddleware.apply(this, arguments);\n        }\n        return runMiddleware;\n      }()\n    }]);\n  }();\n  /**\n   * @license\n   * Copyright 2023 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Fetches the password policy for the currently set tenant or the project if no tenant is set.\n   *\n   * @param auth Auth object.\n   * @param request Password policy request.\n   * @returns Password policy response.\n   */\n  function _getPasswordPolicy(_x52) {\n    return _getPasswordPolicy2.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2023 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  // Minimum min password length enforced by the backend, even if no minimum length is set.\n  function _getPasswordPolicy2() {\n    _getPasswordPolicy2 = _asyncToGenerator(function* (auth) {\n      var request = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v2/passwordPolicy\" /* Endpoint.GET_PASSWORD_POLICY */, _addTidIfNecessary(auth, request));\n    });\n    return _getPasswordPolicy2.apply(this, arguments);\n  }\n  var MINIMUM_MIN_PASSWORD_LENGTH = 6;\n  /**\n   * Stores password policy requirements and provides password validation against the policy.\n   *\n   * @internal\n   */\n  var PasswordPolicyImpl = /*#__PURE__*/function () {\n    function PasswordPolicyImpl(response) {\n      _classCallCheck(this, PasswordPolicyImpl);\n      // Only include custom strength options defined in the response.\n      var responseOptions = response.customStrengthOptions;\n      this.customStrengthOptions = {};\n      // TODO: Remove once the backend is updated to include the minimum min password length instead of undefined when there is no minimum length set.\n      this.customStrengthOptions.minPasswordLength = responseOptions.minPasswordLength ?? MINIMUM_MIN_PASSWORD_LENGTH;\n      if (responseOptions.maxPasswordLength) {\n        this.customStrengthOptions.maxPasswordLength = responseOptions.maxPasswordLength;\n      }\n      if (responseOptions.containsLowercaseCharacter !== undefined) {\n        this.customStrengthOptions.containsLowercaseLetter = responseOptions.containsLowercaseCharacter;\n      }\n      if (responseOptions.containsUppercaseCharacter !== undefined) {\n        this.customStrengthOptions.containsUppercaseLetter = responseOptions.containsUppercaseCharacter;\n      }\n      if (responseOptions.containsNumericCharacter !== undefined) {\n        this.customStrengthOptions.containsNumericCharacter = responseOptions.containsNumericCharacter;\n      }\n      if (responseOptions.containsNonAlphanumericCharacter !== undefined) {\n        this.customStrengthOptions.containsNonAlphanumericCharacter = responseOptions.containsNonAlphanumericCharacter;\n      }\n      this.enforcementState = response.enforcementState;\n      if (this.enforcementState === 'ENFORCEMENT_STATE_UNSPECIFIED') {\n        this.enforcementState = 'OFF';\n      }\n      // Use an empty string if no non-alphanumeric characters are specified in the response.\n      this.allowedNonAlphanumericCharacters = response.allowedNonAlphanumericCharacters?.join('') ?? '';\n      this.forceUpgradeOnSignin = response.forceUpgradeOnSignin ?? false;\n      this.schemaVersion = response.schemaVersion;\n    }\n    return _createClass(PasswordPolicyImpl, [{\n      key: \"validatePassword\",\n      value: function validatePassword(password) {\n        var status = {\n          isValid: true,\n          passwordPolicy: this\n        };\n        // Check the password length and character options.\n        this.validatePasswordLengthOptions(password, status);\n        this.validatePasswordCharacterOptions(password, status);\n        // Combine the status into single isValid property.\n        status.isValid && (status.isValid = status.meetsMinPasswordLength ?? true);\n        status.isValid && (status.isValid = status.meetsMaxPasswordLength ?? true);\n        status.isValid && (status.isValid = status.containsLowercaseLetter ?? true);\n        status.isValid && (status.isValid = status.containsUppercaseLetter ?? true);\n        status.isValid && (status.isValid = status.containsNumericCharacter ?? true);\n        status.isValid && (status.isValid = status.containsNonAlphanumericCharacter ?? true);\n        return status;\n      }\n      /**\n       * Validates that the password meets the length options for the policy.\n       *\n       * @param password Password to validate.\n       * @param status Validation status.\n       */\n    }, {\n      key: \"validatePasswordLengthOptions\",\n      value: function validatePasswordLengthOptions(password, status) {\n        var minPasswordLength = this.customStrengthOptions.minPasswordLength;\n        var maxPasswordLength = this.customStrengthOptions.maxPasswordLength;\n        if (minPasswordLength) {\n          status.meetsMinPasswordLength = password.length >= minPasswordLength;\n        }\n        if (maxPasswordLength) {\n          status.meetsMaxPasswordLength = password.length <= maxPasswordLength;\n        }\n      }\n      /**\n       * Validates that the password meets the character options for the policy.\n       *\n       * @param password Password to validate.\n       * @param status Validation status.\n       */\n    }, {\n      key: \"validatePasswordCharacterOptions\",\n      value: function validatePasswordCharacterOptions(password, status) {\n        // Assign statuses for requirements even if the password is an empty string.\n        this.updatePasswordCharacterOptionsStatuses(status, /* containsLowercaseCharacter= */false, /* containsUppercaseCharacter= */false, /* containsNumericCharacter= */false, /* containsNonAlphanumericCharacter= */false);\n        var passwordChar;\n        for (var i = 0; i < password.length; i++) {\n          passwordChar = password.charAt(i);\n          this.updatePasswordCharacterOptionsStatuses(status, /* containsLowercaseCharacter= */passwordChar >= 'a' && passwordChar <= 'z', /* containsUppercaseCharacter= */passwordChar >= 'A' && passwordChar <= 'Z', /* containsNumericCharacter= */passwordChar >= '0' && passwordChar <= '9', /* containsNonAlphanumericCharacter= */this.allowedNonAlphanumericCharacters.includes(passwordChar));\n        }\n      }\n      /**\n       * Updates the running validation status with the statuses for the character options.\n       * Expected to be called each time a character is processed to update each option status\n       * based on the current character.\n       *\n       * @param status Validation status.\n       * @param containsLowercaseCharacter Whether the character is a lowercase letter.\n       * @param containsUppercaseCharacter Whether the character is an uppercase letter.\n       * @param containsNumericCharacter Whether the character is a numeric character.\n       * @param containsNonAlphanumericCharacter Whether the character is a non-alphanumeric character.\n       */\n    }, {\n      key: \"updatePasswordCharacterOptionsStatuses\",\n      value: function updatePasswordCharacterOptionsStatuses(status, containsLowercaseCharacter, containsUppercaseCharacter, containsNumericCharacter, containsNonAlphanumericCharacter) {\n        if (this.customStrengthOptions.containsLowercaseLetter) {\n          status.containsLowercaseLetter || (status.containsLowercaseLetter = containsLowercaseCharacter);\n        }\n        if (this.customStrengthOptions.containsUppercaseLetter) {\n          status.containsUppercaseLetter || (status.containsUppercaseLetter = containsUppercaseCharacter);\n        }\n        if (this.customStrengthOptions.containsNumericCharacter) {\n          status.containsNumericCharacter || (status.containsNumericCharacter = containsNumericCharacter);\n        }\n        if (this.customStrengthOptions.containsNonAlphanumericCharacter) {\n          status.containsNonAlphanumericCharacter || (status.containsNonAlphanumericCharacter = containsNonAlphanumericCharacter);\n        }\n      }\n    }]);\n  }();\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  var AuthImpl = /*#__PURE__*/function () {\n    function AuthImpl(app, heartbeatServiceProvider, appCheckServiceProvider, config) {\n      _classCallCheck(this, AuthImpl);\n      this.app = app;\n      this.heartbeatServiceProvider = heartbeatServiceProvider;\n      this.appCheckServiceProvider = appCheckServiceProvider;\n      this.config = config;\n      this.currentUser = null;\n      this.emulatorConfig = null;\n      this.operations = Promise.resolve();\n      this.authStateSubscription = new Subscription(this);\n      this.idTokenSubscription = new Subscription(this);\n      this.beforeStateQueue = new AuthMiddlewareQueue(this);\n      this.redirectUser = null;\n      this.isProactiveRefreshEnabled = false;\n      this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION = 1;\n      // Any network calls will set this to true and prevent subsequent emulator\n      // initialization\n      this._canInitEmulator = true;\n      this._isInitialized = false;\n      this._deleted = false;\n      this._initializationPromise = null;\n      this._popupRedirectResolver = null;\n      this._errorFactory = _DEFAULT_AUTH_ERROR_FACTORY;\n      this._agentRecaptchaConfig = null;\n      this._tenantRecaptchaConfigs = {};\n      this._projectPasswordPolicy = null;\n      this._tenantPasswordPolicies = {};\n      this._resolvePersistenceManagerAvailable = undefined;\n      // Tracks the last notified UID for state change listeners to prevent\n      // repeated calls to the callbacks. Undefined means it's never been\n      // called, whereas null means it's been called with a signed out user\n      this.lastNotifiedUid = undefined;\n      this.languageCode = null;\n      this.tenantId = null;\n      this.settings = {\n        appVerificationDisabledForTesting: false\n      };\n      this.frameworks = [];\n      this.name = app.name;\n      this.clientVersion = config.sdkClientVersion;\n      // TODO(jamesdaniels) explore less hacky way to do this, cookie authentication needs\n      // persistenceMananger to be available. see _getFinalTarget for more context\n      this._persistenceManagerAvailable = new Promise(resolve => this._resolvePersistenceManagerAvailable = resolve);\n    }\n    return _createClass(AuthImpl, [{\n      key: \"_initializeWithPersistence\",\n      value: function _initializeWithPersistence(persistenceHierarchy, popupRedirectResolver) {\n        var _this2 = this;\n        if (popupRedirectResolver) {\n          this._popupRedirectResolver = _getInstance(popupRedirectResolver);\n        }\n        // Have to check for app deletion throughout initialization (after each\n        // promise resolution)\n        this._initializationPromise = this.queue(/*#__PURE__*/_asyncToGenerator(function* () {\n          if (_this2._deleted) {\n            return;\n          }\n          _this2.persistenceManager = yield PersistenceUserManager.create(_this2, persistenceHierarchy);\n          _this2._resolvePersistenceManagerAvailable?.();\n          if (_this2._deleted) {\n            return;\n          }\n          // Initialize the resolver early if necessary (only applicable to web:\n          // this will cause the iframe to load immediately in certain cases)\n          if (_this2._popupRedirectResolver?._shouldInitProactively) {\n            // If this fails, don't halt auth loading\n            try {\n              yield _this2._popupRedirectResolver._initialize(_this2);\n            } catch (e) {\n              /* Ignore the error */\n            }\n          }\n          yield _this2.initializeCurrentUser(popupRedirectResolver);\n          _this2.lastNotifiedUid = _this2.currentUser?.uid || null;\n          if (_this2._deleted) {\n            return;\n          }\n          _this2._isInitialized = true;\n        }));\n        return this._initializationPromise;\n      }\n      /**\n       * If the persistence is changed in another window, the user manager will let us know\n       */\n    }, {\n      key: \"_onStorageEvent\",\n      value: (function () {\n        var _onStorageEvent2 = _asyncToGenerator(function* () {\n          if (this._deleted) {\n            return;\n          }\n          var user = yield this.assertedPersistence.getCurrentUser();\n          if (!this.currentUser && !user) {\n            // No change, do nothing (was signed out and remained signed out).\n            return;\n          }\n          // If the same user is to be synchronized.\n          if (this.currentUser && user && this.currentUser.uid === user.uid) {\n            // Data update, simply copy data changes.\n            this._currentUser._assign(user);\n            // If tokens changed from previous user tokens, this will trigger\n            // notifyAuthListeners_.\n            yield this.currentUser.getIdToken();\n            return;\n          }\n          // Update current Auth state. Either a new login or logout.\n          // Skip blocking callbacks, they should not apply to a change in another tab.\n          yield this._updateCurrentUser(user, /* skipBeforeStateCallbacks */true);\n        });\n        function _onStorageEvent() {\n          return _onStorageEvent2.apply(this, arguments);\n        }\n        return _onStorageEvent;\n      }())\n    }, {\n      key: \"initializeCurrentUserFromIdToken\",\n      value: function () {\n        var _initializeCurrentUserFromIdToken = _asyncToGenerator(function* (idToken) {\n          try {\n            var response = yield getAccountInfo(this, {\n              idToken\n            });\n            var user = yield UserImpl._fromGetAccountInfoResponse(this, response, idToken);\n            yield this.directlySetCurrentUser(user);\n          } catch (err) {\n            console.warn('FirebaseServerApp could not login user with provided authIdToken: ', err);\n            yield this.directlySetCurrentUser(null);\n          }\n        });\n        function initializeCurrentUserFromIdToken(_x53) {\n          return _initializeCurrentUserFromIdToken.apply(this, arguments);\n        }\n        return initializeCurrentUserFromIdToken;\n      }()\n    }, {\n      key: \"initializeCurrentUser\",\n      value: function () {\n        var _initializeCurrentUser = _asyncToGenerator(function* (popupRedirectResolver) {\n          if (app._isFirebaseServerApp(this.app)) {\n            var idToken = this.app.settings.authIdToken;\n            if (idToken) {\n              // Start the auth operation in the next tick to allow a moment for the customer's app to\n              // attach an emulator, if desired.\n              return new Promise(resolve => {\n                setTimeout(() => this.initializeCurrentUserFromIdToken(idToken).then(resolve, resolve));\n              });\n            } else {\n              return this.directlySetCurrentUser(null);\n            }\n          }\n          // First check to see if we have a pending redirect event.\n          var previouslyStoredUser = yield this.assertedPersistence.getCurrentUser();\n          var futureCurrentUser = previouslyStoredUser;\n          var needsTocheckMiddleware = false;\n          if (popupRedirectResolver && this.config.authDomain) {\n            yield this.getOrInitRedirectPersistenceManager();\n            var redirectUserEventId = this.redirectUser?._redirectEventId;\n            var storedUserEventId = futureCurrentUser?._redirectEventId;\n            var result = yield this.tryRedirectSignIn(popupRedirectResolver);\n            // If the stored user (i.e. the old \"currentUser\") has a redirectId that\n            // matches the redirect user, then we want to initially sign in with the\n            // new user object from result.\n            // TODO(samgho): More thoroughly test all of this\n            if ((!redirectUserEventId || redirectUserEventId === storedUserEventId) && result?.user) {\n              futureCurrentUser = result.user;\n              needsTocheckMiddleware = true;\n            }\n          }\n          // If no user in persistence, there is no current user. Set to null.\n          if (!futureCurrentUser) {\n            return this.directlySetCurrentUser(null);\n          }\n          if (!futureCurrentUser._redirectEventId) {\n            // This isn't a redirect link operation, we can reload and bail.\n            // First though, ensure that we check the middleware is happy.\n            if (needsTocheckMiddleware) {\n              try {\n                yield this.beforeStateQueue.runMiddleware(futureCurrentUser);\n              } catch (e) {\n                futureCurrentUser = previouslyStoredUser;\n                // We know this is available since the bit is only set when the\n                // resolver is available\n                this._popupRedirectResolver._overrideRedirectResult(this, () => Promise.reject(e));\n              }\n            }\n            if (futureCurrentUser) {\n              return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\n            } else {\n              return this.directlySetCurrentUser(null);\n            }\n          }\n          _assert(this._popupRedirectResolver, this, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n          yield this.getOrInitRedirectPersistenceManager();\n          // If the redirect user's event ID matches the current user's event ID,\n          // DO NOT reload the current user, otherwise they'll be cleared from storage.\n          // This is important for the reauthenticateWithRedirect() flow.\n          if (this.redirectUser && this.redirectUser._redirectEventId === futureCurrentUser._redirectEventId) {\n            return this.directlySetCurrentUser(futureCurrentUser);\n          }\n          return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\n        });\n        function initializeCurrentUser(_x54) {\n          return _initializeCurrentUser.apply(this, arguments);\n        }\n        return initializeCurrentUser;\n      }()\n    }, {\n      key: \"tryRedirectSignIn\",\n      value: function () {\n        var _tryRedirectSignIn = _asyncToGenerator(function* (redirectResolver) {\n          // The redirect user needs to be checked (and signed in if available)\n          // during auth initialization. All of the normal sign in and link/reauth\n          // flows call back into auth and push things onto the promise queue. We\n          // need to await the result of the redirect sign in *inside the promise\n          // queue*. This presents a problem: we run into deadlock. See:\n          //    ┌> [Initialization] ─────┐\n          //    ┌> [<other queue tasks>] │\n          //    └─ [getRedirectResult] <─┘\n          //    where [] are tasks on the queue and arrows denote awaits\n          // Initialization will never complete because it's waiting on something\n          // that's waiting for initialization to complete!\n          //\n          // Instead, this method calls getRedirectResult() (stored in\n          // _completeRedirectFn) with an optional parameter that instructs all of\n          // the underlying auth operations to skip anything that mutates auth state.\n          var result = null;\n          try {\n            // We know this._popupRedirectResolver is set since redirectResolver\n            // is passed in. The _completeRedirectFn expects the unwrapped extern.\n            result = yield this._popupRedirectResolver._completeRedirectFn(this, redirectResolver, true);\n          } catch (e) {\n            // Swallow any errors here; the code can retrieve them in\n            // getRedirectResult().\n            yield this._setRedirectUser(null);\n          }\n          return result;\n        });\n        function tryRedirectSignIn(_x55) {\n          return _tryRedirectSignIn.apply(this, arguments);\n        }\n        return tryRedirectSignIn;\n      }()\n    }, {\n      key: \"reloadAndSetCurrentUserOrClear\",\n      value: function () {\n        var _reloadAndSetCurrentUserOrClear = _asyncToGenerator(function* (user) {\n          try {\n            yield _reloadWithoutSaving(user);\n          } catch (e) {\n            if (e?.code !== `auth/${\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */}`) {\n              // Something's wrong with the user's token. Log them out and remove\n              // them from storage\n              return this.directlySetCurrentUser(null);\n            }\n          }\n          return this.directlySetCurrentUser(user);\n        });\n        function reloadAndSetCurrentUserOrClear(_x56) {\n          return _reloadAndSetCurrentUserOrClear.apply(this, arguments);\n        }\n        return reloadAndSetCurrentUserOrClear;\n      }()\n    }, {\n      key: \"useDeviceLanguage\",\n      value: function useDeviceLanguage() {\n        this.languageCode = _getUserLanguage();\n      }\n    }, {\n      key: \"_delete\",\n      value: function () {\n        var _delete3 = _asyncToGenerator(function* () {\n          this._deleted = true;\n        });\n        function _delete() {\n          return _delete3.apply(this, arguments);\n        }\n        return _delete;\n      }()\n    }, {\n      key: \"updateCurrentUser\",\n      value: function () {\n        var _updateCurrentUser2 = _asyncToGenerator(function* (userExtern) {\n          if (app._isFirebaseServerApp(this.app)) {\n            return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));\n          }\n          // The public updateCurrentUser method needs to make a copy of the user,\n          // and also check that the project matches\n          var user = userExtern ? util.getModularInstance(userExtern) : null;\n          if (user) {\n            _assert(user.auth.config.apiKey === this.config.apiKey, this, \"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */);\n          }\n          return this._updateCurrentUser(user && user._clone(this));\n        });\n        function updateCurrentUser(_x57) {\n          return _updateCurrentUser2.apply(this, arguments);\n        }\n        return updateCurrentUser;\n      }()\n    }, {\n      key: \"_updateCurrentUser\",\n      value: function () {\n        var _updateCurrentUser3 = _asyncToGenerator(function* (user) {\n          var _this3 = this;\n          var skipBeforeStateCallbacks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n          if (this._deleted) {\n            return;\n          }\n          if (user) {\n            _assert(this.tenantId === user.tenantId, this, \"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */);\n          }\n          if (!skipBeforeStateCallbacks) {\n            yield this.beforeStateQueue.runMiddleware(user);\n          }\n          return this.queue(/*#__PURE__*/_asyncToGenerator(function* () {\n            yield _this3.directlySetCurrentUser(user);\n            _this3.notifyAuthListeners();\n          }));\n        });\n        function _updateCurrentUser(_x58) {\n          return _updateCurrentUser3.apply(this, arguments);\n        }\n        return _updateCurrentUser;\n      }()\n    }, {\n      key: \"signOut\",\n      value: function () {\n        var _signOut = _asyncToGenerator(function* () {\n          if (app._isFirebaseServerApp(this.app)) {\n            return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));\n          }\n          // Run first, to block _setRedirectUser() if any callbacks fail.\n          yield this.beforeStateQueue.runMiddleware(null);\n          // Clear the redirect user when signOut is called\n          if (this.redirectPersistenceManager || this._popupRedirectResolver) {\n            yield this._setRedirectUser(null);\n          }\n          // Prevent callbacks from being called again in _updateCurrentUser, as\n          // they were already called in the first line.\n          return this._updateCurrentUser(null, /* skipBeforeStateCallbacks */true);\n        });\n        function signOut() {\n          return _signOut.apply(this, arguments);\n        }\n        return signOut;\n      }()\n    }, {\n      key: \"setPersistence\",\n      value: function setPersistence(persistence) {\n        var _this4 = this;\n        if (app._isFirebaseServerApp(this.app)) {\n          return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));\n        }\n        return this.queue(/*#__PURE__*/_asyncToGenerator(function* () {\n          yield _this4.assertedPersistence.setPersistence(_getInstance(persistence));\n        }));\n      }\n    }, {\n      key: \"_getRecaptchaConfig\",\n      value: function _getRecaptchaConfig() {\n        if (this.tenantId == null) {\n          return this._agentRecaptchaConfig;\n        } else {\n          return this._tenantRecaptchaConfigs[this.tenantId];\n        }\n      }\n    }, {\n      key: \"validatePassword\",\n      value: function () {\n        var _validatePassword = _asyncToGenerator(function* (password) {\n          if (!this._getPasswordPolicyInternal()) {\n            yield this._updatePasswordPolicy();\n          }\n          // Password policy will be defined after fetching.\n          var passwordPolicy = this._getPasswordPolicyInternal();\n          // Check that the policy schema version is supported by the SDK.\n          // TODO: Update this logic to use a max supported policy schema version once we have multiple schema versions.\n          if (passwordPolicy.schemaVersion !== this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION) {\n            return Promise.reject(this._errorFactory.create(\"unsupported-password-policy-schema-version\" /* AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION */, {}));\n          }\n          return passwordPolicy.validatePassword(password);\n        });\n        function validatePassword(_x59) {\n          return _validatePassword.apply(this, arguments);\n        }\n        return validatePassword;\n      }()\n    }, {\n      key: \"_getPasswordPolicyInternal\",\n      value: function _getPasswordPolicyInternal() {\n        if (this.tenantId === null) {\n          return this._projectPasswordPolicy;\n        } else {\n          return this._tenantPasswordPolicies[this.tenantId];\n        }\n      }\n    }, {\n      key: \"_updatePasswordPolicy\",\n      value: function () {\n        var _updatePasswordPolicy2 = _asyncToGenerator(function* () {\n          var response = yield _getPasswordPolicy(this);\n          var passwordPolicy = new PasswordPolicyImpl(response);\n          if (this.tenantId === null) {\n            this._projectPasswordPolicy = passwordPolicy;\n          } else {\n            this._tenantPasswordPolicies[this.tenantId] = passwordPolicy;\n          }\n        });\n        function _updatePasswordPolicy() {\n          return _updatePasswordPolicy2.apply(this, arguments);\n        }\n        return _updatePasswordPolicy;\n      }()\n    }, {\n      key: \"_getPersistenceType\",\n      value: function _getPersistenceType() {\n        return this.assertedPersistence.persistence.type;\n      }\n    }, {\n      key: \"_getPersistence\",\n      value: function _getPersistence() {\n        return this.assertedPersistence.persistence;\n      }\n    }, {\n      key: \"_updateErrorMap\",\n      value: function _updateErrorMap(errorMap) {\n        this._errorFactory = new util.ErrorFactory('auth', 'Firebase', errorMap());\n      }\n    }, {\n      key: \"onAuthStateChanged\",\n      value: function onAuthStateChanged(nextOrObserver, error, completed) {\n        return this.registerStateListener(this.authStateSubscription, nextOrObserver, error, completed);\n      }\n    }, {\n      key: \"beforeAuthStateChanged\",\n      value: function beforeAuthStateChanged(callback, onAbort) {\n        return this.beforeStateQueue.pushCallback(callback, onAbort);\n      }\n    }, {\n      key: \"onIdTokenChanged\",\n      value: function onIdTokenChanged(nextOrObserver, error, completed) {\n        return this.registerStateListener(this.idTokenSubscription, nextOrObserver, error, completed);\n      }\n    }, {\n      key: \"authStateReady\",\n      value: function authStateReady() {\n        return new Promise((resolve, reject) => {\n          if (this.currentUser) {\n            resolve();\n          } else {\n            var unsubscribe = this.onAuthStateChanged(() => {\n              unsubscribe();\n              resolve();\n            }, reject);\n          }\n        });\n      }\n      /**\n       * Revokes the given access token. Currently only supports Apple OAuth access tokens.\n       */\n    }, {\n      key: \"revokeAccessToken\",\n      value: (function () {\n        var _revokeAccessToken = _asyncToGenerator(function* (token) {\n          if (this.currentUser) {\n            var idToken = yield this.currentUser.getIdToken();\n            // Generalize this to accept other providers once supported.\n            var request = {\n              providerId: 'apple.com',\n              tokenType: \"ACCESS_TOKEN\" /* TokenType.ACCESS_TOKEN */,\n              token,\n              idToken\n            };\n            if (this.tenantId != null) {\n              request.tenantId = this.tenantId;\n            }\n            yield revokeToken(this, request);\n          }\n        });\n        function revokeAccessToken(_x60) {\n          return _revokeAccessToken.apply(this, arguments);\n        }\n        return revokeAccessToken;\n      }())\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return {\n          apiKey: this.config.apiKey,\n          authDomain: this.config.authDomain,\n          appName: this.name,\n          currentUser: this._currentUser?.toJSON()\n        };\n      }\n    }, {\n      key: \"_setRedirectUser\",\n      value: function () {\n        var _setRedirectUser2 = _asyncToGenerator(function* (user, popupRedirectResolver) {\n          var redirectManager = yield this.getOrInitRedirectPersistenceManager(popupRedirectResolver);\n          return user === null ? redirectManager.removeCurrentUser() : redirectManager.setCurrentUser(user);\n        });\n        function _setRedirectUser(_x61, _x62) {\n          return _setRedirectUser2.apply(this, arguments);\n        }\n        return _setRedirectUser;\n      }()\n    }, {\n      key: \"getOrInitRedirectPersistenceManager\",\n      value: function () {\n        var _getOrInitRedirectPersistenceManager = _asyncToGenerator(function* (popupRedirectResolver) {\n          if (!this.redirectPersistenceManager) {\n            var resolver = popupRedirectResolver && _getInstance(popupRedirectResolver) || this._popupRedirectResolver;\n            _assert(resolver, this, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n            this.redirectPersistenceManager = yield PersistenceUserManager.create(this, [_getInstance(resolver._redirectPersistence)], \"redirectUser\" /* KeyName.REDIRECT_USER */);\n            this.redirectUser = yield this.redirectPersistenceManager.getCurrentUser();\n          }\n          return this.redirectPersistenceManager;\n        });\n        function getOrInitRedirectPersistenceManager(_x63) {\n          return _getOrInitRedirectPersistenceManager.apply(this, arguments);\n        }\n        return getOrInitRedirectPersistenceManager;\n      }()\n    }, {\n      key: \"_redirectUserForId\",\n      value: function () {\n        var _redirectUserForId2 = _asyncToGenerator(function* (id) {\n          // Make sure we've cleared any pending persistence actions if we're not in\n          // the initializer\n          if (this._isInitialized) {\n            yield this.queue(/*#__PURE__*/_asyncToGenerator(function* () {}));\n          }\n          if (this._currentUser?._redirectEventId === id) {\n            return this._currentUser;\n          }\n          if (this.redirectUser?._redirectEventId === id) {\n            return this.redirectUser;\n          }\n          return null;\n        });\n        function _redirectUserForId(_x64) {\n          return _redirectUserForId2.apply(this, arguments);\n        }\n        return _redirectUserForId;\n      }()\n    }, {\n      key: \"_persistUserIfCurrent\",\n      value: function () {\n        var _persistUserIfCurrent2 = _asyncToGenerator(function* (user) {\n          var _this5 = this;\n          if (user === this.currentUser) {\n            return this.queue(/*#__PURE__*/_asyncToGenerator(function* () {\n              return _this5.directlySetCurrentUser(user);\n            }));\n          }\n        });\n        function _persistUserIfCurrent(_x65) {\n          return _persistUserIfCurrent2.apply(this, arguments);\n        }\n        return _persistUserIfCurrent;\n      }() /** Notifies listeners only if the user is current */\n    }, {\n      key: \"_notifyListenersIfCurrent\",\n      value: function _notifyListenersIfCurrent(user) {\n        if (user === this.currentUser) {\n          this.notifyAuthListeners();\n        }\n      }\n    }, {\n      key: \"_key\",\n      value: function _key() {\n        return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;\n      }\n    }, {\n      key: \"_startProactiveRefresh\",\n      value: function _startProactiveRefresh() {\n        this.isProactiveRefreshEnabled = true;\n        if (this.currentUser) {\n          this._currentUser._startProactiveRefresh();\n        }\n      }\n    }, {\n      key: \"_stopProactiveRefresh\",\n      value: function _stopProactiveRefresh() {\n        this.isProactiveRefreshEnabled = false;\n        if (this.currentUser) {\n          this._currentUser._stopProactiveRefresh();\n        }\n      }\n      /** Returns the current user cast as the internal type */\n    }, {\n      key: \"_currentUser\",\n      get: function () {\n        return this.currentUser;\n      }\n    }, {\n      key: \"notifyAuthListeners\",\n      value: function notifyAuthListeners() {\n        if (!this._isInitialized) {\n          return;\n        }\n        this.idTokenSubscription.next(this.currentUser);\n        var currentUid = this.currentUser?.uid ?? null;\n        if (this.lastNotifiedUid !== currentUid) {\n          this.lastNotifiedUid = currentUid;\n          this.authStateSubscription.next(this.currentUser);\n        }\n      }\n    }, {\n      key: \"registerStateListener\",\n      value: function registerStateListener(subscription, nextOrObserver, error, completed) {\n        if (this._deleted) {\n          return () => {};\n        }\n        var cb = typeof nextOrObserver === 'function' ? nextOrObserver : nextOrObserver.next.bind(nextOrObserver);\n        var isUnsubscribed = false;\n        var promise = this._isInitialized ? Promise.resolve() : this._initializationPromise;\n        _assert(promise, this, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        // The callback needs to be called asynchronously per the spec.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        promise.then(() => {\n          if (isUnsubscribed) {\n            return;\n          }\n          cb(this.currentUser);\n        });\n        if (typeof nextOrObserver === 'function') {\n          var unsubscribe = subscription.addObserver(nextOrObserver, error, completed);\n          return () => {\n            isUnsubscribed = true;\n            unsubscribe();\n          };\n        } else {\n          var _unsubscribe = subscription.addObserver(nextOrObserver);\n          return () => {\n            isUnsubscribed = true;\n            _unsubscribe();\n          };\n        }\n      }\n      /**\n       * Unprotected (from race conditions) method to set the current user. This\n       * should only be called from within a queued callback. This is necessary\n       * because the queue shouldn't rely on another queued callback.\n       */\n    }, {\n      key: \"directlySetCurrentUser\",\n      value: (function () {\n        var _directlySetCurrentUser = _asyncToGenerator(function* (user) {\n          if (this.currentUser && this.currentUser !== user) {\n            this._currentUser._stopProactiveRefresh();\n          }\n          if (user && this.isProactiveRefreshEnabled) {\n            user._startProactiveRefresh();\n          }\n          this.currentUser = user;\n          if (user) {\n            yield this.assertedPersistence.setCurrentUser(user);\n          } else {\n            yield this.assertedPersistence.removeCurrentUser();\n          }\n        });\n        function directlySetCurrentUser(_x66) {\n          return _directlySetCurrentUser.apply(this, arguments);\n        }\n        return directlySetCurrentUser;\n      }())\n    }, {\n      key: \"queue\",\n      value: function queue(action) {\n        // In case something errors, the callback still should be called in order\n        // to keep the promise chain alive\n        this.operations = this.operations.then(action, action);\n        return this.operations;\n      }\n    }, {\n      key: \"assertedPersistence\",\n      get: function () {\n        _assert(this.persistenceManager, this, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        return this.persistenceManager;\n      }\n    }, {\n      key: \"_logFramework\",\n      value: function _logFramework(framework) {\n        if (!framework || this.frameworks.includes(framework)) {\n          return;\n        }\n        this.frameworks.push(framework);\n        // Sort alphabetically so that \"FirebaseCore-web,FirebaseUI-web\" and\n        // \"FirebaseUI-web,FirebaseCore-web\" aren't viewed as different.\n        this.frameworks.sort();\n        this.clientVersion = _getClientVersion(this.config.clientPlatform, this._getFrameworks());\n      }\n    }, {\n      key: \"_getFrameworks\",\n      value: function _getFrameworks() {\n        return this.frameworks;\n      }\n    }, {\n      key: \"_getAdditionalHeaders\",\n      value: function () {\n        var _getAdditionalHeaders2 = _asyncToGenerator(function* () {\n          // Additional headers on every request\n          var headers = {\n            [\"X-Client-Version\" /* HttpHeader.X_CLIENT_VERSION */]: this.clientVersion\n          };\n          if (this.app.options.appId) {\n            headers[\"X-Firebase-gmpid\" /* HttpHeader.X_FIREBASE_GMPID */] = this.app.options.appId;\n          }\n          // If the heartbeat service exists, add the heartbeat string\n          var heartbeatsHeader = yield this.heartbeatServiceProvider.getImmediate({\n            optional: true\n          })?.getHeartbeatsHeader();\n          if (heartbeatsHeader) {\n            headers[\"X-Firebase-Client\" /* HttpHeader.X_FIREBASE_CLIENT */] = heartbeatsHeader;\n          }\n          // If the App Check service exists, add the App Check token in the headers\n          var appCheckToken = yield this._getAppCheckToken();\n          if (appCheckToken) {\n            headers[\"X-Firebase-AppCheck\" /* HttpHeader.X_FIREBASE_APP_CHECK */] = appCheckToken;\n          }\n          return headers;\n        });\n        function _getAdditionalHeaders() {\n          return _getAdditionalHeaders2.apply(this, arguments);\n        }\n        return _getAdditionalHeaders;\n      }()\n    }, {\n      key: \"_getAppCheckToken\",\n      value: function () {\n        var _getAppCheckToken2 = _asyncToGenerator(function* () {\n          if (app._isFirebaseServerApp(this.app) && this.app.settings.appCheckToken) {\n            return this.app.settings.appCheckToken;\n          }\n          var appCheckTokenResult = yield this.appCheckServiceProvider.getImmediate({\n            optional: true\n          })?.getToken();\n          if (appCheckTokenResult?.error) {\n            // Context: appCheck.getToken() will never throw even if an error happened.\n            // In the error case, a dummy token will be returned along with an error field describing\n            // the error. In general, we shouldn't care about the error condition and just use\n            // the token (actual or dummy) to send requests.\n            _logWarn(`Error while retrieving App Check token: ${appCheckTokenResult.error}`);\n          }\n          return appCheckTokenResult?.token;\n        });\n        function _getAppCheckToken() {\n          return _getAppCheckToken2.apply(this, arguments);\n        }\n        return _getAppCheckToken;\n      }()\n    }]);\n  }();\n  /**\n   * Method to be used to cast down to our private implementation of Auth.\n   * It will also handle unwrapping from the compat type if necessary\n   *\n   * @param auth Auth object passed in from developer\n   */\n  function _castAuth(auth) {\n    return util.getModularInstance(auth);\n  }\n  /** Helper class to wrap subscriber logic */\n  var Subscription = /*#__PURE__*/function () {\n    function Subscription(auth) {\n      _classCallCheck(this, Subscription);\n      this.auth = auth;\n      this.observer = null;\n      this.addObserver = util.createSubscribe(observer => this.observer = observer);\n    }\n    return _createClass(Subscription, [{\n      key: \"next\",\n      get: function () {\n        _assert(this.observer, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        return this.observer.next.bind(this.observer);\n      }\n    }]);\n  }();\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  var externalJSProvider = {\n    loadJS() {\n      return _asyncToGenerator(function* () {\n        throw new Error('Unable to load external scripts');\n      })();\n    },\n    recaptchaV2Script: '',\n    recaptchaEnterpriseScript: '',\n    gapiScript: ''\n  };\n  function _setExternalJSProvider(p) {\n    externalJSProvider = p;\n  }\n  function _loadJS(url) {\n    return externalJSProvider.loadJS(url);\n  }\n  function _recaptchaV2ScriptUrl() {\n    return externalJSProvider.recaptchaV2Script;\n  }\n  function _recaptchaEnterpriseScriptUrl() {\n    return externalJSProvider.recaptchaEnterpriseScript;\n  }\n  function _gapiScriptUrl() {\n    return externalJSProvider.gapiScript;\n  }\n  function _generateCallbackName(prefix) {\n    return `__${prefix}${Math.floor(Math.random() * 1000000)}`;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  var _SOLVE_TIME_MS = 500;\n  var _EXPIRATION_TIME_MS = 60000;\n  var _WIDGET_ID_START = 1000000000000;\n  var MockReCaptcha = /*#__PURE__*/function () {\n    function MockReCaptcha(auth) {\n      _classCallCheck(this, MockReCaptcha);\n      this.auth = auth;\n      this.counter = _WIDGET_ID_START;\n      this._widgets = new Map();\n    }\n    return _createClass(MockReCaptcha, [{\n      key: \"render\",\n      value: function render(container, parameters) {\n        var id = this.counter;\n        this._widgets.set(id, new MockWidget(container, this.auth.name, parameters || {}));\n        this.counter++;\n        return id;\n      }\n    }, {\n      key: \"reset\",\n      value: function reset(optWidgetId) {\n        var id = optWidgetId || _WIDGET_ID_START;\n        void this._widgets.get(id)?.delete();\n        this._widgets.delete(id);\n      }\n    }, {\n      key: \"getResponse\",\n      value: function getResponse(optWidgetId) {\n        var id = optWidgetId || _WIDGET_ID_START;\n        return this._widgets.get(id)?.getResponse() || '';\n      }\n    }, {\n      key: \"execute\",\n      value: function () {\n        var _execute = _asyncToGenerator(function* (optWidgetId) {\n          var id = optWidgetId || _WIDGET_ID_START;\n          void this._widgets.get(id)?.execute();\n          return '';\n        });\n        function execute(_x67) {\n          return _execute.apply(this, arguments);\n        }\n        return execute;\n      }()\n    }]);\n  }();\n  var MockGreCAPTCHATopLevel = /*#__PURE__*/function () {\n    function MockGreCAPTCHATopLevel() {\n      _classCallCheck(this, MockGreCAPTCHATopLevel);\n      this.enterprise = new MockGreCAPTCHA();\n    }\n    return _createClass(MockGreCAPTCHATopLevel, [{\n      key: \"ready\",\n      value: function ready(callback) {\n        callback();\n      }\n    }, {\n      key: \"execute\",\n      value: function execute(\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      _siteKey, _options) {\n        return Promise.resolve('token');\n      }\n    }, {\n      key: \"render\",\n      value: function render(\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      _container, _parameters) {\n        return '';\n      }\n    }]);\n  }();\n  var MockGreCAPTCHA = /*#__PURE__*/function () {\n    function MockGreCAPTCHA() {\n      _classCallCheck(this, MockGreCAPTCHA);\n    }\n    return _createClass(MockGreCAPTCHA, [{\n      key: \"ready\",\n      value: function ready(callback) {\n        callback();\n      }\n    }, {\n      key: \"execute\",\n      value: function execute(\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      _siteKey, _options) {\n        return Promise.resolve('token');\n      }\n    }, {\n      key: \"render\",\n      value: function render(\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      _container, _parameters) {\n        return '';\n      }\n    }]);\n  }();\n  var MockWidget = /*#__PURE__*/function () {\n    function MockWidget(containerOrId, appName, params) {\n      _classCallCheck(this, MockWidget);\n      this.params = params;\n      this.timerId = null;\n      this.deleted = false;\n      this.responseToken = null;\n      this.clickHandler = () => {\n        this.execute();\n      };\n      var container = typeof containerOrId === 'string' ? document.getElementById(containerOrId) : containerOrId;\n      _assert(container, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */, {\n        appName\n      });\n      this.container = container;\n      this.isVisible = this.params.size !== 'invisible';\n      if (this.isVisible) {\n        this.execute();\n      } else {\n        this.container.addEventListener('click', this.clickHandler);\n      }\n    }\n    return _createClass(MockWidget, [{\n      key: \"getResponse\",\n      value: function getResponse() {\n        this.checkIfDeleted();\n        return this.responseToken;\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete() {\n        this.checkIfDeleted();\n        this.deleted = true;\n        if (this.timerId) {\n          clearTimeout(this.timerId);\n          this.timerId = null;\n        }\n        this.container.removeEventListener('click', this.clickHandler);\n      }\n    }, {\n      key: \"execute\",\n      value: function execute() {\n        this.checkIfDeleted();\n        if (this.timerId) {\n          return;\n        }\n        this.timerId = window.setTimeout(() => {\n          this.responseToken = generateRandomAlphaNumericString(50);\n          var _this$params = this.params,\n            callback = _this$params.callback,\n            expiredCallback = _this$params['expired-callback'];\n          if (callback) {\n            try {\n              callback(this.responseToken);\n            } catch (e) {}\n          }\n          this.timerId = window.setTimeout(() => {\n            this.timerId = null;\n            this.responseToken = null;\n            if (expiredCallback) {\n              try {\n                expiredCallback();\n              } catch (e) {}\n            }\n            if (this.isVisible) {\n              this.execute();\n            }\n          }, _EXPIRATION_TIME_MS);\n        }, _SOLVE_TIME_MS);\n      }\n    }, {\n      key: \"checkIfDeleted\",\n      value: function checkIfDeleted() {\n        if (this.deleted) {\n          throw new Error('reCAPTCHA mock was already deleted!');\n        }\n      }\n    }]);\n  }();\n  function generateRandomAlphaNumericString(len) {\n    var chars = [];\n    var allowedChars = '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    for (var i = 0; i < len; i++) {\n      chars.push(allowedChars.charAt(Math.floor(Math.random() * allowedChars.length)));\n    }\n    return chars.join('');\n  }\n\n  /* eslint-disable @typescript-eslint/no-require-imports */\n  var RECAPTCHA_ENTERPRISE_VERIFIER_TYPE = 'recaptcha-enterprise';\n  var FAKE_TOKEN = 'NO_RECAPTCHA';\n  var RecaptchaEnterpriseVerifier = /*#__PURE__*/function () {\n    /**\n     *\n     * @param authExtern - The corresponding Firebase {@link Auth} instance.\n     *\n     */\n    function RecaptchaEnterpriseVerifier(authExtern) {\n      _classCallCheck(this, RecaptchaEnterpriseVerifier);\n      /**\n       * Identifies the type of application verifier (e.g. \"recaptcha-enterprise\").\n       */\n      this.type = RECAPTCHA_ENTERPRISE_VERIFIER_TYPE;\n      this.auth = _castAuth(authExtern);\n    }\n    /**\n     * Executes the verification process.\n     *\n     * @returns A Promise for a token that can be used to assert the validity of a request.\n     */\n    return _createClass(RecaptchaEnterpriseVerifier, [{\n      key: \"verify\",\n      value: (function () {\n        var _verify = _asyncToGenerator(function* () {\n          var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'verify';\n          var forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n          function retrieveSiteKey(_x68) {\n            return _retrieveSiteKey.apply(this, arguments);\n          }\n          function _retrieveSiteKey() {\n            _retrieveSiteKey = _asyncToGenerator(function* (auth) {\n              if (!forceRefresh) {\n                if (auth.tenantId == null && auth._agentRecaptchaConfig != null) {\n                  return auth._agentRecaptchaConfig.siteKey;\n                }\n                if (auth.tenantId != null && auth._tenantRecaptchaConfigs[auth.tenantId] !== undefined) {\n                  return auth._tenantRecaptchaConfigs[auth.tenantId].siteKey;\n                }\n              }\n              return new Promise(/*#__PURE__*/function () {\n                var _ref10 = _asyncToGenerator(function* (resolve, reject) {\n                  getRecaptchaConfig(auth, {\n                    clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\n                    version: \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n                  }).then(response => {\n                    if (response.recaptchaKey === undefined) {\n                      reject(new Error('recaptcha Enterprise site key undefined'));\n                    } else {\n                      var config = new RecaptchaConfig(response);\n                      if (auth.tenantId == null) {\n                        auth._agentRecaptchaConfig = config;\n                      } else {\n                        auth._tenantRecaptchaConfigs[auth.tenantId] = config;\n                      }\n                      return resolve(config.siteKey);\n                    }\n                  }).catch(error => {\n                    reject(error);\n                  });\n                });\n                return function (_x69, _x70) {\n                  return _ref10.apply(this, arguments);\n                };\n              }());\n            });\n            return _retrieveSiteKey.apply(this, arguments);\n          }\n          function retrieveRecaptchaToken(siteKey, resolve, reject) {\n            var grecaptcha = window.grecaptcha;\n            if (isEnterprise(grecaptcha)) {\n              grecaptcha.enterprise.ready(() => {\n                grecaptcha.enterprise.execute(siteKey, {\n                  action\n                }).then(token => {\n                  resolve(token);\n                }).catch(() => {\n                  resolve(FAKE_TOKEN);\n                });\n              });\n            } else {\n              reject(Error('No reCAPTCHA enterprise script loaded.'));\n            }\n          }\n          // Returns Promise for a mock token when appVerificationDisabledForTesting is true.\n          if (this.auth.settings.appVerificationDisabledForTesting) {\n            var mockRecaptcha = new MockGreCAPTCHATopLevel();\n            return mockRecaptcha.execute('siteKey', {\n              action: 'verify'\n            });\n          }\n          return new Promise((resolve, reject) => {\n            retrieveSiteKey(this.auth).then(siteKey => {\n              if (!forceRefresh && isEnterprise(window.grecaptcha)) {\n                retrieveRecaptchaToken(siteKey, resolve, reject);\n              } else {\n                if (typeof window === 'undefined') {\n                  reject(new Error('RecaptchaVerifier is only supported in browser'));\n                  return;\n                }\n                var url = _recaptchaEnterpriseScriptUrl();\n                if (url.length !== 0) {\n                  url += siteKey;\n                }\n                _loadJS(url).then(() => {\n                  retrieveRecaptchaToken(siteKey, resolve, reject);\n                }).catch(error => {\n                  reject(error);\n                });\n              }\n            }).catch(error => {\n              reject(error);\n            });\n          });\n        });\n        function verify() {\n          return _verify.apply(this, arguments);\n        }\n        return verify;\n      }())\n    }]);\n  }();\n  function injectRecaptchaFields(_x71, _x72, _x73) {\n    return _injectRecaptchaFields.apply(this, arguments);\n  }\n  function _injectRecaptchaFields() {\n    _injectRecaptchaFields = _asyncToGenerator(function* (auth, request, action) {\n      var isCaptchaResp = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var isFakeToken = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var verifier = new RecaptchaEnterpriseVerifier(auth);\n      var captchaResponse;\n      if (isFakeToken) {\n        captchaResponse = FAKE_TOKEN;\n      } else {\n        try {\n          captchaResponse = yield verifier.verify(action);\n        } catch (error) {\n          captchaResponse = yield verifier.verify(action, true);\n        }\n      }\n      var newRequest = {\n        ...request\n      };\n      if (action === \"mfaSmsEnrollment\" /* RecaptchaActionName.MFA_SMS_ENROLLMENT */ || action === \"mfaSmsSignIn\" /* RecaptchaActionName.MFA_SMS_SIGNIN */) {\n        if ('phoneEnrollmentInfo' in newRequest) {\n          var phoneNumber = newRequest.phoneEnrollmentInfo.phoneNumber;\n          var recaptchaToken = newRequest.phoneEnrollmentInfo.recaptchaToken;\n          Object.assign(newRequest, {\n            'phoneEnrollmentInfo': {\n              phoneNumber,\n              recaptchaToken,\n              captchaResponse,\n              'clientType': \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\n              'recaptchaVersion': \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n            }\n          });\n        } else if ('phoneSignInInfo' in newRequest) {\n          var _recaptchaToken = newRequest.phoneSignInInfo.recaptchaToken;\n          Object.assign(newRequest, {\n            'phoneSignInInfo': {\n              recaptchaToken: _recaptchaToken,\n              captchaResponse,\n              'clientType': \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\n              'recaptchaVersion': \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n            }\n          });\n        }\n        return newRequest;\n      }\n      if (!isCaptchaResp) {\n        Object.assign(newRequest, {\n          captchaResponse\n        });\n      } else {\n        Object.assign(newRequest, {\n          'captchaResp': captchaResponse\n        });\n      }\n      Object.assign(newRequest, {\n        'clientType': \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n      });\n      Object.assign(newRequest, {\n        'recaptchaVersion': \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n      });\n      return newRequest;\n    });\n    return _injectRecaptchaFields.apply(this, arguments);\n  }\n  function handleRecaptchaFlow(_x74, _x75, _x76, _x77, _x78) {\n    return _handleRecaptchaFlow.apply(this, arguments);\n  }\n  function _handleRecaptchaFlow() {\n    _handleRecaptchaFlow = _asyncToGenerator(function* (authInstance, request, actionName, actionMethod, recaptchaAuthProvider) {\n      if (recaptchaAuthProvider === \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */) {\n        if (authInstance._getRecaptchaConfig()?.isProviderEnabled(\"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */)) {\n          var requestWithRecaptcha = yield injectRecaptchaFields(authInstance, request, actionName, actionName === \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */);\n          return actionMethod(authInstance, requestWithRecaptcha);\n        } else {\n          return actionMethod(authInstance, request).catch(/*#__PURE__*/function () {\n            var _ref26 = _asyncToGenerator(function* (error) {\n              if (error.code === `auth/${\"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */}`) {\n                console.log(`${actionName} is protected by reCAPTCHA Enterprise for this project. Automatically triggering the reCAPTCHA flow and restarting the flow.`);\n                var _requestWithRecaptcha = yield injectRecaptchaFields(authInstance, request, actionName, actionName === \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */);\n                return actionMethod(authInstance, _requestWithRecaptcha);\n              } else {\n                return Promise.reject(error);\n              }\n            });\n            return function (_x219) {\n              return _ref26.apply(this, arguments);\n            };\n          }());\n        }\n      } else if (recaptchaAuthProvider === \"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */) {\n        if (authInstance._getRecaptchaConfig()?.isProviderEnabled(\"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */)) {\n          var _requestWithRecaptcha2 = yield injectRecaptchaFields(authInstance, request, actionName);\n          return actionMethod(authInstance, _requestWithRecaptcha2).catch(/*#__PURE__*/function () {\n            var _ref27 = _asyncToGenerator(function* (error) {\n              if (authInstance._getRecaptchaConfig()?.getProviderEnforcementState(\"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */) === \"AUDIT\" /* EnforcementState.AUDIT */) {\n                // AUDIT mode\n                if (error.code === `auth/${\"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */}` || error.code === `auth/${\"invalid-app-credential\" /* AuthErrorCode.INVALID_APP_CREDENTIAL */}`) {\n                  console.log(`Failed to verify with reCAPTCHA Enterprise. Automatically triggering the reCAPTCHA v2 flow to complete the ${actionName} flow.`);\n                  // reCAPTCHA Enterprise token is missing or reCAPTCHA Enterprise token\n                  // check fails.\n                  // Fallback to reCAPTCHA v2 flow.\n                  var requestWithRecaptchaFields = yield injectRecaptchaFields(authInstance, request, actionName, false,\n                  // isCaptchaResp\n                  true // isFakeToken\n                  );\n                  // This will call the PhoneApiCaller to fetch and inject reCAPTCHA v2 token.\n                  return actionMethod(authInstance, requestWithRecaptchaFields);\n                }\n              }\n              // ENFORCE mode or AUDIT mode with any other error.\n              return Promise.reject(error);\n            });\n            return function (_x220) {\n              return _ref27.apply(this, arguments);\n            };\n          }());\n        } else {\n          // Do reCAPTCHA v2 flow.\n          var requestWithRecaptchaFields = yield injectRecaptchaFields(authInstance, request, actionName, false,\n          // isCaptchaResp\n          true // isFakeToken\n          );\n          // This will call the PhoneApiCaller to fetch and inject v2 token.\n          return actionMethod(authInstance, requestWithRecaptchaFields);\n        }\n      } else {\n        return Promise.reject(recaptchaAuthProvider + ' provider is not supported.');\n      }\n    });\n    return _handleRecaptchaFlow.apply(this, arguments);\n  }\n  function _initializeRecaptchaConfig(_x79) {\n    return _initializeRecaptchaConfig2.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Initializes an {@link Auth} instance with fine-grained control over\n   * {@link Dependencies}.\n   *\n   * @remarks\n   *\n   * This function allows more control over the {@link Auth} instance than\n   * {@link getAuth}. `getAuth` uses platform-specific defaults to supply\n   * the {@link Dependencies}. In general, `getAuth` is the easiest way to\n   * initialize Auth and works for most use cases. Use `initializeAuth` if you\n   * need control over which persistence layer is used, or to minimize bundle\n   * size if you're not using either `signInWithPopup` or `signInWithRedirect`.\n   *\n   * For example, if your app only uses anonymous accounts and you only want\n   * accounts saved for the current session, initialize `Auth` with:\n   *\n   * ```js\n   * const auth = initializeAuth(app, {\n   *   persistence: browserSessionPersistence,\n   *   popupRedirectResolver: undefined,\n   * });\n   * ```\n   *\n   * @public\n   */\n  function _initializeRecaptchaConfig2() {\n    _initializeRecaptchaConfig2 = _asyncToGenerator(function* (auth) {\n      var authInternal = _castAuth(auth);\n      var response = yield getRecaptchaConfig(authInternal, {\n        clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\n        version: \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n      });\n      var config = new RecaptchaConfig(response);\n      if (authInternal.tenantId == null) {\n        authInternal._agentRecaptchaConfig = config;\n      } else {\n        authInternal._tenantRecaptchaConfigs[authInternal.tenantId] = config;\n      }\n      if (config.isAnyProviderEnabled()) {\n        var verifier = new RecaptchaEnterpriseVerifier(authInternal);\n        void verifier.verify();\n      }\n    });\n    return _initializeRecaptchaConfig2.apply(this, arguments);\n  }\n  function initializeAuth(app$1, deps) {\n    var provider = app._getProvider(app$1, 'auth');\n    if (provider.isInitialized()) {\n      var _auth2 = provider.getImmediate();\n      var initialOptions = provider.getOptions();\n      if (util.deepEqual(initialOptions, deps ?? {})) {\n        return _auth2;\n      } else {\n        _fail(_auth2, \"already-initialized\" /* AuthErrorCode.ALREADY_INITIALIZED */);\n      }\n    }\n    var auth = provider.initialize({\n      options: deps\n    });\n    return auth;\n  }\n  function _initializeAuthInstance(auth, deps) {\n    var persistence = deps?.persistence || [];\n    var hierarchy = (Array.isArray(persistence) ? persistence : [persistence]).map(_getInstance);\n    if (deps?.errorMap) {\n      auth._updateErrorMap(deps.errorMap);\n    }\n    // This promise is intended to float; auth initialization happens in the\n    // background, meanwhile the auth object may be used by the app.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    auth._initializeWithPersistence(hierarchy, deps?.popupRedirectResolver);\n  }\n\n  /**\n   * Changes the {@link Auth} instance to communicate with the Firebase Auth Emulator, instead of production\n   * Firebase Auth services.\n   *\n   * @remarks\n   * This must be called synchronously immediately following the first call to\n   * {@link initializeAuth}.  Do not use with production credentials as emulator\n   * traffic is not encrypted.\n   *\n   *\n   * @example\n   * ```javascript\n   * connectAuthEmulator(auth, 'http://127.0.0.1:9099', { disableWarnings: true });\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param url - The URL at which the emulator is running (eg, 'http://localhost:9099').\n   * @param options - Optional. `options.disableWarnings` defaults to `false`. Set it to\n   * `true` to disable the warning banner attached to the DOM.\n   *\n   * @public\n   */\n  function connectAuthEmulator(auth, url, options) {\n    var authInternal = _castAuth(auth);\n    _assert(/^https?:\\/\\//.test(url), authInternal, \"invalid-emulator-scheme\" /* AuthErrorCode.INVALID_EMULATOR_SCHEME */);\n    var disableWarnings = !!options?.disableWarnings;\n    var protocol = extractProtocol(url);\n    var _extractHostAndPort = extractHostAndPort(url),\n      host = _extractHostAndPort.host,\n      port = _extractHostAndPort.port;\n    var portStr = port === null ? '' : `:${port}`;\n    // Always replace path with \"/\" (even if input url had no path at all, or had a different one).\n    var emulator = {\n      url: `${protocol}//${host}${portStr}/`\n    };\n    var emulatorConfig = Object.freeze({\n      host,\n      port,\n      protocol: protocol.replace(':', ''),\n      options: Object.freeze({\n        disableWarnings\n      })\n    });\n    // There are a few scenarios to guard against if the Auth instance has already started:\n    if (!authInternal._canInitEmulator) {\n      // Applications may not initialize the emulator for the first time if Auth has already started\n      // to make network requests.\n      _assert(authInternal.config.emulator && authInternal.emulatorConfig, authInternal, \"emulator-config-failed\" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */);\n      // Applications may not alter the configuration of the emulator (aka pass a different config)\n      // once Auth has started to make network requests.\n      _assert(util.deepEqual(emulator, authInternal.config.emulator) && util.deepEqual(emulatorConfig, authInternal.emulatorConfig), authInternal, \"emulator-config-failed\" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */);\n      // It's valid, however, to invoke connectAuthEmulator() after Auth has started making\n      // connections, so long as the config matches the existing config. This results in a no-op.\n      return;\n    }\n    authInternal.config.emulator = emulator;\n    authInternal.emulatorConfig = emulatorConfig;\n    authInternal.settings.appVerificationDisabledForTesting = true;\n    // Workaround to get cookies in Firebase Studio\n    if (util.isCloudWorkstation(host)) {\n      void util.pingServer(`${protocol}//${host}${portStr}`);\n      util.updateEmulatorBanner('Auth', true);\n    } else if (!disableWarnings) {\n      emitEmulatorWarning();\n    }\n  }\n  function extractProtocol(url) {\n    var protocolEnd = url.indexOf(':');\n    return protocolEnd < 0 ? '' : url.substr(0, protocolEnd + 1);\n  }\n  function extractHostAndPort(url) {\n    var protocol = extractProtocol(url);\n    var authority = /(\\/\\/)?([^?#/]+)/.exec(url.substr(protocol.length)); // Between // and /, ? or #.\n    if (!authority) {\n      return {\n        host: '',\n        port: null\n      };\n    }\n    var hostAndPort = authority[2].split('@').pop() || ''; // Strip out \"username:password@\".\n    var bracketedIPv6 = /^(\\[[^\\]]+\\])(:|$)/.exec(hostAndPort);\n    if (bracketedIPv6) {\n      var host = bracketedIPv6[1];\n      return {\n        host,\n        port: parsePort(hostAndPort.substr(host.length + 1))\n      };\n    } else {\n      var _hostAndPort$split = hostAndPort.split(':'),\n        _hostAndPort$split2 = _slicedToArray(_hostAndPort$split, 2),\n        _host = _hostAndPort$split2[0],\n        port = _hostAndPort$split2[1];\n      return {\n        host: _host,\n        port: parsePort(port)\n      };\n    }\n  }\n  function parsePort(portStr) {\n    if (!portStr) {\n      return null;\n    }\n    var port = Number(portStr);\n    if (isNaN(port)) {\n      return null;\n    }\n    return port;\n  }\n  function emitEmulatorWarning() {\n    function attachBanner() {\n      var el = document.createElement('p');\n      var sty = el.style;\n      el.innerText = 'Running in emulator mode. Do not use with production credentials.';\n      sty.position = 'fixed';\n      sty.width = '100%';\n      sty.backgroundColor = '#ffffff';\n      sty.border = '.1em solid #000000';\n      sty.color = '#b50000';\n      sty.bottom = '0px';\n      sty.left = '0px';\n      sty.margin = '0px';\n      sty.zIndex = '10000';\n      sty.textAlign = 'center';\n      el.classList.add('firebase-emulator-warning');\n      document.body.appendChild(el);\n    }\n    if (typeof console !== 'undefined' && typeof console.info === 'function') {\n      console.info('WARNING: You are using the Auth Emulator,' + ' which is intended for local testing only.  Do not use with' + ' production credentials.');\n    }\n    if (typeof window !== 'undefined' && typeof document !== 'undefined') {\n      if (document.readyState === 'loading') {\n        window.addEventListener('DOMContentLoaded', attachBanner);\n      } else {\n        attachBanner();\n      }\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Interface that represents the credentials returned by an {@link AuthProvider}.\n   *\n   * @remarks\n   * Implementations specify the details about each auth provider's credential requirements.\n   *\n   * @public\n   */\n  var AuthCredential = /*#__PURE__*/function () {\n    /** @internal */\n    function AuthCredential(\n    /**\n     * The authentication provider ID for the credential.\n     *\n     * @remarks\n     * For example, 'facebook.com', or 'google.com'.\n     */\n    providerId,\n    /**\n     * The authentication sign in method for the credential.\n     *\n     * @remarks\n     * For example, {@link SignInMethod}.EMAIL_PASSWORD, or\n     * {@link SignInMethod}.EMAIL_LINK. This corresponds to the sign-in method\n     * identifier as returned in {@link fetchSignInMethodsForEmail}.\n     */\n    signInMethod) {\n      _classCallCheck(this, AuthCredential);\n      this.providerId = providerId;\n      this.signInMethod = signInMethod;\n    }\n    /**\n     * Returns a JSON-serializable representation of this object.\n     *\n     * @returns a JSON-serializable representation of this object.\n     */\n    return _createClass(AuthCredential, [{\n      key: \"toJSON\",\n      value: function toJSON() {\n        return debugFail('not implemented');\n      }\n      /** @internal */\n    }, {\n      key: \"_getIdTokenResponse\",\n      value: function _getIdTokenResponse(_auth) {\n        return debugFail('not implemented');\n      }\n      /** @internal */\n    }, {\n      key: \"_linkToIdToken\",\n      value: function _linkToIdToken(_auth, _idToken) {\n        return debugFail('not implemented');\n      }\n      /** @internal */\n    }, {\n      key: \"_getReauthenticationResolver\",\n      value: function _getReauthenticationResolver(_auth) {\n        return debugFail('not implemented');\n      }\n    }]);\n  }();\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function resetPassword(_x80, _x81) {\n    return _resetPassword.apply(this, arguments);\n  }\n  function _resetPassword() {\n    _resetPassword = _asyncToGenerator(function* (auth, request) {\n      return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:resetPassword\" /* Endpoint.RESET_PASSWORD */, _addTidIfNecessary(auth, request));\n    });\n    return _resetPassword.apply(this, arguments);\n  }\n  function updateEmailPassword(_x82, _x83) {\n    return _updateEmailPassword.apply(this, arguments);\n  } // Used for linking an email/password account to an existing idToken. Uses the same request/response\n  // format as updateEmailPassword.\n  function _updateEmailPassword() {\n    _updateEmailPassword = _asyncToGenerator(function* (auth, request) {\n      return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request);\n    });\n    return _updateEmailPassword.apply(this, arguments);\n  }\n  function linkEmailPassword(_x84, _x85) {\n    return _linkEmailPassword.apply(this, arguments);\n  }\n  function _linkEmailPassword() {\n    _linkEmailPassword = _asyncToGenerator(function* (auth, request) {\n      return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signUp\" /* Endpoint.SIGN_UP */, request);\n    });\n    return _linkEmailPassword.apply(this, arguments);\n  }\n  function applyActionCode$1(_x86, _x87) {\n    return _applyActionCode$.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _applyActionCode$() {\n    _applyActionCode$ = _asyncToGenerator(function* (auth, request) {\n      return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, _addTidIfNecessary(auth, request));\n    });\n    return _applyActionCode$.apply(this, arguments);\n  }\n  function signInWithPassword(_x88, _x89) {\n    return _signInWithPassword.apply(this, arguments);\n  }\n  function _signInWithPassword() {\n    _signInWithPassword = _asyncToGenerator(function* (auth, request) {\n      return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPassword\" /* Endpoint.SIGN_IN_WITH_PASSWORD */, _addTidIfNecessary(auth, request));\n    });\n    return _signInWithPassword.apply(this, arguments);\n  }\n  function sendOobCode(_x90, _x91) {\n    return _sendOobCode.apply(this, arguments);\n  }\n  function _sendOobCode() {\n    _sendOobCode = _asyncToGenerator(function* (auth, request) {\n      return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:sendOobCode\" /* Endpoint.SEND_OOB_CODE */, _addTidIfNecessary(auth, request));\n    });\n    return _sendOobCode.apply(this, arguments);\n  }\n  function sendEmailVerification$1(_x92, _x93) {\n    return _sendEmailVerification$.apply(this, arguments);\n  }\n  function _sendEmailVerification$() {\n    _sendEmailVerification$ = _asyncToGenerator(function* (auth, request) {\n      return sendOobCode(auth, request);\n    });\n    return _sendEmailVerification$.apply(this, arguments);\n  }\n  function sendPasswordResetEmail$1(_x94, _x95) {\n    return _sendPasswordResetEmail$.apply(this, arguments);\n  }\n  function _sendPasswordResetEmail$() {\n    _sendPasswordResetEmail$ = _asyncToGenerator(function* (auth, request) {\n      return sendOobCode(auth, request);\n    });\n    return _sendPasswordResetEmail$.apply(this, arguments);\n  }\n  function sendSignInLinkToEmail$1(_x96, _x97) {\n    return _sendSignInLinkToEmail$.apply(this, arguments);\n  }\n  function _sendSignInLinkToEmail$() {\n    _sendSignInLinkToEmail$ = _asyncToGenerator(function* (auth, request) {\n      return sendOobCode(auth, request);\n    });\n    return _sendSignInLinkToEmail$.apply(this, arguments);\n  }\n  function verifyAndChangeEmail(_x98, _x99) {\n    return _verifyAndChangeEmail.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _verifyAndChangeEmail() {\n    _verifyAndChangeEmail = _asyncToGenerator(function* (auth, request) {\n      return sendOobCode(auth, request);\n    });\n    return _verifyAndChangeEmail.apply(this, arguments);\n  }\n  function signInWithEmailLink$1(_x100, _x101) {\n    return _signInWithEmailLink$.apply(this, arguments);\n  }\n  function _signInWithEmailLink$() {\n    _signInWithEmailLink$ = _asyncToGenerator(function* (auth, request) {\n      return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithEmailLink\" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, _addTidIfNecessary(auth, request));\n    });\n    return _signInWithEmailLink$.apply(this, arguments);\n  }\n  function signInWithEmailLinkForLinking(_x102, _x103) {\n    return _signInWithEmailLinkForLinking.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Interface that represents the credentials returned by {@link EmailAuthProvider} for\n   * {@link ProviderId}.PASSWORD\n   *\n   * @remarks\n   * Covers both {@link SignInMethod}.EMAIL_PASSWORD and\n   * {@link SignInMethod}.EMAIL_LINK.\n   *\n   * @public\n   */\n  function _signInWithEmailLinkForLinking() {\n    _signInWithEmailLinkForLinking = _asyncToGenerator(function* (auth, request) {\n      return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithEmailLink\" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, _addTidIfNecessary(auth, request));\n    });\n    return _signInWithEmailLinkForLinking.apply(this, arguments);\n  }\n  var EmailAuthCredential = /*#__PURE__*/function (_AuthCredential) {\n    /** @internal */\n    function EmailAuthCredential(/** @internal */\n    _email, /** @internal */\n    _password, signInMethod) {\n      var _this6;\n      var _tenantId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      _classCallCheck(this, EmailAuthCredential);\n      _this6 = _callSuper(this, EmailAuthCredential, [\"password\" /* ProviderId.PASSWORD */, signInMethod]);\n      _this6._email = _email;\n      _this6._password = _password;\n      _this6._tenantId = _tenantId;\n      return _this6;\n    }\n    /** @internal */\n    _inherits(EmailAuthCredential, _AuthCredential);\n    return _createClass(EmailAuthCredential, [{\n      key: \"toJSON\",\n      value: /** {@inheritdoc AuthCredential.toJSON} */\n      function toJSON() {\n        return {\n          email: this._email,\n          password: this._password,\n          signInMethod: this.signInMethod,\n          tenantId: this._tenantId\n        };\n      }\n      /**\n       * Static method to deserialize a JSON representation of an object into an {@link  AuthCredential}.\n       *\n       * @param json - Either `object` or the stringified representation of the object. When string is\n       * provided, `JSON.parse` would be called first.\n       *\n       * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.\n       */\n    }, {\n      key: \"_getIdTokenResponse\",\n      value: (/** @internal */function () {\n        var _getIdTokenResponse2 = _asyncToGenerator(function* (auth) {\n          switch (this.signInMethod) {\n            case \"password\" /* SignInMethod.EMAIL_PASSWORD */:\n              var request = {\n                returnSecureToken: true,\n                email: this._email,\n                password: this._password,\n                clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n              };\n              return handleRecaptchaFlow(auth, request, \"signInWithPassword\" /* RecaptchaActionName.SIGN_IN_WITH_PASSWORD */, signInWithPassword, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n            case \"emailLink\" /* SignInMethod.EMAIL_LINK */:\n              return signInWithEmailLink$1(auth, {\n                email: this._email,\n                oobCode: this._password\n              });\n            default:\n              _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          }\n        });\n        function _getIdTokenResponse(_x104) {\n          return _getIdTokenResponse2.apply(this, arguments);\n        }\n        return _getIdTokenResponse;\n      }() /** @internal */)\n    }, {\n      key: \"_linkToIdToken\",\n      value: (function () {\n        var _linkToIdToken2 = _asyncToGenerator(function* (auth, idToken) {\n          switch (this.signInMethod) {\n            case \"password\" /* SignInMethod.EMAIL_PASSWORD */:\n              var request = {\n                idToken,\n                returnSecureToken: true,\n                email: this._email,\n                password: this._password,\n                clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n              };\n              return handleRecaptchaFlow(auth, request, \"signUpPassword\" /* RecaptchaActionName.SIGN_UP_PASSWORD */, linkEmailPassword, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n            case \"emailLink\" /* SignInMethod.EMAIL_LINK */:\n              return signInWithEmailLinkForLinking(auth, {\n                idToken,\n                email: this._email,\n                oobCode: this._password\n              });\n            default:\n              _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          }\n        });\n        function _linkToIdToken(_x105, _x106) {\n          return _linkToIdToken2.apply(this, arguments);\n        }\n        return _linkToIdToken;\n      }() /** @internal */)\n    }, {\n      key: \"_getReauthenticationResolver\",\n      value: function _getReauthenticationResolver(auth) {\n        return this._getIdTokenResponse(auth);\n      }\n    }], [{\n      key: \"_fromEmailAndPassword\",\n      value: function _fromEmailAndPassword(email, password) {\n        return new EmailAuthCredential(email, password, \"password\" /* SignInMethod.EMAIL_PASSWORD */);\n      }\n      /** @internal */\n    }, {\n      key: \"_fromEmailAndCode\",\n      value: function _fromEmailAndCode(email, oobCode) {\n        var tenantId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n        return new EmailAuthCredential(email, oobCode, \"emailLink\" /* SignInMethod.EMAIL_LINK */, tenantId);\n      }\n    }, {\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        var obj = typeof json === 'string' ? JSON.parse(json) : json;\n        if (obj?.email && obj?.password) {\n          if (obj.signInMethod === \"password\" /* SignInMethod.EMAIL_PASSWORD */) {\n            return this._fromEmailAndPassword(obj.email, obj.password);\n          } else if (obj.signInMethod === \"emailLink\" /* SignInMethod.EMAIL_LINK */) {\n            return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);\n          }\n        }\n        return null;\n      }\n    }]);\n  }(AuthCredential);\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function signInWithIdp(_x107, _x108) {\n    return _signInWithIdp.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _signInWithIdp() {\n    _signInWithIdp = _asyncToGenerator(function* (auth, request) {\n      return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithIdp\" /* Endpoint.SIGN_IN_WITH_IDP */, _addTidIfNecessary(auth, request));\n    });\n    return _signInWithIdp.apply(this, arguments);\n  }\n  var IDP_REQUEST_URI$1 = 'http://localhost';\n  /**\n   * Represents the OAuth credentials returned by an {@link OAuthProvider}.\n   *\n   * @remarks\n   * Implementations specify the details about each auth provider's credential requirements.\n   *\n   * @public\n   */\n  var OAuthCredential = /*#__PURE__*/function (_AuthCredential2) {\n    function OAuthCredential() {\n      var _this7;\n      _classCallCheck(this, OAuthCredential);\n      _this7 = _callSuper(this, OAuthCredential, arguments);\n      _this7.pendingToken = null;\n      return _this7;\n    }\n    /** @internal */\n    _inherits(OAuthCredential, _AuthCredential2);\n    return _createClass(OAuthCredential, [{\n      key: \"toJSON\",\n      value: /** {@inheritdoc AuthCredential.toJSON}  */\n      function toJSON() {\n        return {\n          idToken: this.idToken,\n          accessToken: this.accessToken,\n          secret: this.secret,\n          nonce: this.nonce,\n          pendingToken: this.pendingToken,\n          providerId: this.providerId,\n          signInMethod: this.signInMethod\n        };\n      }\n      /**\n       * Static method to deserialize a JSON representation of an object into an\n       * {@link  AuthCredential}.\n       *\n       * @param json - Input can be either Object or the stringified representation of the object.\n       * When string is provided, JSON.parse would be called first.\n       *\n       * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\n       */\n    }, {\n      key: \"_getIdTokenResponse\",\n      value: /** @internal */\n      function _getIdTokenResponse(auth) {\n        var request = this.buildRequest();\n        return signInWithIdp(auth, request);\n      }\n      /** @internal */\n    }, {\n      key: \"_linkToIdToken\",\n      value: function _linkToIdToken(auth, idToken) {\n        var request = this.buildRequest();\n        request.idToken = idToken;\n        return signInWithIdp(auth, request);\n      }\n      /** @internal */\n    }, {\n      key: \"_getReauthenticationResolver\",\n      value: function _getReauthenticationResolver(auth) {\n        var request = this.buildRequest();\n        request.autoCreate = false;\n        return signInWithIdp(auth, request);\n      }\n    }, {\n      key: \"buildRequest\",\n      value: function buildRequest() {\n        var request = {\n          requestUri: IDP_REQUEST_URI$1,\n          returnSecureToken: true\n        };\n        if (this.pendingToken) {\n          request.pendingToken = this.pendingToken;\n        } else {\n          var postBody = {};\n          if (this.idToken) {\n            postBody['id_token'] = this.idToken;\n          }\n          if (this.accessToken) {\n            postBody['access_token'] = this.accessToken;\n          }\n          if (this.secret) {\n            postBody['oauth_token_secret'] = this.secret;\n          }\n          postBody['providerId'] = this.providerId;\n          if (this.nonce && !this.pendingToken) {\n            postBody['nonce'] = this.nonce;\n          }\n          request.postBody = util.querystring(postBody);\n        }\n        return request;\n      }\n    }], [{\n      key: \"_fromParams\",\n      value: function _fromParams(params) {\n        var cred = new OAuthCredential(params.providerId, params.signInMethod);\n        if (params.idToken || params.accessToken) {\n          // OAuth 2 and either ID token or access token.\n          if (params.idToken) {\n            cred.idToken = params.idToken;\n          }\n          if (params.accessToken) {\n            cred.accessToken = params.accessToken;\n          }\n          // Add nonce if available and no pendingToken is present.\n          if (params.nonce && !params.pendingToken) {\n            cred.nonce = params.nonce;\n          }\n          if (params.pendingToken) {\n            cred.pendingToken = params.pendingToken;\n          }\n        } else if (params.oauthToken && params.oauthTokenSecret) {\n          // OAuth 1 and OAuth token with token secret\n          cred.accessToken = params.oauthToken;\n          cred.secret = params.oauthTokenSecret;\n        } else {\n          _fail(\"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        }\n        return cred;\n      }\n    }, {\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        var obj = typeof json === 'string' ? JSON.parse(json) : json;\n        var providerId = obj.providerId,\n          signInMethod = obj.signInMethod,\n          rest = _objectWithoutProperties(obj, _excluded3);\n        if (!providerId || !signInMethod) {\n          return null;\n        }\n        var cred = new OAuthCredential(providerId, signInMethod);\n        cred.idToken = rest.idToken || undefined;\n        cred.accessToken = rest.accessToken || undefined;\n        cred.secret = rest.secret;\n        cred.nonce = rest.nonce;\n        cred.pendingToken = rest.pendingToken || null;\n        return cred;\n      }\n    }]);\n  }(AuthCredential);\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function sendPhoneVerificationCode(_x109, _x110) {\n    return _sendPhoneVerificationCode.apply(this, arguments);\n  }\n  function _sendPhoneVerificationCode() {\n    _sendPhoneVerificationCode = _asyncToGenerator(function* (auth, request) {\n      return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:sendVerificationCode\" /* Endpoint.SEND_VERIFICATION_CODE */, _addTidIfNecessary(auth, request));\n    });\n    return _sendPhoneVerificationCode.apply(this, arguments);\n  }\n  function signInWithPhoneNumber$1(_x111, _x112) {\n    return _signInWithPhoneNumber$.apply(this, arguments);\n  }\n  function _signInWithPhoneNumber$() {\n    _signInWithPhoneNumber$ = _asyncToGenerator(function* (auth, request) {\n      return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, request));\n    });\n    return _signInWithPhoneNumber$.apply(this, arguments);\n  }\n  function linkWithPhoneNumber$1(_x113, _x114) {\n    return _linkWithPhoneNumber$.apply(this, arguments);\n  }\n  function _linkWithPhoneNumber$() {\n    _linkWithPhoneNumber$ = _asyncToGenerator(function* (auth, request) {\n      var response = yield _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, request));\n      if (response.temporaryProof) {\n        throw _makeTaggedError(auth, \"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */, response);\n      }\n      return response;\n    });\n    return _linkWithPhoneNumber$.apply(this, arguments);\n  }\n  var VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_ = {\n    [\"USER_NOT_FOUND\" /* ServerError.USER_NOT_FOUND */]: \"user-not-found\" /* AuthErrorCode.USER_DELETED */\n  };\n  function verifyPhoneNumberForExisting(_x115, _x116) {\n    return _verifyPhoneNumberForExisting.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Represents the credentials returned by {@link PhoneAuthProvider}.\n   *\n   * @public\n   */\n  function _verifyPhoneNumberForExisting() {\n    _verifyPhoneNumberForExisting = _asyncToGenerator(function* (auth, request) {\n      var apiRequest = {\n        ...request,\n        operation: 'REAUTH'\n      };\n      return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, apiRequest), VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_);\n    });\n    return _verifyPhoneNumberForExisting.apply(this, arguments);\n  }\n  var PhoneAuthCredential = /*#__PURE__*/function (_AuthCredential3) {\n    function PhoneAuthCredential(params) {\n      var _this8;\n      _classCallCheck(this, PhoneAuthCredential);\n      _this8 = _callSuper(this, PhoneAuthCredential, [\"phone\" /* ProviderId.PHONE */, \"phone\" /* SignInMethod.PHONE */]);\n      _this8.params = params;\n      return _this8;\n    }\n    /** @internal */\n    _inherits(PhoneAuthCredential, _AuthCredential3);\n    return _createClass(PhoneAuthCredential, [{\n      key: \"_getIdTokenResponse\",\n      value: /** @internal */\n      function _getIdTokenResponse(auth) {\n        return signInWithPhoneNumber$1(auth, this._makeVerificationRequest());\n      }\n      /** @internal */\n    }, {\n      key: \"_linkToIdToken\",\n      value: function _linkToIdToken(auth, idToken) {\n        return linkWithPhoneNumber$1(auth, {\n          idToken,\n          ...this._makeVerificationRequest()\n        });\n      }\n      /** @internal */\n    }, {\n      key: \"_getReauthenticationResolver\",\n      value: function _getReauthenticationResolver(auth) {\n        return verifyPhoneNumberForExisting(auth, this._makeVerificationRequest());\n      }\n      /** @internal */\n    }, {\n      key: \"_makeVerificationRequest\",\n      value: function _makeVerificationRequest() {\n        var _this$params2 = this.params,\n          temporaryProof = _this$params2.temporaryProof,\n          phoneNumber = _this$params2.phoneNumber,\n          verificationId = _this$params2.verificationId,\n          verificationCode = _this$params2.verificationCode;\n        if (temporaryProof && phoneNumber) {\n          return {\n            temporaryProof,\n            phoneNumber\n          };\n        }\n        return {\n          sessionInfo: verificationId,\n          code: verificationCode\n        };\n      }\n      /** {@inheritdoc AuthCredential.toJSON} */\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        var obj = {\n          providerId: this.providerId\n        };\n        if (this.params.phoneNumber) {\n          obj.phoneNumber = this.params.phoneNumber;\n        }\n        if (this.params.temporaryProof) {\n          obj.temporaryProof = this.params.temporaryProof;\n        }\n        if (this.params.verificationCode) {\n          obj.verificationCode = this.params.verificationCode;\n        }\n        if (this.params.verificationId) {\n          obj.verificationId = this.params.verificationId;\n        }\n        return obj;\n      }\n      /** Generates a phone credential based on a plain object or a JSON string. */\n    }], [{\n      key: \"_fromVerification\",\n      value: function _fromVerification(verificationId, verificationCode) {\n        return new PhoneAuthCredential({\n          verificationId,\n          verificationCode\n        });\n      }\n      /** @internal */\n    }, {\n      key: \"_fromTokenResponse\",\n      value: function _fromTokenResponse(phoneNumber, temporaryProof) {\n        return new PhoneAuthCredential({\n          phoneNumber,\n          temporaryProof\n        });\n      }\n    }, {\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        if (typeof json === 'string') {\n          json = JSON.parse(json);\n        }\n        var _json = json,\n          verificationId = _json.verificationId,\n          verificationCode = _json.verificationCode,\n          phoneNumber = _json.phoneNumber,\n          temporaryProof = _json.temporaryProof;\n        if (!verificationCode && !verificationId && !phoneNumber && !temporaryProof) {\n          return null;\n        }\n        return new PhoneAuthCredential({\n          verificationId,\n          verificationCode,\n          phoneNumber,\n          temporaryProof\n        });\n      }\n    }]);\n  }(AuthCredential);\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Maps the mode string in action code URL to Action Code Info operation.\n   *\n   * @param mode\n   */\n  function parseMode(mode) {\n    switch (mode) {\n      case 'recoverEmail':\n        return \"RECOVER_EMAIL\" /* ActionCodeOperation.RECOVER_EMAIL */;\n      case 'resetPassword':\n        return \"PASSWORD_RESET\" /* ActionCodeOperation.PASSWORD_RESET */;\n      case 'signIn':\n        return \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */;\n      case 'verifyEmail':\n        return \"VERIFY_EMAIL\" /* ActionCodeOperation.VERIFY_EMAIL */;\n      case 'verifyAndChangeEmail':\n        return \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */;\n      case 'revertSecondFactorAddition':\n        return \"REVERT_SECOND_FACTOR_ADDITION\" /* ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION */;\n      default:\n        return null;\n    }\n  }\n  /**\n   * Helper to parse FDL links\n   *\n   * @param url\n   */\n  function parseDeepLink(url) {\n    var link = util.querystringDecode(util.extractQuerystring(url))['link'];\n    // Double link case (automatic redirect).\n    var doubleDeepLink = link ? util.querystringDecode(util.extractQuerystring(link))['deep_link_id'] : null;\n    // iOS custom scheme links.\n    var iOSDeepLink = util.querystringDecode(util.extractQuerystring(url))['deep_link_id'];\n    var iOSDoubleDeepLink = iOSDeepLink ? util.querystringDecode(util.extractQuerystring(iOSDeepLink))['link'] : null;\n    return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;\n  }\n  /**\n   * A utility class to parse email action URLs such as password reset, email verification,\n   * email link sign in, etc.\n   *\n   * @public\n   */\n  var ActionCodeURL = /*#__PURE__*/function () {\n    /**\n     * @param actionLink - The link from which to extract the URL.\n     * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\n     *\n     * @internal\n     */\n    function ActionCodeURL(actionLink) {\n      _classCallCheck(this, ActionCodeURL);\n      var searchParams = util.querystringDecode(util.extractQuerystring(actionLink));\n      var apiKey = searchParams[\"apiKey\" /* QueryField.API_KEY */] ?? null;\n      var code = searchParams[\"oobCode\" /* QueryField.CODE */] ?? null;\n      var operation = parseMode(searchParams[\"mode\" /* QueryField.MODE */] ?? null);\n      // Validate API key, code and mode.\n      _assert(apiKey && code && operation, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      this.apiKey = apiKey;\n      this.operation = operation;\n      this.code = code;\n      this.continueUrl = searchParams[\"continueUrl\" /* QueryField.CONTINUE_URL */] ?? null;\n      this.languageCode = searchParams[\"lang\" /* QueryField.LANGUAGE_CODE */] ?? null;\n      this.tenantId = searchParams[\"tenantId\" /* QueryField.TENANT_ID */] ?? null;\n    }\n    /**\n     * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid,\n     * otherwise returns null.\n     *\n     * @param link  - The email action link string.\n     * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\n     *\n     * @public\n     */\n    return _createClass(ActionCodeURL, null, [{\n      key: \"parseLink\",\n      value: function parseLink(link) {\n        var actionLink = parseDeepLink(link);\n        try {\n          return new ActionCodeURL(actionLink);\n        } catch {\n          return null;\n        }\n      }\n    }]);\n  }();\n  /**\n   * Parses the email action link string and returns an {@link ActionCodeURL} if\n   * the link is valid, otherwise returns null.\n   *\n   * @public\n   */\n  function parseActionCodeURL(link) {\n    return ActionCodeURL.parseLink(link);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating {@link EmailAuthCredential}.\n   *\n   * @public\n   */\n  var EmailAuthProvider = /*#__PURE__*/function () {\n    function EmailAuthProvider() {\n      _classCallCheck(this, EmailAuthProvider);\n      /**\n       * Always set to {@link ProviderId}.PASSWORD, even for email link.\n       */\n      this.providerId = EmailAuthProvider.PROVIDER_ID;\n    }\n    /**\n     * Initialize an {@link AuthCredential} using an email and password.\n     *\n     * @example\n     * ```javascript\n     * const authCredential = EmailAuthProvider.credential(email, password);\n     * const userCredential = await signInWithCredential(auth, authCredential);\n     * ```\n     *\n     * @example\n     * ```javascript\n     * const userCredential = await signInWithEmailAndPassword(auth, email, password);\n     * ```\n     *\n     * @param email - Email address.\n     * @param password - User account password.\n     * @returns The auth provider credential.\n     */\n    return _createClass(EmailAuthProvider, null, [{\n      key: \"credential\",\n      value: function credential(email, password) {\n        return EmailAuthCredential._fromEmailAndPassword(email, password);\n      }\n      /**\n       * Initialize an {@link AuthCredential} using an email and an email link after a sign in with\n       * email link operation.\n       *\n       * @example\n       * ```javascript\n       * const authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);\n       * const userCredential = await signInWithCredential(auth, authCredential);\n       * ```\n       *\n       * @example\n       * ```javascript\n       * await sendSignInLinkToEmail(auth, email);\n       * // Obtain emailLink from user.\n       * const userCredential = await signInWithEmailLink(auth, email, emailLink);\n       * ```\n       *\n       * @param auth - The {@link Auth} instance used to verify the link.\n       * @param email - Email address.\n       * @param emailLink - Sign-in email link.\n       * @returns - The auth provider credential.\n       */\n    }, {\n      key: \"credentialWithLink\",\n      value: function credentialWithLink(email, emailLink) {\n        var actionCodeUrl = ActionCodeURL.parseLink(emailLink);\n        _assert(actionCodeUrl, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        return EmailAuthCredential._fromEmailAndCode(email, actionCodeUrl.code, actionCodeUrl.tenantId);\n      }\n    }]);\n  }();\n  /**\n   * Always set to {@link ProviderId}.PASSWORD, even for email link.\n   */\n  EmailAuthProvider.PROVIDER_ID = \"password\" /* ProviderId.PASSWORD */;\n  /**\n   * Always set to {@link SignInMethod}.EMAIL_PASSWORD.\n   */\n  EmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD = \"password\" /* SignInMethod.EMAIL_PASSWORD */;\n  /**\n   * Always set to {@link SignInMethod}.EMAIL_LINK.\n   */\n  EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD = \"emailLink\" /* SignInMethod.EMAIL_LINK */;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * The base class for all Federated providers (OAuth (including OIDC), SAML).\n   *\n   * This class is not meant to be instantiated directly.\n   *\n   * @public\n   */\n  var FederatedAuthProvider = /*#__PURE__*/function () {\n    /**\n     * Constructor for generic OAuth providers.\n     *\n     * @param providerId - Provider for which credentials should be generated.\n     */\n    function FederatedAuthProvider(providerId) {\n      _classCallCheck(this, FederatedAuthProvider);\n      this.providerId = providerId;\n      /** @internal */\n      this.defaultLanguageCode = null;\n      /** @internal */\n      this.customParameters = {};\n    }\n    /**\n     * Set the language gode.\n     *\n     * @param languageCode - language code\n     */\n    return _createClass(FederatedAuthProvider, [{\n      key: \"setDefaultLanguage\",\n      value: function setDefaultLanguage(languageCode) {\n        this.defaultLanguageCode = languageCode;\n      }\n      /**\n       * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in\n       * operations.\n       *\n       * @remarks\n       * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,\n       * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.\n       *\n       * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.\n       */\n    }, {\n      key: \"setCustomParameters\",\n      value: function setCustomParameters(customOAuthParameters) {\n        this.customParameters = customOAuthParameters;\n        return this;\n      }\n      /**\n       * Retrieve the current list of {@link CustomParameters}.\n       */\n    }, {\n      key: \"getCustomParameters\",\n      value: function getCustomParameters() {\n        return this.customParameters;\n      }\n    }]);\n  }();\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Common code to all OAuth providers. This is separate from the\n   * {@link OAuthProvider} so that child providers (like\n   * {@link GoogleAuthProvider}) don't inherit the `credential` instance method.\n   * Instead, they rely on a static `credential` method.\n   */\n  var BaseOAuthProvider = /*#__PURE__*/function (_FederatedAuthProvide) {\n    function BaseOAuthProvider() {\n      var _this9;\n      _classCallCheck(this, BaseOAuthProvider);\n      _this9 = _callSuper(this, BaseOAuthProvider, arguments);\n      /** @internal */\n      _this9.scopes = [];\n      return _this9;\n    }\n    /**\n     * Add an OAuth scope to the credential.\n     *\n     * @param scope - Provider OAuth scope to add.\n     */\n    _inherits(BaseOAuthProvider, _FederatedAuthProvide);\n    return _createClass(BaseOAuthProvider, [{\n      key: \"addScope\",\n      value: function addScope(scope) {\n        // If not already added, add scope to list.\n        if (!this.scopes.includes(scope)) {\n          this.scopes.push(scope);\n        }\n        return this;\n      }\n      /**\n       * Retrieve the current list of OAuth scopes.\n       */\n    }, {\n      key: \"getScopes\",\n      value: function getScopes() {\n        return [...this.scopes];\n      }\n    }]);\n  }(FederatedAuthProvider);\n  /**\n   * Provider for generating generic {@link OAuthCredential}.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new OAuthProvider('google.com');\n   * // Start a sign in process for an unauthenticated user.\n   * provider.addScope('profile');\n   * provider.addScope('email');\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a OAuth Access Token for the provider.\n   *   const credential = provider.credentialFromResult(auth, result);\n   *   const token = credential.accessToken;\n   * }\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new OAuthProvider('google.com');\n   * provider.addScope('profile');\n   * provider.addScope('email');\n   * const result = await signInWithPopup(auth, provider);\n   *\n   * // The signed-in user info.\n   * const user = result.user;\n   * // This gives you a OAuth Access Token for the provider.\n   * const credential = provider.credentialFromResult(auth, result);\n   * const token = credential.accessToken;\n   * ```\n   * @public\n   */\n  var OAuthProvider = /*#__PURE__*/function (_BaseOAuthProvider) {\n    function OAuthProvider() {\n      _classCallCheck(this, OAuthProvider);\n      return _callSuper(this, OAuthProvider, arguments);\n    }\n    _inherits(OAuthProvider, _BaseOAuthProvider);\n    return _createClass(OAuthProvider, [{\n      key: \"credential\",\n      value:\n      /**\n       * Creates a {@link OAuthCredential} from a generic OAuth provider's access token or ID token.\n       *\n       * @remarks\n       * The raw nonce is required when an ID token with a nonce field is provided. The SHA-256 hash of\n       * the raw nonce must match the nonce field in the ID token.\n       *\n       * @example\n       * ```javascript\n       * // `googleUser` from the onsuccess Google Sign In callback.\n       * // Initialize a generate OAuth provider with a `google.com` providerId.\n       * const provider = new OAuthProvider('google.com');\n       * const credential = provider.credential({\n       *   idToken: googleUser.getAuthResponse().id_token,\n       * });\n       * const result = await signInWithCredential(credential);\n       * ```\n       *\n       * @param params - Either the options object containing the ID token, access token and raw nonce\n       * or the ID token string.\n       */\n      function credential(params) {\n        return this._credential({\n          ...params,\n          nonce: params.rawNonce\n        });\n      }\n      /** An internal credential method that accepts more permissive options */\n    }, {\n      key: \"_credential\",\n      value: function _credential(params) {\n        _assert(params.idToken || params.accessToken, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        // For OAuthCredential, sign in method is same as providerId.\n        return OAuthCredential._fromParams({\n          ...params,\n          providerId: this.providerId,\n          signInMethod: this.providerId\n        });\n      }\n      /**\n       * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n       *\n       * @param userCredential - The user credential.\n       */\n    }], [{\n      key: \"credentialFromJSON\",\n      value:\n      /**\n       * Creates an {@link OAuthCredential} from a JSON string or a plain object.\n       * @param json - A plain object or a JSON string\n       */\n      function credentialFromJSON(json) {\n        var obj = typeof json === 'string' ? JSON.parse(json) : json;\n        _assert('providerId' in obj && 'signInMethod' in obj, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        return OAuthCredential._fromParams(obj);\n      }\n    }, {\n      key: \"credentialFromResult\",\n      value: function credentialFromResult(userCredential) {\n        return OAuthProvider.oauthCredentialFromTaggedObject(userCredential);\n      }\n      /**\n       * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n       * thrown during a sign-in, link, or reauthenticate operation.\n       *\n       * @param userCredential - The user credential.\n       */\n    }, {\n      key: \"credentialFromError\",\n      value: function credentialFromError(error) {\n        return OAuthProvider.oauthCredentialFromTaggedObject(error.customData || {});\n      }\n    }, {\n      key: \"oauthCredentialFromTaggedObject\",\n      value: function oauthCredentialFromTaggedObject(_ref11) {\n        var tokenResponse = _ref11._tokenResponse;\n        if (!tokenResponse) {\n          return null;\n        }\n        var oauthIdToken = tokenResponse.oauthIdToken,\n          oauthAccessToken = tokenResponse.oauthAccessToken,\n          oauthTokenSecret = tokenResponse.oauthTokenSecret,\n          pendingToken = tokenResponse.pendingToken,\n          nonce = tokenResponse.nonce,\n          providerId = tokenResponse.providerId;\n        if (!oauthAccessToken && !oauthTokenSecret && !oauthIdToken && !pendingToken) {\n          return null;\n        }\n        if (!providerId) {\n          return null;\n        }\n        try {\n          return new OAuthProvider(providerId)._credential({\n            idToken: oauthIdToken,\n            accessToken: oauthAccessToken,\n            nonce,\n            pendingToken\n          });\n        } catch (e) {\n          return null;\n        }\n      }\n    }]);\n  }(BaseOAuthProvider);\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.FACEBOOK.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new FacebookAuthProvider();\n   * // Start a sign in process for an unauthenticated user.\n   * provider.addScope('user_birthday');\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a Facebook Access Token.\n   *   const credential = FacebookAuthProvider.credentialFromResult(result);\n   *   const token = credential.accessToken;\n   * }\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new FacebookAuthProvider();\n   * provider.addScope('user_birthday');\n   * const result = await signInWithPopup(auth, provider);\n   *\n   * // The signed-in user info.\n   * const user = result.user;\n   * // This gives you a Facebook Access Token.\n   * const credential = FacebookAuthProvider.credentialFromResult(result);\n   * const token = credential.accessToken;\n   * ```\n   *\n   * @public\n   */\n  var FacebookAuthProvider = /*#__PURE__*/function (_BaseOAuthProvider2) {\n    function FacebookAuthProvider() {\n      _classCallCheck(this, FacebookAuthProvider);\n      return _callSuper(this, FacebookAuthProvider, [\"facebook.com\" /* ProviderId.FACEBOOK */]);\n    }\n    /**\n     * Creates a credential for Facebook.\n     *\n     * @example\n     * ```javascript\n     * // `event` from the Facebook auth.authResponseChange callback.\n     * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);\n     * const result = await signInWithCredential(credential);\n     * ```\n     *\n     * @param accessToken - Facebook access token.\n     */\n    _inherits(FacebookAuthProvider, _BaseOAuthProvider2);\n    return _createClass(FacebookAuthProvider, null, [{\n      key: \"credential\",\n      value: function credential(accessToken) {\n        return OAuthCredential._fromParams({\n          providerId: FacebookAuthProvider.PROVIDER_ID,\n          signInMethod: FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,\n          accessToken\n        });\n      }\n      /**\n       * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n       *\n       * @param userCredential - The user credential.\n       */\n    }, {\n      key: \"credentialFromResult\",\n      value: function credentialFromResult(userCredential) {\n        return FacebookAuthProvider.credentialFromTaggedObject(userCredential);\n      }\n      /**\n       * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n       * thrown during a sign-in, link, or reauthenticate operation.\n       *\n       * @param userCredential - The user credential.\n       */\n    }, {\n      key: \"credentialFromError\",\n      value: function credentialFromError(error) {\n        return FacebookAuthProvider.credentialFromTaggedObject(error.customData || {});\n      }\n    }, {\n      key: \"credentialFromTaggedObject\",\n      value: function credentialFromTaggedObject(_ref12) {\n        var tokenResponse = _ref12._tokenResponse;\n        if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\n          return null;\n        }\n        if (!tokenResponse.oauthAccessToken) {\n          return null;\n        }\n        try {\n          return FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);\n        } catch {\n          return null;\n        }\n      }\n    }]);\n  }(BaseOAuthProvider);\n  /** Always set to {@link SignInMethod}.FACEBOOK. */\n  FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD = \"facebook.com\" /* SignInMethod.FACEBOOK */;\n  /** Always set to {@link ProviderId}.FACEBOOK. */\n  FacebookAuthProvider.PROVIDER_ID = \"facebook.com\" /* ProviderId.FACEBOOK */;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GOOGLE.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new GoogleAuthProvider();\n   * // Start a sign in process for an unauthenticated user.\n   * provider.addScope('profile');\n   * provider.addScope('email');\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a Google Access Token.\n   *   const credential = GoogleAuthProvider.credentialFromResult(result);\n   *   const token = credential.accessToken;\n   * }\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new GoogleAuthProvider();\n   * provider.addScope('profile');\n   * provider.addScope('email');\n   * const result = await signInWithPopup(auth, provider);\n   *\n   * // The signed-in user info.\n   * const user = result.user;\n   * // This gives you a Google Access Token.\n   * const credential = GoogleAuthProvider.credentialFromResult(result);\n   * const token = credential.accessToken;\n   * ```\n   *\n   * @public\n   */\n  var GoogleAuthProvider = /*#__PURE__*/function (_BaseOAuthProvider3) {\n    function GoogleAuthProvider() {\n      var _this0;\n      _classCallCheck(this, GoogleAuthProvider);\n      _this0 = _callSuper(this, GoogleAuthProvider, [\"google.com\" /* ProviderId.GOOGLE */]);\n      _this0.addScope('profile');\n      return _this0;\n    }\n    /**\n     * Creates a credential for Google. At least one of ID token and access token is required.\n     *\n     * @example\n     * ```javascript\n     * // \\`googleUser\\` from the onsuccess Google Sign In callback.\n     * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);\n     * const result = await signInWithCredential(credential);\n     * ```\n     *\n     * @param idToken - Google ID token.\n     * @param accessToken - Google access token.\n     */\n    _inherits(GoogleAuthProvider, _BaseOAuthProvider3);\n    return _createClass(GoogleAuthProvider, null, [{\n      key: \"credential\",\n      value: function credential(idToken, accessToken) {\n        return OAuthCredential._fromParams({\n          providerId: GoogleAuthProvider.PROVIDER_ID,\n          signInMethod: GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,\n          idToken,\n          accessToken\n        });\n      }\n      /**\n       * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n       *\n       * @param userCredential - The user credential.\n       */\n    }, {\n      key: \"credentialFromResult\",\n      value: function credentialFromResult(userCredential) {\n        return GoogleAuthProvider.credentialFromTaggedObject(userCredential);\n      }\n      /**\n       * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n       * thrown during a sign-in, link, or reauthenticate operation.\n       *\n       * @param userCredential - The user credential.\n       */\n    }, {\n      key: \"credentialFromError\",\n      value: function credentialFromError(error) {\n        return GoogleAuthProvider.credentialFromTaggedObject(error.customData || {});\n      }\n    }, {\n      key: \"credentialFromTaggedObject\",\n      value: function credentialFromTaggedObject(_ref13) {\n        var tokenResponse = _ref13._tokenResponse;\n        if (!tokenResponse) {\n          return null;\n        }\n        var oauthIdToken = tokenResponse.oauthIdToken,\n          oauthAccessToken = tokenResponse.oauthAccessToken;\n        if (!oauthIdToken && !oauthAccessToken) {\n          // This could be an oauth 1 credential or a phone credential\n          return null;\n        }\n        try {\n          return GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);\n        } catch {\n          return null;\n        }\n      }\n    }]);\n  }(BaseOAuthProvider);\n  /** Always set to {@link SignInMethod}.GOOGLE. */\n  GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD = \"google.com\" /* SignInMethod.GOOGLE */;\n  /** Always set to {@link ProviderId}.GOOGLE. */\n  GoogleAuthProvider.PROVIDER_ID = \"google.com\" /* ProviderId.GOOGLE */;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GITHUB.\n   *\n   * @remarks\n   * GitHub requires an OAuth 2.0 redirect, so you can either handle the redirect directly, or use\n   * the {@link signInWithPopup} handler:\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new GithubAuthProvider();\n   * // Start a sign in process for an unauthenticated user.\n   * provider.addScope('repo');\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a GitHub Access Token.\n   *   const credential = GithubAuthProvider.credentialFromResult(result);\n   *   const token = credential.accessToken;\n   * }\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new GithubAuthProvider();\n   * provider.addScope('repo');\n   * const result = await signInWithPopup(auth, provider);\n   *\n   * // The signed-in user info.\n   * const user = result.user;\n   * // This gives you a GitHub Access Token.\n   * const credential = GithubAuthProvider.credentialFromResult(result);\n   * const token = credential.accessToken;\n   * ```\n   * @public\n   */\n  var GithubAuthProvider = /*#__PURE__*/function (_BaseOAuthProvider4) {\n    function GithubAuthProvider() {\n      _classCallCheck(this, GithubAuthProvider);\n      return _callSuper(this, GithubAuthProvider, [\"github.com\" /* ProviderId.GITHUB */]);\n    }\n    /**\n     * Creates a credential for GitHub.\n     *\n     * @param accessToken - GitHub access token.\n     */\n    _inherits(GithubAuthProvider, _BaseOAuthProvider4);\n    return _createClass(GithubAuthProvider, null, [{\n      key: \"credential\",\n      value: function credential(accessToken) {\n        return OAuthCredential._fromParams({\n          providerId: GithubAuthProvider.PROVIDER_ID,\n          signInMethod: GithubAuthProvider.GITHUB_SIGN_IN_METHOD,\n          accessToken\n        });\n      }\n      /**\n       * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n       *\n       * @param userCredential - The user credential.\n       */\n    }, {\n      key: \"credentialFromResult\",\n      value: function credentialFromResult(userCredential) {\n        return GithubAuthProvider.credentialFromTaggedObject(userCredential);\n      }\n      /**\n       * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n       * thrown during a sign-in, link, or reauthenticate operation.\n       *\n       * @param userCredential - The user credential.\n       */\n    }, {\n      key: \"credentialFromError\",\n      value: function credentialFromError(error) {\n        return GithubAuthProvider.credentialFromTaggedObject(error.customData || {});\n      }\n    }, {\n      key: \"credentialFromTaggedObject\",\n      value: function credentialFromTaggedObject(_ref14) {\n        var tokenResponse = _ref14._tokenResponse;\n        if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\n          return null;\n        }\n        if (!tokenResponse.oauthAccessToken) {\n          return null;\n        }\n        try {\n          return GithubAuthProvider.credential(tokenResponse.oauthAccessToken);\n        } catch {\n          return null;\n        }\n      }\n    }]);\n  }(BaseOAuthProvider);\n  /** Always set to {@link SignInMethod}.GITHUB. */\n  GithubAuthProvider.GITHUB_SIGN_IN_METHOD = \"github.com\" /* SignInMethod.GITHUB */;\n  /** Always set to {@link ProviderId}.GITHUB. */\n  GithubAuthProvider.PROVIDER_ID = \"github.com\" /* ProviderId.GITHUB */;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  var IDP_REQUEST_URI = 'http://localhost';\n  /**\n   * @public\n   */\n  var SAMLAuthCredential = /*#__PURE__*/function (_AuthCredential4) {\n    /** @internal */\n    function SAMLAuthCredential(providerId, pendingToken) {\n      var _this1;\n      _classCallCheck(this, SAMLAuthCredential);\n      _this1 = _callSuper(this, SAMLAuthCredential, [providerId, providerId]);\n      _this1.pendingToken = pendingToken;\n      return _this1;\n    }\n    /** @internal */\n    _inherits(SAMLAuthCredential, _AuthCredential4);\n    return _createClass(SAMLAuthCredential, [{\n      key: \"_getIdTokenResponse\",\n      value: function _getIdTokenResponse(auth) {\n        var request = this.buildRequest();\n        return signInWithIdp(auth, request);\n      }\n      /** @internal */\n    }, {\n      key: \"_linkToIdToken\",\n      value: function _linkToIdToken(auth, idToken) {\n        var request = this.buildRequest();\n        request.idToken = idToken;\n        return signInWithIdp(auth, request);\n      }\n      /** @internal */\n    }, {\n      key: \"_getReauthenticationResolver\",\n      value: function _getReauthenticationResolver(auth) {\n        var request = this.buildRequest();\n        request.autoCreate = false;\n        return signInWithIdp(auth, request);\n      }\n      /** {@inheritdoc AuthCredential.toJSON}  */\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return {\n          signInMethod: this.signInMethod,\n          providerId: this.providerId,\n          pendingToken: this.pendingToken\n        };\n      }\n      /**\n       * Static method to deserialize a JSON representation of an object into an\n       * {@link  AuthCredential}.\n       *\n       * @param json - Input can be either Object or the stringified representation of the object.\n       * When string is provided, JSON.parse would be called first.\n       *\n       * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\n       */\n    }, {\n      key: \"buildRequest\",\n      value: function buildRequest() {\n        return {\n          requestUri: IDP_REQUEST_URI,\n          returnSecureToken: true,\n          pendingToken: this.pendingToken\n        };\n      }\n    }], [{\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        var obj = typeof json === 'string' ? JSON.parse(json) : json;\n        var providerId = obj.providerId,\n          signInMethod = obj.signInMethod,\n          pendingToken = obj.pendingToken;\n        if (!providerId || !signInMethod || !pendingToken || providerId !== signInMethod) {\n          return null;\n        }\n        return new SAMLAuthCredential(providerId, pendingToken);\n      }\n      /**\n       * Helper static method to avoid exposing the constructor to end users.\n       *\n       * @internal\n       */\n    }, {\n      key: \"_create\",\n      value: function _create(providerId, pendingToken) {\n        return new SAMLAuthCredential(providerId, pendingToken);\n      }\n    }]);\n  }(AuthCredential);\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  var SAML_PROVIDER_PREFIX = 'saml.';\n  /**\n   * An {@link AuthProvider} for SAML.\n   *\n   * @public\n   */\n  var SAMLAuthProvider = /*#__PURE__*/function (_FederatedAuthProvide2) {\n    /**\n     * Constructor. The providerId must start with \"saml.\"\n     * @param providerId - SAML provider ID.\n     */\n    function SAMLAuthProvider(providerId) {\n      _classCallCheck(this, SAMLAuthProvider);\n      _assert(providerId.startsWith(SAML_PROVIDER_PREFIX), \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      return _callSuper(this, SAMLAuthProvider, [providerId]);\n    }\n    /**\n     * Generates an {@link AuthCredential} from a {@link UserCredential} after a\n     * successful SAML flow completes.\n     *\n     * @remarks\n     *\n     * For example, to get an {@link AuthCredential}, you could write the\n     * following code:\n     *\n     * ```js\n     * const userCredential = await signInWithPopup(auth, samlProvider);\n     * const credential = SAMLAuthProvider.credentialFromResult(userCredential);\n     * ```\n     *\n     * @param userCredential - The user credential.\n     */\n    _inherits(SAMLAuthProvider, _FederatedAuthProvide2);\n    return _createClass(SAMLAuthProvider, null, [{\n      key: \"credentialFromResult\",\n      value: function credentialFromResult(userCredential) {\n        return SAMLAuthProvider.samlCredentialFromTaggedObject(userCredential);\n      }\n      /**\n       * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n       * thrown during a sign-in, link, or reauthenticate operation.\n       *\n       * @param userCredential - The user credential.\n       */\n    }, {\n      key: \"credentialFromError\",\n      value: function credentialFromError(error) {\n        return SAMLAuthProvider.samlCredentialFromTaggedObject(error.customData || {});\n      }\n      /**\n       * Creates an {@link AuthCredential} from a JSON string or a plain object.\n       * @param json - A plain object or a JSON string\n       */\n    }, {\n      key: \"credentialFromJSON\",\n      value: function credentialFromJSON(json) {\n        var credential = SAMLAuthCredential.fromJSON(json);\n        _assert(credential, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        return credential;\n      }\n    }, {\n      key: \"samlCredentialFromTaggedObject\",\n      value: function samlCredentialFromTaggedObject(_ref15) {\n        var tokenResponse = _ref15._tokenResponse;\n        if (!tokenResponse) {\n          return null;\n        }\n        var pendingToken = tokenResponse.pendingToken,\n          providerId = tokenResponse.providerId;\n        if (!pendingToken || !providerId) {\n          return null;\n        }\n        try {\n          return SAMLAuthCredential._create(providerId, pendingToken);\n        } catch (e) {\n          return null;\n        }\n      }\n    }]);\n  }(FederatedAuthProvider);\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.TWITTER.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new TwitterAuthProvider();\n   * // Start a sign in process for an unauthenticated user.\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a Twitter Access Token and Secret.\n   *   const credential = TwitterAuthProvider.credentialFromResult(result);\n   *   const token = credential.accessToken;\n   *   const secret = credential.secret;\n   * }\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new TwitterAuthProvider();\n   * const result = await signInWithPopup(auth, provider);\n   *\n   * // The signed-in user info.\n   * const user = result.user;\n   * // This gives you a Twitter Access Token and Secret.\n   * const credential = TwitterAuthProvider.credentialFromResult(result);\n   * const token = credential.accessToken;\n   * const secret = credential.secret;\n   * ```\n   *\n   * @public\n   */\n  var TwitterAuthProvider = /*#__PURE__*/function (_BaseOAuthProvider5) {\n    function TwitterAuthProvider() {\n      _classCallCheck(this, TwitterAuthProvider);\n      return _callSuper(this, TwitterAuthProvider, [\"twitter.com\" /* ProviderId.TWITTER */]);\n    }\n    /**\n     * Creates a credential for Twitter.\n     *\n     * @param token - Twitter access token.\n     * @param secret - Twitter secret.\n     */\n    _inherits(TwitterAuthProvider, _BaseOAuthProvider5);\n    return _createClass(TwitterAuthProvider, null, [{\n      key: \"credential\",\n      value: function credential(token, secret) {\n        return OAuthCredential._fromParams({\n          providerId: TwitterAuthProvider.PROVIDER_ID,\n          signInMethod: TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,\n          oauthToken: token,\n          oauthTokenSecret: secret\n        });\n      }\n      /**\n       * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n       *\n       * @param userCredential - The user credential.\n       */\n    }, {\n      key: \"credentialFromResult\",\n      value: function credentialFromResult(userCredential) {\n        return TwitterAuthProvider.credentialFromTaggedObject(userCredential);\n      }\n      /**\n       * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n       * thrown during a sign-in, link, or reauthenticate operation.\n       *\n       * @param userCredential - The user credential.\n       */\n    }, {\n      key: \"credentialFromError\",\n      value: function credentialFromError(error) {\n        return TwitterAuthProvider.credentialFromTaggedObject(error.customData || {});\n      }\n    }, {\n      key: \"credentialFromTaggedObject\",\n      value: function credentialFromTaggedObject(_ref16) {\n        var tokenResponse = _ref16._tokenResponse;\n        if (!tokenResponse) {\n          return null;\n        }\n        var oauthAccessToken = tokenResponse.oauthAccessToken,\n          oauthTokenSecret = tokenResponse.oauthTokenSecret;\n        if (!oauthAccessToken || !oauthTokenSecret) {\n          return null;\n        }\n        try {\n          return TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);\n        } catch {\n          return null;\n        }\n      }\n    }]);\n  }(BaseOAuthProvider);\n  /** Always set to {@link SignInMethod}.TWITTER. */\n  TwitterAuthProvider.TWITTER_SIGN_IN_METHOD = \"twitter.com\" /* SignInMethod.TWITTER */;\n  /** Always set to {@link ProviderId}.TWITTER. */\n  TwitterAuthProvider.PROVIDER_ID = \"twitter.com\" /* ProviderId.TWITTER */;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function signUp(_x117, _x118) {\n    return _signUp.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _signUp() {\n    _signUp = _asyncToGenerator(function* (auth, request) {\n      return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signUp\" /* Endpoint.SIGN_UP */, _addTidIfNecessary(auth, request));\n    });\n    return _signUp.apply(this, arguments);\n  }\n  var UserCredentialImpl = /*#__PURE__*/function () {\n    function UserCredentialImpl(params) {\n      _classCallCheck(this, UserCredentialImpl);\n      this.user = params.user;\n      this.providerId = params.providerId;\n      this._tokenResponse = params._tokenResponse;\n      this.operationType = params.operationType;\n    }\n    return _createClass(UserCredentialImpl, null, [{\n      key: \"_fromIdTokenResponse\",\n      value: function () {\n        var _fromIdTokenResponse3 = _asyncToGenerator(function* (auth, operationType, idTokenResponse) {\n          var isAnonymous = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n          var user = yield UserImpl._fromIdTokenResponse(auth, idTokenResponse, isAnonymous);\n          var providerId = providerIdForResponse(idTokenResponse);\n          var userCred = new UserCredentialImpl({\n            user,\n            providerId,\n            _tokenResponse: idTokenResponse,\n            operationType\n          });\n          return userCred;\n        });\n        function _fromIdTokenResponse(_x119, _x120, _x121) {\n          return _fromIdTokenResponse3.apply(this, arguments);\n        }\n        return _fromIdTokenResponse;\n      }()\n    }, {\n      key: \"_forOperation\",\n      value: function () {\n        var _forOperation2 = _asyncToGenerator(function* (user, operationType, response) {\n          yield user._updateTokensIfNecessary(response, /* reload */true);\n          var providerId = providerIdForResponse(response);\n          return new UserCredentialImpl({\n            user,\n            providerId,\n            _tokenResponse: response,\n            operationType\n          });\n        });\n        function _forOperation(_x122, _x123, _x124) {\n          return _forOperation2.apply(this, arguments);\n        }\n        return _forOperation;\n      }()\n    }]);\n  }();\n  function providerIdForResponse(response) {\n    if (response.providerId) {\n      return response.providerId;\n    }\n    if ('phoneNumber' in response) {\n      return \"phone\" /* ProviderId.PHONE */;\n    }\n    return null;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Asynchronously signs in as an anonymous user.\n   *\n   * @remarks\n   * If there is already an anonymous user signed in, that user will be returned; otherwise, a\n   * new anonymous user identity will be created and returned.\n   *\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param auth - The {@link Auth} instance.\n   *\n   * @public\n   */\n  function signInAnonymously(_x125) {\n    return _signInAnonymously.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _signInAnonymously() {\n    _signInAnonymously = _asyncToGenerator(function* (auth) {\n      if (app._isFirebaseServerApp(auth.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n      }\n      var authInternal = _castAuth(auth);\n      yield authInternal._initializationPromise;\n      if (authInternal.currentUser?.isAnonymous) {\n        // If an anonymous user is already signed in, no need to sign them in again.\n        return new UserCredentialImpl({\n          user: authInternal.currentUser,\n          providerId: null,\n          operationType: \"signIn\" /* OperationType.SIGN_IN */\n        });\n      }\n      var response = yield signUp(authInternal, {\n        returnSecureToken: true\n      });\n      var userCredential = yield UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response, true);\n      yield authInternal._updateCurrentUser(userCredential.user);\n      return userCredential;\n    });\n    return _signInAnonymously.apply(this, arguments);\n  }\n  var MultiFactorError = /*#__PURE__*/function (_util$FirebaseError) {\n    function MultiFactorError(auth, error, operationType, user) {\n      var _this10;\n      _classCallCheck(this, MultiFactorError);\n      _this10 = _callSuper(this, MultiFactorError, [error.code, error.message]);\n      _this10.operationType = operationType;\n      _this10.user = user;\n      // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n      Object.setPrototypeOf(_this10, MultiFactorError.prototype);\n      _this10.customData = {\n        appName: auth.name,\n        tenantId: auth.tenantId ?? undefined,\n        _serverResponse: error.customData._serverResponse,\n        operationType\n      };\n      return _this10;\n    }\n    _inherits(MultiFactorError, _util$FirebaseError);\n    return _createClass(MultiFactorError, null, [{\n      key: \"_fromErrorAndOperation\",\n      value: function _fromErrorAndOperation(auth, error, operationType, user) {\n        return new MultiFactorError(auth, error, operationType, user);\n      }\n    }]);\n  }(util.FirebaseError);\n  function _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user) {\n    var idTokenProvider = operationType === \"reauthenticate\" /* OperationType.REAUTHENTICATE */ ? credential._getReauthenticationResolver(auth) : credential._getIdTokenResponse(auth);\n    return idTokenProvider.catch(error => {\n      if (error.code === `auth/${\"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */}`) {\n        throw MultiFactorError._fromErrorAndOperation(auth, error, operationType, user);\n      }\n      throw error;\n    });\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Takes a set of UserInfo provider data and converts it to a set of names\n   */\n  function providerDataAsNames(providerData) {\n    return new Set(providerData.map(_ref17 => {\n      var providerId = _ref17.providerId;\n      return providerId;\n    }).filter(pid => !!pid));\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Unlinks a provider from a user account.\n   *\n   * @param user - The user.\n   * @param providerId - The provider to unlink.\n   *\n   * @public\n   */\n  function unlink(_x126, _x127) {\n    return _unlink.apply(this, arguments);\n  }\n  function _unlink() {\n    _unlink = _asyncToGenerator(function* (user, providerId) {\n      var userInternal = util.getModularInstance(user);\n      yield _assertLinkedStatus(true, userInternal, providerId);\n      var _yield$deleteLinkedAc = yield deleteLinkedAccounts(userInternal.auth, {\n          idToken: yield userInternal.getIdToken(),\n          deleteProvider: [providerId]\n        }),\n        providerUserInfo = _yield$deleteLinkedAc.providerUserInfo;\n      var providersLeft = providerDataAsNames(providerUserInfo || []);\n      userInternal.providerData = userInternal.providerData.filter(pd => providersLeft.has(pd.providerId));\n      if (!providersLeft.has(\"phone\" /* ProviderId.PHONE */)) {\n        userInternal.phoneNumber = null;\n      }\n      yield userInternal.auth._persistUserIfCurrent(userInternal);\n      return userInternal;\n    });\n    return _unlink.apply(this, arguments);\n  }\n  function _link(_x128, _x129) {\n    return _link2.apply(this, arguments);\n  }\n  function _link2() {\n    _link2 = _asyncToGenerator(function* (user, credential) {\n      var bypassAuthState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var response = yield _logoutIfInvalidated(user, credential._linkToIdToken(user.auth, yield user.getIdToken()), bypassAuthState);\n      return UserCredentialImpl._forOperation(user, \"link\" /* OperationType.LINK */, response);\n    });\n    return _link2.apply(this, arguments);\n  }\n  function _assertLinkedStatus(_x130, _x131, _x132) {\n    return _assertLinkedStatus2.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _assertLinkedStatus2() {\n    _assertLinkedStatus2 = _asyncToGenerator(function* (expected, user, provider) {\n      yield _reloadWithoutSaving(user);\n      var providerIds = providerDataAsNames(user.providerData);\n      var code = expected === false ? \"provider-already-linked\" /* AuthErrorCode.PROVIDER_ALREADY_LINKED */ : \"no-such-provider\" /* AuthErrorCode.NO_SUCH_PROVIDER */;\n      _assert(providerIds.has(provider) === expected, user.auth, code);\n    });\n    return _assertLinkedStatus2.apply(this, arguments);\n  }\n  function _reauthenticate(_x133, _x134) {\n    return _reauthenticate2.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _reauthenticate2() {\n    _reauthenticate2 = _asyncToGenerator(function* (user, credential) {\n      var bypassAuthState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var auth = user.auth;\n      if (app._isFirebaseServerApp(auth.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n      }\n      var operationType = \"reauthenticate\" /* OperationType.REAUTHENTICATE */;\n      try {\n        var response = yield _logoutIfInvalidated(user, _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user), bypassAuthState);\n        _assert(response.idToken, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        var parsed = _parseToken(response.idToken);\n        _assert(parsed, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        var localId = parsed.sub;\n        _assert(user.uid === localId, auth, \"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */);\n        return UserCredentialImpl._forOperation(user, operationType, response);\n      } catch (e) {\n        // Convert user deleted error into user mismatch\n        if (e?.code === `auth/${\"user-not-found\" /* AuthErrorCode.USER_DELETED */}`) {\n          _fail(auth, \"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */);\n        }\n        throw e;\n      }\n    });\n    return _reauthenticate2.apply(this, arguments);\n  }\n  function _signInWithCredential(_x135, _x136) {\n    return _signInWithCredential2.apply(this, arguments);\n  }\n  /**\n   * Asynchronously signs in with the given credentials.\n   *\n   * @remarks\n   * An {@link AuthProvider} can be used to generate the credential.\n   *\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param credential - The auth credential.\n   *\n   * @public\n   */\n  function _signInWithCredential2() {\n    _signInWithCredential2 = _asyncToGenerator(function* (auth, credential) {\n      var bypassAuthState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      if (app._isFirebaseServerApp(auth.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n      }\n      var operationType = \"signIn\" /* OperationType.SIGN_IN */;\n      var response = yield _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential);\n      var userCredential = yield UserCredentialImpl._fromIdTokenResponse(auth, operationType, response);\n      if (!bypassAuthState) {\n        yield auth._updateCurrentUser(userCredential.user);\n      }\n      return userCredential;\n    });\n    return _signInWithCredential2.apply(this, arguments);\n  }\n  function signInWithCredential(_x137, _x138) {\n    return _signInWithCredential3.apply(this, arguments);\n  }\n  /**\n   * Links the user account with the given credentials.\n   *\n   * @remarks\n   * An {@link AuthProvider} can be used to generate the credential.\n   *\n   * @param user - The user.\n   * @param credential - The auth credential.\n   *\n   * @public\n   */\n  function _signInWithCredential3() {\n    _signInWithCredential3 = _asyncToGenerator(function* (auth, credential) {\n      return _signInWithCredential(_castAuth(auth), credential);\n    });\n    return _signInWithCredential3.apply(this, arguments);\n  }\n  function linkWithCredential(_x139, _x140) {\n    return _linkWithCredential.apply(this, arguments);\n  }\n  /**\n   * Re-authenticates a user using a fresh credential.\n   *\n   * @remarks\n   * Use before operations such as {@link updatePassword} that require tokens from recent sign-in\n   * attempts. This method can be used to recover from a `CREDENTIAL_TOO_OLD_LOGIN_AGAIN` error\n   * or a `TOKEN_EXPIRED` error.\n   *\n   * This method is not supported on any {@link User} signed in by {@link Auth} instances\n   * created with a {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param user - The user.\n   * @param credential - The auth credential.\n   *\n   * @public\n   */\n  function _linkWithCredential() {\n    _linkWithCredential = _asyncToGenerator(function* (user, credential) {\n      var userInternal = util.getModularInstance(user);\n      yield _assertLinkedStatus(false, userInternal, credential.providerId);\n      return _link(userInternal, credential);\n    });\n    return _linkWithCredential.apply(this, arguments);\n  }\n  function reauthenticateWithCredential(_x141, _x142) {\n    return _reauthenticateWithCredential.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _reauthenticateWithCredential() {\n    _reauthenticateWithCredential = _asyncToGenerator(function* (user, credential) {\n      return _reauthenticate(util.getModularInstance(user), credential);\n    });\n    return _reauthenticateWithCredential.apply(this, arguments);\n  }\n  function signInWithCustomToken$1(_x143, _x144) {\n    return _signInWithCustomToken$.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Asynchronously signs in using a custom token.\n   *\n   * @remarks\n   * Custom tokens are used to integrate Firebase Auth with existing auth systems, and must\n   * be generated by an auth backend using the\n   * {@link https://firebase.google.com/docs/reference/admin/node/admin.auth.Auth#createcustomtoken | createCustomToken}\n   * method in the {@link https://firebase.google.com/docs/auth/admin | Admin SDK} .\n   *\n   * Fails with an error if the token is invalid, expired, or not accepted by the Firebase Auth service.\n   *\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param customToken - The custom token to sign in with.\n   *\n   * @public\n   */\n  function _signInWithCustomToken$() {\n    _signInWithCustomToken$ = _asyncToGenerator(function* (auth, request) {\n      return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithCustomToken\" /* Endpoint.SIGN_IN_WITH_CUSTOM_TOKEN */, _addTidIfNecessary(auth, request));\n    });\n    return _signInWithCustomToken$.apply(this, arguments);\n  }\n  function signInWithCustomToken(_x145, _x146) {\n    return _signInWithCustomToken.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _signInWithCustomToken() {\n    _signInWithCustomToken = _asyncToGenerator(function* (auth, customToken) {\n      if (app._isFirebaseServerApp(auth.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n      }\n      var authInternal = _castAuth(auth);\n      var response = yield signInWithCustomToken$1(authInternal, {\n        token: customToken,\n        returnSecureToken: true\n      });\n      var cred = yield UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response);\n      yield authInternal._updateCurrentUser(cred.user);\n      return cred;\n    });\n    return _signInWithCustomToken.apply(this, arguments);\n  }\n  var MultiFactorInfoImpl = /*#__PURE__*/function () {\n    function MultiFactorInfoImpl(factorId, response) {\n      _classCallCheck(this, MultiFactorInfoImpl);\n      this.factorId = factorId;\n      this.uid = response.mfaEnrollmentId;\n      this.enrollmentTime = new Date(response.enrolledAt).toUTCString();\n      this.displayName = response.displayName;\n    }\n    return _createClass(MultiFactorInfoImpl, null, [{\n      key: \"_fromServerResponse\",\n      value: function _fromServerResponse(auth, enrollment) {\n        if ('phoneInfo' in enrollment) {\n          return PhoneMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\n        } else if ('totpInfo' in enrollment) {\n          return TotpMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\n        }\n        return _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      }\n    }]);\n  }();\n  var PhoneMultiFactorInfoImpl = /*#__PURE__*/function (_MultiFactorInfoImpl) {\n    function PhoneMultiFactorInfoImpl(response) {\n      var _this11;\n      _classCallCheck(this, PhoneMultiFactorInfoImpl);\n      _this11 = _callSuper(this, PhoneMultiFactorInfoImpl, [\"phone\" /* FactorId.PHONE */, response]);\n      _this11.phoneNumber = response.phoneInfo;\n      return _this11;\n    }\n    _inherits(PhoneMultiFactorInfoImpl, _MultiFactorInfoImpl);\n    return _createClass(PhoneMultiFactorInfoImpl, null, [{\n      key: \"_fromServerResponse\",\n      value: function _fromServerResponse(_auth, enrollment) {\n        return new PhoneMultiFactorInfoImpl(enrollment);\n      }\n    }]);\n  }(MultiFactorInfoImpl);\n  var TotpMultiFactorInfoImpl = /*#__PURE__*/function (_MultiFactorInfoImpl2) {\n    function TotpMultiFactorInfoImpl(response) {\n      _classCallCheck(this, TotpMultiFactorInfoImpl);\n      return _callSuper(this, TotpMultiFactorInfoImpl, [\"totp\" /* FactorId.TOTP */, response]);\n    }\n    _inherits(TotpMultiFactorInfoImpl, _MultiFactorInfoImpl2);\n    return _createClass(TotpMultiFactorInfoImpl, null, [{\n      key: \"_fromServerResponse\",\n      value: function _fromServerResponse(_auth, enrollment) {\n        return new TotpMultiFactorInfoImpl(enrollment);\n      }\n    }]);\n  }(MultiFactorInfoImpl);\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _setActionCodeSettingsOnRequest(auth, request, actionCodeSettings) {\n    _assert(actionCodeSettings.url?.length > 0, auth, \"invalid-continue-uri\" /* AuthErrorCode.INVALID_CONTINUE_URI */);\n    _assert(typeof actionCodeSettings.dynamicLinkDomain === 'undefined' || actionCodeSettings.dynamicLinkDomain.length > 0, auth, \"invalid-dynamic-link-domain\" /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */);\n    _assert(typeof actionCodeSettings.linkDomain === 'undefined' || actionCodeSettings.linkDomain.length > 0, auth, \"invalid-hosting-link-domain\" /* AuthErrorCode.INVALID_HOSTING_LINK_DOMAIN */);\n    request.continueUrl = actionCodeSettings.url;\n    request.dynamicLinkDomain = actionCodeSettings.dynamicLinkDomain;\n    request.linkDomain = actionCodeSettings.linkDomain;\n    request.canHandleCodeInApp = actionCodeSettings.handleCodeInApp;\n    if (actionCodeSettings.iOS) {\n      _assert(actionCodeSettings.iOS.bundleId.length > 0, auth, \"missing-ios-bundle-id\" /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */);\n      request.iOSBundleId = actionCodeSettings.iOS.bundleId;\n    }\n    if (actionCodeSettings.android) {\n      _assert(actionCodeSettings.android.packageName.length > 0, auth, \"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */);\n      request.androidInstallApp = actionCodeSettings.android.installApp;\n      request.androidMinimumVersionCode = actionCodeSettings.android.minimumVersion;\n      request.androidPackageName = actionCodeSettings.android.packageName;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Updates the password policy cached in the {@link Auth} instance if a policy is already\n   * cached for the project or tenant.\n   *\n   * @remarks\n   * We only fetch the password policy if the password did not meet policy requirements and\n   * there is an existing policy cached. A developer must call validatePassword at least\n   * once for the cache to be automatically updated.\n   *\n   * @param auth - The {@link Auth} instance.\n   *\n   * @private\n   */\n  function recachePasswordPolicy(_x147) {\n    return _recachePasswordPolicy.apply(this, arguments);\n  }\n  /**\n   * Sends a password reset email to the given email address. This method does not throw an error when\n   * there's no user account with the given email address and\n   * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n   * is enabled.\n   *\n   * @remarks\n   * To complete the password reset, call {@link confirmPasswordReset} with the code supplied in\n   * the email sent to the user, along with the new password specified by the user.\n   *\n   * @example\n   * ```javascript\n   * const actionCodeSettings = {\n   *   url: 'https://www.example.com/?email=user@example.com',\n   *   iOS: {\n   *      bundleId: 'com.example.ios'\n   *   },\n   *   android: {\n   *     packageName: 'com.example.android',\n   *     installApp: true,\n   *     minimumVersion: '12'\n   *   },\n   *   handleCodeInApp: true\n   * };\n   * await sendPasswordResetEmail(auth, 'user@example.com', actionCodeSettings);\n   * // Obtain code from user.\n   * await confirmPasswordReset('user@example.com', code);\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param email - The user's email address.\n   * @param actionCodeSettings - The {@link ActionCodeSettings}.\n   *\n   * @public\n   */\n  function _recachePasswordPolicy() {\n    _recachePasswordPolicy = _asyncToGenerator(function* (auth) {\n      var authInternal = _castAuth(auth);\n      if (authInternal._getPasswordPolicyInternal()) {\n        yield authInternal._updatePasswordPolicy();\n      }\n    });\n    return _recachePasswordPolicy.apply(this, arguments);\n  }\n  function sendPasswordResetEmail(_x148, _x149, _x150) {\n    return _sendPasswordResetEmail.apply(this, arguments);\n  }\n  /**\n   * Completes the password reset process, given a confirmation code and new password.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param oobCode - A confirmation code sent to the user.\n   * @param newPassword - The new password.\n   *\n   * @public\n   */\n  function _sendPasswordResetEmail() {\n    _sendPasswordResetEmail = _asyncToGenerator(function* (auth, email, actionCodeSettings) {\n      var authInternal = _castAuth(auth);\n      var request = {\n        requestType: \"PASSWORD_RESET\" /* ActionCodeOperation.PASSWORD_RESET */,\n        email,\n        clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n      };\n      if (actionCodeSettings) {\n        _setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);\n      }\n      yield handleRecaptchaFlow(authInternal, request, \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */, sendPasswordResetEmail$1, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n    });\n    return _sendPasswordResetEmail.apply(this, arguments);\n  }\n  function confirmPasswordReset(_x151, _x152, _x153) {\n    return _confirmPasswordReset.apply(this, arguments);\n  }\n  /**\n   * Applies a verification code sent to the user by email or other out-of-band mechanism.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param oobCode - A verification code sent to the user.\n   *\n   * @public\n   */\n  function _confirmPasswordReset() {\n    _confirmPasswordReset = _asyncToGenerator(function* (auth, oobCode, newPassword) {\n      yield resetPassword(util.getModularInstance(auth), {\n        oobCode,\n        newPassword\n      }).catch(/*#__PURE__*/function () {\n        var _ref28 = _asyncToGenerator(function* (error) {\n          if (error.code === `auth/${\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */}`) {\n            void recachePasswordPolicy(auth);\n          }\n          throw error;\n        });\n        return function (_x221) {\n          return _ref28.apply(this, arguments);\n        };\n      }());\n      // Do not return the email.\n    });\n    return _confirmPasswordReset.apply(this, arguments);\n  }\n  function applyActionCode(_x154, _x155) {\n    return _applyActionCode.apply(this, arguments);\n  }\n  /**\n   * Checks a verification code sent to the user by email or other out-of-band mechanism.\n   *\n   * @returns metadata about the code.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param oobCode - A verification code sent to the user.\n   *\n   * @public\n   */\n  function _applyActionCode() {\n    _applyActionCode = _asyncToGenerator(function* (auth, oobCode) {\n      yield applyActionCode$1(util.getModularInstance(auth), {\n        oobCode\n      });\n    });\n    return _applyActionCode.apply(this, arguments);\n  }\n  function checkActionCode(_x156, _x157) {\n    return _checkActionCode.apply(this, arguments);\n  }\n  /**\n   * Checks a password reset code sent to the user by email or other out-of-band mechanism.\n   *\n   * @returns the user's email address if valid.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param code - A verification code sent to the user.\n   *\n   * @public\n   */\n  function _checkActionCode() {\n    _checkActionCode = _asyncToGenerator(function* (auth, oobCode) {\n      var authModular = util.getModularInstance(auth);\n      var response = yield resetPassword(authModular, {\n        oobCode\n      });\n      // Email could be empty only if the request type is EMAIL_SIGNIN or\n      // VERIFY_AND_CHANGE_EMAIL.\n      // New email should not be empty if the request type is\n      // VERIFY_AND_CHANGE_EMAIL.\n      // Multi-factor info could not be empty if the request type is\n      // REVERT_SECOND_FACTOR_ADDITION.\n      var operation = response.requestType;\n      _assert(operation, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      switch (operation) {\n        case \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */:\n          break;\n        case \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */:\n          _assert(response.newEmail, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          break;\n        case \"REVERT_SECOND_FACTOR_ADDITION\" /* ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION */:\n          _assert(response.mfaInfo, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        // fall through\n        default:\n          _assert(response.email, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      }\n      // The multi-factor info for revert second factor addition\n      var multiFactorInfo = null;\n      if (response.mfaInfo) {\n        multiFactorInfo = MultiFactorInfoImpl._fromServerResponse(_castAuth(authModular), response.mfaInfo);\n      }\n      return {\n        data: {\n          email: (response.requestType === \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */ ? response.newEmail : response.email) || null,\n          previousEmail: (response.requestType === \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */ ? response.email : response.newEmail) || null,\n          multiFactorInfo\n        },\n        operation\n      };\n    });\n    return _checkActionCode.apply(this, arguments);\n  }\n  function verifyPasswordResetCode(_x158, _x159) {\n    return _verifyPasswordResetCode.apply(this, arguments);\n  }\n  /**\n   * Creates a new user account associated with the specified email address and password.\n   *\n   * @remarks\n   * On successful creation of the user account, this user will also be signed in to your application.\n   *\n   * User account creation can fail if the account already exists or the password is invalid.\n   *\n   * This method is not supported on {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * Note: The email address acts as a unique identifier for the user and enables an email-based\n   * password reset. This function will create a new user account and set the initial user password.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param email - The user's email address.\n   * @param password - The user's chosen password.\n   *\n   * @public\n   */\n  function _verifyPasswordResetCode() {\n    _verifyPasswordResetCode = _asyncToGenerator(function* (auth, code) {\n      var _yield$checkActionCod = yield checkActionCode(util.getModularInstance(auth), code),\n        data = _yield$checkActionCod.data;\n      // Email should always be present since a code was sent to it\n      return data.email;\n    });\n    return _verifyPasswordResetCode.apply(this, arguments);\n  }\n  function createUserWithEmailAndPassword(_x160, _x161, _x162) {\n    return _createUserWithEmailAndPassword.apply(this, arguments);\n  }\n  /**\n   * Asynchronously signs in using an email and password.\n   *\n   * @remarks\n   * Fails with an error if the email address and password do not match. When\n   * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n   * is enabled, this method fails with \"auth/invalid-credential\" in case of an invalid\n   * email/password.\n   *\n   * This method is not supported on {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * Note: The user's password is NOT the password used to access the user's email account. The\n   * email address serves as a unique identifier for the user, and the password is used to access\n   * the user's account in your Firebase project. See also: {@link createUserWithEmailAndPassword}.\n   *\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param email - The users email address.\n   * @param password - The users password.\n   *\n   * @public\n   */\n  function _createUserWithEmailAndPassword() {\n    _createUserWithEmailAndPassword = _asyncToGenerator(function* (auth, email, password) {\n      if (app._isFirebaseServerApp(auth.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n      }\n      var authInternal = _castAuth(auth);\n      var request = {\n        returnSecureToken: true,\n        email,\n        password,\n        clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n      };\n      var signUpResponse = handleRecaptchaFlow(authInternal, request, \"signUpPassword\" /* RecaptchaActionName.SIGN_UP_PASSWORD */, signUp, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n      var response = yield signUpResponse.catch(error => {\n        if (error.code === `auth/${\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */}`) {\n          void recachePasswordPolicy(auth);\n        }\n        throw error;\n      });\n      var userCredential = yield UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response);\n      yield authInternal._updateCurrentUser(userCredential.user);\n      return userCredential;\n    });\n    return _createUserWithEmailAndPassword.apply(this, arguments);\n  }\n  function signInWithEmailAndPassword(auth, email, password) {\n    if (app._isFirebaseServerApp(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    return signInWithCredential(util.getModularInstance(auth), EmailAuthProvider.credential(email, password)).catch(/*#__PURE__*/function () {\n      var _ref18 = _asyncToGenerator(function* (error) {\n        if (error.code === `auth/${\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */}`) {\n          void recachePasswordPolicy(auth);\n        }\n        throw error;\n      });\n      return function (_x163) {\n        return _ref18.apply(this, arguments);\n      };\n    }());\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Sends a sign-in email link to the user with the specified email.\n   *\n   * @remarks\n   * The sign-in operation has to always be completed in the app unlike other out of band email\n   * actions (password reset and email verifications). This is because, at the end of the flow,\n   * the user is expected to be signed in and their Auth state persisted within the app.\n   *\n   * To complete sign in with the email link, call {@link signInWithEmailLink} with the email\n   * address and the email link supplied in the email sent to the user.\n   *\n   * @example\n   * ```javascript\n   * const actionCodeSettings = {\n   *   url: 'https://www.example.com/?email=user@example.com',\n   *   iOS: {\n   *      bundleId: 'com.example.ios'\n   *   },\n   *   android: {\n   *     packageName: 'com.example.android',\n   *     installApp: true,\n   *     minimumVersion: '12'\n   *   },\n   *   handleCodeInApp: true\n   * };\n   * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\n   * // Obtain emailLink from the user.\n   * if(isSignInWithEmailLink(auth, emailLink)) {\n   *   await signInWithEmailLink(auth, 'user@example.com', emailLink);\n   * }\n   * ```\n   *\n   * @param authInternal - The {@link Auth} instance.\n   * @param email - The user's email address.\n   * @param actionCodeSettings - The {@link ActionCodeSettings}.\n   *\n   * @public\n   */\n  function sendSignInLinkToEmail(_x164, _x165, _x166) {\n    return _sendSignInLinkToEmail.apply(this, arguments);\n  }\n  /**\n   * Checks if an incoming link is a sign-in with email link suitable for {@link signInWithEmailLink}.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param emailLink - The link sent to the user's email address.\n   *\n   * @public\n   */\n  function _sendSignInLinkToEmail() {\n    _sendSignInLinkToEmail = _asyncToGenerator(function* (auth, email, actionCodeSettings) {\n      var authInternal = _castAuth(auth);\n      var request = {\n        requestType: \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */,\n        email,\n        clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n      };\n      function setActionCodeSettings(request, actionCodeSettings) {\n        _assert(actionCodeSettings.handleCodeInApp, authInternal, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        if (actionCodeSettings) {\n          _setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);\n        }\n      }\n      setActionCodeSettings(request, actionCodeSettings);\n      yield handleRecaptchaFlow(authInternal, request, \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */, sendSignInLinkToEmail$1, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n    });\n    return _sendSignInLinkToEmail.apply(this, arguments);\n  }\n  function isSignInWithEmailLink(auth, emailLink) {\n    var actionCodeUrl = ActionCodeURL.parseLink(emailLink);\n    return actionCodeUrl?.operation === \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */;\n  }\n  /**\n   * Asynchronously signs in using an email and sign-in email link.\n   *\n   * @remarks\n   * If no link is passed, the link is inferred from the current URL.\n   *\n   * Fails with an error if the email address is invalid or OTP in email link expires.\n   *\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * Note: Confirm the link is a sign-in email link before calling this method firebase.auth.Auth.isSignInWithEmailLink.\n   *\n   * @example\n   * ```javascript\n   * const actionCodeSettings = {\n   *   url: 'https://www.example.com/?email=user@example.com',\n   *   iOS: {\n   *      bundleId: 'com.example.ios'\n   *   },\n   *   android: {\n   *     packageName: 'com.example.android',\n   *     installApp: true,\n   *     minimumVersion: '12'\n   *   },\n   *   handleCodeInApp: true\n   * };\n   * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\n   * // Obtain emailLink from the user.\n   * if(isSignInWithEmailLink(auth, emailLink)) {\n   *   await signInWithEmailLink(auth, 'user@example.com', emailLink);\n   * }\n   * ```\n   *\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param email - The user's email address.\n   * @param emailLink - The link sent to the user's email address.\n   *\n   * @public\n   */\n  function signInWithEmailLink(_x167, _x168, _x169) {\n    return _signInWithEmailLink.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _signInWithEmailLink() {\n    _signInWithEmailLink = _asyncToGenerator(function* (auth, email, emailLink) {\n      if (app._isFirebaseServerApp(auth.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n      }\n      var authModular = util.getModularInstance(auth);\n      var credential = EmailAuthProvider.credentialWithLink(email, emailLink || _getCurrentUrl());\n      // Check if the tenant ID in the email link matches the tenant ID on Auth\n      // instance.\n      _assert(credential._tenantId === (authModular.tenantId || null), authModular, \"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */);\n      return signInWithCredential(authModular, credential);\n    });\n    return _signInWithEmailLink.apply(this, arguments);\n  }\n  function createAuthUri(_x170, _x171) {\n    return _createAuthUri.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Gets the list of possible sign in methods for the given email address. This method returns an\n   * empty list when\n   * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n   * is enabled, irrespective of the number of authentication methods available for the given email.\n   *\n   * @remarks\n   * This is useful to differentiate methods of sign-in for the same provider, eg.\n   * {@link EmailAuthProvider} which has 2 methods of sign-in,\n   * {@link SignInMethod}.EMAIL_PASSWORD and\n   * {@link SignInMethod}.EMAIL_LINK.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param email - The user's email address.\n   *\n   * Deprecated. Migrating off of this method is recommended as a security best-practice.\n   * Learn more in the Identity Platform documentation for\n   * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}.\n   * @public\n   */\n  function _createAuthUri() {\n    _createAuthUri = _asyncToGenerator(function* (auth, request) {\n      return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:createAuthUri\" /* Endpoint.CREATE_AUTH_URI */, _addTidIfNecessary(auth, request));\n    });\n    return _createAuthUri.apply(this, arguments);\n  }\n  function fetchSignInMethodsForEmail(_x172, _x173) {\n    return _fetchSignInMethodsForEmail.apply(this, arguments);\n  }\n  /**\n   * Sends a verification email to a user.\n   *\n   * @remarks\n   * The verification process is completed by calling {@link applyActionCode}.\n   *\n   * @example\n   * ```javascript\n   * const actionCodeSettings = {\n   *   url: 'https://www.example.com/?email=user@example.com',\n   *   iOS: {\n   *      bundleId: 'com.example.ios'\n   *   },\n   *   android: {\n   *     packageName: 'com.example.android',\n   *     installApp: true,\n   *     minimumVersion: '12'\n   *   },\n   *   handleCodeInApp: true\n   * };\n   * await sendEmailVerification(user, actionCodeSettings);\n   * // Obtain code from the user.\n   * await applyActionCode(auth, code);\n   * ```\n   *\n   * @param user - The user.\n   * @param actionCodeSettings - The {@link ActionCodeSettings}.\n   *\n   * @public\n   */\n  function _fetchSignInMethodsForEmail() {\n    _fetchSignInMethodsForEmail = _asyncToGenerator(function* (auth, email) {\n      // createAuthUri returns an error if continue URI is not http or https.\n      // For environments like Cordova, Chrome extensions, native frameworks, file\n      // systems, etc, use http://localhost as continue URL.\n      var continueUri = _isHttpOrHttps() ? _getCurrentUrl() : 'http://localhost';\n      var request = {\n        identifier: email,\n        continueUri\n      };\n      var _yield$createAuthUri = yield createAuthUri(util.getModularInstance(auth), request),\n        signinMethods = _yield$createAuthUri.signinMethods;\n      return signinMethods || [];\n    });\n    return _fetchSignInMethodsForEmail.apply(this, arguments);\n  }\n  function sendEmailVerification(_x174, _x175) {\n    return _sendEmailVerification.apply(this, arguments);\n  }\n  /**\n   * Sends a verification email to a new email address.\n   *\n   * @remarks\n   * The user's email will be updated to the new one after being verified.\n   *\n   * If you have a custom email action handler, you can complete the verification process by calling\n   * {@link applyActionCode}.\n   *\n   * @example\n   * ```javascript\n   * const actionCodeSettings = {\n   *   url: 'https://www.example.com/?email=user@example.com',\n   *   iOS: {\n   *      bundleId: 'com.example.ios'\n   *   },\n   *   android: {\n   *     packageName: 'com.example.android',\n   *     installApp: true,\n   *     minimumVersion: '12'\n   *   },\n   *   handleCodeInApp: true\n   * };\n   * await verifyBeforeUpdateEmail(user, 'newemail@example.com', actionCodeSettings);\n   * // Obtain code from the user.\n   * await applyActionCode(auth, code);\n   * ```\n   *\n   * @param user - The user.\n   * @param newEmail - The new email address to be verified before update.\n   * @param actionCodeSettings - The {@link ActionCodeSettings}.\n   *\n   * @public\n   */\n  function _sendEmailVerification() {\n    _sendEmailVerification = _asyncToGenerator(function* (user, actionCodeSettings) {\n      var userInternal = util.getModularInstance(user);\n      var idToken = yield user.getIdToken();\n      var request = {\n        requestType: \"VERIFY_EMAIL\" /* ActionCodeOperation.VERIFY_EMAIL */,\n        idToken\n      };\n      if (actionCodeSettings) {\n        _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);\n      }\n      var _yield$sendEmailVerif = yield sendEmailVerification$1(userInternal.auth, request),\n        email = _yield$sendEmailVerif.email;\n      if (email !== user.email) {\n        yield user.reload();\n      }\n    });\n    return _sendEmailVerification.apply(this, arguments);\n  }\n  function verifyBeforeUpdateEmail(_x176, _x177, _x178) {\n    return _verifyBeforeUpdateEmail.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _verifyBeforeUpdateEmail() {\n    _verifyBeforeUpdateEmail = _asyncToGenerator(function* (user, newEmail, actionCodeSettings) {\n      var userInternal = util.getModularInstance(user);\n      var idToken = yield user.getIdToken();\n      var request = {\n        requestType: \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */,\n        idToken,\n        newEmail\n      };\n      if (actionCodeSettings) {\n        _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);\n      }\n      var _yield$verifyAndChang = yield verifyAndChangeEmail(userInternal.auth, request),\n        email = _yield$verifyAndChang.email;\n      if (email !== user.email) {\n        // If the local copy of the email on user is outdated, reload the\n        // user.\n        yield user.reload();\n      }\n    });\n    return _verifyBeforeUpdateEmail.apply(this, arguments);\n  }\n  function updateProfile$1(_x179, _x180) {\n    return _updateProfile$.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Updates a user's profile data.\n   *\n   * @param user - The user.\n   * @param profile - The profile's `displayName` and `photoURL` to update.\n   *\n   * @public\n   */\n  function _updateProfile$() {\n    _updateProfile$ = _asyncToGenerator(function* (auth, request) {\n      return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request);\n    });\n    return _updateProfile$.apply(this, arguments);\n  }\n  function updateProfile(_x181, _x182) {\n    return _updateProfile.apply(this, arguments);\n  }\n  /**\n   * Updates the user's email address.\n   *\n   * @remarks\n   * An email will be sent to the original email address (if it was set) that allows to revoke the\n   * email address change, in order to protect them from account hijacking.\n   *\n   * This method is not supported on any {@link User} signed in by {@link Auth} instances\n   * created with a {@link @firebase/app#FirebaseServerApp}.\n   *\n   * Important: this is a security sensitive operation that requires the user to have recently signed\n   * in. If this requirement isn't met, ask the user to authenticate again and then call\n   * {@link reauthenticateWithCredential}.\n   *\n   * @param user - The user.\n   * @param newEmail - The new email address.\n   *\n   * Throws \"auth/operation-not-allowed\" error when\n   * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n   * is enabled.\n   * Deprecated - Use {@link verifyBeforeUpdateEmail} instead.\n   *\n   * @public\n   */\n  function _updateProfile() {\n    _updateProfile = _asyncToGenerator(function* (user, _ref19) {\n      var displayName = _ref19.displayName,\n        photoUrl = _ref19.photoURL;\n      if (displayName === undefined && photoUrl === undefined) {\n        return;\n      }\n      var userInternal = util.getModularInstance(user);\n      var idToken = yield userInternal.getIdToken();\n      var profileRequest = {\n        idToken,\n        displayName,\n        photoUrl,\n        returnSecureToken: true\n      };\n      var response = yield _logoutIfInvalidated(userInternal, updateProfile$1(userInternal.auth, profileRequest));\n      userInternal.displayName = response.displayName || null;\n      userInternal.photoURL = response.photoUrl || null;\n      // Update the password provider as well\n      var passwordProvider = userInternal.providerData.find(_ref29 => {\n        var providerId = _ref29.providerId;\n        return providerId === \"password\";\n      } /* ProviderId.PASSWORD */);\n      if (passwordProvider) {\n        passwordProvider.displayName = userInternal.displayName;\n        passwordProvider.photoURL = userInternal.photoURL;\n      }\n      yield userInternal._updateTokensIfNecessary(response);\n    });\n    return _updateProfile.apply(this, arguments);\n  }\n  function updateEmail(user, newEmail) {\n    var userInternal = util.getModularInstance(user);\n    if (app._isFirebaseServerApp(userInternal.auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(userInternal.auth));\n    }\n    return updateEmailOrPassword(userInternal, newEmail, null);\n  }\n  /**\n   * Updates the user's password.\n   *\n   * @remarks\n   * Important: this is a security sensitive operation that requires the user to have recently signed\n   * in. If this requirement isn't met, ask the user to authenticate again and then call\n   * {@link reauthenticateWithCredential}.\n   *\n   * @param user - The user.\n   * @param newPassword - The new password.\n   *\n   * @public\n   */\n  function updatePassword(user, newPassword) {\n    return updateEmailOrPassword(util.getModularInstance(user), null, newPassword);\n  }\n  function updateEmailOrPassword(_x183, _x184, _x185) {\n    return _updateEmailOrPassword.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Parse the `AdditionalUserInfo` from the ID token response.\n   *\n   */\n  function _updateEmailOrPassword() {\n    _updateEmailOrPassword = _asyncToGenerator(function* (user, email, password) {\n      var auth = user.auth;\n      var idToken = yield user.getIdToken();\n      var request = {\n        idToken,\n        returnSecureToken: true\n      };\n      if (email) {\n        request.email = email;\n      }\n      if (password) {\n        request.password = password;\n      }\n      var response = yield _logoutIfInvalidated(user, updateEmailPassword(auth, request));\n      yield user._updateTokensIfNecessary(response, /* reload */true);\n    });\n    return _updateEmailOrPassword.apply(this, arguments);\n  }\n  function _fromIdTokenResponse(idTokenResponse) {\n    if (!idTokenResponse) {\n      return null;\n    }\n    var providerId = idTokenResponse.providerId;\n    var profile = idTokenResponse.rawUserInfo ? JSON.parse(idTokenResponse.rawUserInfo) : {};\n    var isNewUser = idTokenResponse.isNewUser || idTokenResponse.kind === \"identitytoolkit#SignupNewUserResponse\" /* IdTokenResponseKind.SignupNewUser */;\n    if (!providerId && idTokenResponse?.idToken) {\n      var signInProvider = _parseToken(idTokenResponse.idToken)?.firebase?.['sign_in_provider'];\n      if (signInProvider) {\n        var filteredProviderId = signInProvider !== \"anonymous\" /* ProviderId.ANONYMOUS */ && signInProvider !== \"custom\" /* ProviderId.CUSTOM */ ? signInProvider : null;\n        // Uses generic class in accordance with the legacy SDK.\n        return new GenericAdditionalUserInfo(isNewUser, filteredProviderId);\n      }\n    }\n    if (!providerId) {\n      return null;\n    }\n    switch (providerId) {\n      case \"facebook.com\" /* ProviderId.FACEBOOK */:\n        return new FacebookAdditionalUserInfo(isNewUser, profile);\n      case \"github.com\" /* ProviderId.GITHUB */:\n        return new GithubAdditionalUserInfo(isNewUser, profile);\n      case \"google.com\" /* ProviderId.GOOGLE */:\n        return new GoogleAdditionalUserInfo(isNewUser, profile);\n      case \"twitter.com\" /* ProviderId.TWITTER */:\n        return new TwitterAdditionalUserInfo(isNewUser, profile, idTokenResponse.screenName || null);\n      case \"custom\" /* ProviderId.CUSTOM */:\n      case \"anonymous\" /* ProviderId.ANONYMOUS */:\n        return new GenericAdditionalUserInfo(isNewUser, null);\n      default:\n        return new GenericAdditionalUserInfo(isNewUser, providerId, profile);\n    }\n  }\n  var GenericAdditionalUserInfo = /*#__PURE__*/_createClass(function GenericAdditionalUserInfo(isNewUser, providerId) {\n    var profile = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    _classCallCheck(this, GenericAdditionalUserInfo);\n    this.isNewUser = isNewUser;\n    this.providerId = providerId;\n    this.profile = profile;\n  });\n  var FederatedAdditionalUserInfoWithUsername = /*#__PURE__*/function (_GenericAdditionalUse) {\n    function FederatedAdditionalUserInfoWithUsername(isNewUser, providerId, profile, username) {\n      var _this12;\n      _classCallCheck(this, FederatedAdditionalUserInfoWithUsername);\n      _this12 = _callSuper(this, FederatedAdditionalUserInfoWithUsername, [isNewUser, providerId, profile]);\n      _this12.username = username;\n      return _this12;\n    }\n    _inherits(FederatedAdditionalUserInfoWithUsername, _GenericAdditionalUse);\n    return _createClass(FederatedAdditionalUserInfoWithUsername);\n  }(GenericAdditionalUserInfo);\n  var FacebookAdditionalUserInfo = /*#__PURE__*/function (_GenericAdditionalUse2) {\n    function FacebookAdditionalUserInfo(isNewUser, profile) {\n      _classCallCheck(this, FacebookAdditionalUserInfo);\n      return _callSuper(this, FacebookAdditionalUserInfo, [isNewUser, \"facebook.com\" /* ProviderId.FACEBOOK */, profile]);\n    }\n    _inherits(FacebookAdditionalUserInfo, _GenericAdditionalUse2);\n    return _createClass(FacebookAdditionalUserInfo);\n  }(GenericAdditionalUserInfo);\n  var GithubAdditionalUserInfo = /*#__PURE__*/function (_FederatedAdditionalU) {\n    function GithubAdditionalUserInfo(isNewUser, profile) {\n      _classCallCheck(this, GithubAdditionalUserInfo);\n      return _callSuper(this, GithubAdditionalUserInfo, [isNewUser, \"github.com\" /* ProviderId.GITHUB */, profile, typeof profile?.login === 'string' ? profile?.login : null]);\n    }\n    _inherits(GithubAdditionalUserInfo, _FederatedAdditionalU);\n    return _createClass(GithubAdditionalUserInfo);\n  }(FederatedAdditionalUserInfoWithUsername);\n  var GoogleAdditionalUserInfo = /*#__PURE__*/function (_GenericAdditionalUse3) {\n    function GoogleAdditionalUserInfo(isNewUser, profile) {\n      _classCallCheck(this, GoogleAdditionalUserInfo);\n      return _callSuper(this, GoogleAdditionalUserInfo, [isNewUser, \"google.com\" /* ProviderId.GOOGLE */, profile]);\n    }\n    _inherits(GoogleAdditionalUserInfo, _GenericAdditionalUse3);\n    return _createClass(GoogleAdditionalUserInfo);\n  }(GenericAdditionalUserInfo);\n  var TwitterAdditionalUserInfo = /*#__PURE__*/function (_FederatedAdditionalU2) {\n    function TwitterAdditionalUserInfo(isNewUser, profile, screenName) {\n      _classCallCheck(this, TwitterAdditionalUserInfo);\n      return _callSuper(this, TwitterAdditionalUserInfo, [isNewUser, \"twitter.com\" /* ProviderId.TWITTER */, profile, screenName]);\n    }\n    _inherits(TwitterAdditionalUserInfo, _FederatedAdditionalU2);\n    return _createClass(TwitterAdditionalUserInfo);\n  }(FederatedAdditionalUserInfoWithUsername);\n  /**\n   * Extracts provider specific {@link AdditionalUserInfo} for the given credential.\n   *\n   * @param userCredential - The user credential.\n   *\n   * @public\n   */\n  function getAdditionalUserInfo(userCredential) {\n    var user = userCredential.user,\n      _tokenResponse = userCredential._tokenResponse;\n    if (user.isAnonymous && !_tokenResponse) {\n      // Handle the special case where signInAnonymously() gets called twice.\n      // No network call is made so there's nothing to actually fill this in\n      return {\n        providerId: null,\n        isNewUser: false,\n        profile: null\n      };\n    }\n    return _fromIdTokenResponse(_tokenResponse);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  // Non-optional auth methods.\n  /**\n   * Changes the type of persistence on the {@link Auth} instance for the currently saved\n   * `Auth` session and applies this type of persistence for future sign-in requests, including\n   * sign-in with redirect requests.\n   *\n   * @remarks\n   * This makes it easy for a user signing in to specify whether their session should be\n   * remembered or not. It also makes it easier to never persist the `Auth` state for applications\n   * that are shared by other users or have sensitive data.\n   *\n   * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @example\n   * ```javascript\n   * setPersistence(auth, browserSessionPersistence);\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param persistence - The {@link Persistence} to use.\n   * @returns A `Promise` that resolves once the persistence change has completed\n   *\n   * @public\n   */\n  function setPersistence(auth, persistence) {\n    return util.getModularInstance(auth).setPersistence(persistence);\n  }\n  /**\n   * Loads the reCAPTCHA configuration into the `Auth` instance.\n   *\n   * @remarks\n   * This will load the reCAPTCHA config, which indicates whether the reCAPTCHA\n   * verification flow should be triggered for each auth provider, into the\n   * current Auth session.\n   *\n   * If initializeRecaptchaConfig() is not invoked, the auth flow will always start\n   * without reCAPTCHA verification. If the provider is configured to require reCAPTCHA\n   * verification, the SDK will transparently load the reCAPTCHA config and restart the\n   * auth flows.\n   *\n   * Thus, by calling this optional method, you will reduce the latency of future auth flows.\n   * Loading the reCAPTCHA config early will also enhance the signal collected by reCAPTCHA.\n   *\n   * This method does not work in a Node.js environment.\n   *\n   * @example\n   * ```javascript\n   * initializeRecaptchaConfig(auth);\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   *\n   * @public\n   */\n  function initializeRecaptchaConfig(auth) {\n    return _initializeRecaptchaConfig(auth);\n  }\n  /**\n   * Validates the password against the password policy configured for the project or tenant.\n   *\n   * @remarks\n   * If no tenant ID is set on the `Auth` instance, then this method will use the password\n   * policy configured for the project. Otherwise, this method will use the policy configured\n   * for the tenant. If a password policy has not been configured, then the default policy\n   * configured for all projects will be used.\n   *\n   * If an auth flow fails because a submitted password does not meet the password policy\n   * requirements and this method has previously been called, then this method will use the\n   * most recent policy available when called again.\n   *\n   * @example\n   * ```javascript\n   * validatePassword(auth, 'some-password');\n   * ```\n   *\n   * @param auth The {@link Auth} instance.\n   * @param password The password to validate.\n   *\n   * @public\n   */\n  function validatePassword(_x186, _x187) {\n    return _validatePassword2.apply(this, arguments);\n  }\n  /**\n   * Adds an observer for changes to the signed-in user's ID token.\n   *\n   * @remarks\n   * This includes sign-in, sign-out, and token refresh events.\n   * This will not be triggered automatically upon ID token expiration. Use {@link User.getIdToken} to refresh the ID token.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param nextOrObserver - callback triggered on change.\n   * @param error - Deprecated. This callback is never triggered. Errors\n   * on signing in/out can be caught in promises returned from\n   * sign-in/sign-out functions.\n   * @param completed - Deprecated. This callback is never triggered.\n   *\n   * @public\n   */\n  function _validatePassword2() {\n    _validatePassword2 = _asyncToGenerator(function* (auth, password) {\n      var authInternal = _castAuth(auth);\n      return authInternal.validatePassword(password);\n    });\n    return _validatePassword2.apply(this, arguments);\n  }\n  function onIdTokenChanged(auth, nextOrObserver, error, completed) {\n    return util.getModularInstance(auth).onIdTokenChanged(nextOrObserver, error, completed);\n  }\n  /**\n   * Adds a blocking callback that runs before an auth state change\n   * sets a new user.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param callback - callback triggered before new user value is set.\n   *   If this throws, it blocks the user from being set.\n   * @param onAbort - callback triggered if a later `beforeAuthStateChanged()`\n   *   callback throws, allowing you to undo any side effects.\n   */\n  function beforeAuthStateChanged(auth, callback, onAbort) {\n    return util.getModularInstance(auth).beforeAuthStateChanged(callback, onAbort);\n  }\n  /**\n   * Adds an observer for changes to the user's sign-in state.\n   *\n   * @remarks\n   * To keep the old behavior, see {@link onIdTokenChanged}.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param nextOrObserver - callback triggered on change.\n   * @param error - Deprecated. This callback is never triggered. Errors\n   * on signing in/out can be caught in promises returned from\n   * sign-in/sign-out functions.\n   * @param completed - Deprecated. This callback is never triggered.\n   *\n   * @public\n   */\n  function onAuthStateChanged(auth, nextOrObserver, error, completed) {\n    return util.getModularInstance(auth).onAuthStateChanged(nextOrObserver, error, completed);\n  }\n  /**\n   * Sets the current language to the default device/browser preference.\n   *\n   * @param auth - The {@link Auth} instance.\n   *\n   * @public\n   */\n  function useDeviceLanguage(auth) {\n    util.getModularInstance(auth).useDeviceLanguage();\n  }\n  /**\n   * Asynchronously sets the provided user as {@link Auth.currentUser} on the\n   * {@link Auth} instance.\n   *\n   * @remarks\n   * A new instance copy of the user provided will be made and set as currentUser.\n   *\n   * This will trigger {@link onAuthStateChanged} and {@link onIdTokenChanged} listeners\n   * like other sign in methods.\n   *\n   * The operation fails with an error if the user to be updated belongs to a different Firebase\n   * project.\n   *\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param user - The new {@link User}.\n   *\n   * @public\n   */\n  function updateCurrentUser(auth, user) {\n    return util.getModularInstance(auth).updateCurrentUser(user);\n  }\n  /**\n   * Signs out the current user.\n   *\n   * @remarks\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param auth - The {@link Auth} instance.\n   *\n   * @public\n   */\n  function signOut(auth) {\n    return util.getModularInstance(auth).signOut();\n  }\n  /**\n   * Revokes the given access token. Currently only supports Apple OAuth access tokens.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param token - The Apple OAuth access token.\n   *\n   * @public\n   */\n  function revokeAccessToken(auth, token) {\n    var authInternal = _castAuth(auth);\n    return authInternal.revokeAccessToken(token);\n  }\n  /**\n   * Deletes and signs out the user.\n   *\n   * @remarks\n   * Important: this is a security-sensitive operation that requires the user to have recently\n   * signed in. If this requirement isn't met, ask the user to authenticate again and then call\n   * {@link reauthenticateWithCredential}.\n   *\n   * @param user - The user.\n   *\n   * @public\n   */\n  function deleteUser(_x188) {\n    return _deleteUser.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _deleteUser() {\n    _deleteUser = _asyncToGenerator(function* (user) {\n      return util.getModularInstance(user).delete();\n    });\n    return _deleteUser.apply(this, arguments);\n  }\n  var MultiFactorSessionImpl = /*#__PURE__*/function () {\n    function MultiFactorSessionImpl(type, credential, user) {\n      _classCallCheck(this, MultiFactorSessionImpl);\n      this.type = type;\n      this.credential = credential;\n      this.user = user;\n    }\n    return _createClass(MultiFactorSessionImpl, [{\n      key: \"toJSON\",\n      value: function toJSON() {\n        var key = this.type === \"enroll\" /* MultiFactorSessionType.ENROLL */ ? 'idToken' : 'pendingCredential';\n        return {\n          multiFactorSession: {\n            [key]: this.credential\n          }\n        };\n      }\n    }], [{\n      key: \"_fromIdtoken\",\n      value: function _fromIdtoken(idToken, user) {\n        return new MultiFactorSessionImpl(\"enroll\" /* MultiFactorSessionType.ENROLL */, idToken, user);\n      }\n    }, {\n      key: \"_fromMfaPendingCredential\",\n      value: function _fromMfaPendingCredential(mfaPendingCredential) {\n        return new MultiFactorSessionImpl(\"signin\" /* MultiFactorSessionType.SIGN_IN */, mfaPendingCredential);\n      }\n    }, {\n      key: \"fromJSON\",\n      value: function fromJSON(obj) {\n        if (obj?.multiFactorSession) {\n          if (obj.multiFactorSession?.pendingCredential) {\n            return MultiFactorSessionImpl._fromMfaPendingCredential(obj.multiFactorSession.pendingCredential);\n          } else if (obj.multiFactorSession?.idToken) {\n            return MultiFactorSessionImpl._fromIdtoken(obj.multiFactorSession.idToken);\n          }\n        }\n        return null;\n      }\n    }]);\n  }();\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  var MultiFactorResolverImpl = /*#__PURE__*/function () {\n    function MultiFactorResolverImpl(session, hints, signInResolver) {\n      _classCallCheck(this, MultiFactorResolverImpl);\n      this.session = session;\n      this.hints = hints;\n      this.signInResolver = signInResolver;\n    }\n    /** @internal */\n    return _createClass(MultiFactorResolverImpl, [{\n      key: \"resolveSignIn\",\n      value: function () {\n        var _resolveSignIn = _asyncToGenerator(function* (assertionExtern) {\n          var assertion = assertionExtern;\n          return this.signInResolver(assertion);\n        });\n        function resolveSignIn(_x189) {\n          return _resolveSignIn.apply(this, arguments);\n        }\n        return resolveSignIn;\n      }()\n    }], [{\n      key: \"_fromError\",\n      value: function _fromError(authExtern, error) {\n        var auth = _castAuth(authExtern);\n        var serverResponse = error.customData._serverResponse;\n        var hints = (serverResponse.mfaInfo || []).map(enrollment => MultiFactorInfoImpl._fromServerResponse(auth, enrollment));\n        _assert(serverResponse.mfaPendingCredential, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        var session = MultiFactorSessionImpl._fromMfaPendingCredential(serverResponse.mfaPendingCredential);\n        return new MultiFactorResolverImpl(session, hints, /*#__PURE__*/function () {\n          var _ref20 = _asyncToGenerator(function* (assertion) {\n            var mfaResponse = yield assertion._process(auth, session);\n            // Clear out the unneeded fields from the old login response\n            delete serverResponse.mfaInfo;\n            delete serverResponse.mfaPendingCredential;\n            // Use in the new token & refresh token in the old response\n            var idTokenResponse = {\n              ...serverResponse,\n              idToken: mfaResponse.idToken,\n              refreshToken: mfaResponse.refreshToken\n            };\n            // TODO: we should collapse this switch statement into UserCredentialImpl._forOperation and have it support the SIGN_IN case\n            switch (error.operationType) {\n              case \"signIn\" /* OperationType.SIGN_IN */:\n                var userCredential = yield UserCredentialImpl._fromIdTokenResponse(auth, error.operationType, idTokenResponse);\n                yield auth._updateCurrentUser(userCredential.user);\n                return userCredential;\n              case \"reauthenticate\" /* OperationType.REAUTHENTICATE */:\n                _assert(error.user, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n                return UserCredentialImpl._forOperation(error.user, error.operationType, idTokenResponse);\n              default:\n                _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n            }\n          });\n          return function (_x190) {\n            return _ref20.apply(this, arguments);\n          };\n        }());\n      }\n    }]);\n  }();\n  /**\n   * Provides a {@link MultiFactorResolver} suitable for completion of a\n   * multi-factor flow.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param error - The {@link MultiFactorError} raised during a sign-in, or\n   * reauthentication operation.\n   *\n   * @public\n   */\n  function getMultiFactorResolver(auth, error) {\n    var authModular = util.getModularInstance(auth);\n    var errorInternal = error;\n    _assert(error.customData.operationType, authModular, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    _assert(errorInternal.customData._serverResponse?.mfaPendingCredential, authModular, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    return MultiFactorResolverImpl._fromError(authModular, errorInternal);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function startEnrollPhoneMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:start\" /* Endpoint.START_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\n  }\n  function finalizeEnrollPhoneMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:finalize\" /* Endpoint.FINALIZE_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\n  }\n  function startEnrollTotpMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:start\" /* Endpoint.START_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\n  }\n  function finalizeEnrollTotpMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:finalize\" /* Endpoint.FINALIZE_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\n  }\n  function withdrawMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:withdraw\" /* Endpoint.WITHDRAW_MFA */, _addTidIfNecessary(auth, request));\n  }\n  var MultiFactorUserImpl = /*#__PURE__*/function () {\n    function MultiFactorUserImpl(user) {\n      _classCallCheck(this, MultiFactorUserImpl);\n      this.user = user;\n      this.enrolledFactors = [];\n      user._onReload(userInfo => {\n        if (userInfo.mfaInfo) {\n          this.enrolledFactors = userInfo.mfaInfo.map(enrollment => MultiFactorInfoImpl._fromServerResponse(user.auth, enrollment));\n        }\n      });\n    }\n    return _createClass(MultiFactorUserImpl, [{\n      key: \"getSession\",\n      value: function () {\n        var _getSession = _asyncToGenerator(function* () {\n          return MultiFactorSessionImpl._fromIdtoken(yield this.user.getIdToken(), this.user);\n        });\n        function getSession() {\n          return _getSession.apply(this, arguments);\n        }\n        return getSession;\n      }()\n    }, {\n      key: \"enroll\",\n      value: function () {\n        var _enroll = _asyncToGenerator(function* (assertionExtern, displayName) {\n          var assertion = assertionExtern;\n          var session = yield this.getSession();\n          var finalizeMfaResponse = yield _logoutIfInvalidated(this.user, assertion._process(this.user.auth, session, displayName));\n          // New tokens will be issued after enrollment of the new second factors.\n          // They need to be updated on the user.\n          yield this.user._updateTokensIfNecessary(finalizeMfaResponse);\n          // The user needs to be reloaded to get the new multi-factor information\n          // from server. USER_RELOADED event will be triggered and `enrolledFactors`\n          // will be updated.\n          return this.user.reload();\n        });\n        function enroll(_x191, _x192) {\n          return _enroll.apply(this, arguments);\n        }\n        return enroll;\n      }()\n    }, {\n      key: \"unenroll\",\n      value: function () {\n        var _unenroll = _asyncToGenerator(function* (infoOrUid) {\n          var mfaEnrollmentId = typeof infoOrUid === 'string' ? infoOrUid : infoOrUid.uid;\n          var idToken = yield this.user.getIdToken();\n          try {\n            var idTokenResponse = yield _logoutIfInvalidated(this.user, withdrawMfa(this.user.auth, {\n              idToken,\n              mfaEnrollmentId\n            }));\n            // Remove the second factor from the user's list.\n            this.enrolledFactors = this.enrolledFactors.filter(_ref21 => {\n              var uid = _ref21.uid;\n              return uid !== mfaEnrollmentId;\n            });\n            // Depending on whether the backend decided to revoke the user's session,\n            // the tokenResponse may be empty. If the tokens were not updated (and they\n            // are now invalid), reloading the user will discover this and invalidate\n            // the user's state accordingly.\n            yield this.user._updateTokensIfNecessary(idTokenResponse);\n            yield this.user.reload();\n          } catch (e) {\n            throw e;\n          }\n        });\n        function unenroll(_x193) {\n          return _unenroll.apply(this, arguments);\n        }\n        return unenroll;\n      }()\n    }], [{\n      key: \"_fromUser\",\n      value: function _fromUser(user) {\n        return new MultiFactorUserImpl(user);\n      }\n    }]);\n  }();\n  var multiFactorUserCache = new WeakMap();\n  /**\n   * The {@link MultiFactorUser} corresponding to the user.\n   *\n   * @remarks\n   * This is used to access all multi-factor properties and operations related to the user.\n   *\n   * @param user - The user.\n   *\n   * @public\n   */\n  function multiFactor(user) {\n    var userModular = util.getModularInstance(user);\n    if (!multiFactorUserCache.has(userModular)) {\n      multiFactorUserCache.set(userModular, MultiFactorUserImpl._fromUser(userModular));\n    }\n    return multiFactorUserCache.get(userModular);\n  }\n  var name = \"@firebase/auth\";\n  var version = \"1.11.0\";\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  var AuthInterop = /*#__PURE__*/function () {\n    function AuthInterop(auth) {\n      _classCallCheck(this, AuthInterop);\n      this.auth = auth;\n      this.internalListeners = new Map();\n    }\n    return _createClass(AuthInterop, [{\n      key: \"getUid\",\n      value: function getUid() {\n        this.assertAuthConfigured();\n        return this.auth.currentUser?.uid || null;\n      }\n    }, {\n      key: \"getToken\",\n      value: function () {\n        var _getToken2 = _asyncToGenerator(function* (forceRefresh) {\n          this.assertAuthConfigured();\n          yield this.auth._initializationPromise;\n          if (!this.auth.currentUser) {\n            return null;\n          }\n          var accessToken = yield this.auth.currentUser.getIdToken(forceRefresh);\n          return {\n            accessToken\n          };\n        });\n        function getToken(_x194) {\n          return _getToken2.apply(this, arguments);\n        }\n        return getToken;\n      }()\n    }, {\n      key: \"addAuthTokenListener\",\n      value: function addAuthTokenListener(listener) {\n        this.assertAuthConfigured();\n        if (this.internalListeners.has(listener)) {\n          return;\n        }\n        var unsubscribe = this.auth.onIdTokenChanged(user => {\n          listener(user?.stsTokenManager.accessToken || null);\n        });\n        this.internalListeners.set(listener, unsubscribe);\n        this.updateProactiveRefresh();\n      }\n    }, {\n      key: \"removeAuthTokenListener\",\n      value: function removeAuthTokenListener(listener) {\n        this.assertAuthConfigured();\n        var unsubscribe = this.internalListeners.get(listener);\n        if (!unsubscribe) {\n          return;\n        }\n        this.internalListeners.delete(listener);\n        unsubscribe();\n        this.updateProactiveRefresh();\n      }\n    }, {\n      key: \"assertAuthConfigured\",\n      value: function assertAuthConfigured() {\n        _assert(this.auth._initializationPromise, \"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */);\n      }\n    }, {\n      key: \"updateProactiveRefresh\",\n      value: function updateProactiveRefresh() {\n        if (this.internalListeners.size > 0) {\n          this.auth._startProactiveRefresh();\n        } else {\n          this.auth._stopProactiveRefresh();\n        }\n      }\n    }]);\n  }();\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function getVersionForPlatform(clientPlatform) {\n    switch (clientPlatform) {\n      case \"Node\" /* ClientPlatform.NODE */:\n        return 'node';\n      case \"ReactNative\" /* ClientPlatform.REACT_NATIVE */:\n        return 'rn';\n      case \"Worker\" /* ClientPlatform.WORKER */:\n        return 'webworker';\n      case \"Cordova\" /* ClientPlatform.CORDOVA */:\n        return 'cordova';\n      case \"WebExtension\" /* ClientPlatform.WEB_EXTENSION */:\n        return 'web-extension';\n      default:\n        return undefined;\n    }\n  }\n  /** @internal */\n  function registerAuth(clientPlatform) {\n    app._registerComponent(new component.Component(\"auth\" /* _ComponentName.AUTH */, (container, _ref22) => {\n      var deps = _ref22.options;\n      var app = container.getProvider('app').getImmediate();\n      var heartbeatServiceProvider = container.getProvider('heartbeat');\n      var appCheckServiceProvider = container.getProvider('app-check-internal');\n      var _app$options = app.options,\n        apiKey = _app$options.apiKey,\n        authDomain = _app$options.authDomain;\n      _assert(apiKey && !apiKey.includes(':'), \"invalid-api-key\" /* AuthErrorCode.INVALID_API_KEY */, {\n        appName: app.name\n      });\n      var config = {\n        apiKey,\n        authDomain,\n        clientPlatform,\n        apiHost: \"identitytoolkit.googleapis.com\" /* DefaultConfig.API_HOST */,\n        tokenApiHost: \"securetoken.googleapis.com\" /* DefaultConfig.TOKEN_API_HOST */,\n        apiScheme: \"https\" /* DefaultConfig.API_SCHEME */,\n        sdkClientVersion: _getClientVersion(clientPlatform)\n      };\n      var authInstance = new AuthImpl(app, heartbeatServiceProvider, appCheckServiceProvider, config);\n      _initializeAuthInstance(authInstance, deps);\n      return authInstance;\n    }, \"PUBLIC\" /* ComponentType.PUBLIC */)\n    /**\n     * Auth can only be initialized by explicitly calling getAuth() or initializeAuth()\n     * For why we do this, See go/firebase-next-auth-init\n     */.setInstantiationMode(\"EXPLICIT\" /* InstantiationMode.EXPLICIT */)\n    /**\n     * Because all firebase products that depend on auth depend on auth-internal directly,\n     * we need to initialize auth-internal after auth is initialized to make it available to other firebase products.\n     */.setInstanceCreatedCallback((container, _instanceIdentifier, _instance) => {\n      var authInternalProvider = container.getProvider(\"auth-internal\" /* _ComponentName.AUTH_INTERNAL */);\n      authInternalProvider.initialize();\n    }));\n    app._registerComponent(new component.Component(\"auth-internal\" /* _ComponentName.AUTH_INTERNAL */, container => {\n      var auth = _castAuth(container.getProvider(\"auth\" /* _ComponentName.AUTH */).getImmediate());\n      return (auth => new AuthInterop(auth))(auth);\n    }, \"PRIVATE\" /* ComponentType.PRIVATE */).setInstantiationMode(\"EXPLICIT\" /* InstantiationMode.EXPLICIT */));\n    app.registerVersion(name, version, getVersionForPlatform(clientPlatform));\n    // BUILD_TARGET will be replaced by values like esm, cjs, etc during the compilation\n    app.registerVersion(name, version, 'cjs2020');\n  }\n\n  /**\n   * @license\n   * Copyright 2021 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * An enum of factors that may be used for multifactor authentication.\n   *\n   * @public\n   */\n  var FactorId = {\n    /** Phone as second factor */\n    PHONE: 'phone',\n    TOTP: 'totp'\n  };\n  /**\n   * Enumeration of supported providers.\n   *\n   * @public\n   */\n  var ProviderId = {\n    /** Facebook provider ID */\n    FACEBOOK: 'facebook.com',\n    /** GitHub provider ID */\n    GITHUB: 'github.com',\n    /** Google provider ID */\n    GOOGLE: 'google.com',\n    /** Password provider */\n    PASSWORD: 'password',\n    /** Phone provider */\n    PHONE: 'phone',\n    /** Twitter provider ID */\n    TWITTER: 'twitter.com'\n  };\n  /**\n   * Enumeration of supported sign-in methods.\n   *\n   * @public\n   */\n  var SignInMethod = {\n    /** Email link sign in method */\n    EMAIL_LINK: 'emailLink',\n    /** Email/password sign in method */\n    EMAIL_PASSWORD: 'password',\n    /** Facebook sign in method */\n    FACEBOOK: 'facebook.com',\n    /** GitHub sign in method */\n    GITHUB: 'github.com',\n    /** Google sign in method */\n    GOOGLE: 'google.com',\n    /** Phone sign in method */\n    PHONE: 'phone',\n    /** Twitter sign in method */\n    TWITTER: 'twitter.com'\n  };\n  /**\n   * Enumeration of supported operation types.\n   *\n   * @public\n   */\n  var OperationType = {\n    /** Operation involving linking an additional provider to an already signed-in user. */\n    LINK: 'link',\n    /** Operation involving using a provider to reauthenticate an already signed-in user. */\n    REAUTHENTICATE: 'reauthenticate',\n    /** Operation involving signing in a user. */\n    SIGN_IN: 'signIn'\n  };\n  /**\n   * An enumeration of the possible email action types.\n   *\n   * @public\n   */\n  var ActionCodeOperation = {\n    /** The email link sign-in action. */\n    EMAIL_SIGNIN: 'EMAIL_SIGNIN',\n    /** The password reset action. */\n    PASSWORD_RESET: 'PASSWORD_RESET',\n    /** The email revocation action. */\n    RECOVER_EMAIL: 'RECOVER_EMAIL',\n    /** The revert second factor addition email action. */\n    REVERT_SECOND_FACTOR_ADDITION: 'REVERT_SECOND_FACTOR_ADDITION',\n    /** The revert second factor addition email action. */\n    VERIFY_AND_CHANGE_EMAIL: 'VERIFY_AND_CHANGE_EMAIL',\n    /** The email verification action. */\n    VERIFY_EMAIL: 'VERIFY_EMAIL'\n  };\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function startSignInPhoneMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaSignIn:start\" /* Endpoint.START_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));\n  }\n  function finalizeSignInPhoneMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaSignIn:finalize\" /* Endpoint.FINALIZE_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));\n  }\n  function finalizeSignInTotpMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaSignIn:finalize\" /* Endpoint.FINALIZE_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Lazy accessor for window, since the compat layer won't tree shake this out,\n   * we need to make sure not to mess with window unless we have to\n   */\n  function _window() {\n    return window;\n  }\n  function _setWindowLocation(url) {\n    _window().location.href = url;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _isWorker() {\n    return typeof _window()['WorkerGlobalScope'] !== 'undefined' && typeof _window()['importScripts'] === 'function';\n  }\n  function _getActiveServiceWorker() {\n    return _getActiveServiceWorker2.apply(this, arguments);\n  }\n  function _getActiveServiceWorker2() {\n    _getActiveServiceWorker2 = _asyncToGenerator(function* () {\n      if (!navigator?.serviceWorker) {\n        return null;\n      }\n      try {\n        var registration = yield navigator.serviceWorker.ready;\n        return registration.active;\n      } catch {\n        return null;\n      }\n    });\n    return _getActiveServiceWorker2.apply(this, arguments);\n  }\n  function _getServiceWorkerController() {\n    return navigator?.serviceWorker?.controller || null;\n  }\n  function _getWorkerGlobalScope() {\n    return _isWorker() ? self : null;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  // ReCaptcha will load using the same callback, so the callback function needs\n  // to be kept around\n  var _JSLOAD_CALLBACK = _generateCallbackName('rcb');\n  var NETWORK_TIMEOUT_DELAY = new Delay(30000, 60000);\n  /**\n   * Loader for the GReCaptcha library. There should only ever be one of this.\n   */\n  var ReCaptchaLoaderImpl = /*#__PURE__*/function () {\n    function ReCaptchaLoaderImpl() {\n      _classCallCheck(this, ReCaptchaLoaderImpl);\n      this.hostLanguage = '';\n      this.counter = 0;\n      /**\n       * Check for `render()` method. `window.grecaptcha` will exist if the Enterprise\n       * version of the ReCAPTCHA script was loaded by someone else (e.g. App Check) but\n       * `window.grecaptcha.render()` will not. Another load will add it.\n       */\n      this.librarySeparatelyLoaded = !!_window().grecaptcha?.render;\n    }\n    return _createClass(ReCaptchaLoaderImpl, [{\n      key: \"load\",\n      value: function load(auth) {\n        var hl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n        _assert(isHostLanguageValid(hl), auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        if (this.shouldResolveImmediately(hl) && isV2(_window().grecaptcha)) {\n          return Promise.resolve(_window().grecaptcha);\n        }\n        return new Promise((resolve, reject) => {\n          var networkTimeout = _window().setTimeout(() => {\n            reject(_createError(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\n          }, NETWORK_TIMEOUT_DELAY.get());\n          _window()[_JSLOAD_CALLBACK] = () => {\n            _window().clearTimeout(networkTimeout);\n            delete _window()[_JSLOAD_CALLBACK];\n            var recaptcha = _window().grecaptcha;\n            if (!recaptcha || !isV2(recaptcha)) {\n              reject(_createError(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */));\n              return;\n            }\n            // Wrap the recaptcha render function so that we know if the developer has\n            // called it separately\n            var render = recaptcha.render;\n            recaptcha.render = (container, params) => {\n              var widgetId = render(container, params);\n              this.counter++;\n              return widgetId;\n            };\n            this.hostLanguage = hl;\n            resolve(recaptcha);\n          };\n          var url = `${_recaptchaV2ScriptUrl()}?${util.querystring({\n            onload: _JSLOAD_CALLBACK,\n            render: 'explicit',\n            hl\n          })}`;\n          _loadJS(url).catch(() => {\n            clearTimeout(networkTimeout);\n            reject(_createError(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */));\n          });\n        });\n      }\n    }, {\n      key: \"clearedOneInstance\",\n      value: function clearedOneInstance() {\n        this.counter--;\n      }\n    }, {\n      key: \"shouldResolveImmediately\",\n      value: function shouldResolveImmediately(hl) {\n        // We can resolve immediately if:\n        //   • grecaptcha is already defined AND (\n        //     1. the requested language codes are the same OR\n        //     2. there exists already a ReCaptcha on the page\n        //     3. the library was already loaded by the app\n        // In cases (2) and (3), we _can't_ reload as it would break the recaptchas\n        // that are already in the page\n        return !!_window().grecaptcha?.render && (hl === this.hostLanguage || this.counter > 0 || this.librarySeparatelyLoaded);\n      }\n    }]);\n  }();\n  function isHostLanguageValid(hl) {\n    return hl.length <= 6 && /^\\s*[a-zA-Z0-9\\-]*\\s*$/.test(hl);\n  }\n  var MockReCaptchaLoaderImpl = /*#__PURE__*/function () {\n    function MockReCaptchaLoaderImpl() {\n      _classCallCheck(this, MockReCaptchaLoaderImpl);\n    }\n    return _createClass(MockReCaptchaLoaderImpl, [{\n      key: \"load\",\n      value: function () {\n        var _load = _asyncToGenerator(function* (auth) {\n          return new MockReCaptcha(auth);\n        });\n        function load(_x195) {\n          return _load.apply(this, arguments);\n        }\n        return load;\n      }()\n    }, {\n      key: \"clearedOneInstance\",\n      value: function clearedOneInstance() {}\n    }]);\n  }();\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  var RECAPTCHA_VERIFIER_TYPE = 'recaptcha';\n  var DEFAULT_PARAMS = {\n    theme: 'light',\n    type: 'image'\n  };\n  /**\n   * An {@link https://www.google.com/recaptcha/ | reCAPTCHA}-based application verifier.\n   *\n   * @remarks\n   * `RecaptchaVerifier` does not work in a Node.js environment.\n   *\n   * @public\n   */\n  var RecaptchaVerifier = /*#__PURE__*/function () {\n    /**\n     * @param authExtern - The corresponding Firebase {@link Auth} instance.\n     *\n     * @param containerOrId - The reCAPTCHA container parameter.\n     *\n     * @remarks\n     * This has different meaning depending on whether the reCAPTCHA is hidden or visible. For a\n     * visible reCAPTCHA the container must be empty. If a string is used, it has to correspond to\n     * an element ID. The corresponding element must also must be in the DOM at the time of\n     * initialization.\n     *\n     * @param parameters - The optional reCAPTCHA parameters.\n     *\n     * @remarks\n     * Check the reCAPTCHA docs for a comprehensive list. All parameters are accepted except for\n     * the sitekey. Firebase Auth backend provisions a reCAPTCHA for each project and will\n     * configure this upon rendering. For an invisible reCAPTCHA, a size key must have the value\n     * 'invisible'.\n     */\n    function RecaptchaVerifier(authExtern, containerOrId) {\n      var parameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n        ...DEFAULT_PARAMS\n      };\n      _classCallCheck(this, RecaptchaVerifier);\n      this.parameters = parameters;\n      /**\n       * The application verifier type.\n       *\n       * @remarks\n       * For a reCAPTCHA verifier, this is 'recaptcha'.\n       */\n      this.type = RECAPTCHA_VERIFIER_TYPE;\n      this.destroyed = false;\n      this.widgetId = null;\n      this.tokenChangeListeners = new Set();\n      this.renderPromise = null;\n      this.recaptcha = null;\n      this.auth = _castAuth(authExtern);\n      this.isInvisible = this.parameters.size === 'invisible';\n      _assert(typeof document !== 'undefined', this.auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */);\n      var container = typeof containerOrId === 'string' ? document.getElementById(containerOrId) : containerOrId;\n      _assert(container, this.auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      this.container = container;\n      this.parameters.callback = this.makeTokenCallback(this.parameters.callback);\n      this._recaptchaLoader = this.auth.settings.appVerificationDisabledForTesting ? new MockReCaptchaLoaderImpl() : new ReCaptchaLoaderImpl();\n      this.validateStartingState();\n      // TODO: Figure out if sdk version is needed\n    }\n    /**\n     * Waits for the user to solve the reCAPTCHA and resolves with the reCAPTCHA token.\n     *\n     * @returns A Promise for the reCAPTCHA token.\n     */\n    return _createClass(RecaptchaVerifier, [{\n      key: \"verify\",\n      value: (function () {\n        var _verify2 = _asyncToGenerator(function* () {\n          this.assertNotDestroyed();\n          var id = yield this.render();\n          var recaptcha = this.getAssertedRecaptcha();\n          var response = recaptcha.getResponse(id);\n          if (response) {\n            return response;\n          }\n          return new Promise(resolve => {\n            var tokenChange = token => {\n              if (!token) {\n                return; // Ignore token expirations.\n              }\n              this.tokenChangeListeners.delete(tokenChange);\n              resolve(token);\n            };\n            this.tokenChangeListeners.add(tokenChange);\n            if (this.isInvisible) {\n              recaptcha.execute(id);\n            }\n          });\n        });\n        function verify() {\n          return _verify2.apply(this, arguments);\n        }\n        return verify;\n      }()\n      /**\n       * Renders the reCAPTCHA widget on the page.\n       *\n       * @returns A Promise that resolves with the reCAPTCHA widget ID.\n       */\n      )\n    }, {\n      key: \"render\",\n      value: function render() {\n        try {\n          this.assertNotDestroyed();\n        } catch (e) {\n          // This method returns a promise. Since it's not async (we want to return the\n          // _same_ promise if rendering is still occurring), the API surface should\n          // reject with the error rather than just throw\n          return Promise.reject(e);\n        }\n        if (this.renderPromise) {\n          return this.renderPromise;\n        }\n        this.renderPromise = this.makeRenderPromise().catch(e => {\n          this.renderPromise = null;\n          throw e;\n        });\n        return this.renderPromise;\n      }\n      /** @internal */\n    }, {\n      key: \"_reset\",\n      value: function _reset() {\n        this.assertNotDestroyed();\n        if (this.widgetId !== null) {\n          this.getAssertedRecaptcha().reset(this.widgetId);\n        }\n      }\n      /**\n       * Clears the reCAPTCHA widget from the page and destroys the instance.\n       */\n    }, {\n      key: \"clear\",\n      value: function clear() {\n        this.assertNotDestroyed();\n        this.destroyed = true;\n        this._recaptchaLoader.clearedOneInstance();\n        if (!this.isInvisible) {\n          this.container.childNodes.forEach(node => {\n            this.container.removeChild(node);\n          });\n        }\n      }\n    }, {\n      key: \"validateStartingState\",\n      value: function validateStartingState() {\n        _assert(!this.parameters.sitekey, this.auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        _assert(this.isInvisible || !this.container.hasChildNodes(), this.auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        _assert(typeof document !== 'undefined', this.auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */);\n      }\n    }, {\n      key: \"makeTokenCallback\",\n      value: function makeTokenCallback(existing) {\n        return token => {\n          this.tokenChangeListeners.forEach(listener => listener(token));\n          if (typeof existing === 'function') {\n            existing(token);\n          } else if (typeof existing === 'string') {\n            var globalFunc = _window()[existing];\n            if (typeof globalFunc === 'function') {\n              globalFunc(token);\n            }\n          }\n        };\n      }\n    }, {\n      key: \"assertNotDestroyed\",\n      value: function assertNotDestroyed() {\n        _assert(!this.destroyed, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      }\n    }, {\n      key: \"makeRenderPromise\",\n      value: function () {\n        var _makeRenderPromise = _asyncToGenerator(function* () {\n          yield this.init();\n          if (!this.widgetId) {\n            var container = this.container;\n            if (!this.isInvisible) {\n              var guaranteedEmpty = document.createElement('div');\n              container.appendChild(guaranteedEmpty);\n              container = guaranteedEmpty;\n            }\n            this.widgetId = this.getAssertedRecaptcha().render(container, this.parameters);\n          }\n          return this.widgetId;\n        });\n        function makeRenderPromise() {\n          return _makeRenderPromise.apply(this, arguments);\n        }\n        return makeRenderPromise;\n      }()\n    }, {\n      key: \"init\",\n      value: function () {\n        var _init = _asyncToGenerator(function* () {\n          _assert(_isHttpOrHttps() && !_isWorker(), this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          yield domReady();\n          this.recaptcha = yield this._recaptchaLoader.load(this.auth, this.auth.languageCode || undefined);\n          var siteKey = yield getRecaptchaParams(this.auth);\n          _assert(siteKey, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          this.parameters.sitekey = siteKey;\n        });\n        function init() {\n          return _init.apply(this, arguments);\n        }\n        return init;\n      }()\n    }, {\n      key: \"getAssertedRecaptcha\",\n      value: function getAssertedRecaptcha() {\n        _assert(this.recaptcha, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        return this.recaptcha;\n      }\n    }]);\n  }();\n  function domReady() {\n    var resolver = null;\n    return new Promise(resolve => {\n      if (document.readyState === 'complete') {\n        resolve();\n        return;\n      }\n      // Document not ready, wait for load before resolving.\n      // Save resolver, so we can remove listener in case it was externally\n      // cancelled.\n      resolver = () => resolve();\n      window.addEventListener('load', resolver);\n    }).catch(e => {\n      if (resolver) {\n        window.removeEventListener('load', resolver);\n      }\n      throw e;\n    });\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  var ConfirmationResultImpl = /*#__PURE__*/function () {\n    function ConfirmationResultImpl(verificationId, onConfirmation) {\n      _classCallCheck(this, ConfirmationResultImpl);\n      this.verificationId = verificationId;\n      this.onConfirmation = onConfirmation;\n    }\n    return _createClass(ConfirmationResultImpl, [{\n      key: \"confirm\",\n      value: function confirm(verificationCode) {\n        var authCredential = PhoneAuthCredential._fromVerification(this.verificationId, verificationCode);\n        return this.onConfirmation(authCredential);\n      }\n    }]);\n  }();\n  /**\n   * Asynchronously signs in using a phone number.\n   *\n   * @remarks\n   * This method sends a code via SMS to the given\n   * phone number, and returns a {@link ConfirmationResult}. After the user\n   * provides the code sent to their phone, call {@link ConfirmationResult.confirm}\n   * with the code to sign the user in.\n   *\n   * For abuse prevention, this method requires a {@link ApplicationVerifier}.\n   * This SDK includes an implementation based on reCAPTCHA v2, {@link RecaptchaVerifier}.\n   * This function can work on other platforms that do not support the\n   * {@link RecaptchaVerifier} (like React Native), but you need to use a\n   * third-party {@link ApplicationVerifier} implementation.\n   *\n   * If you've enabled project-level reCAPTCHA Enterprise bot protection in\n   * Enforce mode, you can omit the {@link ApplicationVerifier}.\n   *\n   * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @example\n   * ```javascript\n   * // 'recaptcha-container' is the ID of an element in the DOM.\n   * const applicationVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container');\n   * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n   * // Obtain a verificationCode from the user.\n   * const credential = await confirmationResult.confirm(verificationCode);\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n   * @param appVerifier - The {@link ApplicationVerifier}.\n   *\n   * @public\n   */\n  function signInWithPhoneNumber(_x196, _x197, _x198) {\n    return _signInWithPhoneNumber.apply(this, arguments);\n  }\n  /**\n   * Links the user account with the given phone number.\n   *\n   * @remarks\n   * This method does not work in a Node.js environment.\n   *\n   * @param user - The user.\n   * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n   * @param appVerifier - The {@link ApplicationVerifier}.\n   *\n   * @public\n   */\n  function _signInWithPhoneNumber() {\n    _signInWithPhoneNumber = _asyncToGenerator(function* (auth, phoneNumber, appVerifier) {\n      if (app._isFirebaseServerApp(auth.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n      }\n      var authInternal = _castAuth(auth);\n      var verificationId = yield _verifyPhoneNumber(authInternal, phoneNumber, util.getModularInstance(appVerifier));\n      return new ConfirmationResultImpl(verificationId, cred => signInWithCredential(authInternal, cred));\n    });\n    return _signInWithPhoneNumber.apply(this, arguments);\n  }\n  function linkWithPhoneNumber(_x199, _x200, _x201) {\n    return _linkWithPhoneNumber.apply(this, arguments);\n  }\n  /**\n   * Re-authenticates a user using a fresh phone credential.\n   *\n   * @remarks\n   * Use before operations such as {@link updatePassword} that require tokens from recent sign-in attempts.\n   *\n   * This method does not work in a Node.js environment or on any {@link User} signed in by\n   * {@link Auth} instances created with a {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param user - The user.\n   * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n   * @param appVerifier - The {@link ApplicationVerifier}.\n   *\n   * @public\n   */\n  function _linkWithPhoneNumber() {\n    _linkWithPhoneNumber = _asyncToGenerator(function* (user, phoneNumber, appVerifier) {\n      var userInternal = util.getModularInstance(user);\n      yield _assertLinkedStatus(false, userInternal, \"phone\" /* ProviderId.PHONE */);\n      var verificationId = yield _verifyPhoneNumber(userInternal.auth, phoneNumber, util.getModularInstance(appVerifier));\n      return new ConfirmationResultImpl(verificationId, cred => linkWithCredential(userInternal, cred));\n    });\n    return _linkWithPhoneNumber.apply(this, arguments);\n  }\n  function reauthenticateWithPhoneNumber(_x202, _x203, _x204) {\n    return _reauthenticateWithPhoneNumber.apply(this, arguments);\n  }\n  /**\n   * Returns a verification ID to be used in conjunction with the SMS code that is sent.\n   *\n   */\n  function _reauthenticateWithPhoneNumber() {\n    _reauthenticateWithPhoneNumber = _asyncToGenerator(function* (user, phoneNumber, appVerifier) {\n      var userInternal = util.getModularInstance(user);\n      if (app._isFirebaseServerApp(userInternal.auth.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(userInternal.auth));\n      }\n      var verificationId = yield _verifyPhoneNumber(userInternal.auth, phoneNumber, util.getModularInstance(appVerifier));\n      return new ConfirmationResultImpl(verificationId, cred => reauthenticateWithCredential(userInternal, cred));\n    });\n    return _reauthenticateWithPhoneNumber.apply(this, arguments);\n  }\n  function _verifyPhoneNumber(_x205, _x206, _x207) {\n    return _verifyPhoneNumber2.apply(this, arguments);\n  }\n  /**\n   * Updates the user's phone number.\n   *\n   * @remarks\n   * This method does not work in a Node.js environment or on any {@link User} signed in by\n   * {@link Auth} instances created with a {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @example\n   * ```\n   * // 'recaptcha-container' is the ID of an element in the DOM.\n   * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');\n   * const provider = new PhoneAuthProvider(auth);\n   * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\n   * // Obtain the verificationCode from the user.\n   * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n   * await updatePhoneNumber(user, phoneCredential);\n   * ```\n   *\n   * @param user - The user.\n   * @param credential - A credential authenticating the new phone number.\n   *\n   * @public\n   */\n  function _verifyPhoneNumber2() {\n    _verifyPhoneNumber2 = _asyncToGenerator(function* (auth, options, verifier) {\n      if (!auth._getRecaptchaConfig()) {\n        try {\n          yield _initializeRecaptchaConfig(auth);\n        } catch (error) {\n          // If an error occurs while fetching the config, there is no way to know the enablement state\n          // of Phone provider, so we proceed with recaptcha V2 verification.\n          // The error is likely \"recaptchaKey undefined\", as reCAPTCHA Enterprise is not\n          // enabled for any provider.\n          console.log('Failed to initialize reCAPTCHA Enterprise config. Triggering the reCAPTCHA v2 verification.');\n        }\n      }\n      try {\n        var phoneInfoOptions;\n        if (typeof options === 'string') {\n          phoneInfoOptions = {\n            phoneNumber: options\n          };\n        } else {\n          phoneInfoOptions = options;\n        }\n        if ('session' in phoneInfoOptions) {\n          var session = phoneInfoOptions.session;\n          if ('phoneNumber' in phoneInfoOptions) {\n            _assert(session.type === \"enroll\" /* MultiFactorSessionType.ENROLL */, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n            var startPhoneMfaEnrollmentRequest = {\n              idToken: session.credential,\n              phoneEnrollmentInfo: {\n                phoneNumber: phoneInfoOptions.phoneNumber,\n                clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n              }\n            };\n            var startEnrollPhoneMfaActionCallback = /*#__PURE__*/function () {\n              var _ref30 = _asyncToGenerator(function* (authInstance, request) {\n                // If reCAPTCHA Enterprise token is FAKE_TOKEN, fetch reCAPTCHA v2 token and inject into request.\n                if (request.phoneEnrollmentInfo.captchaResponse === FAKE_TOKEN) {\n                  _assert(verifier?.type === RECAPTCHA_VERIFIER_TYPE, authInstance, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n                  var requestWithRecaptchaV2 = yield injectRecaptchaV2Token(authInstance, request, verifier);\n                  return startEnrollPhoneMfa(authInstance, requestWithRecaptchaV2);\n                }\n                return startEnrollPhoneMfa(authInstance, request);\n              });\n              return function startEnrollPhoneMfaActionCallback(_x222, _x223) {\n                return _ref30.apply(this, arguments);\n              };\n            }();\n            var startPhoneMfaEnrollmentResponse = handleRecaptchaFlow(auth, startPhoneMfaEnrollmentRequest, \"mfaSmsEnrollment\" /* RecaptchaActionName.MFA_SMS_ENROLLMENT */, startEnrollPhoneMfaActionCallback, \"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */);\n            var response = yield startPhoneMfaEnrollmentResponse.catch(error => {\n              return Promise.reject(error);\n            });\n            return response.phoneSessionInfo.sessionInfo;\n          } else {\n            _assert(session.type === \"signin\" /* MultiFactorSessionType.SIGN_IN */, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n            var mfaEnrollmentId = phoneInfoOptions.multiFactorHint?.uid || phoneInfoOptions.multiFactorUid;\n            _assert(mfaEnrollmentId, auth, \"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */);\n            var startPhoneMfaSignInRequest = {\n              mfaPendingCredential: session.credential,\n              mfaEnrollmentId,\n              phoneSignInInfo: {\n                clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n              }\n            };\n            var startSignInPhoneMfaActionCallback = /*#__PURE__*/function () {\n              var _ref31 = _asyncToGenerator(function* (authInstance, request) {\n                // If reCAPTCHA Enterprise token is FAKE_TOKEN, fetch reCAPTCHA v2 token and inject into request.\n                if (request.phoneSignInInfo.captchaResponse === FAKE_TOKEN) {\n                  _assert(verifier?.type === RECAPTCHA_VERIFIER_TYPE, authInstance, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n                  var requestWithRecaptchaV2 = yield injectRecaptchaV2Token(authInstance, request, verifier);\n                  return startSignInPhoneMfa(authInstance, requestWithRecaptchaV2);\n                }\n                return startSignInPhoneMfa(authInstance, request);\n              });\n              return function startSignInPhoneMfaActionCallback(_x224, _x225) {\n                return _ref31.apply(this, arguments);\n              };\n            }();\n            var startPhoneMfaSignInResponse = handleRecaptchaFlow(auth, startPhoneMfaSignInRequest, \"mfaSmsSignIn\" /* RecaptchaActionName.MFA_SMS_SIGNIN */, startSignInPhoneMfaActionCallback, \"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */);\n            var _response = yield startPhoneMfaSignInResponse.catch(error => {\n              return Promise.reject(error);\n            });\n            return _response.phoneResponseInfo.sessionInfo;\n          }\n        } else {\n          var sendPhoneVerificationCodeRequest = {\n            phoneNumber: phoneInfoOptions.phoneNumber,\n            clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n          };\n          var sendPhoneVerificationCodeActionCallback = /*#__PURE__*/function () {\n            var _ref32 = _asyncToGenerator(function* (authInstance, request) {\n              // If reCAPTCHA Enterprise token is FAKE_TOKEN, fetch reCAPTCHA v2 token and inject into request.\n              if (request.captchaResponse === FAKE_TOKEN) {\n                _assert(verifier?.type === RECAPTCHA_VERIFIER_TYPE, authInstance, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n                var requestWithRecaptchaV2 = yield injectRecaptchaV2Token(authInstance, request, verifier);\n                return sendPhoneVerificationCode(authInstance, requestWithRecaptchaV2);\n              }\n              return sendPhoneVerificationCode(authInstance, request);\n            });\n            return function sendPhoneVerificationCodeActionCallback(_x226, _x227) {\n              return _ref32.apply(this, arguments);\n            };\n          }();\n          var sendPhoneVerificationCodeResponse = handleRecaptchaFlow(auth, sendPhoneVerificationCodeRequest, \"sendVerificationCode\" /* RecaptchaActionName.SEND_VERIFICATION_CODE */, sendPhoneVerificationCodeActionCallback, \"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */);\n          var _response2 = yield sendPhoneVerificationCodeResponse.catch(error => {\n            return Promise.reject(error);\n          });\n          return _response2.sessionInfo;\n        }\n      } finally {\n        verifier?._reset();\n      }\n    });\n    return _verifyPhoneNumber2.apply(this, arguments);\n  }\n  function updatePhoneNumber(_x208, _x209) {\n    return _updatePhoneNumber.apply(this, arguments);\n  } // Helper function that fetches and injects a reCAPTCHA v2 token into the request.\n  function _updatePhoneNumber() {\n    _updatePhoneNumber = _asyncToGenerator(function* (user, credential) {\n      var userInternal = util.getModularInstance(user);\n      if (app._isFirebaseServerApp(userInternal.auth.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(userInternal.auth));\n      }\n      yield _link(userInternal, credential);\n    });\n    return _updatePhoneNumber.apply(this, arguments);\n  }\n  function injectRecaptchaV2Token(_x210, _x211, _x212) {\n    return _injectRecaptchaV2Token.apply(this, arguments);\n  }\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating an {@link PhoneAuthCredential}.\n   *\n   * @remarks\n   * `PhoneAuthProvider` does not work in a Node.js environment.\n   *\n   * @example\n   * ```javascript\n   * // 'recaptcha-container' is the ID of an element in the DOM.\n   * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');\n   * const provider = new PhoneAuthProvider(auth);\n   * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\n   * // Obtain the verificationCode from the user.\n   * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n   * const userCredential = await signInWithCredential(auth, phoneCredential);\n   * ```\n   *\n   * @public\n   */\n  function _injectRecaptchaV2Token() {\n    _injectRecaptchaV2Token = _asyncToGenerator(function* (auth, request, recaptchaV2Verifier) {\n      _assert(recaptchaV2Verifier.type === RECAPTCHA_VERIFIER_TYPE, auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      var recaptchaV2Token = yield recaptchaV2Verifier.verify();\n      _assert(typeof recaptchaV2Token === 'string', auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      var newRequest = {\n        ...request\n      };\n      if ('phoneEnrollmentInfo' in newRequest) {\n        var phoneNumber = newRequest.phoneEnrollmentInfo.phoneNumber;\n        var captchaResponse = newRequest.phoneEnrollmentInfo.captchaResponse;\n        var clientType = newRequest.phoneEnrollmentInfo.clientType;\n        var recaptchaVersion = newRequest.phoneEnrollmentInfo.recaptchaVersion;\n        Object.assign(newRequest, {\n          'phoneEnrollmentInfo': {\n            phoneNumber,\n            recaptchaToken: recaptchaV2Token,\n            captchaResponse,\n            clientType,\n            recaptchaVersion\n          }\n        });\n        return newRequest;\n      } else if ('phoneSignInInfo' in newRequest) {\n        var _captchaResponse = newRequest.phoneSignInInfo.captchaResponse;\n        var _clientType = newRequest.phoneSignInInfo.clientType;\n        var _recaptchaVersion = newRequest.phoneSignInInfo.recaptchaVersion;\n        Object.assign(newRequest, {\n          'phoneSignInInfo': {\n            recaptchaToken: recaptchaV2Token,\n            captchaResponse: _captchaResponse,\n            clientType: _clientType,\n            recaptchaVersion: _recaptchaVersion\n          }\n        });\n        return newRequest;\n      } else {\n        Object.assign(newRequest, {\n          'recaptchaToken': recaptchaV2Token\n        });\n        return newRequest;\n      }\n    });\n    return _injectRecaptchaV2Token.apply(this, arguments);\n  }\n  var PhoneAuthProvider = /*#__PURE__*/function () {\n    /**\n     * @param auth - The Firebase {@link Auth} instance in which sign-ins should occur.\n     *\n     */\n    function PhoneAuthProvider(auth) {\n      _classCallCheck(this, PhoneAuthProvider);\n      /** Always set to {@link ProviderId}.PHONE. */\n      this.providerId = PhoneAuthProvider.PROVIDER_ID;\n      this.auth = _castAuth(auth);\n    }\n    /**\n     *\n     * Starts a phone number authentication flow by sending a verification code to the given phone\n     * number.\n     *\n     * @example\n     * ```javascript\n     * const provider = new PhoneAuthProvider(auth);\n     * const verificationId = await provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\n     * // Obtain verificationCode from the user.\n     * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n     * const userCredential = await signInWithCredential(auth, authCredential);\n     * ```\n     *\n     * @example\n     * An alternative flow is provided using the `signInWithPhoneNumber` method.\n     * ```javascript\n     * const confirmationResult = signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n     * // Obtain verificationCode from the user.\n     * const userCredential = confirmationResult.confirm(verificationCode);\n     * ```\n     *\n     * @param phoneInfoOptions - The user's {@link PhoneInfoOptions}. The phone number should be in\n     * E.164 format (e.g. +16505550101).\n     * @param applicationVerifier - An {@link ApplicationVerifier}, which prevents\n     * requests from unauthorized clients. This SDK includes an implementation\n     * based on reCAPTCHA v2, {@link RecaptchaVerifier}. If you've enabled\n     * reCAPTCHA Enterprise bot protection in Enforce mode, this parameter is\n     * optional; in all other configurations, the parameter is required.\n     *\n     * @returns A Promise for a verification ID that can be passed to\n     * {@link PhoneAuthProvider.credential} to identify this flow.\n     */\n    return _createClass(PhoneAuthProvider, [{\n      key: \"verifyPhoneNumber\",\n      value: function verifyPhoneNumber(phoneOptions, applicationVerifier) {\n        return _verifyPhoneNumber(this.auth, phoneOptions, util.getModularInstance(applicationVerifier));\n      }\n      /**\n       * Creates a phone auth credential, given the verification ID from\n       * {@link PhoneAuthProvider.verifyPhoneNumber} and the code that was sent to the user's\n       * mobile device.\n       *\n       * @example\n       * ```javascript\n       * const provider = new PhoneAuthProvider(auth);\n       * const verificationId = provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\n       * // Obtain verificationCode from the user.\n       * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n       * const userCredential = signInWithCredential(auth, authCredential);\n       * ```\n       *\n       * @example\n       * An alternative flow is provided using the `signInWithPhoneNumber` method.\n       * ```javascript\n       * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n       * // Obtain verificationCode from the user.\n       * const userCredential = await confirmationResult.confirm(verificationCode);\n       * ```\n       *\n       * @param verificationId - The verification ID returned from {@link PhoneAuthProvider.verifyPhoneNumber}.\n       * @param verificationCode - The verification code sent to the user's mobile device.\n       *\n       * @returns The auth provider credential.\n       */\n    }], [{\n      key: \"credential\",\n      value: function credential(verificationId, verificationCode) {\n        return PhoneAuthCredential._fromVerification(verificationId, verificationCode);\n      }\n      /**\n       * Generates an {@link AuthCredential} from a {@link UserCredential}.\n       * @param userCredential - The user credential.\n       */\n    }, {\n      key: \"credentialFromResult\",\n      value: function credentialFromResult(userCredential) {\n        var credential = userCredential;\n        return PhoneAuthProvider.credentialFromTaggedObject(credential);\n      }\n      /**\n       * Returns an {@link AuthCredential} when passed an error.\n       *\n       * @remarks\n       *\n       * This method works for errors like\n       * `auth/account-exists-with-different-credentials`. This is useful for\n       * recovering when attempting to set a user's phone number but the number\n       * in question is already tied to another account. For example, the following\n       * code tries to update the current user's phone number, and if that\n       * fails, links the user with the account associated with that number:\n       *\n       * ```js\n       * const provider = new PhoneAuthProvider(auth);\n       * const verificationId = await provider.verifyPhoneNumber(number, verifier);\n       * try {\n       *   const code = ''; // Prompt the user for the verification code\n       *   await updatePhoneNumber(\n       *       auth.currentUser,\n       *       PhoneAuthProvider.credential(verificationId, code));\n       * } catch (e) {\n       *   if ((e as FirebaseError)?.code === 'auth/account-exists-with-different-credential') {\n       *     const cred = PhoneAuthProvider.credentialFromError(e);\n       *     await linkWithCredential(auth.currentUser, cred);\n       *   }\n       * }\n       *\n       * // At this point, auth.currentUser.phoneNumber === number.\n       * ```\n       *\n       * @param error - The error to generate a credential from.\n       */\n    }, {\n      key: \"credentialFromError\",\n      value: function credentialFromError(error) {\n        return PhoneAuthProvider.credentialFromTaggedObject(error.customData || {});\n      }\n    }, {\n      key: \"credentialFromTaggedObject\",\n      value: function credentialFromTaggedObject(_ref23) {\n        var tokenResponse = _ref23._tokenResponse;\n        if (!tokenResponse) {\n          return null;\n        }\n        var phoneNumber = tokenResponse.phoneNumber,\n          temporaryProof = tokenResponse.temporaryProof;\n        if (phoneNumber && temporaryProof) {\n          return PhoneAuthCredential._fromTokenResponse(phoneNumber, temporaryProof);\n        }\n        return null;\n      }\n    }]);\n  }();\n  /** Always set to {@link ProviderId}.PHONE. */\n  PhoneAuthProvider.PROVIDER_ID = \"phone\" /* ProviderId.PHONE */;\n  /** Always set to {@link SignInMethod}.PHONE. */\n  PhoneAuthProvider.PHONE_SIGN_IN_METHOD = \"phone\" /* SignInMethod.PHONE */;\n  var MultiFactorAssertionImpl = /*#__PURE__*/function () {\n    function MultiFactorAssertionImpl(factorId) {\n      _classCallCheck(this, MultiFactorAssertionImpl);\n      this.factorId = factorId;\n    }\n    return _createClass(MultiFactorAssertionImpl, [{\n      key: \"_process\",\n      value: function _process(auth, session, displayName) {\n        switch (session.type) {\n          case \"enroll\" /* MultiFactorSessionType.ENROLL */:\n            return this._finalizeEnroll(auth, session.credential, displayName);\n          case \"signin\" /* MultiFactorSessionType.SIGN_IN */:\n            return this._finalizeSignIn(auth, session.credential);\n          default:\n            return debugFail('unexpected MultiFactorSessionType');\n        }\n      }\n    }]);\n  }();\n  /**\n   * {@inheritdoc PhoneMultiFactorAssertion}\n   *\n   * @public\n   */\n  var PhoneMultiFactorAssertionImpl = /*#__PURE__*/function (_MultiFactorAssertion) {\n    function PhoneMultiFactorAssertionImpl(credential) {\n      var _this13;\n      _classCallCheck(this, PhoneMultiFactorAssertionImpl);\n      _this13 = _callSuper(this, PhoneMultiFactorAssertionImpl, [\"phone\" /* FactorId.PHONE */]);\n      _this13.credential = credential;\n      return _this13;\n    }\n    /** @internal */\n    _inherits(PhoneMultiFactorAssertionImpl, _MultiFactorAssertion);\n    return _createClass(PhoneMultiFactorAssertionImpl, [{\n      key: \"_finalizeEnroll\",\n      value: /** @internal */\n      function _finalizeEnroll(auth, idToken, displayName) {\n        return finalizeEnrollPhoneMfa(auth, {\n          idToken,\n          displayName,\n          phoneVerificationInfo: this.credential._makeVerificationRequest()\n        });\n      }\n      /** @internal */\n    }, {\n      key: \"_finalizeSignIn\",\n      value: function _finalizeSignIn(auth, mfaPendingCredential) {\n        return finalizeSignInPhoneMfa(auth, {\n          mfaPendingCredential,\n          phoneVerificationInfo: this.credential._makeVerificationRequest()\n        });\n      }\n    }], [{\n      key: \"_fromCredential\",\n      value: function _fromCredential(credential) {\n        return new PhoneMultiFactorAssertionImpl(credential);\n      }\n    }]);\n  }(MultiFactorAssertionImpl);\n  /**\n   * Provider for generating a {@link PhoneMultiFactorAssertion}.\n   *\n   * @public\n   */\n  var PhoneMultiFactorGenerator = /*#__PURE__*/function () {\n    function PhoneMultiFactorGenerator() {\n      _classCallCheck(this, PhoneMultiFactorGenerator);\n    }\n    /**\n     * Provides a {@link PhoneMultiFactorAssertion} to confirm ownership of the phone second factor.\n     *\n     * @remarks\n     * This method does not work in a Node.js environment.\n     *\n     * @param phoneAuthCredential - A credential provided by {@link PhoneAuthProvider.credential}.\n     * @returns A {@link PhoneMultiFactorAssertion} which can be used with\n     * {@link MultiFactorResolver.resolveSignIn}\n     */\n    return _createClass(PhoneMultiFactorGenerator, null, [{\n      key: \"assertion\",\n      value: function assertion(credential) {\n        return PhoneMultiFactorAssertionImpl._fromCredential(credential);\n      }\n    }]);\n  }();\n  /**\n   * The identifier of the phone second factor: `phone`.\n   */\n  PhoneMultiFactorGenerator.FACTOR_ID = 'phone';\n\n  /**\n   * Provider for generating a {@link TotpMultiFactorAssertion}.\n   *\n   * @public\n   */\n  var TotpMultiFactorGenerator = /*#__PURE__*/function () {\n    function TotpMultiFactorGenerator() {\n      _classCallCheck(this, TotpMultiFactorGenerator);\n    }\n    return _createClass(TotpMultiFactorGenerator, null, [{\n      key: \"assertionForEnrollment\",\n      value:\n      /**\n       * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of\n       * the TOTP (time-based one-time password) second factor.\n       * This assertion is used to complete enrollment in TOTP second factor.\n       *\n       * @param secret A {@link TotpSecret} containing the shared secret key and other TOTP parameters.\n       * @param oneTimePassword One-time password from TOTP App.\n       * @returns A {@link TotpMultiFactorAssertion} which can be used with\n       * {@link MultiFactorUser.enroll}.\n       */\n      function assertionForEnrollment(secret, oneTimePassword) {\n        return TotpMultiFactorAssertionImpl._fromSecret(secret, oneTimePassword);\n      }\n      /**\n       * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of the TOTP second factor.\n       * This assertion is used to complete signIn with TOTP as the second factor.\n       *\n       * @param enrollmentId identifies the enrolled TOTP second factor.\n       * @param oneTimePassword One-time password from TOTP App.\n       * @returns A {@link TotpMultiFactorAssertion} which can be used with\n       * {@link MultiFactorResolver.resolveSignIn}.\n       */\n    }, {\n      key: \"assertionForSignIn\",\n      value: function assertionForSignIn(enrollmentId, oneTimePassword) {\n        return TotpMultiFactorAssertionImpl._fromEnrollmentId(enrollmentId, oneTimePassword);\n      }\n      /**\n       * Returns a promise to {@link TotpSecret} which contains the TOTP shared secret key and other parameters.\n       * Creates a TOTP secret as part of enrolling a TOTP second factor.\n       * Used for generating a QR code URL or inputting into a TOTP app.\n       * This method uses the auth instance corresponding to the user in the multiFactorSession.\n       *\n       * @param session The {@link MultiFactorSession} that the user is part of.\n       * @returns A promise to {@link TotpSecret}.\n       */\n    }, {\n      key: \"generateSecret\",\n      value: (function () {\n        var _generateSecret = _asyncToGenerator(function* (session) {\n          var mfaSession = session;\n          _assert(typeof mfaSession.user?.auth !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          var response = yield startEnrollTotpMfa(mfaSession.user.auth, {\n            idToken: mfaSession.credential,\n            totpEnrollmentInfo: {}\n          });\n          return TotpSecret._fromStartTotpMfaEnrollmentResponse(response, mfaSession.user.auth);\n        });\n        function generateSecret(_x213) {\n          return _generateSecret.apply(this, arguments);\n        }\n        return generateSecret;\n      }())\n    }]);\n  }();\n  /**\n   * The identifier of the TOTP second factor: `totp`.\n   */\n  TotpMultiFactorGenerator.FACTOR_ID = \"totp\" /* FactorId.TOTP */;\n  var TotpMultiFactorAssertionImpl = /*#__PURE__*/function (_MultiFactorAssertion2) {\n    function TotpMultiFactorAssertionImpl(otp, enrollmentId, secret) {\n      var _this14;\n      _classCallCheck(this, TotpMultiFactorAssertionImpl);\n      _this14 = _callSuper(this, TotpMultiFactorAssertionImpl, [\"totp\" /* FactorId.TOTP */]);\n      _this14.otp = otp;\n      _this14.enrollmentId = enrollmentId;\n      _this14.secret = secret;\n      return _this14;\n    }\n    /** @internal */\n    _inherits(TotpMultiFactorAssertionImpl, _MultiFactorAssertion2);\n    return _createClass(TotpMultiFactorAssertionImpl, [{\n      key: \"_finalizeEnroll\",\n      value: (/** @internal */function () {\n        var _finalizeEnroll2 = _asyncToGenerator(function* (auth, idToken, displayName) {\n          _assert(typeof this.secret !== 'undefined', auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n          return finalizeEnrollTotpMfa(auth, {\n            idToken,\n            displayName,\n            totpVerificationInfo: this.secret._makeTotpVerificationInfo(this.otp)\n          });\n        });\n        function _finalizeEnroll(_x214, _x215, _x216) {\n          return _finalizeEnroll2.apply(this, arguments);\n        }\n        return _finalizeEnroll;\n      }() /** @internal */)\n    }, {\n      key: \"_finalizeSignIn\",\n      value: (function () {\n        var _finalizeSignIn2 = _asyncToGenerator(function* (auth, mfaPendingCredential) {\n          _assert(this.enrollmentId !== undefined && this.otp !== undefined, auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n          var totpVerificationInfo = {\n            verificationCode: this.otp\n          };\n          return finalizeSignInTotpMfa(auth, {\n            mfaPendingCredential,\n            mfaEnrollmentId: this.enrollmentId,\n            totpVerificationInfo\n          });\n        });\n        function _finalizeSignIn(_x217, _x218) {\n          return _finalizeSignIn2.apply(this, arguments);\n        }\n        return _finalizeSignIn;\n      }())\n    }], [{\n      key: \"_fromSecret\",\n      value: function _fromSecret(secret, otp) {\n        return new TotpMultiFactorAssertionImpl(otp, undefined, secret);\n      }\n      /** @internal */\n    }, {\n      key: \"_fromEnrollmentId\",\n      value: function _fromEnrollmentId(enrollmentId, otp) {\n        return new TotpMultiFactorAssertionImpl(otp, enrollmentId);\n      }\n    }]);\n  }(MultiFactorAssertionImpl);\n  /**\n   * Provider for generating a {@link TotpMultiFactorAssertion}.\n   *\n   * Stores the shared secret key and other parameters to generate time-based OTPs.\n   * Implements methods to retrieve the shared secret key and generate a QR code URL.\n   * @public\n   */\n  var TotpSecret = /*#__PURE__*/function () {\n    // The public members are declared outside the constructor so the docs can be generated.\n    function TotpSecret(secretKey, hashingAlgorithm, codeLength, codeIntervalSeconds, enrollmentCompletionDeadline, sessionInfo, auth) {\n      _classCallCheck(this, TotpSecret);\n      this.sessionInfo = sessionInfo;\n      this.auth = auth;\n      this.secretKey = secretKey;\n      this.hashingAlgorithm = hashingAlgorithm;\n      this.codeLength = codeLength;\n      this.codeIntervalSeconds = codeIntervalSeconds;\n      this.enrollmentCompletionDeadline = enrollmentCompletionDeadline;\n    }\n    /** @internal */\n    return _createClass(TotpSecret, [{\n      key: \"_makeTotpVerificationInfo\",\n      value: /** @internal */\n      function _makeTotpVerificationInfo(otp) {\n        return {\n          sessionInfo: this.sessionInfo,\n          verificationCode: otp\n        };\n      }\n      /**\n       * Returns a QR code URL as described in\n       * https://github.com/google/google-authenticator/wiki/Key-Uri-Format\n       * This can be displayed to the user as a QR code to be scanned into a TOTP app like Google Authenticator.\n       * If the optional parameters are unspecified, an accountName of <userEmail> and issuer of <firebaseAppName> are used.\n       *\n       * @param accountName the name of the account/app along with a user identifier.\n       * @param issuer issuer of the TOTP (likely the app name).\n       * @returns A QR code URL string.\n       */\n    }, {\n      key: \"generateQrCodeUrl\",\n      value: function generateQrCodeUrl(accountName, issuer) {\n        var useDefaults = false;\n        if (_isEmptyString(accountName) || _isEmptyString(issuer)) {\n          useDefaults = true;\n        }\n        if (useDefaults) {\n          if (_isEmptyString(accountName)) {\n            accountName = this.auth.currentUser?.email || 'unknownuser';\n          }\n          if (_isEmptyString(issuer)) {\n            issuer = this.auth.name;\n          }\n        }\n        return `otpauth://totp/${issuer}:${accountName}?secret=${this.secretKey}&issuer=${issuer}&algorithm=${this.hashingAlgorithm}&digits=${this.codeLength}`;\n      }\n    }], [{\n      key: \"_fromStartTotpMfaEnrollmentResponse\",\n      value: function _fromStartTotpMfaEnrollmentResponse(response, auth) {\n        return new TotpSecret(response.totpSessionInfo.sharedSecretKey, response.totpSessionInfo.hashingAlgorithm, response.totpSessionInfo.verificationCodeLength, response.totpSessionInfo.periodSec, new Date(response.totpSessionInfo.finalizeEnrollmentTime).toUTCString(), response.totpSessionInfo.sessionInfo, auth);\n      }\n    }]);\n  }();\n  /** @internal */\n  function _isEmptyString(input) {\n    return typeof input === 'undefined' || input?.length === 0;\n  }\n  var STORAGE_AVAILABLE_KEY = '__sak';\n  exports.AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY = AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY;\n  exports.ActionCodeOperation = ActionCodeOperation;\n  exports.ActionCodeURL = ActionCodeURL;\n  exports.AuthCredential = AuthCredential;\n  exports.AuthImpl = AuthImpl;\n  exports.BaseOAuthProvider = BaseOAuthProvider;\n  exports.Delay = Delay;\n  exports.EmailAuthCredential = EmailAuthCredential;\n  exports.EmailAuthProvider = EmailAuthProvider;\n  exports.FacebookAuthProvider = FacebookAuthProvider;\n  exports.FactorId = FactorId;\n  exports.FederatedAuthProvider = FederatedAuthProvider;\n  exports.FetchProvider = FetchProvider;\n  exports.GithubAuthProvider = GithubAuthProvider;\n  exports.GoogleAuthProvider = GoogleAuthProvider;\n  exports.OAuthCredential = OAuthCredential;\n  exports.OAuthProvider = OAuthProvider;\n  exports.OperationType = OperationType;\n  exports.PhoneAuthCredential = PhoneAuthCredential;\n  exports.PhoneAuthProvider = PhoneAuthProvider;\n  exports.PhoneMultiFactorGenerator = PhoneMultiFactorGenerator;\n  exports.ProviderId = ProviderId;\n  exports.RecaptchaVerifier = RecaptchaVerifier;\n  exports.SAMLAuthCredential = SAMLAuthCredential;\n  exports.SAMLAuthProvider = SAMLAuthProvider;\n  exports.STORAGE_AVAILABLE_KEY = STORAGE_AVAILABLE_KEY;\n  exports.SignInMethod = SignInMethod;\n  exports.TotpMultiFactorGenerator = TotpMultiFactorGenerator;\n  exports.TotpSecret = TotpSecret;\n  exports.TwitterAuthProvider = TwitterAuthProvider;\n  exports.UserImpl = UserImpl;\n  exports._assert = _assert;\n  exports._assertInstanceOf = _assertInstanceOf;\n  exports._assertLinkedStatus = _assertLinkedStatus;\n  exports._castAuth = _castAuth;\n  exports._createError = _createError;\n  exports._emulatorUrl = _emulatorUrl;\n  exports._fail = _fail;\n  exports._gapiScriptUrl = _gapiScriptUrl;\n  exports._generateCallbackName = _generateCallbackName;\n  exports._getActiveServiceWorker = _getActiveServiceWorker;\n  exports._getClientVersion = _getClientVersion;\n  exports._getCurrentUrl = _getCurrentUrl;\n  exports._getInstance = _getInstance;\n  exports._getServiceWorkerController = _getServiceWorkerController;\n  exports._getWorkerGlobalScope = _getWorkerGlobalScope;\n  exports._isAndroid = _isAndroid;\n  exports._isChromeIOS = _isChromeIOS;\n  exports._isFirefox = _isFirefox;\n  exports._isIE10 = _isIE10;\n  exports._isIOS = _isIOS;\n  exports._isIOS7Or8 = _isIOS7Or8;\n  exports._isIOSStandalone = _isIOSStandalone;\n  exports._isMobileBrowser = _isMobileBrowser;\n  exports._isSafari = _isSafari;\n  exports._isWorker = _isWorker;\n  exports._link = _link;\n  exports._loadJS = _loadJS;\n  exports._logWarn = _logWarn;\n  exports._performApiRequest = _performApiRequest;\n  exports._persistenceKeyName = _persistenceKeyName;\n  exports._reauthenticate = _reauthenticate;\n  exports._serverAppCurrentUserOperationNotSupportedError = _serverAppCurrentUserOperationNotSupportedError;\n  exports._setExternalJSProvider = _setExternalJSProvider;\n  exports._setWindowLocation = _setWindowLocation;\n  exports._signInWithCredential = _signInWithCredential;\n  exports._window = _window;\n  exports.applyActionCode = applyActionCode;\n  exports.beforeAuthStateChanged = beforeAuthStateChanged;\n  exports.checkActionCode = checkActionCode;\n  exports.confirmPasswordReset = confirmPasswordReset;\n  exports.connectAuthEmulator = connectAuthEmulator;\n  exports.createUserWithEmailAndPassword = createUserWithEmailAndPassword;\n  exports.debugAssert = debugAssert;\n  exports.debugErrorMap = debugErrorMap;\n  exports.deleteUser = deleteUser;\n  exports.fetchSignInMethodsForEmail = fetchSignInMethodsForEmail;\n  exports.getAdditionalUserInfo = getAdditionalUserInfo;\n  exports.getIdToken = getIdToken;\n  exports.getIdTokenResult = _getIdTokenResult2;\n  exports.getMultiFactorResolver = getMultiFactorResolver;\n  exports.inMemoryPersistence = inMemoryPersistence;\n  exports.initializeAuth = initializeAuth;\n  exports.initializeRecaptchaConfig = initializeRecaptchaConfig;\n  exports.isSignInWithEmailLink = isSignInWithEmailLink;\n  exports.linkWithCredential = linkWithCredential;\n  exports.linkWithPhoneNumber = linkWithPhoneNumber;\n  exports.multiFactor = multiFactor;\n  exports.onAuthStateChanged = onAuthStateChanged;\n  exports.onIdTokenChanged = onIdTokenChanged;\n  exports.parseActionCodeURL = parseActionCodeURL;\n  exports.prodErrorMap = prodErrorMap;\n  exports.reauthenticateWithCredential = reauthenticateWithCredential;\n  exports.reauthenticateWithPhoneNumber = reauthenticateWithPhoneNumber;\n  exports.registerAuth = registerAuth;\n  exports.reload = _reload2;\n  exports.revokeAccessToken = revokeAccessToken;\n  exports.sendEmailVerification = sendEmailVerification;\n  exports.sendPasswordResetEmail = sendPasswordResetEmail;\n  exports.sendSignInLinkToEmail = sendSignInLinkToEmail;\n  exports.setPersistence = setPersistence;\n  exports.signInAnonymously = signInAnonymously;\n  exports.signInWithCredential = signInWithCredential;\n  exports.signInWithCustomToken = signInWithCustomToken;\n  exports.signInWithEmailAndPassword = signInWithEmailAndPassword;\n  exports.signInWithEmailLink = signInWithEmailLink;\n  exports.signInWithIdp = signInWithIdp;\n  exports.signInWithPhoneNumber = signInWithPhoneNumber;\n  exports.signOut = signOut;\n  exports.unlink = unlink;\n  exports.updateCurrentUser = updateCurrentUser;\n  exports.updateEmail = updateEmail;\n  exports.updatePassword = updatePassword;\n  exports.updatePhoneNumber = updatePhoneNumber;\n  exports.updateProfile = updateProfile;\n  exports.useDeviceLanguage = useDeviceLanguage;\n  exports.validatePassword = validatePassword;\n  exports.verifyBeforeUpdateEmail = verifyBeforeUpdateEmail;\n  exports.verifyPasswordResetCode = verifyPasswordResetCode;\n});","lineCount":10069,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_callSuper"],[4,16,1,13],[4,19,1,13,"require"],[4,26,1,13],[4,27,1,13,"_dependencyMap"],[4,41,1,13],[4,82,1,13,"default"],[4,89,1,13],[5,2,1,13],[5,6,1,13,"_inherits"],[5,15,1,13],[5,18,1,13,"require"],[5,25,1,13],[5,26,1,13,"_dependencyMap"],[5,40,1,13],[5,80,1,13,"default"],[5,87,1,13],[6,2,1,13],[6,6,1,13,"_objectWithoutProperties"],[6,30,1,13],[6,33,1,13,"require"],[6,40,1,13],[6,41,1,13,"_dependencyMap"],[6,55,1,13],[6,110,1,13,"default"],[6,117,1,13],[7,2,1,13],[7,6,1,13,"_slicedToArray"],[7,20,1,13],[7,23,1,13,"require"],[7,30,1,13],[7,31,1,13,"_dependencyMap"],[7,45,1,13],[7,90,1,13,"default"],[7,97,1,13],[8,2,1,13],[8,6,1,13,"_asyncToGenerator"],[8,23,1,13],[8,26,1,13,"require"],[8,33,1,13],[8,34,1,13,"_dependencyMap"],[8,48,1,13],[8,96,1,13,"default"],[8,103,1,13],[9,2,1,13],[9,6,1,13,"_classCallCheck"],[9,21,1,13],[9,24,1,13,"require"],[9,31,1,13],[9,32,1,13,"_dependencyMap"],[9,46,1,13],[9,92,1,13,"default"],[9,99,1,13],[10,2,1,13],[10,6,1,13,"_createClass"],[10,18,1,13],[10,21,1,13,"require"],[10,28,1,13],[10,29,1,13,"_dependencyMap"],[10,43,1,13],[10,86,1,13,"default"],[10,93,1,13],[11,2,1,13],[11,6,1,13,"_excluded"],[11,15,1,13],[12,4,1,13,"_excluded2"],[12,14,1,13],[13,4,1,13,"_excluded3"],[13,14,1,13],[14,2,3,0],[14,6,3,4,"util"],[14,10,3,8],[14,13,3,11,"require"],[14,20,3,18],[14,21,3,18,"_dependencyMap"],[14,35,3,18],[14,56,3,35],[14,57,3,36],[15,2,4,0],[15,6,4,4,"app"],[15,9,4,7],[15,12,4,10,"require"],[15,19,4,17],[15,20,4,17,"_dependencyMap"],[15,34,4,17],[15,54,4,33],[15,55,4,34],[16,2,5,0],[16,6,5,4,"component"],[16,15,5,13],[16,18,5,16,"require"],[16,25,5,23],[16,26,5,23,"_dependencyMap"],[16,40,5,23],[16,66,5,45],[16,67,5,46],[17,2,6,0],[17,6,6,4,"logger"],[17,12,6,10],[17,15,6,13,"require"],[17,22,6,20],[17,23,6,20,"_dependencyMap"],[17,37,6,20],[17,61,6,39],[17,62,6,40],[19,2,8,0],[20,0,9,0],[21,0,10,0],[22,0,11,0],[23,0,12,0],[24,0,13,0],[25,0,14,0],[26,0,15,0],[27,0,16,0],[28,0,17,0],[29,0,18,0],[30,0,19,0],[31,0,20,0],[32,0,21,0],[33,0,22,0],[34,0,23,0],[35,2,24,0],[35,11,24,9,"_debugErrorMap"],[35,25,24,23,"_debugErrorMap"],[35,26,24,23],[35,28,24,26],[36,4,25,4],[36,11,25,11],[37,6,26,8],[37,7,26,9],[37,35,26,37],[37,36,26,38],[37,79,26,81],[37,133,26,135],[38,6,27,8],[38,7,27,9],[38,23,27,25],[38,24,27,26],[38,61,27,63],[38,63,27,65],[39,6,28,8],[39,7,28,9],[39,27,28,29],[39,28,28,30],[39,69,28,71],[39,132,28,134],[39,135,29,12],[39,206,29,83],[39,209,30,12],[39,267,30,70],[40,6,31,8],[40,7,31,9],[40,26,31,28],[40,27,31,29],[40,67,31,69],[40,135,31,137],[40,138,32,12],[40,208,32,82],[40,211,33,12],[40,225,33,26],[41,6,34,8],[41,7,34,9],[41,29,34,31],[41,30,34,32],[41,73,34,75],[41,141,34,143],[41,144,35,12],[41,216,35,84],[41,219,36,12],[41,244,36,37],[42,6,37,8],[42,7,37,9],[42,21,37,23],[42,22,37,24],[42,57,37,59],[42,129,37,131],[42,132,38,12],[42,140,38,20],[43,6,39,8],[43,7,39,9],[43,26,39,28],[43,27,39,29],[43,67,39,69],[43,100,39,102],[44,6,40,8],[44,7,40,9],[44,25,40,27],[44,26,40,28],[44,65,40,67],[44,97,40,99],[45,6,41,8],[45,7,41,9],[45,34,41,36],[45,35,41,37],[45,83,41,85],[45,153,41,155],[46,6,42,8],[46,7,42,9],[46,30,42,32],[46,31,42,33],[46,73,42,75],[46,128,42,130],[47,6,43,8],[47,7,43,9],[47,30,43,32],[47,31,43,33],[47,84,43,86],[47,157,43,159],[47,160,44,12],[47,197,44,49],[48,6,45,8],[48,7,45,9],[48,46,45,48],[48,47,45,49],[48,100,45,102],[48,180,45,182],[48,183,46,12],[48,258,46,87],[48,261,47,12],[48,295,47,46],[49,6,48,8],[49,7,48,9],[49,35,48,37],[49,36,48,38],[49,85,48,87],[49,168,48,170],[49,171,49,12],[49,184,49,25],[50,6,50,8],[50,7,50,9],[50,40,50,42],[50,41,50,43],[50,95,50,97],[50,150,50,152],[51,6,51,8],[51,7,51,9],[51,29,51,31],[51,30,51,32],[51,65,51,67],[51,122,51,124],[52,6,52,8],[52,7,52,9],[52,31,52,33],[52,32,52,34],[52,77,52,79],[52,148,52,150],[52,151,53,12],[52,210,53,71],[52,213,54,12],[52,246,54,45],[53,6,55,8],[53,7,55,9],[53,28,55,30],[53,29,55,31],[53,68,55,70],[53,98,55,100],[54,6,56,8],[54,7,56,9],[54,32,56,34],[54,33,56,35],[54,77,56,79],[54,159,56,161],[55,6,57,8],[55,7,57,9],[55,23,57,25],[55,24,57,26],[55,61,57,63],[55,98,57,100],[56,6,58,8],[56,7,58,9],[56,31,58,33],[56,32,58,34],[56,77,58,79],[56,151,58,153],[56,154,59,12],[56,215,59,73],[57,6,60,8],[57,7,60,9],[57,23,60,25],[57,24,60,26],[57,61,60,63],[57,131,60,133],[58,6,61,8],[58,7,61,9],[58,27,61,29],[58,28,61,30],[58,63,61,65],[58,134,61,136],[58,137,62,12],[58,208,62,83],[58,211,63,12],[58,254,63,55],[59,6,64,8],[59,7,64,9],[59,27,64,29],[59,28,64,30],[59,69,64,71],[59,106,64,108],[60,6,65,8],[60,7,65,9],[60,34,65,36],[60,35,65,37],[60,70,65,72],[60,142,65,144],[60,145,66,12],[60,219,66,86],[60,222,67,12],[60,263,67,53],[61,6,68,8],[61,7,68,9],[61,29,68,31],[61,30,68,32],[61,73,68,75],[61,127,68,129],[62,6,69,8],[62,7,69,9],[62,38,69,40],[62,39,69,41],[62,91,69,93],[62,166,69,168],[62,169,70,12],[62,229,70,72],[62,232,71,12],[62,293,71,73],[62,296,72,12],[62,329,72,45],[63,6,73,8],[63,7,73,9],[63,29,73,31],[63,30,73,32],[63,73,73,75],[63,144,73,146],[64,6,74,8],[64,7,74,9],[64,36,74,38],[64,37,74,39],[64,87,74,89],[64,178,74,180],[65,6,75,8],[65,7,75,9],[65,22,75,24],[65,23,75,25],[65,59,75,61],[65,98,75,100],[66,6,76,8],[66,7,76,9],[66,32,76,34],[66,33,76,35],[66,79,76,81],[66,147,76,149],[67,6,77,8],[67,7,77,9],[67,24,77,26],[67,25,77,27],[67,63,77,65],[67,132,77,134],[68,6,78,8],[68,7,78,9],[68,26,78,28],[68,27,78,29],[68,67,78,69],[68,116,78,118],[69,6,79,8],[69,7,79,9],[69,27,79,29],[69,28,79,30],[69,69,79,71],[69,139,79,141],[70,6,80,8],[70,7,80,9],[70,32,80,34],[70,33,80,35],[70,79,80,81],[70,173,80,175],[70,176,81,12],[70,258,81,94],[71,6,82,8],[71,7,82,9],[71,37,82,39],[71,38,82,40],[71,80,82,82],[71,160,82,162],[72,6,83,8],[72,7,83,9],[72,31,83,33],[72,32,83,34],[72,77,83,79],[72,149,83,151],[72,152,84,12],[72,184,84,44],[73,6,85,8],[73,7,85,9],[73,32,85,34],[73,33,85,35],[73,79,85,81],[73,150,85,152],[73,153,86,12],[73,173,86,32],[74,6,87,8],[74,7,87,9],[74,28,87,30],[74,29,87,31],[74,66,87,68],[74,137,87,139],[74,140,88,12],[74,213,88,85],[75,6,89,8],[75,7,89,9],[75,28,89,30],[75,29,89,31],[75,68,89,70],[75,140,89,142],[75,143,90,12],[75,179,90,48],[76,6,91,8],[76,7,91,9],[76,23,91,25],[76,24,91,26],[76,63,91,65],[76,126,91,128],[77,6,92,8],[77,7,92,9],[77,33,92,35],[77,34,92,36],[77,76,92,78],[77,159,92,161],[78,6,93,8],[78,7,93,9],[78,29,93,31],[78,30,93,32],[78,73,93,75],[78,146,93,148],[78,149,94,12],[78,220,94,83],[78,223,95,12],[78,294,95,83],[78,297,96,12],[78,327,96,42],[79,6,97,8],[79,7,97,9],[79,28,97,30],[79,29,97,31],[79,71,97,73],[79,110,97,112],[80,6,98,8],[80,7,98,9],[80,32,98,34],[80,33,98,35],[80,79,98,81],[80,151,98,153],[80,154,99,12],[80,191,99,49],[81,6,100,8],[81,7,100,9],[81,23,100,25],[81,24,100,26],[81,61,100,63],[81,153,100,155],[81,156,101,12],[81,238,101,94],[82,6,102,8],[82,7,102,9],[82,32,102,34],[82,33,102,35],[82,76,102,78],[82,150,102,152],[83,6,103,8],[83,7,103,9],[83,26,103,28],[83,27,103,29],[83,67,103,69],[83,110,103,112],[84,6,104,8],[84,7,104,9],[84,22,104,24],[84,23,104,25],[84,59,104,61],[84,118,104,120],[85,6,105,8],[85,7,105,9],[85,33,105,35],[85,34,105,36],[85,85,105,87],[85,175,105,177],[86,6,106,8],[86,7,106,9],[86,36,106,38],[86,37,106,39],[86,79,106,81],[86,150,106,152],[86,153,107,12],[86,209,107,68],[87,6,108,8],[87,7,108,9],[87,31,108,33],[87,32,108,34],[87,77,108,79],[87,145,108,147],[87,148,109,12],[87,209,109,73],[88,6,110,8],[88,7,110,9],[88,34,110,36],[88,35,110,37],[88,70,110,72],[88,146,110,148],[89,6,111,8],[89,7,111,9],[89,29,111,31],[89,30,111,32],[89,73,111,75],[89,122,111,124],[90,6,112,8],[90,7,112,9],[90,29,112,31],[90,30,112,32],[90,73,112,75],[90,110,112,112],[91,6,113,8],[91,7,113,9],[91,30,113,32],[91,31,113,33],[91,75,113,77],[91,142,113,144],[92,6,114,8],[92,7,114,9],[92,33,114,35],[92,34,114,36],[92,81,114,83],[92,149,114,151],[92,152,115,12],[92,225,115,85],[92,228,116,12],[92,254,116,38],[93,6,117,8],[93,7,117,9],[93,25,117,27],[93,26,117,28],[93,65,117,67],[93,104,117,106],[94,6,118,8],[94,7,118,9],[94,34,118,36],[94,35,118,37],[94,74,118,76],[94,116,118,118],[95,6,119,8],[95,7,119,9],[95,37,119,39],[95,38,119,40],[95,80,119,82],[95,146,119,148],[96,6,120,8],[96,7,120,9],[96,29,120,31],[96,30,120,32],[96,73,120,75],[96,144,120,146],[97,6,121,8],[97,7,121,9],[97,32,121,34],[97,33,121,35],[97,76,121,78],[97,146,121,148],[98,6,122,8],[98,7,122,9],[98,20,122,22],[98,21,122,23],[98,60,122,62],[98,108,122,110],[99,6,123,8],[99,7,123,9],[99,36,123,38],[99,37,123,39],[99,78,123,80],[99,152,123,154],[100,6,124,8],[100,7,124,9],[100,35,124,37],[100,36,124,38],[100,71,124,73],[100,143,124,145],[101,6,125,8],[101,7,125,9],[101,49,125,51],[101,50,125,52],[101,90,125,92],[101,160,125,162],[101,163,126,12],[101,232,126,81],[101,235,127,12],[101,251,127,28],[102,6,128,8],[102,7,128,9],[102,31,128,33],[102,32,128,34],[102,77,128,79],[102,174,128,176],[103,6,129,8],[103,7,129,9],[103,22,129,24],[103,23,129,25],[103,59,129,61],[103,96,129,98],[104,6,130,8],[104,7,130,9],[104,25,130,27],[104,26,130,28],[104,65,130,67],[104,125,130,127],[105,6,131,8],[105,7,131,9],[105,18,131,20],[105,19,131,21],[105,51,131,53],[105,124,131,126],[105,127,132,12],[105,161,132,46],[106,6,133,8],[106,7,133,9],[106,30,133,32],[106,31,133,33],[106,75,133,77],[106,143,133,145],[106,146,134,12],[106,219,134,85],[106,222,135,12],[106,237,135,27],[107,6,136,8],[107,7,136,9],[107,52,136,54],[107,53,136,55],[107,99,136,101],[107,172,136,174],[107,175,137,12],[107,248,137,85],[107,251,138,12],[107,286,138,47],[108,6,139,8],[108,7,139,9],[108,22,139,24],[108,23,139,25],[108,59,139,61],[108,150,139,152],[109,6,140,8],[109,7,140,9],[109,29,140,31],[109,30,140,32],[109,73,140,75],[109,145,140,147],[110,6,141,8],[110,7,141,9],[110,32,141,34],[110,33,141,35],[110,79,141,81],[110,144,141,146],[111,6,142,8],[111,7,142,9],[111,23,142,25],[111,24,142,26],[111,61,142,63],[111,120,142,122],[112,6,143,8],[112,7,143,9],[112,35,143,37],[112,36,143,38],[112,85,143,87],[112,159,143,161],[113,6,144,8],[113,7,144,9],[113,35,144,37],[113,36,144,38],[113,85,144,87],[113,135,144,137],[114,6,145,8],[114,7,145,9],[114,28,145,30],[114,29,145,31],[114,71,145,73],[114,131,145,133],[115,6,146,8],[115,7,146,9],[115,37,146,39],[115,38,146,40],[115,91,146,93],[115,147,146,149],[116,6,147,8],[116,7,147,9],[116,45,147,47],[116,46,147,48],[116,97,147,99],[116,172,147,174],[117,6,148,8],[117,7,148,9],[117,27,148,29],[117,28,148,30],[117,69,148,71],[117,138,148,140],[118,6,149,8],[118,7,149,9],[118,16,149,18],[118,17,149,19],[118,47,149,49],[118,77,149,79],[119,6,150,8],[119,7,150,9],[119,27,150,29],[119,28,150,30],[119,64,150,66],[119,136,150,138],[120,6,151,8],[120,7,151,9],[120,26,151,28],[120,27,151,29],[120,77,151,79],[120,150,151,152],[120,153,152,12],[120,171,152,30],[121,6,153,8],[121,7,153,9],[121,34,153,36],[121,35,153,37],[121,77,153,79],[121,148,153,150],[121,151,154,12],[121,188,154,49],[122,6,155,8],[122,7,155,9],[122,33,155,35],[122,34,155,36],[122,81,155,83],[122,198,155,200],[123,6,156,8],[123,7,156,9],[123,37,156,39],[123,38,156,40],[123,84,156,86],[123,158,156,160],[124,6,157,8],[124,7,157,9],[124,37,157,39],[124,38,157,40],[124,89,157,91],[124,149,157,151],[125,6,158,8],[125,7,158,9],[125,25,158,27],[125,26,158,28],[125,65,158,67],[125,107,158,109],[126,6,159,8],[126,7,159,9],[126,23,159,25],[126,24,159,26],[126,61,159,63],[126,132,159,134],[127,6,160,8],[127,7,160,9],[127,23,160,25],[127,24,160,26],[127,59,160,61],[127,132,160,134],[127,135,161,12],[127,155,161,32],[128,6,162,8],[128,7,162,9],[128,22,162,24],[128,23,162,25],[128,59,162,61],[128,116,162,118],[129,6,163,8],[129,7,163,9],[129,22,163,24],[129,23,163,25],[129,59,163,61],[129,137,163,139],[130,6,164,8],[130,7,164,9],[130,24,164,26],[130,25,164,27],[130,63,164,65],[130,65,164,67],[131,6,165,8],[131,7,165,9],[131,22,165,24],[131,23,165,25],[131,59,165,61],[131,108,165,110],[132,6,166,8],[132,7,166,9],[132,32,166,34],[132,33,166,35],[132,79,166,81],[132,157,166,159],[133,6,167,8],[133,7,167,9],[133,28,167,30],[133,29,167,31],[133,71,167,73],[133,119,167,121],[133,122,168,12],[133,195,168,85],[133,198,169,12],[133,278,169,92],[133,281,170,12],[133,313,170,44],[134,6,171,8],[134,7,171,9],[134,32,171,34],[134,33,171,35],[134,79,171,81],[134,148,171,150],[135,6,172,8],[135,7,172,9],[135,32,172,34],[135,33,172,35],[135,79,172,81],[135,148,172,150],[136,6,173,8],[136,7,173,9],[136,33,173,35],[136,34,173,36],[136,81,173,83],[136,151,173,153],[137,6,174,8],[137,7,174,9],[137,30,174,32],[137,31,174,33],[137,75,174,77],[137,142,174,144],[138,6,175,8],[138,7,175,9],[138,28,175,30],[138,29,175,31],[138,71,175,73],[138,146,175,148],[139,6,176,8],[139,7,176,9],[139,34,176,36],[139,35,176,37],[139,83,176,85],[139,154,176,156],[140,6,177,8],[140,7,177,9],[140,25,177,27],[140,26,177,28],[140,65,177,67],[140,94,177,96],[141,6,178,8],[141,7,178,9],[141,34,178,36],[141,35,178,37],[141,83,178,85],[141,154,178,156],[142,6,179,8],[142,7,179,9],[142,51,179,53],[142,52,179,54],[142,117,179,119],[142,245,179,247],[143,6,180,8],[143,7,180,9],[143,44,180,46],[143,45,180,47],[143,103,180,105],[143,149,180,151],[144,6,181,8],[144,7,181,9],[144,36,181,38],[144,37,181,39],[144,87,181,89],[144,179,181,181],[144,182,182,12],[145,4,183,4],[145,5,183,5],[146,2,184,0],[147,2,185,0],[147,11,185,9,"_prodErrorMap"],[147,24,185,22,"_prodErrorMap"],[147,25,185,22],[147,27,185,25],[148,4,186,4],[149,4,187,4],[150,4,188,4],[151,4,189,4],[151,11,189,11],[152,6,190,8],[152,7,190,9],[152,46,190,48],[152,47,190,49],[152,100,190,102],[152,180,190,182],[152,183,191,12],[152,258,191,87],[152,261,192,12],[153,4,193,4],[153,5,193,5],[154,2,194,0],[155,2,195,0],[156,0,196,0],[157,0,197,0],[158,0,198,0],[159,0,199,0],[160,0,200,0],[161,0,201,0],[162,2,202,0],[162,6,202,6,"debugErrorMap"],[162,19,202,19],[162,22,202,22,"_debugErrorMap"],[162,36,202,36],[163,2,203,0],[164,0,204,0],[165,0,205,0],[166,0,206,0],[167,0,207,0],[168,0,208,0],[169,0,209,0],[170,2,210,0],[170,6,210,6,"prodErrorMap"],[170,18,210,18],[170,21,210,21,"_prodErrorMap"],[170,34,210,34],[171,2,211,0],[171,6,211,6,"_DEFAULT_AUTH_ERROR_FACTORY"],[171,33,211,33],[171,36,211,36],[171,40,211,40,"util"],[171,44,211,44],[171,45,211,45,"ErrorFactory"],[171,57,211,57],[171,58,211,58],[171,64,211,64],[171,66,211,66],[171,76,211,76],[171,78,211,78,"_prodErrorMap"],[171,91,211,91],[171,92,211,92],[171,93,211,93],[171,94,211,94],[172,2,212,0],[173,0,213,0],[174,0,214,0],[175,0,215,0],[176,0,216,0],[177,0,217,0],[178,0,218,0],[179,0,219,0],[180,0,220,0],[181,0,221,0],[182,0,222,0],[183,2,223,0],[183,6,223,6,"AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY"],[183,48,223,48],[183,51,223,51],[184,4,224,4,"ADMIN_ONLY_OPERATION"],[184,24,224,24],[184,26,224,26],[184,59,224,59],[185,4,225,4,"ARGUMENT_ERROR"],[185,18,225,18],[185,20,225,20],[185,41,225,41],[186,4,226,4,"APP_NOT_AUTHORIZED"],[186,22,226,22],[186,24,226,24],[186,49,226,49],[187,4,227,4,"APP_NOT_INSTALLED"],[187,21,227,21],[187,23,227,23],[187,47,227,47],[188,4,228,4,"CAPTCHA_CHECK_FAILED"],[188,24,228,24],[188,26,228,26],[188,53,228,53],[189,4,229,4,"CODE_EXPIRED"],[189,16,229,16],[189,18,229,18],[189,37,229,37],[190,4,230,4,"CORDOVA_NOT_READY"],[190,21,230,21],[190,23,230,23],[190,47,230,47],[191,4,231,4,"CORS_UNSUPPORTED"],[191,20,231,20],[191,22,231,22],[191,45,231,45],[192,4,232,4,"CREDENTIAL_ALREADY_IN_USE"],[192,29,232,29],[192,31,232,31],[192,63,232,63],[193,4,233,4,"CREDENTIAL_MISMATCH"],[193,23,233,23],[193,25,233,25],[193,53,233,53],[194,4,234,4,"CREDENTIAL_TOO_OLD_LOGIN_AGAIN"],[194,34,234,34],[194,36,234,36],[194,64,234,64],[195,4,235,4,"DEPENDENT_SDK_INIT_BEFORE_AUTH"],[195,34,235,34],[195,36,235,36],[195,80,235,80],[196,4,236,4,"DYNAMIC_LINK_NOT_ACTIVATED"],[196,30,236,30],[196,32,236,32],[196,65,236,65],[197,4,237,4,"EMAIL_CHANGE_NEEDS_VERIFICATION"],[197,35,237,35],[197,37,237,37],[197,75,237,75],[198,4,238,4,"EMAIL_EXISTS"],[198,16,238,16],[198,18,238,18],[198,45,238,45],[199,4,239,4,"EMULATOR_CONFIG_FAILED"],[199,26,239,26],[199,28,239,28],[199,57,239,57],[200,4,240,4,"EXPIRED_OOB_CODE"],[200,20,240,20],[200,22,240,22],[200,48,240,48],[201,4,241,4,"EXPIRED_POPUP_REQUEST"],[201,25,241,25],[201,27,241,27],[201,57,241,57],[202,4,242,4,"INTERNAL_ERROR"],[202,18,242,18],[202,20,242,20],[202,41,242,41],[203,4,243,4,"INVALID_API_KEY"],[203,19,243,19],[203,21,243,21],[203,43,243,43],[204,4,244,4,"INVALID_APP_CREDENTIAL"],[204,26,244,26],[204,28,244,28],[204,57,244,57],[205,4,245,4,"INVALID_APP_ID"],[205,18,245,18],[205,20,245,20],[205,41,245,41],[206,4,246,4,"INVALID_AUTH"],[206,16,246,16],[206,18,246,18],[206,43,246,43],[207,4,247,4,"INVALID_AUTH_EVENT"],[207,22,247,22],[207,24,247,24],[207,49,247,49],[208,4,248,4,"INVALID_CERT_HASH"],[208,21,248,21],[208,23,248,23],[208,47,248,47],[209,4,249,4,"INVALID_CODE"],[209,16,249,16],[209,18,249,18],[209,50,249,50],[210,4,250,4,"INVALID_CONTINUE_URI"],[210,24,250,24],[210,26,250,26],[210,53,250,53],[211,4,251,4,"INVALID_CORDOVA_CONFIGURATION"],[211,33,251,33],[211,35,251,35],[211,71,251,71],[212,4,252,4,"INVALID_CUSTOM_TOKEN"],[212,24,252,24],[212,26,252,26],[212,53,252,53],[213,4,253,4,"INVALID_DYNAMIC_LINK_DOMAIN"],[213,31,253,31],[213,33,253,33],[213,67,253,67],[214,4,254,4,"INVALID_EMAIL"],[214,17,254,17],[214,19,254,19],[214,39,254,39],[215,4,255,4,"INVALID_EMULATOR_SCHEME"],[215,27,255,27],[215,29,255,29],[215,59,255,59],[216,4,256,4,"INVALID_IDP_RESPONSE"],[216,24,256,24],[216,26,256,26],[216,51,256,51],[217,4,257,4,"INVALID_LOGIN_CREDENTIALS"],[217,29,257,29],[217,31,257,31],[217,56,257,56],[218,4,258,4,"INVALID_MESSAGE_PAYLOAD"],[218,27,258,27],[218,29,258,29],[218,59,258,59],[219,4,259,4,"INVALID_MFA_SESSION"],[219,23,259,23],[219,25,259,25],[219,60,259,60],[220,4,260,4,"INVALID_OAUTH_CLIENT_ID"],[220,27,260,27],[220,29,260,29],[220,59,260,59],[221,4,261,4,"INVALID_OAUTH_PROVIDER"],[221,26,261,26],[221,28,261,28],[221,57,261,57],[222,4,262,4,"INVALID_OOB_CODE"],[222,20,262,20],[222,22,262,22],[222,48,262,48],[223,4,263,4,"INVALID_ORIGIN"],[223,18,263,18],[223,20,263,20],[223,46,263,46],[224,4,264,4,"INVALID_PASSWORD"],[224,20,264,20],[224,22,264,22],[224,43,264,43],[225,4,265,4,"INVALID_PERSISTENCE"],[225,23,265,23],[225,25,265,25],[225,56,265,56],[226,4,266,4,"INVALID_PHONE_NUMBER"],[226,24,266,24],[226,26,266,26],[226,53,266,53],[227,4,267,4,"INVALID_PROVIDER_ID"],[227,23,267,23],[227,25,267,25],[227,51,267,51],[228,4,268,4,"INVALID_RECIPIENT_EMAIL"],[228,27,268,27],[228,29,268,29],[228,59,268,59],[229,4,269,4,"INVALID_SENDER"],[229,18,269,18],[229,20,269,20],[229,41,269,41],[230,4,270,4,"INVALID_SESSION_INFO"],[230,24,270,24],[230,26,270,26],[230,56,270,56],[231,4,271,4,"INVALID_TENANT_ID"],[231,21,271,21],[231,23,271,23],[231,47,271,47],[232,4,272,4,"MFA_INFO_NOT_FOUND"],[232,22,272,22],[232,24,272,24],[232,58,272,58],[233,4,273,4,"MFA_REQUIRED"],[233,16,273,16],[233,18,273,18],[233,51,273,51],[234,4,274,4,"MISSING_ANDROID_PACKAGE_NAME"],[234,32,274,32],[234,34,274,34],[234,65,274,65],[235,4,275,4,"MISSING_APP_CREDENTIAL"],[235,26,275,26],[235,28,275,28],[235,57,275,57],[236,4,276,4,"MISSING_AUTH_DOMAIN"],[236,23,276,23],[236,25,276,25],[236,59,276,59],[237,4,277,4,"MISSING_CODE"],[237,16,277,16],[237,18,277,18],[237,50,277,50],[238,4,278,4,"MISSING_CONTINUE_URI"],[238,24,278,24],[238,26,278,26],[238,53,278,53],[239,4,279,4,"MISSING_IFRAME_START"],[239,24,279,24],[239,26,279,26],[239,53,279,53],[240,4,280,4,"MISSING_IOS_BUNDLE_ID"],[240,25,280,25],[240,27,280,27],[240,55,280,55],[241,4,281,4,"MISSING_OR_INVALID_NONCE"],[241,28,281,28],[241,30,281,30],[241,61,281,61],[242,4,282,4,"MISSING_MFA_INFO"],[242,20,282,20],[242,22,282,22],[242,54,282,54],[243,4,283,4,"MISSING_MFA_SESSION"],[243,23,283,23],[243,25,283,25],[243,60,283,60],[244,4,284,4,"MISSING_PHONE_NUMBER"],[244,24,284,24],[244,26,284,26],[244,53,284,53],[245,4,285,4,"MISSING_SESSION_INFO"],[245,24,285,24],[245,26,285,26],[245,56,285,56],[246,4,286,4,"MODULE_DESTROYED"],[246,20,286,20],[246,22,286,22],[246,40,286,40],[247,4,287,4,"NEED_CONFIRMATION"],[247,21,287,21],[247,23,287,23],[247,70,287,70],[248,4,288,4,"NETWORK_REQUEST_FAILED"],[248,26,288,26],[248,28,288,28],[248,57,288,57],[249,4,289,4,"NULL_USER"],[249,13,289,13],[249,15,289,15],[249,31,289,31],[250,4,290,4,"NO_AUTH_EVENT"],[250,17,290,17],[250,19,290,19],[250,39,290,39],[251,4,291,4,"NO_SUCH_PROVIDER"],[251,20,291,20],[251,22,291,22],[251,45,291,45],[252,4,292,4,"OPERATION_NOT_ALLOWED"],[252,25,292,25],[252,27,292,27],[252,55,292,55],[253,4,293,4,"OPERATION_NOT_SUPPORTED"],[253,27,293,27],[253,29,293,29],[253,79,293,79],[254,4,294,4,"POPUP_BLOCKED"],[254,17,294,17],[254,19,294,19],[254,39,294,39],[255,4,295,4,"POPUP_CLOSED_BY_USER"],[255,24,295,24],[255,26,295,26],[255,53,295,53],[256,4,296,4,"PROVIDER_ALREADY_LINKED"],[256,27,296,27],[256,29,296,29],[256,59,296,59],[257,4,297,4,"QUOTA_EXCEEDED"],[257,18,297,18],[257,20,297,20],[257,41,297,41],[258,4,298,4,"REDIRECT_CANCELLED_BY_USER"],[258,30,298,30],[258,32,298,32],[258,65,298,65],[259,4,299,4,"REDIRECT_OPERATION_PENDING"],[259,30,299,30],[259,32,299,32],[259,65,299,65],[260,4,300,4,"REJECTED_CREDENTIAL"],[260,23,300,23],[260,25,300,25],[260,51,300,51],[261,4,301,4,"SECOND_FACTOR_ALREADY_ENROLLED"],[261,34,301,34],[261,36,301,36],[261,71,301,71],[262,4,302,4,"SECOND_FACTOR_LIMIT_EXCEEDED"],[262,32,302,32],[262,34,302,34],[262,77,302,77],[263,4,303,4,"TENANT_ID_MISMATCH"],[263,22,303,22],[263,24,303,24],[263,49,303,49],[264,4,304,4,"TIMEOUT"],[264,11,304,11],[264,13,304,13],[264,27,304,27],[265,4,305,4,"TOKEN_EXPIRED"],[265,17,305,17],[265,19,305,19],[265,44,305,44],[266,4,306,4,"TOO_MANY_ATTEMPTS_TRY_LATER"],[266,31,306,31],[266,33,306,33],[266,57,306,57],[267,4,307,4,"UNAUTHORIZED_DOMAIN"],[267,23,307,23],[267,25,307,25],[267,57,307,57],[268,4,308,4,"UNSUPPORTED_FIRST_FACTOR"],[268,28,308,28],[268,30,308,30],[268,61,308,61],[269,4,309,4,"UNSUPPORTED_PERSISTENCE"],[269,27,309,27],[269,29,309,29],[269,64,309,64],[270,4,310,4,"UNSUPPORTED_TENANT_OPERATION"],[270,32,310,32],[270,34,310,34],[270,69,310,69],[271,4,311,4,"UNVERIFIED_EMAIL"],[271,20,311,20],[271,22,311,22],[271,45,311,45],[272,4,312,4,"USER_CANCELLED"],[272,18,312,18],[272,20,312,20],[272,41,312,41],[273,4,313,4,"USER_DELETED"],[273,16,313,16],[273,18,313,18],[273,39,313,39],[274,4,314,4,"USER_DISABLED"],[274,17,314,17],[274,19,314,19],[274,39,314,39],[275,4,315,4,"USER_MISMATCH"],[275,17,315,17],[275,19,315,19],[275,39,315,39],[276,4,316,4,"USER_SIGNED_OUT"],[276,19,316,19],[276,21,316,21],[276,43,316,43],[277,4,317,4,"WEAK_PASSWORD"],[277,17,317,17],[277,19,317,19],[277,39,317,39],[278,4,318,4,"WEB_STORAGE_UNSUPPORTED"],[278,27,318,27],[278,29,318,29],[278,59,318,59],[279,4,319,4,"ALREADY_INITIALIZED"],[279,23,319,23],[279,25,319,25],[279,51,319,51],[280,4,320,4,"RECAPTCHA_NOT_ENABLED"],[280,25,320,25],[280,27,320,27],[280,55,320,55],[281,4,321,4,"MISSING_RECAPTCHA_TOKEN"],[281,27,321,27],[281,29,321,29],[281,59,321,59],[282,4,322,4,"INVALID_RECAPTCHA_TOKEN"],[282,27,322,27],[282,29,322,29],[282,59,322,59],[283,4,323,4,"INVALID_RECAPTCHA_ACTION"],[283,28,323,28],[283,30,323,30],[283,61,323,61],[284,4,324,4,"MISSING_CLIENT_TYPE"],[284,23,324,23],[284,25,324,25],[284,51,324,51],[285,4,325,4,"MISSING_RECAPTCHA_VERSION"],[285,29,325,29],[285,31,325,31],[285,63,325,63],[286,4,326,4,"INVALID_RECAPTCHA_VERSION"],[286,29,326,29],[286,31,326,31],[286,63,326,63],[287,4,327,4,"INVALID_REQ_TYPE"],[287,20,327,20],[287,22,327,22],[287,45,327,45],[288,4,328,4,"INVALID_HOSTING_LINK_DOMAIN"],[288,31,328,31],[288,33,328,33],[289,2,329,0],[289,3,329,1],[291,2,331,0],[292,0,332,0],[293,0,333,0],[294,0,334,0],[295,0,335,0],[296,0,336,0],[297,0,337,0],[298,0,338,0],[299,0,339,0],[300,0,340,0],[301,0,341,0],[302,0,342,0],[303,0,343,0],[304,0,344,0],[305,0,345,0],[306,0,346,0],[307,2,347,0],[307,6,347,6,"logClient"],[307,15,347,15],[307,18,347,18],[307,22,347,22,"logger"],[307,28,347,28],[307,29,347,29,"Logger"],[307,35,347,35],[307,36,347,36],[307,52,347,52],[307,53,347,53],[308,2,348,0],[308,11,348,9,"_logWarn"],[308,19,348,17,"_logWarn"],[308,20,348,18,"msg"],[308,23,348,21],[308,25,348,32],[309,4,349,4],[309,8,349,8,"logClient"],[309,17,349,17],[309,18,349,18,"logLevel"],[309,26,349,26],[309,30,349,30,"logger"],[309,36,349,36],[309,37,349,37,"LogLevel"],[309,45,349,45],[309,46,349,46,"WARN"],[309,50,349,50],[309,52,349,52],[310,6,349,52],[310,15,349,52,"_len"],[310,19,349,52],[310,22,349,52,"arguments"],[310,31,349,52],[310,32,349,52,"length"],[310,38,349,52],[310,40,348,26,"args"],[310,44,348,30],[310,51,348,30,"Array"],[310,56,348,30],[310,57,348,30,"_len"],[310,61,348,30],[310,68,348,30,"_len"],[310,72,348,30],[310,83,348,30,"_key2"],[310,88,348,30],[310,94,348,30,"_key2"],[310,99,348,30],[310,102,348,30,"_len"],[310,106,348,30],[310,108,348,30,"_key2"],[310,113,348,30],[311,8,348,26,"args"],[311,12,348,30],[311,13,348,30,"_key2"],[311,18,348,30],[311,26,348,30,"arguments"],[311,35,348,30],[311,36,348,30,"_key2"],[311,41,348,30],[312,6,348,30],[313,6,350,8,"logClient"],[313,15,350,17],[313,16,350,18,"warn"],[313,20,350,22],[313,21,350,23],[313,30,350,32,"app"],[313,33,350,35],[313,34,350,36,"SDK_VERSION"],[313,45,350,47],[313,51,350,53,"msg"],[313,54,350,56],[313,56,350,58],[313,58,350,60],[313,61,350,63,"args"],[313,65,350,67],[313,66,350,68],[314,4,351,4],[315,2,352,0],[316,2,353,0],[316,11,353,9,"_logError"],[316,20,353,18,"_logError"],[316,21,353,19,"msg"],[316,24,353,22],[316,26,353,33],[317,4,354,4],[317,8,354,8,"logClient"],[317,17,354,17],[317,18,354,18,"logLevel"],[317,26,354,26],[317,30,354,30,"logger"],[317,36,354,36],[317,37,354,37,"LogLevel"],[317,45,354,45],[317,46,354,46,"ERROR"],[317,51,354,51],[317,53,354,53],[318,6,354,53],[318,15,354,53,"_len2"],[318,20,354,53],[318,23,354,53,"arguments"],[318,32,354,53],[318,33,354,53,"length"],[318,39,354,53],[318,41,353,27,"args"],[318,45,353,31],[318,52,353,31,"Array"],[318,57,353,31],[318,58,353,31,"_len2"],[318,63,353,31],[318,70,353,31,"_len2"],[318,75,353,31],[318,86,353,31,"_key3"],[318,91,353,31],[318,97,353,31,"_key3"],[318,102,353,31],[318,105,353,31,"_len2"],[318,110,353,31],[318,112,353,31,"_key3"],[318,117,353,31],[319,8,353,27,"args"],[319,12,353,31],[319,13,353,31,"_key3"],[319,18,353,31],[319,26,353,31,"arguments"],[319,35,353,31],[319,36,353,31,"_key3"],[319,41,353,31],[320,6,353,31],[321,6,355,8,"logClient"],[321,15,355,17],[321,16,355,18,"error"],[321,21,355,23],[321,22,355,24],[321,31,355,33,"app"],[321,34,355,36],[321,35,355,37,"SDK_VERSION"],[321,46,355,48],[321,52,355,54,"msg"],[321,55,355,57],[321,57,355,59],[321,59,355,61],[321,62,355,64,"args"],[321,66,355,68],[321,67,355,69],[322,4,356,4],[323,2,357,0],[325,2,359,0],[326,0,360,0],[327,0,361,0],[328,0,362,0],[329,0,363,0],[330,0,364,0],[331,0,365,0],[332,0,366,0],[333,0,367,0],[334,0,368,0],[335,0,369,0],[336,0,370,0],[337,0,371,0],[338,0,372,0],[339,0,373,0],[340,0,374,0],[341,2,375,0],[341,11,375,9,"_fail"],[341,16,375,14,"_fail"],[341,17,375,15,"authOrCode"],[341,27,375,25],[341,29,375,36],[342,4,375,36],[342,13,375,36,"_len3"],[342,18,375,36],[342,21,375,36,"arguments"],[342,30,375,36],[342,31,375,36,"length"],[342,37,375,36],[342,39,375,30,"rest"],[342,43,375,34],[342,50,375,34,"Array"],[342,55,375,34],[342,56,375,34,"_len3"],[342,61,375,34],[342,68,375,34,"_len3"],[342,73,375,34],[342,84,375,34,"_key4"],[342,89,375,34],[342,95,375,34,"_key4"],[342,100,375,34],[342,103,375,34,"_len3"],[342,108,375,34],[342,110,375,34,"_key4"],[342,115,375,34],[343,6,375,30,"rest"],[343,10,375,34],[343,11,375,34,"_key4"],[343,16,375,34],[343,24,375,34,"arguments"],[343,33,375,34],[343,34,375,34,"_key4"],[343,39,375,34],[344,4,375,34],[345,4,376,4],[345,10,376,10,"createErrorInternal"],[345,29,376,29],[345,30,376,30,"authOrCode"],[345,40,376,40],[345,42,376,42],[345,45,376,45,"rest"],[345,49,376,49],[345,50,376,50],[346,2,377,0],[347,2,378,0],[347,11,378,9,"_createError"],[347,23,378,21,"_createError"],[347,24,378,22,"authOrCode"],[347,34,378,32],[347,36,378,43],[348,4,378,43],[348,13,378,43,"_len4"],[348,18,378,43],[348,21,378,43,"arguments"],[348,30,378,43],[348,31,378,43,"length"],[348,37,378,43],[348,39,378,37,"rest"],[348,43,378,41],[348,50,378,41,"Array"],[348,55,378,41],[348,56,378,41,"_len4"],[348,61,378,41],[348,68,378,41,"_len4"],[348,73,378,41],[348,84,378,41,"_key5"],[348,89,378,41],[348,95,378,41,"_key5"],[348,100,378,41],[348,103,378,41,"_len4"],[348,108,378,41],[348,110,378,41,"_key5"],[348,115,378,41],[349,6,378,37,"rest"],[349,10,378,41],[349,11,378,41,"_key5"],[349,16,378,41],[349,24,378,41,"arguments"],[349,33,378,41],[349,34,378,41,"_key5"],[349,39,378,41],[350,4,378,41],[351,4,379,4],[351,11,379,11,"createErrorInternal"],[351,30,379,30],[351,31,379,31,"authOrCode"],[351,41,379,41],[351,43,379,43],[351,46,379,46,"rest"],[351,50,379,50],[351,51,379,51],[352,2,380,0],[353,2,381,0],[353,11,381,9,"_errorWithCustomMessage"],[353,34,381,32,"_errorWithCustomMessage"],[353,35,381,33,"auth"],[353,39,381,37],[353,41,381,39,"code"],[353,45,381,43],[353,47,381,45,"message"],[353,54,381,52],[353,56,381,54],[354,4,382,4],[354,8,382,10,"errorMap"],[354,16,382,18],[354,19,382,21],[355,6,383,8],[355,9,383,11,"prodErrorMap"],[355,21,383,23],[355,22,383,24],[355,23,383,25],[356,6,384,8],[356,7,384,9,"code"],[356,11,384,13],[356,14,384,16,"message"],[357,4,385,4],[357,5,385,5],[358,4,386,4],[358,8,386,10,"factory"],[358,15,386,17],[358,18,386,20],[358,22,386,24,"util"],[358,26,386,28],[358,27,386,29,"ErrorFactory"],[358,39,386,41],[358,40,386,42],[358,46,386,48],[358,48,386,50],[358,58,386,60],[358,60,386,62,"errorMap"],[358,68,386,70],[358,69,386,71],[359,4,387,4],[359,11,387,11,"factory"],[359,18,387,18],[359,19,387,19,"create"],[359,25,387,25],[359,26,387,26,"code"],[359,30,387,30],[359,32,387,32],[360,6,388,8,"appName"],[360,13,388,15],[360,15,388,17,"auth"],[360,19,388,21],[360,20,388,22,"name"],[361,4,389,4],[361,5,389,5],[361,6,389,6],[362,2,390,0],[363,2,391,0],[363,11,391,9,"_serverAppCurrentUserOperationNotSupportedError"],[363,58,391,56,"_serverAppCurrentUserOperationNotSupportedError"],[363,59,391,57,"auth"],[363,63,391,61],[363,65,391,63],[364,4,392,4],[364,11,392,11,"_errorWithCustomMessage"],[364,34,392,34],[364,35,392,35,"auth"],[364,39,392,39],[364,41,392,41],[364,86,392,86],[364,87,392,87],[364,132,392,132],[364,228,392,228],[364,229,392,229],[365,2,393,0],[366,2,394,0],[366,11,394,9,"_assertInstanceOf"],[366,28,394,26,"_assertInstanceOf"],[366,29,394,27,"auth"],[366,33,394,31],[366,35,394,33,"object"],[366,41,394,39],[366,43,394,41,"instance"],[366,51,394,49],[366,53,394,51],[367,4,395,4],[367,8,395,10,"constructorInstance"],[367,27,395,29],[367,30,395,32,"instance"],[367,38,395,40],[368,4,396,4],[368,8,396,8],[368,10,396,10,"object"],[368,16,396,16],[368,28,396,28,"constructorInstance"],[368,47,396,47],[368,48,396,48],[368,50,396,50],[369,6,397,8],[369,10,397,12,"constructorInstance"],[369,29,397,31],[369,30,397,32,"name"],[369,34,397,36],[369,39,397,41,"object"],[369,45,397,47],[369,46,397,48,"constructor"],[369,57,397,59],[369,58,397,60,"name"],[369,62,397,64],[369,64,397,66],[370,8,398,12,"_fail"],[370,13,398,17],[370,14,398,18,"auth"],[370,18,398,22],[370,20,398,24],[370,36,398,40],[370,37,398,41],[370,71,398,75],[370,72,398,76],[371,6,399,8],[372,6,400,8],[372,12,400,14,"_errorWithCustomMessage"],[372,35,400,37],[372,36,400,38,"auth"],[372,40,400,42],[372,42,400,44],[372,58,400,60],[372,59,400,61],[372,95,400,97],[372,106,400,108,"object"],[372,112,400,114],[372,113,400,115,"constructor"],[372,124,400,126],[372,125,400,127,"name"],[372,129,400,131],[372,165,400,167],[372,168,401,12],[372,221,401,65],[372,222,401,66],[373,4,402,4],[374,2,403,0],[375,2,404,0],[375,11,404,9,"createErrorInternal"],[375,30,404,28,"createErrorInternal"],[375,31,404,29,"authOrCode"],[375,41,404,39],[375,43,404,50],[376,4,404,50],[376,13,404,50,"_len5"],[376,18,404,50],[376,21,404,50,"arguments"],[376,30,404,50],[376,31,404,50,"length"],[376,37,404,50],[376,39,404,44,"rest"],[376,43,404,48],[376,50,404,48,"Array"],[376,55,404,48],[376,56,404,48,"_len5"],[376,61,404,48],[376,68,404,48,"_len5"],[376,73,404,48],[376,84,404,48,"_key6"],[376,89,404,48],[376,95,404,48,"_key6"],[376,100,404,48],[376,103,404,48,"_len5"],[376,108,404,48],[376,110,404,48,"_key6"],[376,115,404,48],[377,6,404,44,"rest"],[377,10,404,48],[377,11,404,48,"_key6"],[377,16,404,48],[377,24,404,48,"arguments"],[377,33,404,48],[377,34,404,48,"_key6"],[377,39,404,48],[378,4,404,48],[379,4,405,4],[379,8,405,8],[379,15,405,15,"authOrCode"],[379,25,405,25],[379,30,405,30],[379,38,405,38],[379,40,405,40],[380,6,406,8],[380,10,406,14,"code"],[380,14,406,18],[380,17,406,21,"rest"],[380,21,406,25],[380,22,406,26],[380,23,406,27],[380,24,406,28],[381,6,407,8],[381,10,407,14,"fullParams"],[381,20,407,24],[381,23,407,27],[381,24,407,28],[381,27,407,31,"rest"],[381,31,407,35],[381,32,407,36,"slice"],[381,37,407,41],[381,38,407,42],[381,39,407,43],[381,40,407,44],[381,41,407,45],[382,6,408,8],[382,10,408,12,"fullParams"],[382,20,408,22],[382,21,408,23],[382,22,408,24],[382,23,408,25],[382,25,408,27],[383,8,409,12,"fullParams"],[383,18,409,22],[383,19,409,23],[383,20,409,24],[383,21,409,25],[383,22,409,26,"appName"],[383,29,409,33],[383,32,409,36,"authOrCode"],[383,42,409,46],[383,43,409,47,"name"],[383,47,409,51],[384,6,410,8],[385,6,411,8],[385,13,411,15,"authOrCode"],[385,23,411,25],[385,24,411,26,"_errorFactory"],[385,37,411,39],[385,38,411,40,"create"],[385,44,411,46],[385,45,411,47,"code"],[385,49,411,51],[385,51,411,53],[385,54,411,56,"fullParams"],[385,64,411,66],[385,65,411,67],[386,4,412,4],[387,4,413,4],[387,11,413,11,"_DEFAULT_AUTH_ERROR_FACTORY"],[387,38,413,38],[387,39,413,39,"create"],[387,45,413,45],[387,46,413,46,"authOrCode"],[387,56,413,56],[387,58,413,58],[387,61,413,61,"rest"],[387,65,413,65],[387,66,413,66],[388,2,414,0],[389,2,415,0],[389,11,415,9,"_assert"],[389,18,415,16,"_assert"],[389,19,415,17,"assertion"],[389,28,415,26],[389,30,415,28,"authOrCode"],[389,40,415,38],[389,42,415,49],[390,4,416,4],[390,8,416,8],[390,9,416,9,"assertion"],[390,18,416,18],[390,20,416,20],[391,6,416,20],[391,15,416,20,"_len6"],[391,20,416,20],[391,23,416,20,"arguments"],[391,32,416,20],[391,33,416,20,"length"],[391,39,416,20],[391,41,415,43,"rest"],[391,45,415,47],[391,52,415,47,"Array"],[391,57,415,47],[391,58,415,47,"_len6"],[391,63,415,47],[391,70,415,47,"_len6"],[391,75,415,47],[391,86,415,47,"_key7"],[391,91,415,47],[391,97,415,47,"_key7"],[391,102,415,47],[391,105,415,47,"_len6"],[391,110,415,47],[391,112,415,47,"_key7"],[391,117,415,47],[392,8,415,43,"rest"],[392,12,415,47],[392,13,415,47,"_key7"],[392,18,415,47],[392,26,415,47,"arguments"],[392,35,415,47],[392,36,415,47,"_key7"],[392,41,415,47],[393,6,415,47],[394,6,417,8],[394,12,417,14,"createErrorInternal"],[394,31,417,33],[394,32,417,34,"authOrCode"],[394,42,417,44],[394,44,417,46],[394,47,417,49,"rest"],[394,51,417,53],[394,52,417,54],[395,4,418,4],[396,2,419,0],[397,2,420,0],[398,0,421,0],[399,0,422,0],[400,0,423,0],[401,0,424,0],[402,0,425,0],[403,2,426,0],[403,11,426,9,"debugFail"],[403,20,426,18,"debugFail"],[403,21,426,19,"failure"],[403,28,426,26],[403,30,426,28],[404,4,427,4],[405,4,428,4],[406,4,429,4],[406,8,429,10,"message"],[406,15,429,17],[406,18,429,20],[406,47,429,49],[406,50,429,52,"failure"],[406,57,429,59],[407,4,430,4,"_logError"],[407,13,430,13],[407,14,430,14,"message"],[407,21,430,21],[407,22,430,22],[408,4,431,4],[409,4,432,4],[410,4,433,4],[411,4,434,4],[411,10,434,10],[411,14,434,14,"Error"],[411,19,434,19],[411,20,434,20,"message"],[411,27,434,27],[411,28,434,28],[412,2,435,0],[413,2,436,0],[414,0,437,0],[415,0,438,0],[416,0,439,0],[417,0,440,0],[418,0,441,0],[419,0,442,0],[420,2,443,0],[420,11,443,9,"debugAssert"],[420,22,443,20,"debugAssert"],[420,23,443,21,"assertion"],[420,32,443,30],[420,34,443,32,"message"],[420,41,443,39],[420,43,443,41],[421,4,444,4],[421,8,444,8],[421,9,444,9,"assertion"],[421,18,444,18],[421,20,444,20],[422,6,445,8,"debugFail"],[422,15,445,17],[422,16,445,18,"message"],[422,23,445,25],[422,24,445,26],[423,4,446,4],[424,2,447,0],[426,2,449,0],[427,0,450,0],[428,0,451,0],[429,0,452,0],[430,0,453,0],[431,0,454,0],[432,0,455,0],[433,0,456,0],[434,0,457,0],[435,0,458,0],[436,0,459,0],[437,0,460,0],[438,0,461,0],[439,0,462,0],[440,0,463,0],[441,0,464,0],[442,2,465,0],[442,11,465,9,"_getCurrentUrl"],[442,25,465,23,"_getCurrentUrl"],[442,26,465,23],[442,28,465,26],[443,4,466,4],[443,11,466,12],[443,18,466,19,"self"],[443,22,466,23],[443,27,466,28],[443,38,466,39],[443,42,466,43,"self"],[443,46,466,47],[443,47,466,48,"location"],[443,55,466,56],[443,57,466,58,"href"],[443,61,466,62],[443,65,466,67],[443,67,466,69],[444,2,467,0],[445,2,468,0],[445,11,468,9,"_isHttpOrHttps"],[445,25,468,23,"_isHttpOrHttps"],[445,26,468,23],[445,28,468,26],[446,4,469,4],[446,11,469,11,"_getCurrentScheme"],[446,28,469,28],[446,29,469,29],[446,30,469,30],[446,35,469,35],[446,42,469,42],[446,46,469,46,"_getCurrentScheme"],[446,63,469,63],[446,64,469,64],[446,65,469,65],[446,70,469,70],[446,78,469,78],[447,2,470,0],[448,2,471,0],[448,11,471,9,"_getCurrentScheme"],[448,28,471,26,"_getCurrentScheme"],[448,29,471,26],[448,31,471,29],[449,4,472,4],[449,11,472,12],[449,18,472,19,"self"],[449,22,472,23],[449,27,472,28],[449,38,472,39],[449,42,472,43,"self"],[449,46,472,47],[449,47,472,48,"location"],[449,55,472,56],[449,57,472,58,"protocol"],[449,65,472,66],[449,69,472,71],[449,73,472,75],[450,2,473,0],[452,2,475,0],[453,0,476,0],[454,0,477,0],[455,0,478,0],[456,0,479,0],[457,0,480,0],[458,0,481,0],[459,0,482,0],[460,0,483,0],[461,0,484,0],[462,0,485,0],[463,0,486,0],[464,0,487,0],[465,0,488,0],[466,0,489,0],[467,0,490,0],[468,2,491,0],[469,0,492,0],[470,0,493,0],[471,2,494,0],[471,11,494,9,"_isOnline"],[471,20,494,18,"_isOnline"],[471,21,494,18],[471,23,494,21],[472,4,495,4],[472,8,495,8],[472,15,495,15,"navigator"],[472,24,495,24],[472,29,495,29],[472,40,495,40],[472,44,496,8,"navigator"],[472,53,496,17],[472,57,497,8],[472,65,497,16],[472,69,497,20,"navigator"],[472,78,497,29],[472,82,498,8],[472,89,498,15,"navigator"],[472,98,498,24],[472,99,498,25,"onLine"],[472,105,498,31],[472,110,498,36],[472,119,498,45],[473,4,499,8],[474,4,500,8],[475,4,501,8],[476,4,502,8],[477,4,503,8],[478,4,504,9,"_isHttpOrHttps"],[478,18,504,23],[478,19,504,24],[478,20,504,25],[478,24,504,29,"util"],[478,28,504,33],[478,29,504,34,"isBrowserExtension"],[478,47,504,52],[478,48,504,53],[478,49,504,54],[478,53,504,58],[478,65,504,70],[478,69,504,74,"navigator"],[478,78,504,83],[478,79,504,84],[478,81,504,86],[479,6,505,8],[479,13,505,15,"navigator"],[479,22,505,24],[479,23,505,25,"onLine"],[479,29,505,31],[480,4,506,4],[481,4,507,4],[482,4,508,4],[482,11,508,11],[482,15,508,15],[483,2,509,0],[484,2,510,0],[484,11,510,9,"_getUserLanguage"],[484,27,510,25,"_getUserLanguage"],[484,28,510,25],[484,30,510,28],[485,4,511,4],[485,8,511,8],[485,15,511,15,"navigator"],[485,24,511,24],[485,29,511,29],[485,40,511,40],[485,42,511,42],[486,6,512,8],[486,13,512,15],[486,17,512,19],[487,4,513,4],[488,4,514,4],[488,8,514,10,"navigatorLanguage"],[488,25,514,27],[488,28,514,30,"navigator"],[488,37,514,39],[489,4,515,4],[490,6,516,4],[491,6,517,5,"navigatorLanguage"],[491,23,517,22],[491,24,517,23,"languages"],[491,33,517,32],[491,37,517,36,"navigatorLanguage"],[491,54,517,53],[491,55,517,54,"languages"],[491,64,517,63],[491,65,517,64],[491,66,517,65],[491,67,517,66],[492,6,518,8],[493,6,519,8],[494,6,520,8,"navigatorLanguage"],[494,23,520,25],[494,24,520,26,"language"],[494,32,520,34],[495,6,521,8],[496,6,522,8],[497,4,522,12],[498,2,523,0],[500,2,525,0],[501,0,526,0],[502,0,527,0],[503,0,528,0],[504,0,529,0],[505,0,530,0],[506,0,531,0],[507,0,532,0],[508,0,533,0],[509,0,534,0],[510,0,535,0],[511,0,536,0],[512,0,537,0],[513,0,538,0],[514,0,539,0],[515,0,540,0],[516,2,541,0],[517,0,542,0],[518,0,543,0],[519,0,544,0],[520,0,545,0],[521,2,541,0],[521,6,546,6,"Delay"],[521,11,546,11],[522,4,547,4],[522,13,547,4,"Delay"],[522,19,547,16,"shortDelay"],[522,29,547,26],[522,31,547,28,"longDelay"],[522,40,547,37],[522,42,547,39],[523,6,547,39,"_classCallCheck"],[523,21,547,39],[523,28,547,39,"Delay"],[523,33,547,39],[524,6,548,8],[524,10,548,12],[524,11,548,13,"shortDelay"],[524,21,548,23],[524,24,548,26,"shortDelay"],[524,34,548,36],[525,6,549,8],[525,10,549,12],[525,11,549,13,"longDelay"],[525,20,549,22],[525,23,549,25,"longDelay"],[525,32,549,34],[526,6,550,8],[527,6,551,8,"debugAssert"],[527,17,551,19],[527,18,551,20,"longDelay"],[527,27,551,29],[527,30,551,32,"shortDelay"],[527,40,551,42],[527,42,551,44],[527,87,551,89],[527,88,551,90],[528,6,552,8],[528,10,552,12],[528,11,552,13,"isMobile"],[528,19,552,21],[528,22,552,24,"util"],[528,26,552,28],[528,27,552,29,"isMobileCordova"],[528,42,552,44],[528,43,552,45],[528,44,552,46],[528,48,552,50,"util"],[528,52,552,54],[528,53,552,55,"isReactNative"],[528,66,552,68],[528,67,552,69],[528,68,552,70],[529,4,553,4],[530,4,553,5],[530,11,553,5,"_createClass"],[530,23,553,5],[530,24,553,5,"Delay"],[530,29,553,5],[531,6,553,5,"key"],[531,9,553,5],[532,6,553,5,"value"],[532,11,553,5],[532,13,554,4],[532,22,554,4,"get"],[532,25,554,7,"get"],[532,26,554,7],[532,28,554,10],[533,8,555,8],[533,12,555,12],[533,13,555,13,"_isOnline"],[533,22,555,22],[533,23,555,23],[533,24,555,24],[533,26,555,26],[534,10,556,12],[535,10,557,12],[535,17,557,19,"Math"],[535,21,557,23],[535,22,557,24,"min"],[535,25,557,27],[535,26,557,28],[535,30,557,32],[535,31,557,33],[535,55,557,57],[535,59,557,61],[535,60,557,62,"shortDelay"],[535,70,557,72],[535,71,557,73],[536,8,558,8],[537,8,559,8],[538,8,560,8],[539,8,561,8],[540,8,562,8],[541,8,563,8],[541,15,563,15],[541,19,563,19],[541,20,563,20,"isMobile"],[541,28,563,28],[541,31,563,31],[541,35,563,35],[541,36,563,36,"longDelay"],[541,45,563,45],[541,48,563,48],[541,52,563,52],[541,53,563,53,"shortDelay"],[541,63,563,63],[542,6,564,4],[543,4,564,5],[544,2,564,5],[545,2,567,0],[546,0,568,0],[547,0,569,0],[548,0,570,0],[549,0,571,0],[550,0,572,0],[551,0,573,0],[552,0,574,0],[553,0,575,0],[554,0,576,0],[555,0,577,0],[556,0,578,0],[557,0,579,0],[558,0,580,0],[559,0,581,0],[560,0,582,0],[561,2,583,0],[561,11,583,9,"_emulatorUrl"],[561,23,583,21,"_emulatorUrl"],[561,24,583,22,"config"],[561,30,583,28],[561,32,583,30,"path"],[561,36,583,34],[561,38,583,36],[562,4,584,4,"debugAssert"],[562,15,584,15],[562,16,584,16,"config"],[562,22,584,22],[562,23,584,23,"emulator"],[562,31,584,31],[562,33,584,33],[562,69,584,69],[562,70,584,70],[563,4,585,4],[563,8,585,12,"url"],[563,11,585,15],[563,14,585,20,"config"],[563,20,585,26],[563,21,585,27,"emulator"],[563,29,585,35],[563,30,585,12,"url"],[563,33,585,15],[564,4,586,4],[564,8,586,8],[564,9,586,9,"path"],[564,13,586,13],[564,15,586,15],[565,6,587,8],[565,13,587,15,"url"],[565,16,587,18],[566,4,588,4],[567,4,589,4],[567,11,589,11],[567,14,589,14,"url"],[567,17,589,17],[567,20,589,20,"path"],[567,24,589,24],[567,25,589,25,"startsWith"],[567,35,589,35],[567,36,589,36],[567,39,589,39],[567,40,589,40],[567,43,589,43,"path"],[567,47,589,47],[567,48,589,48,"slice"],[567,53,589,53],[567,54,589,54],[567,55,589,55],[567,56,589,56],[567,59,589,59,"path"],[567,63,589,63],[567,65,589,65],[568,2,590,0],[570,2,592,0],[571,0,593,0],[572,0,594,0],[573,0,595,0],[574,0,596,0],[575,0,597,0],[576,0,598,0],[577,0,599,0],[578,0,600,0],[579,0,601,0],[580,0,602,0],[581,0,603,0],[582,0,604,0],[583,0,605,0],[584,0,606,0],[585,0,607,0],[586,2,592,0],[586,6,608,6,"FetchProvider"],[586,19,608,19],[587,4,608,19],[587,13,608,19,"FetchProvider"],[587,27,608,19],[588,6,608,19,"_classCallCheck"],[588,21,608,19],[588,28,608,19,"FetchProvider"],[588,41,608,19],[589,4,608,19],[590,4,608,19],[590,11,608,19,"_createClass"],[590,23,608,19],[590,24,608,19,"FetchProvider"],[590,37,608,19],[591,6,608,19,"key"],[591,9,608,19],[592,6,608,19,"value"],[592,11,608,19],[592,13,609,4],[592,22,609,11,"initialize"],[592,32,609,21,"initialize"],[592,33,609,22,"fetchImpl"],[592,42,609,31],[592,44,609,33,"headersImpl"],[592,55,609,44],[592,57,609,46,"responseImpl"],[592,69,609,58],[592,71,609,60],[593,8,610,8],[593,12,610,12],[593,13,610,13,"fetchImpl"],[593,22,610,22],[593,25,610,25,"fetchImpl"],[593,34,610,34],[594,8,611,8],[594,12,611,12,"headersImpl"],[594,23,611,23],[594,25,611,25],[595,10,612,12],[595,14,612,16],[595,15,612,17,"headersImpl"],[595,26,612,28],[595,29,612,31,"headersImpl"],[595,40,612,42],[596,8,613,8],[597,8,614,8],[597,12,614,12,"responseImpl"],[597,24,614,24],[597,26,614,26],[598,10,615,12],[598,14,615,16],[598,15,615,17,"responseImpl"],[598,27,615,29],[598,30,615,32,"responseImpl"],[598,42,615,44],[599,8,616,8],[600,6,617,4],[601,4,617,5],[602,6,617,5,"key"],[602,9,617,5],[603,6,617,5,"value"],[603,11,617,5],[603,23,617,5,"_fetch"],[603,29,617,5],[604,8,617,5],[604,17,618,11,"fetch"],[604,22,618,16,"fetch"],[604,23,618,16],[605,10,618,16],[605,17,618,16,"_fetch"],[605,23,618,16],[605,24,618,16,"apply"],[605,29,618,16],[605,36,618,16,"arguments"],[605,45,618,16],[606,8,618,16],[607,8,618,11,"fetch"],[607,13,618,16],[607,14,618,16,"toString"],[607,22,618,16],[608,10,618,16],[608,17,618,16,"_fetch"],[608,23,618,16],[608,24,618,16,"toString"],[608,32,618,16],[609,8,618,16],[610,8,618,16],[610,15,618,11,"fetch"],[610,20,618,16],[611,6,618,16],[611,8,618,4],[611,20,618,19],[612,8,619,8],[612,12,619,12],[612,16,619,16],[612,17,619,17,"fetchImpl"],[612,26,619,26],[612,28,619,28],[613,10,620,12],[613,17,620,19],[613,21,620,23],[613,22,620,24,"fetchImpl"],[613,31,620,33],[614,8,621,8],[615,8,622,8],[615,12,622,12],[615,19,622,19,"self"],[615,23,622,23],[615,28,622,28],[615,39,622,39],[615,43,622,43],[615,50,622,50],[615,54,622,54,"self"],[615,58,622,58],[615,60,622,60],[616,10,623,12],[616,17,623,19,"self"],[616,21,623,23],[616,22,623,24,"fetch"],[616,27,623,29],[617,8,624,8],[618,8,625,8],[618,12,625,12],[618,19,625,19,"globalThis"],[618,29,625,29],[618,34,625,34],[618,45,625,45],[618,49,625,49,"globalThis"],[618,59,625,59],[618,60,625,60,"fetch"],[618,65,625,65],[618,67,625,67],[619,10,626,12],[619,17,626,19,"globalThis"],[619,27,626,29],[619,28,626,30,"fetch"],[619,33,626,35],[620,8,627,8],[621,8,628,8],[621,12,628,12],[621,19,628,19,"fetch"],[621,24,628,24],[621,29,628,29],[621,40,628,40],[621,42,628,42],[622,10,629,12],[622,17,629,19,"fetch"],[622,22,629,24],[623,8,630,8],[624,8,631,8,"debugFail"],[624,17,631,17],[624,18,631,18],[624,131,631,131],[624,132,631,132],[625,6,632,4],[625,7,632,5],[626,4,632,5],[627,6,632,5,"key"],[627,9,632,5],[628,6,632,5,"value"],[628,11,632,5],[628,13,633,4],[628,22,633,11,"headers"],[628,29,633,18,"headers"],[628,30,633,18],[628,32,633,21],[629,8,634,8],[629,12,634,12],[629,16,634,16],[629,17,634,17,"headersImpl"],[629,28,634,28],[629,30,634,30],[630,10,635,12],[630,17,635,19],[630,21,635,23],[630,22,635,24,"headersImpl"],[630,33,635,35],[631,8,636,8],[632,8,637,8],[632,12,637,12],[632,19,637,19,"self"],[632,23,637,23],[632,28,637,28],[632,39,637,39],[632,43,637,43],[632,52,637,52],[632,56,637,56,"self"],[632,60,637,60],[632,62,637,62],[633,10,638,12],[633,17,638,19,"self"],[633,21,638,23],[633,22,638,24,"Headers"],[633,29,638,31],[634,8,639,8],[635,8,640,8],[635,12,640,12],[635,19,640,19,"globalThis"],[635,29,640,29],[635,34,640,34],[635,45,640,45],[635,49,640,49,"globalThis"],[635,59,640,59],[635,60,640,60,"Headers"],[635,67,640,67],[635,69,640,69],[636,10,641,12],[636,17,641,19,"globalThis"],[636,27,641,29],[636,28,641,30,"Headers"],[636,35,641,37],[637,8,642,8],[638,8,643,8],[638,12,643,12],[638,19,643,19,"Headers"],[638,26,643,26],[638,31,643,31],[638,42,643,42],[638,44,643,44],[639,10,644,12],[639,17,644,19,"Headers"],[639,24,644,26],[640,8,645,8],[641,8,646,8,"debugFail"],[641,17,646,17],[641,18,646,18],[641,133,646,133],[641,134,646,134],[642,6,647,4],[643,4,647,5],[644,6,647,5,"key"],[644,9,647,5],[645,6,647,5,"value"],[645,11,647,5],[645,13,648,4],[645,22,648,11,"response"],[645,30,648,19,"response"],[645,31,648,19],[645,33,648,22],[646,8,649,8],[646,12,649,12],[646,16,649,16],[646,17,649,17,"responseImpl"],[646,29,649,29],[646,31,649,31],[647,10,650,12],[647,17,650,19],[647,21,650,23],[647,22,650,24,"responseImpl"],[647,34,650,36],[648,8,651,8],[649,8,652,8],[649,12,652,12],[649,19,652,19,"self"],[649,23,652,23],[649,28,652,28],[649,39,652,39],[649,43,652,43],[649,53,652,53],[649,57,652,57,"self"],[649,61,652,61],[649,63,652,63],[650,10,653,12],[650,17,653,19,"self"],[650,21,653,23],[650,22,653,24,"Response"],[650,30,653,32],[651,8,654,8],[652,8,655,8],[652,12,655,12],[652,19,655,19,"globalThis"],[652,29,655,29],[652,34,655,34],[652,45,655,45],[652,49,655,49,"globalThis"],[652,59,655,59],[652,60,655,60,"Response"],[652,68,655,68],[652,70,655,70],[653,10,656,12],[653,17,656,19,"globalThis"],[653,27,656,29],[653,28,656,30,"Response"],[653,36,656,38],[654,8,657,8],[655,8,658,8],[655,12,658,12],[655,19,658,19,"Response"],[655,27,658,27],[655,32,658,32],[655,43,658,43],[655,45,658,45],[656,10,659,12],[656,17,659,19,"Response"],[656,25,659,27],[657,8,660,8],[658,8,661,8,"debugFail"],[658,17,661,17],[658,18,661,18],[658,134,661,134],[658,135,661,135],[659,6,662,4],[660,4,662,5],[661,2,662,5],[662,2,665,0],[663,0,666,0],[664,0,667,0],[665,0,668,0],[666,0,669,0],[667,0,670,0],[668,0,671,0],[669,0,672,0],[670,0,673,0],[671,0,674,0],[672,0,675,0],[673,0,676,0],[674,0,677,0],[675,0,678,0],[676,0,679,0],[677,0,680,0],[678,2,681,0],[679,0,682,0],[680,0,683,0],[681,2,684,0],[681,6,684,6,"SERVER_ERROR_MAP"],[681,22,684,22],[681,25,684,25],[682,4,685,4],[683,4,686,4],[683,5,686,5],[683,26,686,26],[683,27,686,27],[683,67,686,67],[683,90,686,90],[683,91,686,91],[685,4,687,4],[686,4,688,4],[686,5,688,5],[686,27,688,27],[686,28,688,28],[686,69,688,69],[686,85,688,85],[686,86,688,86],[688,4,689,4],[689,4,690,4],[689,5,690,5],[689,25,690,25],[689,26,690,26],[689,65,690,65],[689,80,690,80],[689,81,690,81],[691,4,691,4],[692,4,692,4],[692,5,692,5],[692,27,692,27],[692,28,692,28],[692,69,692,69],[692,85,692,85],[692,86,692,86],[694,4,693,4],[695,4,694,4],[695,5,694,5],[695,23,694,23],[695,24,694,24],[695,61,694,61],[695,77,694,77],[695,78,694,78],[697,4,695,4],[698,4,696,4],[698,5,696,5],[698,23,696,23],[698,24,696,24],[698,61,696,61],[698,79,696,79],[698,80,696,80],[700,4,697,4],[701,4,698,4],[702,4,699,4],[702,5,699,5],[702,32,699,32],[702,33,699,33],[702,79,699,79],[702,99,699,99],[702,100,699,100],[704,4,700,4],[705,4,701,4],[705,5,701,5],[705,19,701,19],[705,20,701,20],[705,53,701,53],[705,75,701,75],[705,76,701,76],[706,4,702,4],[706,5,702,5],[706,30,702,30],[706,31,702,31],[706,75,702,75],[706,98,702,98],[706,99,702,99],[708,4,703,4],[709,4,704,4],[709,5,704,5],[709,27,704,27],[709,28,704,28],[709,69,704,69],[709,89,704,89],[709,90,704,90],[710,4,705,4],[710,5,705,5],[710,28,705,28],[710,29,705,29],[710,71,705,71],[710,91,705,91],[710,92,705,92],[711,4,706,4],[711,5,706,5],[711,39,706,39],[711,40,706,40],[711,93,706,93],[711,120,706,120],[711,121,706,121],[713,4,707,4],[714,4,708,4],[714,5,708,5],[714,23,708,23],[714,24,708,24],[714,61,708,61],[714,77,708,77],[714,78,708,78],[716,4,709,4],[717,4,710,4],[717,5,710,5],[717,22,710,22],[717,23,710,23],[717,59,710,59],[717,75,710,75],[717,76,710,76],[718,4,711,4],[718,5,711,5],[718,34,711,34],[718,35,711,35],[718,83,711,83],[718,102,711,102],[718,103,711,103],[719,4,712,4],[719,5,712,5],[719,23,712,23],[719,24,712,24],[719,61,712,61],[719,82,712,82],[719,83,712,83],[720,4,713,4],[720,5,713,5],[720,23,713,23],[720,24,713,24],[720,61,713,61],[720,82,713,82],[720,83,713,83],[722,4,714,4],[723,4,715,4],[723,5,715,5],[723,23,715,23],[723,24,715,24],[723,61,715,61],[723,77,715,77],[723,78,715,78],[725,4,716,4],[726,4,717,4],[726,5,717,5],[726,37,717,37],[726,38,717,38],[726,89,717,89],[726,112,717,112],[726,113,717,113],[727,4,718,4],[727,5,718,5],[727,23,718,23],[727,24,718,24],[727,61,718,61],[727,81,718,81],[727,82,718,82],[728,4,719,4],[728,5,719,5],[728,20,719,20],[728,21,719,21],[728,55,719,55],[728,75,719,75],[728,76,719,76],[729,4,720,4],[729,5,720,5],[729,21,720,21],[729,22,720,22],[729,57,720,57],[729,77,720,77],[729,78,720,78],[731,4,721,4],[732,4,722,4],[732,5,722,5],[732,34,722,34],[732,35,722,35],[732,83,722,83],[732,102,722,102],[732,103,722,103],[733,4,723,4],[733,5,723,5],[733,42,723,42],[733,43,723,43],[733,99,723,99],[733,136,723,136],[733,137,723,137],[735,4,724,4],[736,4,725,4],[736,5,725,5],[736,19,725,19],[736,20,725,20],[736,53,725,53],[736,80,725,80],[736,81,725,81],[737,4,726,4],[737,5,726,5],[737,27,726,27],[737,28,726,28],[737,69,726,69],[737,94,726,94],[737,95,726,95],[738,4,727,4],[738,5,727,5],[738,30,727,30],[738,31,727,31],[738,75,727,75],[738,95,727,95],[738,96,727,96],[739,4,728,4],[739,5,728,5],[739,27,728,27],[739,28,728,28],[739,69,728,69],[739,94,728,94],[739,95,728,95],[740,4,729,4],[740,5,729,5],[740,22,729,22],[740,23,729,23],[740,59,729,59],[740,73,729,73],[740,74,729,74],[742,4,730,4],[743,4,731,4],[744,4,732,4],[745,4,733,4],[745,5,733,5],[745,35,733,35],[745,36,733,36],[745,85,733,85],[745,111,733,111],[745,112,733,112],[746,4,734,4],[746,5,734,5],[746,26,734,26],[746,27,734,27],[746,67,734,67],[746,94,734,94],[746,95,734,95],[748,4,735,4],[749,4,736,4],[749,5,736,5],[749,30,736,30],[749,31,736,31],[749,75,736,75],[749,100,736,100],[749,101,736,101],[751,4,737,4],[752,4,738,4],[752,5,738,5],[752,27,738,27],[752,28,738,28],[752,69,738,69],[752,97,738,97],[752,98,738,98],[754,4,739,4],[755,4,740,4],[755,5,740,5],[755,37,740,37],[755,38,740,38],[755,89,740,89],[755,119,740,119],[755,120,740,120],[756,4,741,4],[756,5,741,5],[756,31,741,31],[756,32,741,32],[756,77,741,77],[756,106,741,106],[756,107,741,107],[757,4,742,4],[757,5,742,5],[757,32,742,32],[757,33,742,33],[757,79,742,79],[757,106,742,106],[757,107,742,107],[758,4,743,4],[758,5,743,5],[758,37,743,37],[758,38,743,38],[758,89,743,89],[758,119,743,119],[758,120,743,120],[759,4,744,4],[759,5,744,5],[759,27,744,27],[759,28,744,28],[759,69,744,69],[759,99,744,99],[759,100,744,100],[760,4,745,4],[760,5,745,5],[760,35,745,35],[760,36,745,36],[760,85,745,85],[760,123,745,123],[760,124,745,124],[762,4,746,4],[763,4,747,4],[763,5,747,5],[763,39,747,39],[763,40,747,40],[763,93,747,93],[763,109,747,109],[763,110,747,110],[765,4,748,4],[766,4,749,4],[766,5,749,5],[766,28,749,28],[766,29,749,29],[766,71,749,71],[766,94,749,94],[766,95,749,95],[767,4,750,4],[767,5,750,5],[767,30,750,30],[767,31,750,31],[767,75,750,75],[767,100,750,100],[767,101,750,101],[768,4,751,4],[768,5,751,5],[768,30,751,30],[768,31,751,31],[768,75,751,75],[768,100,751,100],[768,101,751,101],[769,4,752,4],[769,5,752,5],[769,31,752,31],[769,32,752,32],[769,77,752,77],[769,103,752,103],[769,104,752,104],[770,4,753,4],[770,5,753,5],[770,26,753,26],[770,27,753,27],[770,67,753,67],[770,88,753,88],[770,89,753,89],[771,4,754,4],[771,5,754,5],[771,32,754,32],[771,33,754,33],[771,79,754,79],[771,106,754,106],[771,107,754,107],[772,4,755,4],[772,5,755,5],[772,32,755,32],[772,33,755,33],[772,79,755,79],[772,106,755,106],[772,107,755,107],[773,4,756,4],[773,5,756,5],[773,23,756,23],[773,24,756,24],[773,61,756,61],[773,79,756,79],[773,80,756,80],[774,2,757,0],[774,3,757,1],[776,2,759,0],[777,0,760,0],[778,0,761,0],[779,0,762,0],[780,0,763,0],[781,0,764,0],[782,0,765,0],[783,0,766,0],[784,0,767,0],[785,0,768,0],[786,0,769,0],[787,0,770,0],[788,0,771,0],[789,0,772,0],[790,0,773,0],[791,0,774,0],[792,2,775,0],[792,6,775,6,"CookieAuthProxiedEndpoints"],[792,32,775,32],[792,35,775,35],[792,36,776,4],[792,72,776,40],[792,73,776,41],[792,115,777,4],[792,149,777,38],[792,150,777,39],[792,190,778,4],[792,218,778,32],[792,219,778,33],[792,252,779,4],[792,285,779,37],[792,286,779,38],[792,324,780,4],[792,360,780,40],[792,361,780,41],[792,403,781,4],[792,414,781,15],[792,415,781,16],[792,436,782,1],[793,2,783,0],[793,6,783,6,"DEFAULT_API_TIMEOUT_MS"],[793,28,783,28],[793,31,783,31],[793,35,783,35,"Delay"],[793,40,783,40],[793,41,783,41],[793,46,783,46],[793,48,783,48],[793,53,783,53],[793,54,783,54],[794,2,784,0],[794,11,784,9,"_addTidIfNecessary"],[794,29,784,27,"_addTidIfNecessary"],[794,30,784,28,"auth"],[794,34,784,32],[794,36,784,34,"request"],[794,43,784,41],[794,45,784,43],[795,4,785,4],[795,8,785,8,"auth"],[795,12,785,12],[795,13,785,13,"tenantId"],[795,21,785,21],[795,25,785,25],[795,26,785,26,"request"],[795,33,785,33],[795,34,785,34,"tenantId"],[795,42,785,42],[795,44,785,44],[796,6,786,8],[796,13,786,15],[797,8,787,12],[797,11,787,15,"request"],[797,18,787,22],[798,8,788,12,"tenantId"],[798,16,788,20],[798,18,788,22,"auth"],[798,22,788,26],[798,23,788,27,"tenantId"],[799,6,789,8],[799,7,789,9],[800,4,790,4],[801,4,791,4],[801,11,791,11,"request"],[801,18,791,18],[802,2,792,0],[803,2,792,1],[803,11,793,15,"_performApiRequest"],[803,29,793,33,"_performApiRequest"],[803,30,793,33,"_x"],[803,32,793,33],[803,34,793,33,"_x2"],[803,37,793,33],[803,39,793,33,"_x3"],[803,42,793,33],[803,44,793,33,"_x4"],[803,47,793,33],[804,4,793,33],[804,11,793,33,"_performApiRequest2"],[804,30,793,33],[804,31,793,33,"apply"],[804,36,793,33],[804,43,793,33,"arguments"],[804,52,793,33],[805,2,793,33],[806,2,793,33],[806,11,793,33,"_performApiRequest2"],[806,31,793,33],[807,4,793,33,"_performApiRequest2"],[807,23,793,33],[807,26,793,33,"_asyncToGenerator"],[807,43,793,33],[807,44,793,0],[807,55,793,34,"auth"],[807,59,793,38],[807,61,793,40,"method"],[807,67,793,46],[807,69,793,48,"path"],[807,73,793,52],[807,75,793,54,"request"],[807,82,793,61],[807,84,793,84],[808,6,793,84],[808,10,793,63,"customErrorMap"],[808,24,793,77],[808,27,793,77,"arguments"],[808,36,793,77],[808,37,793,77,"length"],[808,43,793,77],[808,51,793,77,"arguments"],[808,60,793,77],[808,68,793,77,"undefined"],[808,77,793,77],[808,80,793,77,"arguments"],[808,89,793,77],[808,95,793,80],[808,96,793,81],[808,97,793,82],[809,6,794,4],[809,13,794,11,"_performFetchWithErrorHandling"],[809,43,794,41],[809,44,794,42,"auth"],[809,48,794,46],[809,50,794,48,"customErrorMap"],[809,64,794,62],[809,79,794,62,"_asyncToGenerator"],[809,96,794,62],[809,97,794,64],[809,110,794,76],[810,8,795,8],[810,12,795,12,"body"],[810,16,795,16],[810,19,795,19],[810,20,795,20],[810,21,795,21],[811,8,796,8],[811,12,796,12,"params"],[811,18,796,18],[811,21,796,21],[811,22,796,22],[811,23,796,23],[812,8,797,8],[812,12,797,12,"request"],[812,19,797,19],[812,21,797,21],[813,10,798,12],[813,14,798,16,"method"],[813,20,798,22],[813,25,798,27],[813,30,798,32],[813,31,798,33],[813,53,798,55],[814,12,799,16,"params"],[814,18,799,22],[814,21,799,25,"request"],[814,28,799,32],[815,10,800,12],[815,11,800,13],[815,17,801,17],[816,12,802,16,"body"],[816,16,802,20],[816,19,802,23],[817,14,803,20,"body"],[817,18,803,24],[817,20,803,26,"JSON"],[817,24,803,30],[817,25,803,31,"stringify"],[817,34,803,40],[817,35,803,41,"request"],[817,42,803,48],[818,12,804,16],[818,13,804,17],[819,10,805,12],[820,8,806,8],[821,8,807,8],[821,12,807,14,"query"],[821,17,807,19],[821,20,807,22,"util"],[821,24,807,26],[821,25,807,27,"querystring"],[821,36,807,38],[821,37,807,39],[822,10,808,12,"key"],[822,13,808,15],[822,15,808,17,"auth"],[822,19,808,21],[822,20,808,22,"config"],[822,26,808,28],[822,27,808,29,"apiKey"],[822,33,808,35],[823,10,809,12],[823,13,809,15,"params"],[824,8,810,8],[824,9,810,9],[824,10,810,10],[824,11,810,11,"slice"],[824,16,810,16],[824,17,810,17],[824,18,810,18],[824,19,810,19],[825,8,811,8],[825,12,811,14,"headers"],[825,19,811,21],[825,28,811,30,"auth"],[825,32,811,34],[825,33,811,35,"_getAdditionalHeaders"],[825,54,811,56],[825,55,811,57],[825,56,811,58],[826,8,812,8,"headers"],[826,15,812,15],[826,16,812,16],[826,30,812,30],[826,31,812,31],[826,61,812,61],[826,64,812,64],[826,82,812,82],[827,8,813,8],[827,12,813,12,"auth"],[827,16,813,16],[827,17,813,17,"languageCode"],[827,29,813,29],[827,31,813,31],[828,10,814,12,"headers"],[828,17,814,19],[828,18,814,20],[828,37,814,39],[828,38,814,40],[828,73,814,75],[828,76,814,78,"auth"],[828,80,814,82],[828,81,814,83,"languageCode"],[828,93,814,95],[829,8,815,8],[830,8,816,8],[830,12,816,14,"fetchArgs"],[830,21,816,23],[830,24,816,26],[831,10,817,12,"method"],[831,16,817,18],[832,10,818,12,"headers"],[832,17,818,19],[833,10,819,12],[833,13,819,15,"body"],[834,8,820,8],[834,9,820,9],[835,8,821,8],[836,0,822,0],[837,0,823,0],[838,0,824,0],[839,8,825,8],[839,12,825,12],[839,13,825,13,"util"],[839,17,825,17],[839,18,825,18,"isCloudflareWorker"],[839,36,825,36],[839,37,825,37],[839,38,825,38],[839,40,825,40],[840,10,826,12,"fetchArgs"],[840,19,826,21],[840,20,826,22,"referrerPolicy"],[840,34,826,36],[840,37,826,39],[840,50,826,52],[841,8,827,8],[842,8,828,8],[842,12,828,12,"auth"],[842,16,828,16],[842,17,828,17,"emulatorConfig"],[842,31,828,31],[842,35,828,35,"util"],[842,39,828,39],[842,40,828,40,"isCloudWorkstation"],[842,58,828,58],[842,59,828,59,"auth"],[842,63,828,63],[842,64,828,64,"emulatorConfig"],[842,78,828,78],[842,79,828,79,"host"],[842,83,828,83],[842,84,828,84],[842,86,828,86],[843,10,829,12,"fetchArgs"],[843,19,829,21],[843,20,829,22,"credentials"],[843,31,829,33],[843,34,829,36],[843,43,829,45],[844,8,830,8],[845,8,831,8],[845,15,831,15,"FetchProvider"],[845,28,831,28],[845,29,831,29,"fetch"],[845,34,831,34],[845,35,831,35],[845,36,831,36],[845,43,831,43,"_getFinalTarget"],[845,58,831,58],[845,59,831,59,"auth"],[845,63,831,63],[845,65,831,65,"auth"],[845,69,831,69],[845,70,831,70,"config"],[845,76,831,76],[845,77,831,77,"apiHost"],[845,84,831,84],[845,86,831,86,"path"],[845,90,831,90],[845,92,831,92,"query"],[845,97,831,97],[845,98,831,98],[845,100,831,100,"fetchArgs"],[845,109,831,109],[845,110,831,110],[846,6,832,4],[846,7,832,5],[846,9,832,6],[847,4,833,0],[847,5,833,1],[848,4,833,1],[848,11,833,1,"_performApiRequest2"],[848,30,833,1],[848,31,833,1,"apply"],[848,36,833,1],[848,43,833,1,"arguments"],[848,52,833,1],[849,2,833,1],[850,2,833,1],[850,11,834,15,"_performFetchWithErrorHandling"],[850,41,834,45,"_performFetchWithErrorHandling"],[850,42,834,45,"_x5"],[850,45,834,45],[850,47,834,45,"_x6"],[850,50,834,45],[850,52,834,45,"_x7"],[850,55,834,45],[851,4,834,45],[851,11,834,45,"_performFetchWithErrorHandling2"],[851,42,834,45],[851,43,834,45,"apply"],[851,48,834,45],[851,55,834,45,"arguments"],[851,64,834,45],[852,2,834,45],[853,2,834,45],[853,11,834,45,"_performFetchWithErrorHandling2"],[853,43,834,45],[854,4,834,45,"_performFetchWithErrorHandling2"],[854,35,834,45],[854,38,834,45,"_asyncToGenerator"],[854,55,834,45],[854,56,834,0],[854,67,834,46,"auth"],[854,71,834,50],[854,73,834,52,"customErrorMap"],[854,87,834,66],[854,89,834,68,"fetchFn"],[854,96,834,75],[854,98,834,77],[855,6,835,4,"auth"],[855,10,835,8],[855,11,835,9,"_canInitEmulator"],[855,27,835,25],[855,30,835,28],[855,35,835,33],[856,6,836,4],[856,10,836,10,"errorMap"],[856,18,836,18],[856,21,836,21],[857,8,836,23],[857,11,836,26,"SERVER_ERROR_MAP"],[857,27,836,42],[858,8,836,44],[858,11,836,47,"customErrorMap"],[859,6,836,62],[859,7,836,63],[860,6,837,4],[860,10,837,8],[861,8,838,8],[861,12,838,14,"networkTimeout"],[861,26,838,28],[861,29,838,31],[861,33,838,35,"NetworkTimeout"],[861,47,838,49],[861,48,838,50,"auth"],[861,52,838,54],[861,53,838,55],[862,8,839,8],[862,12,839,14,"response"],[862,20,839,22],[862,29,839,31,"Promise"],[862,36,839,38],[862,37,839,39,"race"],[862,41,839,43],[862,42,839,44],[862,43,840,12,"fetchFn"],[862,50,840,19],[862,51,840,20],[862,52,840,21],[862,54,841,12,"networkTimeout"],[862,68,841,26],[862,69,841,27,"promise"],[862,76,841,34],[862,77,842,9],[862,78,842,10],[863,8,843,8],[864,8,844,8],[865,8,845,8,"networkTimeout"],[865,22,845,22],[865,23,845,23,"clearNetworkTimeout"],[865,42,845,42],[865,43,845,43],[865,44,845,44],[866,8,846,8],[866,12,846,14,"json"],[866,16,846,18],[866,25,846,27,"response"],[866,33,846,35],[866,34,846,36,"json"],[866,38,846,40],[866,39,846,41],[866,40,846,42],[867,8,847,8],[867,12,847,12],[867,30,847,30],[867,34,847,34,"json"],[867,38,847,38],[867,40,847,40],[868,10,848,12],[868,16,848,18,"_makeTaggedError"],[868,32,848,34],[868,33,848,35,"auth"],[868,37,848,39],[868,39,848,41],[868,81,848,83],[868,82,848,84],[868,121,848,123,"json"],[868,125,848,127],[868,126,848,128],[869,8,849,8],[870,8,850,8],[870,12,850,12,"response"],[870,20,850,20],[870,21,850,21,"ok"],[870,23,850,23],[870,27,850,27],[870,29,850,29],[870,43,850,43],[870,47,850,47,"json"],[870,51,850,51],[870,52,850,52],[870,54,850,54],[871,10,851,12],[871,17,851,19,"json"],[871,21,851,23],[872,8,852,8],[872,9,852,9],[872,15,853,13],[873,10,854,12],[873,14,854,18,"errorMessage"],[873,26,854,30],[873,29,854,33,"response"],[873,37,854,41],[873,38,854,42,"ok"],[873,40,854,44],[873,43,854,47,"json"],[873,47,854,51],[873,48,854,52,"errorMessage"],[873,60,854,64],[873,63,854,67,"json"],[873,67,854,71],[873,68,854,72,"error"],[873,73,854,77],[873,74,854,78,"message"],[873,81,854,85],[874,10,855,12],[874,14,855,12,"_errorMessage$split"],[874,33,855,12],[874,36,855,58,"errorMessage"],[874,48,855,70],[874,49,855,71,"split"],[874,54,855,76],[874,55,855,77],[874,60,855,82],[874,61,855,83],[875,12,855,83,"_errorMessage$split2"],[875,32,855,83],[875,35,855,83,"_slicedToArray"],[875,49,855,83],[875,50,855,83,"_errorMessage$split"],[875,69,855,83],[876,12,855,19,"serverErrorCode"],[876,27,855,34],[876,30,855,34,"_errorMessage$split2"],[876,50,855,34],[877,12,855,36,"serverErrorMessage"],[877,30,855,54],[877,33,855,54,"_errorMessage$split2"],[877,53,855,54],[878,10,856,12],[878,14,856,16,"serverErrorCode"],[878,29,856,31],[878,34,856,36],[878,68,856,70],[878,69,856,71],[878,121,856,123],[879,12,857,16],[879,18,857,22,"_makeTaggedError"],[879,34,857,38],[879,35,857,39,"auth"],[879,39,857,43],[879,41,857,45],[879,68,857,72],[879,69,857,73],[879,116,857,120,"json"],[879,120,857,124],[879,121,857,125],[880,10,858,12],[880,11,858,13],[880,17,859,17],[880,21,859,21,"serverErrorCode"],[880,36,859,36],[880,41,859,41],[880,55,859,55],[880,56,859,56],[880,88,859,88],[881,12,860,16],[881,18,860,22,"_makeTaggedError"],[881,34,860,38],[881,35,860,39,"auth"],[881,39,860,43],[881,41,860,45],[881,63,860,67],[881,64,860,68],[881,98,860,102,"json"],[881,102,860,106],[881,103,860,107],[882,10,861,12],[882,11,861,13],[882,17,862,17],[882,21,862,21,"serverErrorCode"],[882,36,862,36],[882,41,862,41],[882,56,862,56],[882,57,862,57],[882,90,862,90],[883,12,863,16],[883,18,863,22,"_makeTaggedError"],[883,34,863,38],[883,35,863,39,"auth"],[883,39,863,43],[883,41,863,45],[883,56,863,60],[883,57,863,61],[883,92,863,96,"json"],[883,96,863,100],[883,97,863,101],[884,10,864,12],[885,10,865,12],[885,14,865,18,"authError"],[885,23,865,27],[885,26,865,30,"errorMap"],[885,34,865,38],[885,35,865,39,"serverErrorCode"],[885,50,865,54],[885,51,865,55],[885,55,866,16,"serverErrorCode"],[885,70,866,31],[885,71,867,21,"toLowerCase"],[885,82,867,32],[885,83,867,33],[885,84,867,34],[885,85,868,21,"replace"],[885,92,868,28],[885,93,868,29],[885,102,868,38],[885,104,868,40],[885,107,868,43],[885,108,868,44],[886,10,869,12],[886,14,869,16,"serverErrorMessage"],[886,32,869,34],[886,34,869,36],[887,12,870,16],[887,18,870,22,"_errorWithCustomMessage"],[887,41,870,45],[887,42,870,46,"auth"],[887,46,870,50],[887,48,870,52,"authError"],[887,57,870,61],[887,59,870,63,"serverErrorMessage"],[887,77,870,81],[887,78,870,82],[888,10,871,12],[888,11,871,13],[888,17,872,17],[889,12,873,16,"_fail"],[889,17,873,21],[889,18,873,22,"auth"],[889,22,873,26],[889,24,873,28,"authError"],[889,33,873,37],[889,34,873,38],[890,10,874,12],[891,8,875,8],[892,6,876,4],[892,7,876,5],[892,8,877,4],[892,15,877,11,"e"],[892,16,877,12],[892,18,877,14],[893,8,878,8],[893,12,878,12,"e"],[893,13,878,13],[893,25,878,25,"util"],[893,29,878,29],[893,30,878,30,"FirebaseError"],[893,43,878,43],[893,45,878,45],[894,10,879,12],[894,16,879,18,"e"],[894,17,879,19],[895,8,880,8],[896,8,881,8],[897,8,882,8],[898,8,883,8],[899,8,884,8,"_fail"],[899,13,884,13],[899,14,884,14,"auth"],[899,18,884,18],[899,20,884,20],[899,44,884,44],[899,45,884,45],[899,89,884,89],[900,10,884,91],[900,19,884,100],[900,21,884,102,"String"],[900,27,884,108],[900,28,884,109,"e"],[900,29,884,110],[901,8,884,112],[901,9,884,113],[901,10,884,114],[902,6,885,4],[903,4,886,0],[903,5,886,1],[904,4,886,1],[904,11,886,1,"_performFetchWithErrorHandling2"],[904,42,886,1],[904,43,886,1,"apply"],[904,48,886,1],[904,55,886,1,"arguments"],[904,64,886,1],[905,2,886,1],[906,2,886,1],[906,11,887,15,"_performSignInRequest"],[906,32,887,36,"_performSignInRequest"],[906,33,887,36,"_x8"],[906,36,887,36],[906,38,887,36,"_x9"],[906,41,887,36],[906,43,887,36,"_x0"],[906,46,887,36],[906,48,887,36,"_x1"],[906,51,887,36],[907,4,887,36],[907,11,887,36,"_performSignInRequest2"],[907,33,887,36],[907,34,887,36,"apply"],[907,39,887,36],[907,46,887,36,"arguments"],[907,55,887,36],[908,2,887,36],[909,2,887,36],[909,11,887,36,"_performSignInRequest2"],[909,34,887,36],[910,4,887,36,"_performSignInRequest2"],[910,26,887,36],[910,29,887,36,"_asyncToGenerator"],[910,46,887,36],[910,47,887,0],[910,58,887,37,"auth"],[910,62,887,41],[910,64,887,43,"method"],[910,70,887,49],[910,72,887,51,"path"],[910,76,887,55],[910,78,887,57,"request"],[910,85,887,64],[910,87,887,87],[911,6,887,87],[911,10,887,66,"customErrorMap"],[911,24,887,80],[911,27,887,80,"arguments"],[911,36,887,80],[911,37,887,80,"length"],[911,43,887,80],[911,51,887,80,"arguments"],[911,60,887,80],[911,68,887,80,"undefined"],[911,77,887,80],[911,80,887,80,"arguments"],[911,89,887,80],[911,95,887,83],[911,96,887,84],[911,97,887,85],[912,6,888,4],[912,10,888,10,"serverResponse"],[912,24,888,24],[912,33,888,33,"_performApiRequest"],[912,51,888,51],[912,52,888,52,"auth"],[912,56,888,56],[912,58,888,58,"method"],[912,64,888,64],[912,66,888,66,"path"],[912,70,888,70],[912,72,888,72,"request"],[912,79,888,79],[912,81,888,81,"customErrorMap"],[912,95,888,95],[912,96,888,96],[913,6,889,4],[913,10,889,8],[913,32,889,30],[913,36,889,34,"serverResponse"],[913,50,889,48],[913,52,889,50],[914,8,890,8,"_fail"],[914,13,890,13],[914,14,890,14,"auth"],[914,18,890,18],[914,20,890,20],[914,48,890,48],[914,49,890,49],[914,83,890,83],[915,10,891,12,"_serverResponse"],[915,25,891,27],[915,27,891,29,"serverResponse"],[916,8,892,8],[916,9,892,9],[916,10,892,10],[917,6,893,4],[918,6,894,4],[918,13,894,11,"serverResponse"],[918,27,894,25],[919,4,895,0],[919,5,895,1],[920,4,895,1],[920,11,895,1,"_performSignInRequest2"],[920,33,895,1],[920,34,895,1,"apply"],[920,39,895,1],[920,46,895,1,"arguments"],[920,55,895,1],[921,2,895,1],[922,2,895,1],[922,11,896,15,"_getFinalTarget"],[922,26,896,30,"_getFinalTarget"],[922,27,896,30,"_x10"],[922,31,896,30],[922,33,896,30,"_x11"],[922,37,896,30],[922,39,896,30,"_x12"],[922,43,896,30],[922,45,896,30,"_x13"],[922,49,896,30],[923,4,896,30],[923,11,896,30,"_getFinalTarget2"],[923,27,896,30],[923,28,896,30,"apply"],[923,33,896,30],[923,40,896,30,"arguments"],[923,49,896,30],[924,2,896,30],[925,2,896,30],[925,11,896,30,"_getFinalTarget2"],[925,28,896,30],[926,4,896,30,"_getFinalTarget2"],[926,20,896,30],[926,23,896,30,"_asyncToGenerator"],[926,40,896,30],[926,41,896,0],[926,52,896,31,"auth"],[926,56,896,35],[926,58,896,37,"host"],[926,62,896,41],[926,64,896,43,"path"],[926,68,896,47],[926,70,896,49,"query"],[926,75,896,54],[926,77,896,56],[927,6,897,4],[927,10,897,10,"base"],[927,14,897,14],[927,17,897,17],[927,20,897,20,"host"],[927,24,897,24],[927,27,897,27,"path"],[927,31,897,31],[927,35,897,35,"query"],[927,40,897,40],[927,42,897,42],[928,6,898,4],[928,10,898,10,"authInternal"],[928,22,898,22],[928,25,898,25,"auth"],[928,29,898,29],[929,6,899,4],[929,10,899,10,"finalTarget"],[929,21,899,21],[929,24,899,24,"authInternal"],[929,36,899,36],[929,37,899,37,"config"],[929,43,899,43],[929,44,899,44,"emulator"],[929,52,899,52],[929,55,900,10,"_emulatorUrl"],[929,67,900,22],[929,68,900,23,"auth"],[929,72,900,27],[929,73,900,28,"config"],[929,79,900,34],[929,81,900,36,"base"],[929,85,900,40],[929,86,900,41],[929,89,901,10],[929,92,901,13,"auth"],[929,96,901,17],[929,97,901,18,"config"],[929,103,901,24],[929,104,901,25,"apiScheme"],[929,113,901,34],[929,119,901,40,"base"],[929,123,901,44],[929,125,901,46],[930,6,902,4],[931,6,903,4],[932,6,904,4],[933,6,905,4],[933,10,905,8,"CookieAuthProxiedEndpoints"],[933,36,905,34],[933,37,905,35,"includes"],[933,45,905,43],[933,46,905,44,"path"],[933,50,905,48],[933,51,905,49],[933,53,905,51],[934,8,906,8],[935,8,907,8],[936,8,908,8],[936,14,908,14,"authInternal"],[936,26,908,26],[936,27,908,27,"_persistenceManagerAvailable"],[936,55,908,55],[937,8,909,8],[937,12,909,12,"authInternal"],[937,24,909,24],[937,25,909,25,"_getPersistenceType"],[937,44,909,44],[937,45,909,45],[937,46,909,46],[937,51,909,51],[937,59,909,59],[937,60,909,60],[937,90,909,90],[938,10,910,12],[938,14,910,18,"cookiePersistence"],[938,31,910,35],[938,34,910,38,"authInternal"],[938,46,910,50],[938,47,910,51,"_getPersistence"],[938,62,910,66],[938,63,910,67],[938,64,910,68],[939,10,911,12],[939,17,911,19,"cookiePersistence"],[939,34,911,36],[939,35,911,37,"_getFinalTarget"],[939,50,911,52],[939,51,911,53,"finalTarget"],[939,62,911,64],[939,63,911,65],[939,64,911,66,"toString"],[939,72,911,74],[939,73,911,75],[939,74,911,76],[940,8,912,8],[941,6,913,4],[942,6,914,4],[942,13,914,11,"finalTarget"],[942,24,914,22],[943,4,915,0],[943,5,915,1],[944,4,915,1],[944,11,915,1,"_getFinalTarget2"],[944,27,915,1],[944,28,915,1,"apply"],[944,33,915,1],[944,40,915,1,"arguments"],[944,49,915,1],[945,2,915,1],[946,2,916,0],[946,11,916,9,"_parseEnforcementState"],[946,33,916,31,"_parseEnforcementState"],[946,34,916,32,"enforcementStateStr"],[946,53,916,51],[946,55,916,53],[947,4,917,4],[947,12,917,12,"enforcementStateStr"],[947,31,917,31],[948,6,918,8],[948,11,918,13],[948,20,918,22],[949,8,919,12],[949,15,919,19],[949,24,919,28],[949,25,919,29],[950,6,920,8],[950,11,920,13],[950,18,920,20],[951,8,921,12],[951,15,921,19],[951,22,921,26],[951,23,921,27],[952,6,922,8],[952,11,922,13],[952,16,922,18],[953,8,923,12],[953,15,923,19],[953,20,923,24],[953,21,923,25],[954,6,924,8],[955,8,925,12],[955,15,925,19],[955,46,925,50],[955,47,925,51],[956,4,926,4],[957,2,927,0],[958,2,927,1],[958,6,928,6,"NetworkTimeout"],[958,20,928,20],[959,4,932,4],[959,13,932,4,"NetworkTimeout"],[959,28,932,16,"auth"],[959,32,932,20],[959,34,932,22],[960,6,932,22,"_classCallCheck"],[960,21,932,22],[960,28,932,22,"NetworkTimeout"],[960,42,932,22],[961,6,933,8],[961,10,933,12],[961,11,933,13,"auth"],[961,15,933,17],[961,18,933,20,"auth"],[961,22,933,24],[962,6,934,8],[963,6,935,8],[964,6,936,8],[965,6,937,8],[965,10,937,12],[965,11,937,13,"timer"],[965,16,937,18],[965,19,937,21],[965,23,937,25],[966,6,938,8],[966,10,938,12],[966,11,938,13,"promise"],[966,18,938,20],[966,21,938,23],[966,25,938,27,"Promise"],[966,32,938,34],[966,33,938,35],[966,34,938,36,"_"],[966,35,938,37],[966,37,938,39,"reject"],[966,43,938,45],[966,48,938,50],[967,8,939,12],[967,12,939,16],[967,13,939,17,"timer"],[967,18,939,22],[967,21,939,25,"setTimeout"],[967,31,939,35],[967,32,939,36],[967,38,939,42],[968,10,940,16],[968,17,940,23,"reject"],[968,23,940,29],[968,24,940,30,"_createError"],[968,36,940,42],[968,37,940,43],[968,41,940,47],[968,42,940,48,"auth"],[968,46,940,52],[968,48,940,54],[968,72,940,78],[968,73,940,79],[968,115,940,121],[968,116,940,122],[968,117,940,123],[969,8,941,12],[969,9,941,13],[969,11,941,15,"DEFAULT_API_TIMEOUT_MS"],[969,33,941,37],[969,34,941,38,"get"],[969,37,941,41],[969,38,941,42],[969,39,941,43],[969,40,941,44],[970,6,942,8],[970,7,942,9],[970,8,942,10],[971,4,943,4],[972,4,943,5],[972,11,943,5,"_createClass"],[972,23,943,5],[972,24,943,5,"NetworkTimeout"],[972,38,943,5],[973,6,943,5,"key"],[973,9,943,5],[974,6,943,5,"value"],[974,11,943,5],[974,13,929,4],[974,22,929,4,"clearNetworkTimeout"],[974,41,929,23,"clearNetworkTimeout"],[974,42,929,23],[974,44,929,26],[975,8,930,8,"clearTimeout"],[975,20,930,20],[975,21,930,21],[975,25,930,25],[975,26,930,26,"timer"],[975,31,930,31],[975,32,930,32],[976,6,931,4],[977,4,931,5],[978,2,931,5],[979,2,945,0],[979,11,945,9,"_makeTaggedError"],[979,27,945,25,"_makeTaggedError"],[979,28,945,26,"auth"],[979,32,945,30],[979,34,945,32,"code"],[979,38,945,36],[979,40,945,38,"response"],[979,48,945,46],[979,50,945,48],[980,4,946,4],[980,8,946,10,"errorParams"],[980,19,946,21],[980,22,946,24],[981,6,947,8,"appName"],[981,13,947,15],[981,15,947,17,"auth"],[981,19,947,21],[981,20,947,22,"name"],[982,4,948,4],[982,5,948,5],[983,4,949,4],[983,8,949,8,"response"],[983,16,949,16],[983,17,949,17,"email"],[983,22,949,22],[983,24,949,24],[984,6,950,8,"errorParams"],[984,17,950,19],[984,18,950,20,"email"],[984,23,950,25],[984,26,950,28,"response"],[984,34,950,36],[984,35,950,37,"email"],[984,40,950,42],[985,4,951,4],[986,4,952,4],[986,8,952,8,"response"],[986,16,952,16],[986,17,952,17,"phoneNumber"],[986,28,952,28],[986,30,952,30],[987,6,953,8,"errorParams"],[987,17,953,19],[987,18,953,20,"phoneNumber"],[987,29,953,31],[987,32,953,34,"response"],[987,40,953,42],[987,41,953,43,"phoneNumber"],[987,52,953,54],[988,4,954,4],[989,4,955,4],[989,8,955,10,"error"],[989,13,955,15],[989,16,955,18,"_createError"],[989,28,955,30],[989,29,955,31,"auth"],[989,33,955,35],[989,35,955,37,"code"],[989,39,955,41],[989,41,955,43,"errorParams"],[989,52,955,54],[989,53,955,55],[990,4,956,4],[991,4,957,4,"error"],[991,9,957,9],[991,10,957,10,"customData"],[991,20,957,20],[991,21,957,21,"_tokenResponse"],[991,35,957,35],[991,38,957,38,"response"],[991,46,957,46],[992,4,958,4],[992,11,958,11,"error"],[992,16,958,16],[993,2,959,0],[995,2,961,0],[996,0,962,0],[997,0,963,0],[998,0,964,0],[999,0,965,0],[1000,0,966,0],[1001,0,967,0],[1002,0,968,0],[1003,0,969,0],[1004,0,970,0],[1005,0,971,0],[1006,0,972,0],[1007,0,973,0],[1008,0,974,0],[1009,0,975,0],[1010,0,976,0],[1011,2,977,0],[1011,11,977,9,"isV2"],[1011,15,977,13,"isV2"],[1011,16,977,14,"grecaptcha"],[1011,26,977,24],[1011,28,977,26],[1012,4,978,4],[1012,11,978,12,"grecaptcha"],[1012,21,978,22],[1012,26,978,27,"undefined"],[1012,35,978,36],[1012,39,979,8,"grecaptcha"],[1012,49,979,18],[1012,50,979,19,"getResponse"],[1012,61,979,30],[1012,66,979,35,"undefined"],[1012,75,979,44],[1013,2,980,0],[1014,2,981,0],[1014,11,981,9,"isEnterprise"],[1014,23,981,21,"isEnterprise"],[1014,24,981,22,"grecaptcha"],[1014,34,981,32],[1014,36,981,34],[1015,4,982,4],[1015,11,982,12,"grecaptcha"],[1015,21,982,22],[1015,26,982,27,"undefined"],[1015,35,982,36],[1015,39,983,8,"grecaptcha"],[1015,49,983,18],[1015,50,983,19,"enterprise"],[1015,60,983,29],[1015,65,983,34,"undefined"],[1015,74,983,43],[1016,2,984,0],[1017,2,984,1],[1017,6,985,6,"RecaptchaConfig"],[1017,21,985,21],[1018,4,986,4],[1018,13,986,4,"RecaptchaConfig"],[1018,29,986,16,"response"],[1018,37,986,24],[1018,39,986,26],[1019,6,986,26,"_classCallCheck"],[1019,21,986,26],[1019,28,986,26,"RecaptchaConfig"],[1019,43,986,26],[1020,6,987,8],[1021,0,988,0],[1022,0,989,0],[1023,6,990,8],[1023,10,990,12],[1023,11,990,13,"siteKey"],[1023,18,990,20],[1023,21,990,23],[1023,23,990,25],[1024,6,991,8],[1025,0,992,0],[1026,0,993,0],[1027,6,994,8],[1027,10,994,12],[1027,11,994,13,"recaptchaEnforcementState"],[1027,36,994,38],[1027,39,994,41],[1027,41,994,43],[1028,6,995,8],[1028,10,995,12,"response"],[1028,18,995,20],[1028,19,995,21,"recaptchaKey"],[1028,31,995,33],[1028,36,995,38,"undefined"],[1028,45,995,47],[1028,47,995,49],[1029,8,996,12],[1029,14,996,18],[1029,18,996,22,"Error"],[1029,23,996,27],[1029,24,996,28],[1029,48,996,52],[1029,49,996,53],[1030,6,997,8],[1031,6,998,8],[1032,6,999,8],[1032,10,999,12],[1032,11,999,13,"siteKey"],[1032,18,999,20],[1032,21,999,23,"response"],[1032,29,999,31],[1032,30,999,32,"recaptchaKey"],[1032,42,999,44],[1032,43,999,45,"split"],[1032,48,999,50],[1032,49,999,51],[1032,52,999,54],[1032,53,999,55],[1032,54,999,56],[1032,55,999,57],[1032,56,999,58],[1033,6,1000,8],[1033,10,1000,12],[1033,11,1000,13,"recaptchaEnforcementState"],[1033,36,1000,38],[1033,39,1000,41,"response"],[1033,47,1000,49],[1033,48,1000,50,"recaptchaEnforcementState"],[1033,73,1000,75],[1034,4,1001,4],[1035,4,1002,4],[1036,0,1003,0],[1037,0,1004,0],[1038,0,1005,0],[1039,0,1006,0],[1040,0,1007,0],[1041,4,1002,4],[1041,11,1002,4,"_createClass"],[1041,23,1002,4],[1041,24,1002,4,"RecaptchaConfig"],[1041,39,1002,4],[1042,6,1002,4,"key"],[1042,9,1002,4],[1043,6,1002,4,"value"],[1043,11,1002,4],[1043,13,1008,4],[1043,22,1008,4,"getProviderEnforcementState"],[1043,49,1008,31,"getProviderEnforcementState"],[1043,50,1008,32,"providerStr"],[1043,61,1008,43],[1043,63,1008,45],[1044,8,1009,8],[1044,12,1009,12],[1044,13,1009,13],[1044,17,1009,17],[1044,18,1009,18,"recaptchaEnforcementState"],[1044,43,1009,43],[1044,47,1010,12],[1044,51,1010,16],[1044,52,1010,17,"recaptchaEnforcementState"],[1044,77,1010,42],[1044,78,1010,43,"length"],[1044,84,1010,49],[1044,89,1010,54],[1044,90,1010,55],[1044,92,1010,57],[1045,10,1011,12],[1045,17,1011,19],[1045,21,1011,23],[1046,8,1012,8],[1047,8,1013,8],[1047,13,1013,13],[1047,17,1013,19,"recaptchaEnforcementState"],[1047,42,1013,44],[1047,46,1013,48],[1047,50,1013,52],[1047,51,1013,53,"recaptchaEnforcementState"],[1047,76,1013,78],[1047,78,1013,80],[1048,10,1014,12],[1048,14,1014,16,"recaptchaEnforcementState"],[1048,39,1014,41],[1048,40,1014,42,"provider"],[1048,48,1014,50],[1048,52,1015,16,"recaptchaEnforcementState"],[1048,77,1015,41],[1048,78,1015,42,"provider"],[1048,86,1015,50],[1048,91,1015,55,"providerStr"],[1048,102,1015,66],[1048,104,1015,68],[1049,12,1016,16],[1049,19,1016,23,"_parseEnforcementState"],[1049,41,1016,45],[1049,42,1016,46,"recaptchaEnforcementState"],[1049,67,1016,71],[1049,68,1016,72,"enforcementState"],[1049,84,1016,88],[1049,85,1016,89],[1050,10,1017,12],[1051,8,1018,8],[1052,8,1019,8],[1052,15,1019,15],[1052,19,1019,19],[1053,6,1020,4],[1054,6,1021,4],[1055,0,1022,0],[1056,0,1023,0],[1057,0,1024,0],[1058,0,1025,0],[1059,0,1026,0],[1060,4,1021,4],[1061,6,1021,4,"key"],[1061,9,1021,4],[1062,6,1021,4,"value"],[1062,11,1021,4],[1062,13,1027,4],[1062,22,1027,4,"isProviderEnabled"],[1062,39,1027,21,"isProviderEnabled"],[1062,40,1027,22,"providerStr"],[1062,51,1027,33],[1062,53,1027,35],[1063,8,1028,8],[1063,15,1028,16],[1063,19,1028,20],[1063,20,1028,21,"getProviderEnforcementState"],[1063,47,1028,48],[1063,48,1028,49,"providerStr"],[1063,59,1028,60],[1063,60,1028,61],[1063,65,1029,12],[1063,74,1029,21],[1063,75,1029,22],[1063,109,1030,12],[1063,113,1030,16],[1063,114,1030,17,"getProviderEnforcementState"],[1063,141,1030,44],[1063,142,1030,45,"providerStr"],[1063,153,1030,56],[1063,154,1030,57],[1063,159,1030,62],[1063,166,1030,69],[1063,167,1030,70],[1064,6,1031,4],[1065,6,1032,4],[1066,0,1033,0],[1067,0,1034,0],[1068,0,1035,0],[1069,0,1036,0],[1070,0,1037,0],[1071,4,1032,4],[1072,6,1032,4,"key"],[1072,9,1032,4],[1073,6,1032,4,"value"],[1073,11,1032,4],[1073,13,1038,4],[1073,22,1038,4,"isAnyProviderEnabled"],[1073,42,1038,24,"isAnyProviderEnabled"],[1073,43,1038,24],[1073,45,1038,27],[1074,8,1039,8],[1074,15,1039,16],[1074,19,1039,20],[1074,20,1039,21,"isProviderEnabled"],[1074,37,1039,38],[1074,38,1039,39],[1074,63,1039,64],[1074,64,1039,65],[1074,115,1039,116],[1074,116,1039,117],[1074,120,1040,12],[1074,124,1040,16],[1074,125,1040,17,"isProviderEnabled"],[1074,142,1040,34],[1074,143,1040,35],[1074,159,1040,51],[1074,160,1040,52],[1074,202,1040,94],[1074,203,1040,95],[1075,6,1041,4],[1076,4,1041,5],[1077,2,1041,5],[1078,2,1044,0],[1079,0,1045,0],[1080,0,1046,0],[1081,0,1047,0],[1082,0,1048,0],[1083,0,1049,0],[1084,0,1050,0],[1085,0,1051,0],[1086,0,1052,0],[1087,0,1053,0],[1088,0,1054,0],[1089,0,1055,0],[1090,0,1056,0],[1091,0,1057,0],[1092,0,1058,0],[1093,0,1059,0],[1094,2,1044,0],[1094,11,1060,15,"getRecaptchaParams"],[1094,29,1060,33,"getRecaptchaParams"],[1094,30,1060,33,"_x14"],[1094,34,1060,33],[1095,4,1060,33],[1095,11,1060,33,"_getRecaptchaParams"],[1095,30,1060,33],[1095,31,1060,33,"apply"],[1095,36,1060,33],[1095,43,1060,33,"arguments"],[1095,52,1060,33],[1096,2,1060,33],[1097,2,1060,33],[1097,11,1060,33,"_getRecaptchaParams"],[1097,31,1060,33],[1098,4,1060,33,"_getRecaptchaParams"],[1098,23,1060,33],[1098,26,1060,33,"_asyncToGenerator"],[1098,43,1060,33],[1098,44,1060,0],[1098,55,1060,34,"auth"],[1098,59,1060,38],[1098,61,1060,40],[1099,6,1061,4],[1099,13,1061,12],[1099,20,1061,19,"_performApiRequest"],[1099,38,1061,37],[1099,39,1061,38,"auth"],[1099,43,1061,42],[1099,45,1061,44],[1099,50,1061,49],[1099,51,1061,50],[1099,73,1061,72],[1099,94,1061,93],[1099,95,1061,94],[1099,129,1061,128],[1099,130,1061,129],[1099,132,1061,131,"recaptchaSiteKey"],[1099,148,1061,147],[1099,152,1061,151],[1099,154,1061,153],[1100,4,1062,0],[1100,5,1062,1],[1101,4,1062,1],[1101,11,1062,1,"_getRecaptchaParams"],[1101,30,1062,1],[1101,31,1062,1,"apply"],[1101,36,1062,1],[1101,43,1062,1,"arguments"],[1101,52,1062,1],[1102,2,1062,1],[1103,2,1062,1],[1103,11,1063,15,"getRecaptchaConfig"],[1103,29,1063,33,"getRecaptchaConfig"],[1103,30,1063,33,"_x15"],[1103,34,1063,33],[1103,36,1063,33,"_x16"],[1103,40,1063,33],[1104,4,1063,33],[1104,11,1063,33,"_getRecaptchaConfig"],[1104,30,1063,33],[1104,31,1063,33,"apply"],[1104,36,1063,33],[1104,43,1063,33,"arguments"],[1104,52,1063,33],[1105,2,1063,33],[1106,2,1067,0],[1107,0,1068,0],[1108,0,1069,0],[1109,0,1070,0],[1110,0,1071,0],[1111,0,1072,0],[1112,0,1073,0],[1113,0,1074,0],[1114,0,1075,0],[1115,0,1076,0],[1116,0,1077,0],[1117,0,1078,0],[1118,0,1079,0],[1119,0,1080,0],[1120,0,1081,0],[1121,0,1082,0],[1122,2,1067,0],[1122,11,1067,0,"_getRecaptchaConfig"],[1122,31,1067,0],[1123,4,1067,0,"_getRecaptchaConfig"],[1123,23,1067,0],[1123,26,1067,0,"_asyncToGenerator"],[1123,43,1067,0],[1123,44,1063,0],[1123,55,1063,34,"auth"],[1123,59,1063,38],[1123,61,1063,40,"request"],[1123,68,1063,47],[1123,70,1063,49],[1124,6,1064,4],[1124,13,1064,11,"_performApiRequest"],[1124,31,1064,29],[1124,32,1064,30,"auth"],[1124,36,1064,34],[1124,38,1064,36],[1124,43,1064,41],[1124,44,1064,42],[1124,66,1064,64],[1124,87,1064,85],[1124,88,1064,86],[1124,125,1064,123,"_addTidIfNecessary"],[1124,143,1064,141],[1124,144,1064,142,"auth"],[1124,148,1064,146],[1124,150,1064,148,"request"],[1124,157,1064,155],[1124,158,1064,156],[1124,159,1064,157],[1125,4,1065,0],[1125,5,1065,1],[1126,4,1065,1],[1126,11,1065,1,"_getRecaptchaConfig"],[1126,30,1065,1],[1126,31,1065,1,"apply"],[1126,36,1065,1],[1126,43,1065,1,"arguments"],[1126,52,1065,1],[1127,2,1065,1],[1128,2,1065,1],[1128,11,1083,15,"deleteAccount"],[1128,24,1083,28,"deleteAccount"],[1128,25,1083,28,"_x17"],[1128,29,1083,28],[1128,31,1083,28,"_x18"],[1128,35,1083,28],[1129,4,1083,28],[1129,11,1083,28,"_deleteAccount"],[1129,25,1083,28],[1129,26,1083,28,"apply"],[1129,31,1083,28],[1129,38,1083,28,"arguments"],[1129,47,1083,28],[1130,2,1083,28],[1131,2,1083,28],[1131,11,1083,28,"_deleteAccount"],[1131,26,1083,28],[1132,4,1083,28,"_deleteAccount"],[1132,18,1083,28],[1132,21,1083,28,"_asyncToGenerator"],[1132,38,1083,28],[1132,39,1083,0],[1132,50,1083,29,"auth"],[1132,54,1083,33],[1132,56,1083,35,"request"],[1132,63,1083,42],[1132,65,1083,44],[1133,6,1084,4],[1133,13,1084,11,"_performApiRequest"],[1133,31,1084,29],[1133,32,1084,30,"auth"],[1133,36,1084,34],[1133,38,1084,36],[1133,44,1084,42],[1133,45,1084,43],[1133,68,1084,66],[1133,89,1084,87],[1133,90,1084,88],[1133,121,1084,119,"request"],[1133,128,1084,126],[1133,129,1084,127],[1134,4,1085,0],[1134,5,1085,1],[1135,4,1085,1],[1135,11,1085,1,"_deleteAccount"],[1135,25,1085,1],[1135,26,1085,1,"apply"],[1135,31,1085,1],[1135,38,1085,1,"arguments"],[1135,47,1085,1],[1136,2,1085,1],[1137,2,1085,1],[1137,11,1086,15,"deleteLinkedAccounts"],[1137,31,1086,35,"deleteLinkedAccounts"],[1137,32,1086,35,"_x19"],[1137,36,1086,35],[1137,38,1086,35,"_x20"],[1137,42,1086,35],[1138,4,1086,35],[1138,11,1086,35,"_deleteLinkedAccounts"],[1138,32,1086,35],[1138,33,1086,35,"apply"],[1138,38,1086,35],[1138,45,1086,35,"arguments"],[1138,54,1086,35],[1139,2,1086,35],[1140,2,1086,35],[1140,11,1086,35,"_deleteLinkedAccounts"],[1140,33,1086,35],[1141,4,1086,35,"_deleteLinkedAccounts"],[1141,25,1086,35],[1141,28,1086,35,"_asyncToGenerator"],[1141,45,1086,35],[1141,46,1086,0],[1141,57,1086,36,"auth"],[1141,61,1086,40],[1141,63,1086,42,"request"],[1141,70,1086,49],[1141,72,1086,51],[1142,6,1087,4],[1142,13,1087,11,"_performApiRequest"],[1142,31,1087,29],[1142,32,1087,30,"auth"],[1142,36,1087,34],[1142,38,1087,36],[1142,44,1087,42],[1142,45,1087,43],[1142,68,1087,66],[1142,89,1087,87],[1142,90,1087,88],[1142,123,1087,121,"request"],[1142,130,1087,128],[1142,131,1087,129],[1143,4,1088,0],[1143,5,1088,1],[1144,4,1088,1],[1144,11,1088,1,"_deleteLinkedAccounts"],[1144,32,1088,1],[1144,33,1088,1,"apply"],[1144,38,1088,1],[1144,45,1088,1,"arguments"],[1144,54,1088,1],[1145,2,1088,1],[1146,2,1088,1],[1146,11,1089,15,"getAccountInfo"],[1146,25,1089,29,"getAccountInfo"],[1146,26,1089,29,"_x21"],[1146,30,1089,29],[1146,32,1089,29,"_x22"],[1146,36,1089,29],[1147,4,1089,29],[1147,11,1089,29,"_getAccountInfo"],[1147,26,1089,29],[1147,27,1089,29,"apply"],[1147,32,1089,29],[1147,39,1089,29,"arguments"],[1147,48,1089,29],[1148,2,1089,29],[1149,2,1093,0],[1150,0,1094,0],[1151,0,1095,0],[1152,0,1096,0],[1153,0,1097,0],[1154,0,1098,0],[1155,0,1099,0],[1156,0,1100,0],[1157,0,1101,0],[1158,0,1102,0],[1159,0,1103,0],[1160,0,1104,0],[1161,0,1105,0],[1162,0,1106,0],[1163,0,1107,0],[1164,0,1108,0],[1165,2,1093,0],[1165,11,1093,0,"_getAccountInfo"],[1165,27,1093,0],[1166,4,1093,0,"_getAccountInfo"],[1166,19,1093,0],[1166,22,1093,0,"_asyncToGenerator"],[1166,39,1093,0],[1166,40,1089,0],[1166,51,1089,30,"auth"],[1166,55,1089,34],[1166,57,1089,36,"request"],[1166,64,1089,43],[1166,66,1089,45],[1167,6,1090,4],[1167,13,1090,11,"_performApiRequest"],[1167,31,1090,29],[1167,32,1090,30,"auth"],[1167,36,1090,34],[1167,38,1090,36],[1167,44,1090,42],[1167,45,1090,43],[1167,68,1090,66],[1167,89,1090,87],[1167,90,1090,88],[1167,123,1090,121,"request"],[1167,130,1090,128],[1167,131,1090,129],[1168,4,1091,0],[1168,5,1091,1],[1169,4,1091,1],[1169,11,1091,1,"_getAccountInfo"],[1169,26,1091,1],[1169,27,1091,1,"apply"],[1169,32,1091,1],[1169,39,1091,1,"arguments"],[1169,48,1091,1],[1170,2,1091,1],[1171,2,1109,0],[1171,11,1109,9,"utcTimestampToDateString"],[1171,35,1109,33,"utcTimestampToDateString"],[1171,36,1109,34,"utcTimestamp"],[1171,48,1109,46],[1171,50,1109,48],[1172,4,1110,4],[1172,8,1110,8],[1172,9,1110,9,"utcTimestamp"],[1172,21,1110,21],[1172,23,1110,23],[1173,6,1111,8],[1173,13,1111,15,"undefined"],[1173,22,1111,24],[1174,4,1112,4],[1175,4,1113,4],[1175,8,1113,8],[1176,6,1114,8],[1177,6,1115,8],[1177,10,1115,14,"date"],[1177,14,1115,18],[1177,17,1115,21],[1177,21,1115,25,"Date"],[1177,25,1115,29],[1177,26,1115,30,"Number"],[1177,32,1115,36],[1177,33,1115,37,"utcTimestamp"],[1177,45,1115,49],[1177,46,1115,50],[1177,47,1115,51],[1178,6,1116,8],[1179,6,1117,8],[1179,10,1117,12],[1179,11,1117,13,"isNaN"],[1179,16,1117,18],[1179,17,1117,19,"date"],[1179,21,1117,23],[1179,22,1117,24,"getTime"],[1179,29,1117,31],[1179,30,1117,32],[1179,31,1117,33],[1179,32,1117,34],[1179,34,1117,36],[1180,8,1118,12],[1181,8,1119,12],[1181,15,1119,19,"date"],[1181,19,1119,23],[1181,20,1119,24,"toUTCString"],[1181,31,1119,35],[1181,32,1119,36],[1181,33,1119,37],[1182,6,1120,8],[1183,4,1121,4],[1183,5,1121,5],[1183,6,1122,4],[1183,13,1122,11,"e"],[1183,14,1122,12],[1183,16,1122,14],[1184,6,1123,8],[1185,4,1123,8],[1186,4,1125,4],[1186,11,1125,11,"undefined"],[1186,20,1125,20],[1187,2,1126,0],[1189,2,1128,0],[1190,0,1129,0],[1191,0,1130,0],[1192,0,1131,0],[1193,0,1132,0],[1194,0,1133,0],[1195,0,1134,0],[1196,0,1135,0],[1197,0,1136,0],[1198,0,1137,0],[1199,0,1138,0],[1200,0,1139,0],[1201,0,1140,0],[1202,0,1141,0],[1203,0,1142,0],[1204,0,1143,0],[1205,2,1144,0],[1206,0,1145,0],[1207,0,1146,0],[1208,0,1147,0],[1209,0,1148,0],[1210,0,1149,0],[1211,0,1150,0],[1212,0,1151,0],[1213,0,1152,0],[1214,0,1153,0],[1215,0,1154,0],[1216,0,1155,0],[1217,2,1156,0],[1217,11,1156,9,"getIdToken"],[1217,21,1156,19,"getIdToken"],[1217,22,1156,20,"user"],[1217,26,1156,24],[1217,28,1156,48],[1218,4,1156,48],[1218,8,1156,26,"forceRefresh"],[1218,20,1156,38],[1218,23,1156,38,"arguments"],[1218,32,1156,38],[1218,33,1156,38,"length"],[1218,39,1156,38],[1218,47,1156,38,"arguments"],[1218,56,1156,38],[1218,64,1156,38,"undefined"],[1218,73,1156,38],[1218,76,1156,38,"arguments"],[1218,85,1156,38],[1218,91,1156,41],[1218,96,1156,46],[1219,4,1157,4],[1219,11,1157,11,"util"],[1219,15,1157,15],[1219,16,1157,16,"getModularInstance"],[1219,34,1157,34],[1219,35,1157,35,"user"],[1219,39,1157,39],[1219,40,1157,40],[1219,41,1157,41,"getIdToken"],[1219,51,1157,51],[1219,52,1157,52,"forceRefresh"],[1219,64,1157,64],[1219,65,1157,65],[1220,2,1158,0],[1221,2,1159,0],[1222,0,1160,0],[1223,0,1161,0],[1224,0,1162,0],[1225,0,1163,0],[1226,0,1164,0],[1227,0,1165,0],[1228,0,1166,0],[1229,0,1167,0],[1230,0,1168,0],[1231,0,1169,0],[1232,0,1170,0],[1233,2,1159,0],[1233,11,1171,15,"getIdTokenResult"],[1233,29,1171,31,"getIdTokenResult"],[1233,30,1171,31,"_x23"],[1233,34,1171,31],[1234,4,1171,31],[1234,11,1171,31,"_getIdTokenResult"],[1234,28,1171,31],[1234,29,1171,31,"apply"],[1234,34,1171,31],[1234,41,1171,31,"arguments"],[1234,50,1171,31],[1235,2,1171,31],[1236,2,1171,31],[1236,11,1171,31,"_getIdTokenResult"],[1236,29,1171,31],[1237,4,1171,31,"_getIdTokenResult"],[1237,21,1171,31],[1237,24,1171,31,"_asyncToGenerator"],[1237,41,1171,31],[1237,42,1171,0],[1237,53,1171,32,"user"],[1237,57,1171,36],[1237,59,1171,60],[1238,6,1171,60],[1238,10,1171,38,"forceRefresh"],[1238,22,1171,50],[1238,25,1171,50,"arguments"],[1238,34,1171,50],[1238,35,1171,50,"length"],[1238,41,1171,50],[1238,49,1171,50,"arguments"],[1238,58,1171,50],[1238,66,1171,50,"undefined"],[1238,75,1171,50],[1238,78,1171,50,"arguments"],[1238,87,1171,50],[1238,93,1171,53],[1238,98,1171,58],[1239,6,1172,4],[1239,10,1172,10,"userInternal"],[1239,22,1172,22],[1239,25,1172,25,"util"],[1239,29,1172,29],[1239,30,1172,30,"getModularInstance"],[1239,48,1172,48],[1239,49,1172,49,"user"],[1239,53,1172,53],[1239,54,1172,54],[1240,6,1173,4],[1240,10,1173,10,"token"],[1240,15,1173,15],[1240,24,1173,24,"userInternal"],[1240,36,1173,36],[1240,37,1173,37,"getIdToken"],[1240,47,1173,47],[1240,48,1173,48,"forceRefresh"],[1240,60,1173,60],[1240,61,1173,61],[1241,6,1174,4],[1241,10,1174,10,"claims"],[1241,16,1174,16],[1241,19,1174,19,"_parseToken"],[1241,30,1174,30],[1241,31,1174,31,"token"],[1241,36,1174,36],[1241,37,1174,37],[1242,6,1175,4,"_assert"],[1242,13,1175,11],[1242,14,1175,12,"claims"],[1242,20,1175,18],[1242,24,1175,22,"claims"],[1242,30,1175,28],[1242,31,1175,29,"exp"],[1242,34,1175,32],[1242,38,1175,36,"claims"],[1242,44,1175,42],[1242,45,1175,43,"auth_time"],[1242,54,1175,52],[1242,58,1175,56,"claims"],[1242,64,1175,62],[1242,65,1175,63,"iat"],[1242,68,1175,66],[1242,70,1175,68,"userInternal"],[1242,82,1175,80],[1242,83,1175,81,"auth"],[1242,87,1175,85],[1242,89,1175,87],[1242,105,1175,103],[1242,106,1175,104],[1242,140,1175,138],[1242,141,1175,139],[1243,6,1176,4],[1243,10,1176,10,"firebase"],[1243,18,1176,18],[1243,21,1176,21],[1243,28,1176,28,"claims"],[1243,34,1176,34],[1243,35,1176,35,"firebase"],[1243,43,1176,43],[1243,48,1176,48],[1243,56,1176,56],[1243,59,1176,59,"claims"],[1243,65,1176,65],[1243,66,1176,66,"firebase"],[1243,74,1176,74],[1243,77,1176,77,"undefined"],[1243,86,1176,86],[1244,6,1177,4],[1244,10,1177,10,"signInProvider"],[1244,24,1177,24],[1244,27,1177,27,"firebase"],[1244,35,1177,35],[1244,38,1177,38],[1244,56,1177,56],[1244,57,1177,57],[1245,6,1178,4],[1245,13,1178,11],[1246,8,1179,8,"claims"],[1246,14,1179,14],[1247,8,1180,8,"token"],[1247,13,1180,13],[1248,8,1181,8,"authTime"],[1248,16,1181,16],[1248,18,1181,18,"utcTimestampToDateString"],[1248,42,1181,42],[1248,43,1181,43,"secondsStringToMilliseconds"],[1248,70,1181,70],[1248,71,1181,71,"claims"],[1248,77,1181,77],[1248,78,1181,78,"auth_time"],[1248,87,1181,87],[1248,88,1181,88],[1248,89,1181,89],[1249,8,1182,8,"issuedAtTime"],[1249,20,1182,20],[1249,22,1182,22,"utcTimestampToDateString"],[1249,46,1182,46],[1249,47,1182,47,"secondsStringToMilliseconds"],[1249,74,1182,74],[1249,75,1182,75,"claims"],[1249,81,1182,81],[1249,82,1182,82,"iat"],[1249,85,1182,85],[1249,86,1182,86],[1249,87,1182,87],[1250,8,1183,8,"expirationTime"],[1250,22,1183,22],[1250,24,1183,24,"utcTimestampToDateString"],[1250,48,1183,48],[1250,49,1183,49,"secondsStringToMilliseconds"],[1250,76,1183,76],[1250,77,1183,77,"claims"],[1250,83,1183,83],[1250,84,1183,84,"exp"],[1250,87,1183,87],[1250,88,1183,88],[1250,89,1183,89],[1251,8,1184,8,"signInProvider"],[1251,22,1184,22],[1251,24,1184,24,"signInProvider"],[1251,38,1184,38],[1251,42,1184,42],[1251,46,1184,46],[1252,8,1185,8,"signInSecondFactor"],[1252,26,1185,26],[1252,28,1185,28,"firebase"],[1252,36,1185,36],[1252,39,1185,39],[1252,62,1185,62],[1252,63,1185,63],[1252,67,1185,67],[1253,6,1186,4],[1253,7,1186,5],[1254,4,1187,0],[1254,5,1187,1],[1255,4,1187,1],[1255,11,1187,1,"_getIdTokenResult"],[1255,28,1187,1],[1255,29,1187,1,"apply"],[1255,34,1187,1],[1255,41,1187,1,"arguments"],[1255,50,1187,1],[1256,2,1187,1],[1257,2,1188,0],[1257,11,1188,9,"secondsStringToMilliseconds"],[1257,38,1188,36,"secondsStringToMilliseconds"],[1257,39,1188,37,"seconds"],[1257,46,1188,44],[1257,48,1188,46],[1258,4,1189,4],[1258,11,1189,11,"Number"],[1258,17,1189,17],[1258,18,1189,18,"seconds"],[1258,25,1189,25],[1258,26,1189,26],[1258,29,1189,29],[1258,33,1189,33],[1259,2,1190,0],[1260,2,1191,0],[1260,11,1191,9,"_parseToken"],[1260,22,1191,20,"_parseToken"],[1260,23,1191,21,"token"],[1260,28,1191,26],[1260,30,1191,28],[1261,4,1192,4],[1261,8,1192,4,"_token$split"],[1261,20,1192,4],[1261,23,1192,44,"token"],[1261,28,1192,49],[1261,29,1192,50,"split"],[1261,34,1192,55],[1261,35,1192,56],[1261,38,1192,59],[1261,39,1192,60],[1262,6,1192,60,"_token$split2"],[1262,19,1192,60],[1262,22,1192,60,"_slicedToArray"],[1262,36,1192,60],[1262,37,1192,60,"_token$split"],[1262,49,1192,60],[1263,6,1192,11,"algorithm"],[1263,15,1192,20],[1263,18,1192,20,"_token$split2"],[1263,31,1192,20],[1264,6,1192,22,"payload"],[1264,13,1192,29],[1264,16,1192,29,"_token$split2"],[1264,29,1192,29],[1265,6,1192,31,"signature"],[1265,15,1192,40],[1265,18,1192,40,"_token$split2"],[1265,31,1192,40],[1266,4,1193,4],[1266,8,1193,8,"algorithm"],[1266,17,1193,17],[1266,22,1193,22,"undefined"],[1266,31,1193,31],[1266,35,1194,8,"payload"],[1266,42,1194,15],[1266,47,1194,20,"undefined"],[1266,56,1194,29],[1266,60,1195,8,"signature"],[1266,69,1195,17],[1266,74,1195,22,"undefined"],[1266,83,1195,31],[1266,85,1195,33],[1267,6,1196,8,"_logError"],[1267,15,1196,17],[1267,16,1196,18],[1267,64,1196,66],[1267,65,1196,67],[1268,6,1197,8],[1268,13,1197,15],[1268,17,1197,19],[1269,4,1198,4],[1270,4,1199,4],[1270,8,1199,8],[1271,6,1200,8],[1271,10,1200,14,"decoded"],[1271,17,1200,21],[1271,20,1200,24,"util"],[1271,24,1200,28],[1271,25,1200,29,"base64Decode"],[1271,37,1200,41],[1271,38,1200,42,"payload"],[1271,45,1200,49],[1271,46,1200,50],[1272,6,1201,8],[1272,10,1201,12],[1272,11,1201,13,"decoded"],[1272,18,1201,20],[1272,20,1201,22],[1273,8,1202,12,"_logError"],[1273,17,1202,21],[1273,18,1202,22],[1273,55,1202,59],[1273,56,1202,60],[1274,8,1203,12],[1274,15,1203,19],[1274,19,1203,23],[1275,6,1204,8],[1276,6,1205,8],[1276,13,1205,15,"JSON"],[1276,17,1205,19],[1276,18,1205,20,"parse"],[1276,23,1205,25],[1276,24,1205,26,"decoded"],[1276,31,1205,33],[1276,32,1205,34],[1277,4,1206,4],[1277,5,1206,5],[1277,6,1207,4],[1277,13,1207,11,"e"],[1277,14,1207,12],[1277,16,1207,14],[1278,6,1208,8,"_logError"],[1278,15,1208,17],[1278,16,1208,18],[1278,58,1208,60],[1278,60,1208,62,"e"],[1278,61,1208,63],[1278,63,1208,65,"toString"],[1278,71,1208,73],[1278,72,1208,74],[1278,73,1208,75],[1278,74,1208,76],[1279,6,1209,8],[1279,13,1209,15],[1279,17,1209,19],[1280,4,1210,4],[1281,2,1211,0],[1282,2,1212,0],[1283,0,1213,0],[1284,0,1214,0],[1285,2,1215,0],[1285,11,1215,9,"_tokenExpiresIn"],[1285,26,1215,24,"_tokenExpiresIn"],[1285,27,1215,25,"token"],[1285,32,1215,30],[1285,34,1215,32],[1286,4,1216,4],[1286,8,1216,10,"parsedToken"],[1286,19,1216,21],[1286,22,1216,24,"_parseToken"],[1286,33,1216,35],[1286,34,1216,36,"token"],[1286,39,1216,41],[1286,40,1216,42],[1287,4,1217,4,"_assert"],[1287,11,1217,11],[1287,12,1217,12,"parsedToken"],[1287,23,1217,23],[1287,25,1217,25],[1287,41,1217,41],[1287,42,1217,42],[1287,76,1217,76],[1287,77,1217,77],[1288,4,1218,4,"_assert"],[1288,11,1218,11],[1288,12,1218,12],[1288,19,1218,19,"parsedToken"],[1288,30,1218,30],[1288,31,1218,31,"exp"],[1288,34,1218,34],[1288,39,1218,39],[1288,50,1218,50],[1288,52,1218,52],[1288,68,1218,68],[1288,69,1218,69],[1288,103,1218,103],[1288,104,1218,104],[1289,4,1219,4,"_assert"],[1289,11,1219,11],[1289,12,1219,12],[1289,19,1219,19,"parsedToken"],[1289,30,1219,30],[1289,31,1219,31,"iat"],[1289,34,1219,34],[1289,39,1219,39],[1289,50,1219,50],[1289,52,1219,52],[1289,68,1219,68],[1289,69,1219,69],[1289,103,1219,103],[1289,104,1219,104],[1290,4,1220,4],[1290,11,1220,11,"Number"],[1290,17,1220,17],[1290,18,1220,18,"parsedToken"],[1290,29,1220,29],[1290,30,1220,30,"exp"],[1290,33,1220,33],[1290,34,1220,34],[1290,37,1220,37,"Number"],[1290,43,1220,43],[1290,44,1220,44,"parsedToken"],[1290,55,1220,55],[1290,56,1220,56,"iat"],[1290,59,1220,59],[1290,60,1220,60],[1291,2,1221,0],[1293,2,1223,0],[1294,0,1224,0],[1295,0,1225,0],[1296,0,1226,0],[1297,0,1227,0],[1298,0,1228,0],[1299,0,1229,0],[1300,0,1230,0],[1301,0,1231,0],[1302,0,1232,0],[1303,0,1233,0],[1304,0,1234,0],[1305,0,1235,0],[1306,0,1236,0],[1307,0,1237,0],[1308,0,1238,0],[1309,2,1223,0],[1309,11,1239,15,"_logoutIfInvalidated"],[1309,31,1239,35,"_logoutIfInvalidated"],[1309,32,1239,35,"_x24"],[1309,36,1239,35],[1309,38,1239,35,"_x25"],[1309,42,1239,35],[1310,4,1239,35],[1310,11,1239,35,"_logoutIfInvalidated2"],[1310,32,1239,35],[1310,33,1239,35,"apply"],[1310,38,1239,35],[1310,45,1239,35,"arguments"],[1310,54,1239,35],[1311,2,1239,35],[1312,2,1239,35],[1312,11,1239,35,"_logoutIfInvalidated2"],[1312,33,1239,35],[1313,4,1239,35,"_logoutIfInvalidated2"],[1313,25,1239,35],[1313,28,1239,35,"_asyncToGenerator"],[1313,45,1239,35],[1313,46,1239,0],[1313,57,1239,36,"user"],[1313,61,1239,40],[1313,63,1239,42,"promise"],[1313,70,1239,49],[1313,72,1239,76],[1314,6,1239,76],[1314,10,1239,51,"bypassAuthState"],[1314,25,1239,66],[1314,28,1239,66,"arguments"],[1314,37,1239,66],[1314,38,1239,66,"length"],[1314,44,1239,66],[1314,52,1239,66,"arguments"],[1314,61,1239,66],[1314,69,1239,66,"undefined"],[1314,78,1239,66],[1314,81,1239,66,"arguments"],[1314,90,1239,66],[1314,96,1239,69],[1314,101,1239,74],[1315,6,1240,4],[1315,10,1240,8,"bypassAuthState"],[1315,25,1240,23],[1315,27,1240,25],[1316,8,1241,8],[1316,15,1241,15,"promise"],[1316,22,1241,22],[1317,6,1242,4],[1318,6,1243,4],[1318,10,1243,8],[1319,8,1244,8],[1319,21,1244,21,"promise"],[1319,28,1244,28],[1320,6,1245,4],[1320,7,1245,5],[1320,8,1246,4],[1320,15,1246,11,"e"],[1320,16,1246,12],[1320,18,1246,14],[1321,8,1247,8],[1321,12,1247,12,"e"],[1321,13,1247,13],[1321,25,1247,25,"util"],[1321,29,1247,29],[1321,30,1247,30,"FirebaseError"],[1321,43,1247,43],[1321,47,1247,47,"isUserInvalidated"],[1321,64,1247,64],[1321,65,1247,65,"e"],[1321,66,1247,66],[1321,67,1247,67],[1321,69,1247,69],[1322,10,1248,12],[1322,14,1248,16,"user"],[1322,18,1248,20],[1322,19,1248,21,"auth"],[1322,23,1248,25],[1322,24,1248,26,"currentUser"],[1322,35,1248,37],[1322,40,1248,42,"user"],[1322,44,1248,46],[1322,46,1248,48],[1323,12,1249,16],[1323,18,1249,22,"user"],[1323,22,1249,26],[1323,23,1249,27,"auth"],[1323,27,1249,31],[1323,28,1249,32,"signOut"],[1323,35,1249,39],[1323,36,1249,40],[1323,37,1249,41],[1324,10,1250,12],[1325,8,1251,8],[1326,8,1252,8],[1326,14,1252,14,"e"],[1326,15,1252,15],[1327,6,1253,4],[1328,4,1254,0],[1328,5,1254,1],[1329,4,1254,1],[1329,11,1254,1,"_logoutIfInvalidated2"],[1329,32,1254,1],[1329,33,1254,1,"apply"],[1329,38,1254,1],[1329,45,1254,1,"arguments"],[1329,54,1254,1],[1330,2,1254,1],[1331,2,1255,0],[1331,11,1255,9,"isUserInvalidated"],[1331,28,1255,26,"isUserInvalidated"],[1331,29,1255,26,"_ref"],[1331,33,1255,26],[1331,35,1255,37],[1332,4,1255,37],[1332,8,1255,29,"code"],[1332,12,1255,33],[1332,15,1255,33,"_ref"],[1332,19,1255,33],[1332,20,1255,29,"code"],[1332,24,1255,33],[1333,4,1256,4],[1333,11,1256,12,"code"],[1333,15,1256,16],[1333,20,1256,21],[1333,28,1256,29],[1333,43,1256,44],[1333,44,1256,45],[1333,79,1256,80],[1333,83,1257,8,"code"],[1333,87,1257,12],[1333,92,1257,17],[1333,100,1257,25],[1333,120,1257,45],[1333,121,1257,46],[1333,156,1257,81],[1334,2,1258,0],[1336,2,1260,0],[1337,0,1261,0],[1338,0,1262,0],[1339,0,1263,0],[1340,0,1264,0],[1341,0,1265,0],[1342,0,1266,0],[1343,0,1267,0],[1344,0,1268,0],[1345,0,1269,0],[1346,0,1270,0],[1347,0,1271,0],[1348,0,1272,0],[1349,0,1273,0],[1350,0,1274,0],[1351,0,1275,0],[1352,2,1260,0],[1352,6,1276,6,"ProactiveRefresh"],[1352,22,1276,22],[1353,4,1277,4],[1353,13,1277,4,"ProactiveRefresh"],[1353,30,1277,16,"user"],[1353,34,1277,20],[1353,36,1277,22],[1354,6,1277,22,"_classCallCheck"],[1354,21,1277,22],[1354,28,1277,22,"ProactiveRefresh"],[1354,44,1277,22],[1355,6,1278,8],[1355,10,1278,12],[1355,11,1278,13,"user"],[1355,15,1278,17],[1355,18,1278,20,"user"],[1355,22,1278,24],[1356,6,1279,8],[1356,10,1279,12],[1356,11,1279,13,"isRunning"],[1356,20,1279,22],[1356,23,1279,25],[1356,28,1279,30],[1357,6,1280,8],[1358,6,1281,8],[1359,6,1282,8],[1360,6,1283,8],[1361,6,1284,8],[1361,10,1284,12],[1361,11,1284,13,"timerId"],[1361,18,1284,20],[1361,21,1284,23],[1361,25,1284,27],[1362,6,1285,8],[1362,10,1285,12],[1362,11,1285,13,"errorBackoff"],[1362,23,1285,25],[1362,26,1285,28],[1362,31,1285,33],[1362,32,1285,34],[1363,4,1286,4],[1364,4,1286,5],[1364,11,1286,5,"_createClass"],[1364,23,1286,5],[1364,24,1286,5,"ProactiveRefresh"],[1364,40,1286,5],[1365,6,1286,5,"key"],[1365,9,1286,5],[1366,6,1286,5,"value"],[1366,11,1286,5],[1366,13,1287,4],[1366,22,1287,4,"_start"],[1366,28,1287,10,"_start"],[1366,29,1287,10],[1366,31,1287,13],[1367,8,1288,8],[1367,12,1288,12],[1367,16,1288,16],[1367,17,1288,17,"isRunning"],[1367,26,1288,26],[1367,28,1288,28],[1368,10,1289,12],[1369,8,1290,8],[1370,8,1291,8],[1370,12,1291,12],[1370,13,1291,13,"isRunning"],[1370,22,1291,22],[1370,25,1291,25],[1370,29,1291,29],[1371,8,1292,8],[1371,12,1292,12],[1371,13,1292,13,"schedule"],[1371,21,1292,21],[1371,22,1292,22],[1371,23,1292,23],[1372,6,1293,4],[1373,4,1293,5],[1374,6,1293,5,"key"],[1374,9,1293,5],[1375,6,1293,5,"value"],[1375,11,1293,5],[1375,13,1294,4],[1375,22,1294,4,"_stop"],[1375,27,1294,9,"_stop"],[1375,28,1294,9],[1375,30,1294,12],[1376,8,1295,8],[1376,12,1295,12],[1376,13,1295,13],[1376,17,1295,17],[1376,18,1295,18,"isRunning"],[1376,27,1295,27],[1376,29,1295,29],[1377,10,1296,12],[1378,8,1297,8],[1379,8,1298,8],[1379,12,1298,12],[1379,13,1298,13,"isRunning"],[1379,22,1298,22],[1379,25,1298,25],[1379,30,1298,30],[1380,8,1299,8],[1380,12,1299,12],[1380,16,1299,16],[1380,17,1299,17,"timerId"],[1380,24,1299,24],[1380,29,1299,29],[1380,33,1299,33],[1380,35,1299,35],[1381,10,1300,12,"clearTimeout"],[1381,22,1300,24],[1381,23,1300,25],[1381,27,1300,29],[1381,28,1300,30,"timerId"],[1381,35,1300,37],[1381,36,1300,38],[1382,8,1301,8],[1383,6,1302,4],[1384,4,1302,5],[1385,6,1302,5,"key"],[1385,9,1302,5],[1386,6,1302,5,"value"],[1386,11,1302,5],[1386,13,1303,4],[1386,22,1303,4,"getInterval"],[1386,33,1303,15,"getInterval"],[1386,34,1303,16,"wasError"],[1386,42,1303,24],[1386,44,1303,26],[1387,8,1304,8],[1387,12,1304,12,"wasError"],[1387,20,1304,20],[1387,22,1304,22],[1388,10,1305,12],[1388,14,1305,18,"interval"],[1388,22,1305,26],[1388,25,1305,29],[1388,29,1305,33],[1388,30,1305,34,"errorBackoff"],[1388,42,1305,46],[1389,10,1306,12],[1389,14,1306,16],[1389,15,1306,17,"errorBackoff"],[1389,27,1306,29],[1389,30,1306,32,"Math"],[1389,34,1306,36],[1389,35,1306,37,"min"],[1389,38,1306,40],[1389,39,1306,41],[1389,43,1306,45],[1389,44,1306,46,"errorBackoff"],[1389,56,1306,58],[1389,59,1306,61],[1389,60,1306,62],[1389,62,1306,64],[1389,68,1306,70],[1389,69,1306,71],[1389,101,1306,103],[1389,102,1306,104],[1390,10,1307,12],[1390,17,1307,19,"interval"],[1390,25,1307,27],[1391,8,1308,8],[1391,9,1308,9],[1391,15,1309,13],[1392,10,1310,12],[1393,10,1311,12],[1393,14,1311,16],[1393,15,1311,17,"errorBackoff"],[1393,27,1311,29],[1393,30,1311,32],[1393,35,1311,37],[1393,36,1311,38],[1394,10,1312,12],[1394,14,1312,18,"expTime"],[1394,21,1312,25],[1394,24,1312,28],[1394,28,1312,32],[1394,29,1312,33,"user"],[1394,33,1312,37],[1394,34,1312,38,"stsTokenManager"],[1394,49,1312,53],[1394,50,1312,54,"expirationTime"],[1394,64,1312,68],[1394,68,1312,72],[1394,69,1312,73],[1395,10,1313,12],[1395,14,1313,18,"interval"],[1395,23,1313,26],[1395,26,1313,29,"expTime"],[1395,33,1313,36],[1395,36,1313,39,"Date"],[1395,40,1313,43],[1395,41,1313,44,"now"],[1395,44,1313,47],[1395,45,1313,48],[1395,46,1313,49],[1395,49,1313,52],[1395,55,1313,58],[1395,56,1313,59],[1396,10,1314,12],[1396,17,1314,19,"Math"],[1396,21,1314,23],[1396,22,1314,24,"max"],[1396,25,1314,27],[1396,26,1314,28],[1396,27,1314,29],[1396,29,1314,31,"interval"],[1396,38,1314,39],[1396,39,1314,40],[1397,8,1315,8],[1398,6,1316,4],[1399,4,1316,5],[1400,6,1316,5,"key"],[1400,9,1316,5],[1401,6,1316,5,"value"],[1401,11,1316,5],[1401,13,1317,4],[1401,22,1317,4,"schedule"],[1401,30,1317,12,"schedule"],[1401,31,1317,12],[1401,33,1317,31],[1402,8,1317,31],[1402,12,1317,31,"_this"],[1402,17,1317,31],[1403,8,1317,31],[1403,12,1317,13,"wasError"],[1403,20,1317,21],[1403,23,1317,21,"arguments"],[1403,32,1317,21],[1403,33,1317,21,"length"],[1403,39,1317,21],[1403,47,1317,21,"arguments"],[1403,56,1317,21],[1403,64,1317,21,"undefined"],[1403,73,1317,21],[1403,76,1317,21,"arguments"],[1403,85,1317,21],[1403,91,1317,24],[1403,96,1317,29],[1404,8,1318,8],[1404,12,1318,12],[1404,13,1318,13],[1404,17,1318,17],[1404,18,1318,18,"isRunning"],[1404,27,1318,27],[1404,29,1318,29],[1405,10,1319,12],[1406,10,1320,12],[1407,8,1321,8],[1408,8,1322,8],[1408,12,1322,14,"interval"],[1408,20,1322,22],[1408,23,1322,25],[1408,27,1322,29],[1408,28,1322,30,"getInterval"],[1408,39,1322,41],[1408,40,1322,42,"wasError"],[1408,48,1322,50],[1408,49,1322,51],[1409,8,1323,8],[1409,12,1323,12],[1409,13,1323,13,"timerId"],[1409,20,1323,20],[1409,23,1323,23,"setTimeout"],[1409,33,1323,33],[1409,47,1323,33,"_asyncToGenerator"],[1409,64,1323,33],[1409,65,1323,34],[1409,78,1323,46],[1410,10,1324,12],[1410,16,1324,18,"_this"],[1410,21,1324,22],[1410,22,1324,23,"iteration"],[1410,31,1324,32],[1410,32,1324,33],[1410,33,1324,34],[1411,8,1325,8],[1411,9,1325,9],[1411,12,1325,11,"interval"],[1411,20,1325,19],[1411,21,1325,20],[1412,6,1326,4],[1413,4,1326,5],[1414,6,1326,5,"key"],[1414,9,1326,5],[1415,6,1326,5,"value"],[1415,11,1326,5],[1416,8,1326,5],[1416,12,1326,5,"_iteration"],[1416,22,1326,5],[1416,25,1326,5,"_asyncToGenerator"],[1416,42,1326,5],[1416,43,1327,4],[1416,56,1327,22],[1417,10,1328,8],[1417,14,1328,12],[1418,12,1329,12],[1418,18,1329,18],[1418,22,1329,22],[1418,23,1329,23,"user"],[1418,27,1329,27],[1418,28,1329,28,"getIdToken"],[1418,38,1329,38],[1418,39,1329,39],[1418,43,1329,43],[1418,44,1329,44],[1419,10,1330,8],[1419,11,1330,9],[1419,12,1331,8],[1419,19,1331,15,"e"],[1419,20,1331,16],[1419,22,1331,18],[1420,12,1332,12],[1421,12,1333,12],[1421,16,1333,16,"e"],[1421,17,1333,17],[1421,19,1333,19,"code"],[1421,23,1333,23],[1421,28,1334,16],[1421,36,1334,24],[1421,60,1334,48],[1421,61,1334,49],[1421,105,1334,93],[1421,107,1334,95],[1422,14,1335,16],[1422,18,1335,20],[1422,19,1335,21,"schedule"],[1422,27,1335,29],[1422,28,1335,30],[1422,42,1335,45],[1422,46,1335,49],[1422,47,1335,50],[1423,12,1336,12],[1424,12,1337,12],[1425,10,1338,8],[1426,10,1339,8],[1426,14,1339,12],[1426,15,1339,13,"schedule"],[1426,23,1339,21],[1426,24,1339,22],[1426,25,1339,23],[1427,8,1340,4],[1427,9,1340,5],[1428,8,1340,5],[1428,17,1327,10,"iteration"],[1428,26,1327,19,"iteration"],[1428,27,1327,19],[1429,10,1327,19],[1429,17,1327,19,"_iteration"],[1429,27,1327,19],[1429,28,1327,19,"apply"],[1429,33,1327,19],[1429,40,1327,19,"arguments"],[1429,49,1327,19],[1430,8,1327,19],[1431,8,1327,19],[1431,15,1327,10,"iteration"],[1431,24,1327,19],[1432,6,1327,19],[1433,4,1327,19],[1434,2,1327,19],[1435,2,1343,0],[1436,0,1344,0],[1437,0,1345,0],[1438,0,1346,0],[1439,0,1347,0],[1440,0,1348,0],[1441,0,1349,0],[1442,0,1350,0],[1443,0,1351,0],[1444,0,1352,0],[1445,0,1353,0],[1446,0,1354,0],[1447,0,1355,0],[1448,0,1356,0],[1449,0,1357,0],[1450,0,1358,0],[1451,2,1343,0],[1451,6,1359,6,"UserMetadata"],[1451,18,1359,18],[1452,4,1360,4],[1452,13,1360,4,"UserMetadata"],[1452,26,1360,16,"createdAt"],[1452,35,1360,25],[1452,37,1360,27,"lastLoginAt"],[1452,48,1360,38],[1452,50,1360,40],[1453,6,1360,40,"_classCallCheck"],[1453,21,1360,40],[1453,28,1360,40,"UserMetadata"],[1453,40,1360,40],[1454,6,1361,8],[1454,10,1361,12],[1454,11,1361,13,"createdAt"],[1454,20,1361,22],[1454,23,1361,25,"createdAt"],[1454,32,1361,34],[1455,6,1362,8],[1455,10,1362,12],[1455,11,1362,13,"lastLoginAt"],[1455,22,1362,24],[1455,25,1362,27,"lastLoginAt"],[1455,36,1362,38],[1456,6,1363,8],[1456,10,1363,12],[1456,11,1363,13,"_initializeTime"],[1456,26,1363,28],[1456,27,1363,29],[1456,28,1363,30],[1457,4,1364,4],[1458,4,1364,5],[1458,11,1364,5,"_createClass"],[1458,23,1364,5],[1458,24,1364,5,"UserMetadata"],[1458,36,1364,5],[1459,6,1364,5,"key"],[1459,9,1364,5],[1460,6,1364,5,"value"],[1460,11,1364,5],[1460,13,1365,4],[1460,22,1365,4,"_initializeTime"],[1460,37,1365,19,"_initializeTime"],[1460,38,1365,19],[1460,40,1365,22],[1461,8,1366,8],[1461,12,1366,12],[1461,13,1366,13,"lastSignInTime"],[1461,27,1366,27],[1461,30,1366,30,"utcTimestampToDateString"],[1461,54,1366,54],[1461,55,1366,55],[1461,59,1366,59],[1461,60,1366,60,"lastLoginAt"],[1461,71,1366,71],[1461,72,1366,72],[1462,8,1367,8],[1462,12,1367,12],[1462,13,1367,13,"creationTime"],[1462,25,1367,25],[1462,28,1367,28,"utcTimestampToDateString"],[1462,52,1367,52],[1462,53,1367,53],[1462,57,1367,57],[1462,58,1367,58,"createdAt"],[1462,67,1367,67],[1462,68,1367,68],[1463,6,1368,4],[1464,4,1368,5],[1465,6,1368,5,"key"],[1465,9,1368,5],[1466,6,1368,5,"value"],[1466,11,1368,5],[1466,13,1369,4],[1466,22,1369,4,"_copy"],[1466,27,1369,9,"_copy"],[1466,28,1369,10,"metadata"],[1466,36,1369,18],[1466,38,1369,20],[1467,8,1370,8],[1467,12,1370,12],[1467,13,1370,13,"createdAt"],[1467,22,1370,22],[1467,25,1370,25,"metadata"],[1467,33,1370,33],[1467,34,1370,34,"createdAt"],[1467,43,1370,43],[1468,8,1371,8],[1468,12,1371,12],[1468,13,1371,13,"lastLoginAt"],[1468,24,1371,24],[1468,27,1371,27,"metadata"],[1468,35,1371,35],[1468,36,1371,36,"lastLoginAt"],[1468,47,1371,47],[1469,8,1372,8],[1469,12,1372,12],[1469,13,1372,13,"_initializeTime"],[1469,28,1372,28],[1469,29,1372,29],[1469,30,1372,30],[1470,6,1373,4],[1471,4,1373,5],[1472,6,1373,5,"key"],[1472,9,1373,5],[1473,6,1373,5,"value"],[1473,11,1373,5],[1473,13,1374,4],[1473,22,1374,4,"toJSON"],[1473,28,1374,10,"toJSON"],[1473,29,1374,10],[1473,31,1374,13],[1474,8,1375,8],[1474,15,1375,15],[1475,10,1376,12,"createdAt"],[1475,19,1376,21],[1475,21,1376,23],[1475,25,1376,27],[1475,26,1376,28,"createdAt"],[1475,35,1376,37],[1476,10,1377,12,"lastLoginAt"],[1476,21,1377,23],[1476,23,1377,25],[1476,27,1377,29],[1476,28,1377,30,"lastLoginAt"],[1477,8,1378,8],[1477,9,1378,9],[1478,6,1379,4],[1479,4,1379,5],[1480,2,1379,5],[1481,2,1382,0],[1482,0,1383,0],[1483,0,1384,0],[1484,0,1385,0],[1485,0,1386,0],[1486,0,1387,0],[1487,0,1388,0],[1488,0,1389,0],[1489,0,1390,0],[1490,0,1391,0],[1491,0,1392,0],[1492,0,1393,0],[1493,0,1394,0],[1494,0,1395,0],[1495,0,1396,0],[1496,0,1397,0],[1497,2,1382,0],[1497,11,1398,15,"_reloadWithoutSaving"],[1497,31,1398,35,"_reloadWithoutSaving"],[1497,32,1398,35,"_x26"],[1497,36,1398,35],[1498,4,1398,35],[1498,11,1398,35,"_reloadWithoutSaving2"],[1498,32,1398,35],[1498,33,1398,35,"apply"],[1498,38,1398,35],[1498,45,1398,35,"arguments"],[1498,54,1398,35],[1499,2,1398,35],[1500,2,1431,0],[1501,0,1432,0],[1502,0,1433,0],[1503,0,1434,0],[1504,0,1435,0],[1505,0,1436,0],[1506,0,1437,0],[1507,2,1431,0],[1507,11,1431,0,"_reloadWithoutSaving2"],[1507,33,1431,0],[1508,4,1431,0,"_reloadWithoutSaving2"],[1508,25,1431,0],[1508,28,1431,0,"_asyncToGenerator"],[1508,45,1431,0],[1508,46,1398,0],[1508,57,1398,36,"user"],[1508,61,1398,40],[1508,63,1398,42],[1509,6,1399,4],[1509,10,1399,10,"auth"],[1509,14,1399,14],[1509,17,1399,17,"user"],[1509,21,1399,21],[1509,22,1399,22,"auth"],[1509,26,1399,26],[1510,6,1400,4],[1510,10,1400,10,"idToken"],[1510,17,1400,17],[1510,26,1400,26,"user"],[1510,30,1400,30],[1510,31,1400,31,"getIdToken"],[1510,41,1400,41],[1510,42,1400,42],[1510,43,1400,43],[1511,6,1401,4],[1511,10,1401,10,"response"],[1511,18,1401,18],[1511,27,1401,27,"_logoutIfInvalidated"],[1511,47,1401,47],[1511,48,1401,48,"user"],[1511,52,1401,52],[1511,54,1401,54,"getAccountInfo"],[1511,68,1401,68],[1511,69,1401,69,"auth"],[1511,73,1401,73],[1511,75,1401,75],[1512,8,1401,77,"idToken"],[1513,6,1401,85],[1513,7,1401,86],[1513,8,1401,87],[1513,9,1401,88],[1514,6,1402,4,"_assert"],[1514,13,1402,11],[1514,14,1402,12,"response"],[1514,22,1402,20],[1514,24,1402,22,"users"],[1514,29,1402,27],[1514,30,1402,28,"length"],[1514,36,1402,34],[1514,38,1402,36,"auth"],[1514,42,1402,40],[1514,44,1402,42],[1514,60,1402,58],[1514,61,1402,59],[1514,95,1402,93],[1514,96,1402,94],[1515,6,1403,4],[1515,10,1403,10,"coreAccount"],[1515,21,1403,21],[1515,24,1403,24,"response"],[1515,32,1403,32],[1515,33,1403,33,"users"],[1515,38,1403,38],[1515,39,1403,39],[1515,40,1403,40],[1515,41,1403,41],[1516,6,1404,4,"user"],[1516,10,1404,8],[1516,11,1404,9,"_notifyReloadListener"],[1516,32,1404,30],[1516,33,1404,31,"coreAccount"],[1516,44,1404,42],[1516,45,1404,43],[1517,6,1405,4],[1517,10,1405,10,"newProviderData"],[1517,25,1405,25],[1517,28,1405,28,"coreAccount"],[1517,39,1405,39],[1517,40,1405,40,"providerUserInfo"],[1517,56,1405,56],[1517,58,1405,58,"length"],[1517,64,1405,64],[1517,67,1406,10,"extractProviderData"],[1517,86,1406,29],[1517,87,1406,30,"coreAccount"],[1517,98,1406,41],[1517,99,1406,42,"providerUserInfo"],[1517,115,1406,58],[1517,116,1406,59],[1517,119,1407,10],[1517,121,1407,12],[1518,6,1408,4],[1518,10,1408,10,"providerData"],[1518,22,1408,22],[1518,25,1408,25,"mergeProviderData"],[1518,42,1408,42],[1518,43,1408,43,"user"],[1518,47,1408,47],[1518,48,1408,48,"providerData"],[1518,60,1408,60],[1518,62,1408,62,"newProviderData"],[1518,77,1408,77],[1518,78,1408,78],[1519,6,1409,4],[1520,6,1410,4],[1521,6,1411,4],[1522,6,1412,4],[1523,6,1413,4],[1524,6,1414,4],[1524,10,1414,10,"oldIsAnonymous"],[1524,24,1414,24],[1524,27,1414,27,"user"],[1524,31,1414,31],[1524,32,1414,32,"isAnonymous"],[1524,43,1414,43],[1525,6,1415,4],[1525,10,1415,10,"newIsAnonymous"],[1525,24,1415,24],[1525,27,1415,27],[1525,29,1415,29,"user"],[1525,33,1415,33],[1525,34,1415,34,"email"],[1525,39,1415,39],[1525,43,1415,43,"coreAccount"],[1525,54,1415,54],[1525,55,1415,55,"passwordHash"],[1525,67,1415,67],[1525,68,1415,68],[1525,72,1415,72],[1525,73,1415,73,"providerData"],[1525,85,1415,85],[1525,87,1415,87,"length"],[1525,93,1415,93],[1526,6,1416,4],[1526,10,1416,10,"isAnonymous"],[1526,21,1416,21],[1526,24,1416,24],[1526,25,1416,25,"oldIsAnonymous"],[1526,39,1416,39],[1526,42,1416,42],[1526,47,1416,47],[1526,50,1416,50,"newIsAnonymous"],[1526,64,1416,64],[1527,6,1417,4],[1527,10,1417,10,"updates"],[1527,17,1417,17],[1527,20,1417,20],[1528,8,1418,8,"uid"],[1528,11,1418,11],[1528,13,1418,13,"coreAccount"],[1528,24,1418,24],[1528,25,1418,25,"localId"],[1528,32,1418,32],[1529,8,1419,8,"displayName"],[1529,19,1419,19],[1529,21,1419,21,"coreAccount"],[1529,32,1419,32],[1529,33,1419,33,"displayName"],[1529,44,1419,44],[1529,48,1419,48],[1529,52,1419,52],[1530,8,1420,8,"photoURL"],[1530,16,1420,16],[1530,18,1420,18,"coreAccount"],[1530,29,1420,29],[1530,30,1420,30,"photoUrl"],[1530,38,1420,38],[1530,42,1420,42],[1530,46,1420,46],[1531,8,1421,8,"email"],[1531,13,1421,13],[1531,15,1421,15,"coreAccount"],[1531,26,1421,26],[1531,27,1421,27,"email"],[1531,32,1421,32],[1531,36,1421,36],[1531,40,1421,40],[1532,8,1422,8,"emailVerified"],[1532,21,1422,21],[1532,23,1422,23,"coreAccount"],[1532,34,1422,34],[1532,35,1422,35,"emailVerified"],[1532,48,1422,48],[1532,52,1422,52],[1532,57,1422,57],[1533,8,1423,8,"phoneNumber"],[1533,19,1423,19],[1533,21,1423,21,"coreAccount"],[1533,32,1423,32],[1533,33,1423,33,"phoneNumber"],[1533,44,1423,44],[1533,48,1423,48],[1533,52,1423,52],[1534,8,1424,8,"tenantId"],[1534,16,1424,16],[1534,18,1424,18,"coreAccount"],[1534,29,1424,29],[1534,30,1424,30,"tenantId"],[1534,38,1424,38],[1534,42,1424,42],[1534,46,1424,46],[1535,8,1425,8,"providerData"],[1535,20,1425,20],[1536,8,1426,8,"metadata"],[1536,16,1426,16],[1536,18,1426,18],[1536,22,1426,22,"UserMetadata"],[1536,34,1426,34],[1536,35,1426,35,"coreAccount"],[1536,46,1426,46],[1536,47,1426,47,"createdAt"],[1536,56,1426,56],[1536,58,1426,58,"coreAccount"],[1536,69,1426,69],[1536,70,1426,70,"lastLoginAt"],[1536,81,1426,81],[1536,82,1426,82],[1537,8,1427,8,"isAnonymous"],[1538,6,1428,4],[1538,7,1428,5],[1539,6,1429,4,"Object"],[1539,12,1429,10],[1539,13,1429,11,"assign"],[1539,19,1429,17],[1539,20,1429,18,"user"],[1539,24,1429,22],[1539,26,1429,24,"updates"],[1539,33,1429,31],[1539,34,1429,32],[1540,4,1430,0],[1540,5,1430,1],[1541,4,1430,1],[1541,11,1430,1,"_reloadWithoutSaving2"],[1541,32,1430,1],[1541,33,1430,1,"apply"],[1541,38,1430,1],[1541,45,1430,1,"arguments"],[1541,54,1430,1],[1542,2,1430,1],[1543,2,1430,1],[1543,11,1438,15,"reload"],[1543,19,1438,21,"reload"],[1543,20,1438,21,"_x27"],[1543,24,1438,21],[1544,4,1438,21],[1544,11,1438,21,"_reload"],[1544,18,1438,21],[1544,19,1438,21,"apply"],[1544,24,1438,21],[1544,31,1438,21,"arguments"],[1544,40,1438,21],[1545,2,1438,21],[1546,2,1438,21],[1546,11,1438,21,"_reload"],[1546,19,1438,21],[1547,4,1438,21,"_reload"],[1547,11,1438,21],[1547,14,1438,21,"_asyncToGenerator"],[1547,31,1438,21],[1547,32,1438,0],[1547,43,1438,22,"user"],[1547,47,1438,26],[1547,49,1438,28],[1548,6,1439,4],[1548,10,1439,10,"userInternal"],[1548,22,1439,22],[1548,25,1439,25,"util"],[1548,29,1439,29],[1548,30,1439,30,"getModularInstance"],[1548,48,1439,48],[1548,49,1439,49,"user"],[1548,53,1439,53],[1548,54,1439,54],[1549,6,1440,4],[1549,12,1440,10,"_reloadWithoutSaving"],[1549,32,1440,30],[1549,33,1440,31,"userInternal"],[1549,45,1440,43],[1549,46,1440,44],[1550,6,1441,4],[1551,6,1442,4],[1552,6,1443,4],[1553,6,1444,4],[1553,12,1444,10,"userInternal"],[1553,24,1444,22],[1553,25,1444,23,"auth"],[1553,29,1444,27],[1553,30,1444,28,"_persistUserIfCurrent"],[1553,51,1444,49],[1553,52,1444,50,"userInternal"],[1553,64,1444,62],[1553,65,1444,63],[1554,6,1445,4,"userInternal"],[1554,18,1445,16],[1554,19,1445,17,"auth"],[1554,23,1445,21],[1554,24,1445,22,"_notifyListenersIfCurrent"],[1554,49,1445,47],[1554,50,1445,48,"userInternal"],[1554,62,1445,60],[1554,63,1445,61],[1555,4,1446,0],[1555,5,1446,1],[1556,4,1446,1],[1556,11,1446,1,"_reload"],[1556,18,1446,1],[1556,19,1446,1,"apply"],[1556,24,1446,1],[1556,31,1446,1,"arguments"],[1556,40,1446,1],[1557,2,1446,1],[1558,2,1447,0],[1558,11,1447,9,"mergeProviderData"],[1558,28,1447,26,"mergeProviderData"],[1558,29,1447,27,"original"],[1558,37,1447,35],[1558,39,1447,37,"newData"],[1558,46,1447,44],[1558,48,1447,46],[1559,4,1448,4],[1559,8,1448,10,"deduped"],[1559,15,1448,17],[1559,18,1448,20,"original"],[1559,26,1448,28],[1559,27,1448,29,"filter"],[1559,33,1448,35],[1559,34,1448,36,"o"],[1559,35,1448,37],[1559,39,1448,41],[1559,40,1448,42,"newData"],[1559,47,1448,49],[1559,48,1448,50,"some"],[1559,52,1448,54],[1559,53,1448,55,"n"],[1559,54,1448,56],[1559,58,1448,60,"n"],[1559,59,1448,61],[1559,60,1448,62,"providerId"],[1559,70,1448,72],[1559,75,1448,77,"o"],[1559,76,1448,78],[1559,77,1448,79,"providerId"],[1559,87,1448,89],[1559,88,1448,90],[1559,89,1448,91],[1560,4,1449,4],[1560,11,1449,11],[1560,12,1449,12],[1560,15,1449,15,"deduped"],[1560,22,1449,22],[1560,24,1449,24],[1560,27,1449,27,"newData"],[1560,34,1449,34],[1560,35,1449,35],[1561,2,1450,0],[1562,2,1451,0],[1562,11,1451,9,"extractProviderData"],[1562,30,1451,28,"extractProviderData"],[1562,31,1451,29,"providers"],[1562,40,1451,38],[1562,42,1451,40],[1563,4,1452,4],[1563,11,1452,11,"providers"],[1563,20,1452,20],[1563,21,1452,21,"map"],[1563,24,1452,24],[1563,25,1452,25,"_ref3"],[1563,30,1452,25],[1563,34,1452,58],[1564,6,1452,58],[1564,10,1452,28,"providerId"],[1564,20,1452,38],[1564,23,1452,38,"_ref3"],[1564,28,1452,38],[1564,29,1452,28,"providerId"],[1564,39,1452,38],[1565,8,1452,43,"provider"],[1565,16,1452,51],[1565,19,1452,51,"_objectWithoutProperties"],[1565,43,1452,51],[1565,44,1452,51,"_ref3"],[1565,49,1452,51],[1565,51,1452,51,"_excluded"],[1565,60,1452,51],[1566,6,1453,8],[1566,13,1453,15],[1567,8,1454,12,"providerId"],[1567,18,1454,22],[1568,8,1455,12,"uid"],[1568,11,1455,15],[1568,13,1455,17,"provider"],[1568,21,1455,25],[1568,22,1455,26,"rawId"],[1568,27,1455,31],[1568,31,1455,35],[1568,33,1455,37],[1569,8,1456,12,"displayName"],[1569,19,1456,23],[1569,21,1456,25,"provider"],[1569,29,1456,33],[1569,30,1456,34,"displayName"],[1569,41,1456,45],[1569,45,1456,49],[1569,49,1456,53],[1570,8,1457,12,"email"],[1570,13,1457,17],[1570,15,1457,19,"provider"],[1570,23,1457,27],[1570,24,1457,28,"email"],[1570,29,1457,33],[1570,33,1457,37],[1570,37,1457,41],[1571,8,1458,12,"phoneNumber"],[1571,19,1458,23],[1571,21,1458,25,"provider"],[1571,29,1458,33],[1571,30,1458,34,"phoneNumber"],[1571,41,1458,45],[1571,45,1458,49],[1571,49,1458,53],[1572,8,1459,12,"photoURL"],[1572,16,1459,20],[1572,18,1459,22,"provider"],[1572,26,1459,30],[1572,27,1459,31,"photoUrl"],[1572,35,1459,39],[1572,39,1459,43],[1573,6,1460,8],[1573,7,1460,9],[1574,4,1461,4],[1574,5,1461,5],[1574,6,1461,6],[1575,2,1462,0],[1577,2,1464,0],[1578,0,1465,0],[1579,0,1466,0],[1580,0,1467,0],[1581,0,1468,0],[1582,0,1469,0],[1583,0,1470,0],[1584,0,1471,0],[1585,0,1472,0],[1586,0,1473,0],[1587,0,1474,0],[1588,0,1475,0],[1589,0,1476,0],[1590,0,1477,0],[1591,0,1478,0],[1592,0,1479,0],[1593,2,1464,0],[1593,11,1480,15,"requestStsToken"],[1593,26,1480,30,"requestStsToken"],[1593,27,1480,30,"_x28"],[1593,31,1480,30],[1593,33,1480,30,"_x29"],[1593,37,1480,30],[1594,4,1480,30],[1594,11,1480,30,"_requestStsToken"],[1594,27,1480,30],[1594,28,1480,30,"apply"],[1594,33,1480,30],[1594,40,1480,30,"arguments"],[1594,49,1480,30],[1595,2,1480,30],[1596,2,1480,30],[1596,11,1480,30,"_requestStsToken"],[1596,28,1480,30],[1597,4,1480,30,"_requestStsToken"],[1597,20,1480,30],[1597,23,1480,30,"_asyncToGenerator"],[1597,40,1480,30],[1597,41,1480,0],[1597,52,1480,31,"auth"],[1597,56,1480,35],[1597,58,1480,37,"refreshToken"],[1597,70,1480,49],[1597,72,1480,51],[1598,6,1481,4],[1598,10,1481,10,"response"],[1598,18,1481,18],[1598,27,1481,27,"_performFetchWithErrorHandling"],[1598,57,1481,57],[1598,58,1481,58,"auth"],[1598,62,1481,62],[1598,64,1481,64],[1598,65,1481,65],[1598,66,1481,66],[1598,81,1481,66,"_asyncToGenerator"],[1598,98,1481,66],[1598,99,1481,68],[1598,112,1481,80],[1599,8,1482,8],[1599,12,1482,14,"body"],[1599,16,1482,18],[1599,19,1482,21,"util"],[1599,23,1482,25],[1599,24,1482,26,"querystring"],[1599,35,1482,37],[1599,36,1482,38],[1600,10,1483,12],[1600,22,1483,24],[1600,24,1483,26],[1600,39,1483,41],[1601,10,1484,12],[1601,25,1484,27],[1601,27,1484,29,"refreshToken"],[1602,8,1485,8],[1602,9,1485,9],[1602,10,1485,10],[1602,11,1485,11,"slice"],[1602,16,1485,16],[1602,17,1485,17],[1602,18,1485,18],[1602,19,1485,19],[1603,8,1486,8],[1603,12,1486,8,"_auth$config"],[1603,24,1486,8],[1603,27,1486,41,"auth"],[1603,31,1486,45],[1603,32,1486,46,"config"],[1603,38,1486,52],[1604,10,1486,16,"tokenApiHost"],[1604,22,1486,28],[1604,25,1486,28,"_auth$config"],[1604,37,1486,28],[1604,38,1486,16,"tokenApiHost"],[1604,50,1486,28],[1605,10,1486,30,"apiKey"],[1605,16,1486,36],[1605,19,1486,36,"_auth$config"],[1605,31,1486,36],[1605,32,1486,30,"apiKey"],[1605,38,1486,36],[1606,8,1487,8],[1606,12,1487,14,"url"],[1606,15,1487,17],[1606,24,1487,26,"_getFinalTarget"],[1606,39,1487,41],[1606,40,1487,42,"auth"],[1606,44,1487,46],[1606,46,1487,48,"tokenApiHost"],[1606,58,1487,60],[1606,60,1487,62],[1606,71,1487,73],[1606,72,1487,74],[1606,94,1487,96],[1606,101,1487,103,"apiKey"],[1606,107,1487,109],[1606,109,1487,111],[1606,110,1487,112],[1607,8,1488,8],[1607,12,1488,14,"headers"],[1607,19,1488,21],[1607,28,1488,30,"auth"],[1607,32,1488,34],[1607,33,1488,35,"_getAdditionalHeaders"],[1607,54,1488,56],[1607,55,1488,57],[1607,56,1488,58],[1608,8,1489,8,"headers"],[1608,15,1489,15],[1608,16,1489,16],[1608,30,1489,30],[1608,31,1489,31],[1608,61,1489,61],[1608,64,1489,64],[1608,99,1489,99],[1609,8,1490,8],[1609,12,1490,14,"options"],[1609,19,1490,21],[1609,22,1490,24],[1610,10,1491,12,"method"],[1610,16,1491,18],[1610,18,1491,20],[1610,24,1491,26],[1610,25,1491,27],[1611,10,1492,12,"headers"],[1611,17,1492,19],[1612,10,1493,12,"body"],[1613,8,1494,8],[1613,9,1494,9],[1614,8,1495,8],[1614,12,1495,12,"auth"],[1614,16,1495,16],[1614,17,1495,17,"emulatorConfig"],[1614,31,1495,31],[1614,35,1496,12,"util"],[1614,39,1496,16],[1614,40,1496,17,"isCloudWorkstation"],[1614,58,1496,35],[1614,59,1496,36,"auth"],[1614,63,1496,40],[1614,64,1496,41,"emulatorConfig"],[1614,78,1496,55],[1614,79,1496,56,"host"],[1614,83,1496,60],[1614,84,1496,61],[1614,86,1496,63],[1615,10,1497,12,"options"],[1615,17,1497,19],[1615,18,1497,20,"credentials"],[1615,29,1497,31],[1615,32,1497,34],[1615,41,1497,43],[1616,8,1498,8],[1617,8,1499,8],[1617,15,1499,15,"FetchProvider"],[1617,28,1499,28],[1617,29,1499,29,"fetch"],[1617,34,1499,34],[1617,35,1499,35],[1617,36,1499,36],[1617,37,1499,37,"url"],[1617,40,1499,40],[1617,42,1499,42,"options"],[1617,49,1499,49],[1617,50,1499,50],[1618,6,1500,4],[1618,7,1500,5],[1618,9,1500,6],[1619,6,1501,4],[1620,6,1502,4],[1620,13,1502,11],[1621,8,1503,8,"accessToken"],[1621,19,1503,19],[1621,21,1503,21,"response"],[1621,29,1503,29],[1621,30,1503,30,"access_token"],[1621,42,1503,42],[1622,8,1504,8,"expiresIn"],[1622,17,1504,17],[1622,19,1504,19,"response"],[1622,27,1504,27],[1622,28,1504,28,"expires_in"],[1622,38,1504,38],[1623,8,1505,8,"refreshToken"],[1623,20,1505,20],[1623,22,1505,22,"response"],[1623,30,1505,30],[1623,31,1505,31,"refresh_token"],[1624,6,1506,4],[1624,7,1506,5],[1625,4,1507,0],[1625,5,1507,1],[1626,4,1507,1],[1626,11,1507,1,"_requestStsToken"],[1626,27,1507,1],[1626,28,1507,1,"apply"],[1626,33,1507,1],[1626,40,1507,1,"arguments"],[1626,49,1507,1],[1627,2,1507,1],[1628,2,1507,1],[1628,11,1508,15,"revokeToken"],[1628,22,1508,26,"revokeToken"],[1628,23,1508,26,"_x30"],[1628,27,1508,26],[1628,29,1508,26,"_x31"],[1628,33,1508,26],[1629,4,1508,26],[1629,11,1508,26,"_revokeToken"],[1629,23,1508,26],[1629,24,1508,26,"apply"],[1629,29,1508,26],[1629,36,1508,26,"arguments"],[1629,45,1508,26],[1630,2,1508,26],[1631,2,1512,0],[1632,0,1513,0],[1633,0,1514,0],[1634,0,1515,0],[1635,0,1516,0],[1636,0,1517,0],[1637,0,1518,0],[1638,0,1519,0],[1639,0,1520,0],[1640,0,1521,0],[1641,0,1522,0],[1642,0,1523,0],[1643,0,1524,0],[1644,0,1525,0],[1645,0,1526,0],[1646,0,1527,0],[1647,2,1528,0],[1648,0,1529,0],[1649,0,1530,0],[1650,0,1531,0],[1651,0,1532,0],[1652,0,1533,0],[1653,2,1528,0],[1653,11,1528,0,"_revokeToken"],[1653,24,1528,0],[1654,4,1528,0,"_revokeToken"],[1654,16,1528,0],[1654,19,1528,0,"_asyncToGenerator"],[1654,36,1528,0],[1654,37,1508,0],[1654,48,1508,27,"auth"],[1654,52,1508,31],[1654,54,1508,33,"request"],[1654,61,1508,40],[1654,63,1508,42],[1655,6,1509,4],[1655,13,1509,11,"_performApiRequest"],[1655,31,1509,29],[1655,32,1509,30,"auth"],[1655,36,1509,34],[1655,38,1509,36],[1655,44,1509,42],[1655,45,1509,43],[1655,68,1509,66],[1655,94,1509,92],[1655,95,1509,93],[1655,124,1509,122,"_addTidIfNecessary"],[1655,142,1509,140],[1655,143,1509,141,"auth"],[1655,147,1509,145],[1655,149,1509,147,"request"],[1655,156,1509,154],[1655,157,1509,155],[1655,158,1509,156],[1656,4,1510,0],[1656,5,1510,1],[1657,4,1510,1],[1657,11,1510,1,"_revokeToken"],[1657,23,1510,1],[1657,24,1510,1,"apply"],[1657,29,1510,1],[1657,36,1510,1,"arguments"],[1657,45,1510,1],[1658,2,1510,1],[1659,2,1510,1],[1659,6,1534,6,"StsTokenManager"],[1659,21,1534,21],[1660,4,1535,4],[1660,13,1535,4,"StsTokenManager"],[1660,29,1535,4],[1660,31,1535,18],[1661,6,1535,18,"_classCallCheck"],[1661,21,1535,18],[1661,28,1535,18,"StsTokenManager"],[1661,43,1535,18],[1662,6,1536,8],[1662,10,1536,12],[1662,11,1536,13,"refreshToken"],[1662,23,1536,25],[1662,26,1536,28],[1662,30,1536,32],[1663,6,1537,8],[1663,10,1537,12],[1663,11,1537,13,"accessToken"],[1663,22,1537,24],[1663,25,1537,27],[1663,29,1537,31],[1664,6,1538,8],[1664,10,1538,12],[1664,11,1538,13,"expirationTime"],[1664,25,1538,27],[1664,28,1538,30],[1664,32,1538,34],[1665,4,1539,4],[1666,4,1539,5],[1666,11,1539,5,"_createClass"],[1666,23,1539,5],[1666,24,1539,5,"StsTokenManager"],[1666,39,1539,5],[1667,6,1539,5,"key"],[1667,9,1539,5],[1668,6,1539,5,"get"],[1668,9,1539,5],[1668,11,1540,4],[1668,20,1540,4,"get"],[1668,21,1540,4],[1668,23,1540,20],[1669,8,1541,8],[1669,15,1541,16],[1669,16,1541,17],[1669,20,1541,21],[1669,21,1541,22,"expirationTime"],[1669,35,1541,36],[1669,39,1542,12,"Date"],[1669,43,1542,16],[1669,44,1542,17,"now"],[1669,47,1542,20],[1669,48,1542,21],[1669,49,1542,22],[1669,52,1542,25],[1669,56,1542,29],[1669,57,1542,30,"expirationTime"],[1669,71,1542,44],[1669,74,1542,47],[1669,79,1542,52],[1669,80,1542,53],[1670,6,1543,4],[1671,4,1543,5],[1672,6,1543,5,"key"],[1672,9,1543,5],[1673,6,1543,5,"value"],[1673,11,1543,5],[1673,13,1544,4],[1673,22,1544,4,"updateFromServerResponse"],[1673,46,1544,28,"updateFromServerResponse"],[1673,47,1544,29,"response"],[1673,55,1544,37],[1673,57,1544,39],[1674,8,1545,8,"_assert"],[1674,15,1545,15],[1674,16,1545,16,"response"],[1674,24,1545,24],[1674,25,1545,25,"idToken"],[1674,32,1545,32],[1674,34,1545,34],[1674,50,1545,50],[1674,51,1545,51],[1674,85,1545,85],[1674,86,1545,86],[1675,8,1546,8,"_assert"],[1675,15,1546,15],[1675,16,1546,16],[1675,23,1546,23,"response"],[1675,31,1546,31],[1675,32,1546,32,"idToken"],[1675,39,1546,39],[1675,44,1546,44],[1675,55,1546,55],[1675,57,1546,57],[1675,73,1546,73],[1675,74,1546,74],[1675,108,1546,108],[1675,109,1546,109],[1676,8,1547,8,"_assert"],[1676,15,1547,15],[1676,16,1547,16],[1676,23,1547,23,"response"],[1676,31,1547,31],[1676,32,1547,32,"refreshToken"],[1676,44,1547,44],[1676,49,1547,49],[1676,60,1547,60],[1676,62,1547,62],[1676,78,1547,78],[1676,79,1547,79],[1676,113,1547,113],[1676,114,1547,114],[1677,8,1548,8],[1677,12,1548,14,"expiresIn"],[1677,21,1548,23],[1677,24,1548,26],[1677,35,1548,37],[1677,39,1548,41,"response"],[1677,47,1548,49],[1677,51,1548,53],[1677,58,1548,60,"response"],[1677,66,1548,68],[1677,67,1548,69,"expiresIn"],[1677,76,1548,78],[1677,81,1548,83],[1677,92,1548,94],[1677,95,1549,14,"Number"],[1677,101,1549,20],[1677,102,1549,21,"response"],[1677,110,1549,29],[1677,111,1549,30,"expiresIn"],[1677,120,1549,39],[1677,121,1549,40],[1677,124,1550,14,"_tokenExpiresIn"],[1677,139,1550,29],[1677,140,1550,30,"response"],[1677,148,1550,38],[1677,149,1550,39,"idToken"],[1677,156,1550,46],[1677,157,1550,47],[1678,8,1551,8],[1678,12,1551,12],[1678,13,1551,13,"updateTokensAndExpiration"],[1678,38,1551,38],[1678,39,1551,39,"response"],[1678,47,1551,47],[1678,48,1551,48,"idToken"],[1678,55,1551,55],[1678,57,1551,57,"response"],[1678,65,1551,65],[1678,66,1551,66,"refreshToken"],[1678,78,1551,78],[1678,80,1551,80,"expiresIn"],[1678,89,1551,89],[1678,90,1551,90],[1679,6,1552,4],[1680,4,1552,5],[1681,6,1552,5,"key"],[1681,9,1552,5],[1682,6,1552,5,"value"],[1682,11,1552,5],[1682,13,1553,4],[1682,22,1553,4,"updateFromIdToken"],[1682,39,1553,21,"updateFromIdToken"],[1682,40,1553,22,"idToken"],[1682,47,1553,29],[1682,49,1553,31],[1683,8,1554,8,"_assert"],[1683,15,1554,15],[1683,16,1554,16,"idToken"],[1683,23,1554,23],[1683,24,1554,24,"length"],[1683,30,1554,30],[1683,35,1554,35],[1683,36,1554,36],[1683,38,1554,38],[1683,54,1554,54],[1683,55,1554,55],[1683,89,1554,89],[1683,90,1554,90],[1684,8,1555,8],[1684,12,1555,14,"expiresIn"],[1684,21,1555,23],[1684,24,1555,26,"_tokenExpiresIn"],[1684,39,1555,41],[1684,40,1555,42,"idToken"],[1684,47,1555,49],[1684,48,1555,50],[1685,8,1556,8],[1685,12,1556,12],[1685,13,1556,13,"updateTokensAndExpiration"],[1685,38,1556,38],[1685,39,1556,39,"idToken"],[1685,46,1556,46],[1685,48,1556,48],[1685,52,1556,52],[1685,54,1556,54,"expiresIn"],[1685,63,1556,63],[1685,64,1556,64],[1686,6,1557,4],[1687,4,1557,5],[1688,6,1557,5,"key"],[1688,9,1557,5],[1689,6,1557,5,"value"],[1689,11,1557,5],[1690,8,1557,5],[1690,12,1557,5,"_getToken"],[1690,21,1557,5],[1690,24,1557,5,"_asyncToGenerator"],[1690,41,1557,5],[1690,42,1558,4],[1690,53,1558,19,"auth"],[1690,57,1558,23],[1690,59,1558,47],[1691,10,1558,47],[1691,14,1558,25,"forceRefresh"],[1691,26,1558,37],[1691,29,1558,37,"arguments"],[1691,38,1558,37],[1691,39,1558,37,"length"],[1691,45,1558,37],[1691,53,1558,37,"arguments"],[1691,62,1558,37],[1691,70,1558,37,"undefined"],[1691,79,1558,37],[1691,82,1558,37,"arguments"],[1691,91,1558,37],[1691,97,1558,40],[1691,102,1558,45],[1692,10,1559,8],[1692,14,1559,12],[1692,15,1559,13,"forceRefresh"],[1692,27,1559,25],[1692,31,1559,29],[1692,35,1559,33],[1692,36,1559,34,"accessToken"],[1692,47,1559,45],[1692,51,1559,49],[1692,52,1559,50],[1692,56,1559,54],[1692,57,1559,55,"isExpired"],[1692,66,1559,64],[1692,68,1559,66],[1693,12,1560,12],[1693,19,1560,19],[1693,23,1560,23],[1693,24,1560,24,"accessToken"],[1693,35,1560,35],[1694,10,1561,8],[1695,10,1562,8,"_assert"],[1695,17,1562,15],[1695,18,1562,16],[1695,22,1562,20],[1695,23,1562,21,"refreshToken"],[1695,35,1562,33],[1695,37,1562,35,"auth"],[1695,41,1562,39],[1695,43,1562,41],[1695,63,1562,61],[1695,64,1562,62],[1695,97,1562,95],[1695,98,1562,96],[1696,10,1563,8],[1696,14,1563,12],[1696,18,1563,16],[1696,19,1563,17,"refreshToken"],[1696,31,1563,29],[1696,33,1563,31],[1697,12,1564,12],[1697,18,1564,18],[1697,22,1564,22],[1697,23,1564,23,"refresh"],[1697,30,1564,30],[1697,31,1564,31,"auth"],[1697,35,1564,35],[1697,37,1564,37],[1697,41,1564,41],[1697,42,1564,42,"refreshToken"],[1697,54,1564,54],[1697,55,1564,55],[1698,12,1565,12],[1698,19,1565,19],[1698,23,1565,23],[1698,24,1565,24,"accessToken"],[1698,35,1565,35],[1699,10,1566,8],[1700,10,1567,8],[1700,17,1567,15],[1700,21,1567,19],[1701,8,1568,4],[1701,9,1568,5],[1702,8,1568,5],[1702,17,1558,10,"getToken"],[1702,25,1558,18,"getToken"],[1702,26,1558,18,"_x32"],[1702,30,1558,18],[1703,10,1558,18],[1703,17,1558,18,"_getToken"],[1703,26,1558,18],[1703,27,1558,18,"apply"],[1703,32,1558,18],[1703,39,1558,18,"arguments"],[1703,48,1558,18],[1704,8,1558,18],[1705,8,1558,18],[1705,15,1558,10,"getToken"],[1705,23,1558,18],[1706,6,1558,18],[1707,4,1558,18],[1708,6,1558,18,"key"],[1708,9,1558,18],[1709,6,1558,18,"value"],[1709,11,1558,18],[1709,13,1569,4],[1709,22,1569,4,"clearRefreshToken"],[1709,39,1569,21,"clearRefreshToken"],[1709,40,1569,21],[1709,42,1569,24],[1710,8,1570,8],[1710,12,1570,12],[1710,13,1570,13,"refreshToken"],[1710,25,1570,25],[1710,28,1570,28],[1710,32,1570,32],[1711,6,1571,4],[1712,4,1571,5],[1713,6,1571,5,"key"],[1713,9,1571,5],[1714,6,1571,5,"value"],[1714,11,1571,5],[1715,8,1571,5],[1715,12,1571,5,"_refresh"],[1715,20,1571,5],[1715,23,1571,5,"_asyncToGenerator"],[1715,40,1571,5],[1715,41,1572,4],[1715,52,1572,18,"auth"],[1715,56,1572,22],[1715,58,1572,24,"oldToken"],[1715,66,1572,32],[1715,68,1572,34],[1716,10,1573,8],[1716,14,1573,8,"_yield$requestStsToke"],[1716,35,1573,8],[1716,44,1573,63,"requestStsToken"],[1716,59,1573,78],[1716,60,1573,79,"auth"],[1716,64,1573,83],[1716,66,1573,85,"oldToken"],[1716,74,1573,93],[1716,75,1573,94],[1717,12,1573,16,"accessToken"],[1717,23,1573,27],[1717,26,1573,27,"_yield$requestStsToke"],[1717,47,1573,27],[1717,48,1573,16,"accessToken"],[1717,59,1573,27],[1718,12,1573,29,"refreshToken"],[1718,24,1573,41],[1718,27,1573,41,"_yield$requestStsToke"],[1718,48,1573,41],[1718,49,1573,29,"refreshToken"],[1718,61,1573,41],[1719,12,1573,43,"expiresIn"],[1719,21,1573,52],[1719,24,1573,52,"_yield$requestStsToke"],[1719,45,1573,52],[1719,46,1573,43,"expiresIn"],[1719,55,1573,52],[1720,10,1574,8],[1720,14,1574,12],[1720,15,1574,13,"updateTokensAndExpiration"],[1720,40,1574,38],[1720,41,1574,39,"accessToken"],[1720,52,1574,50],[1720,54,1574,52,"refreshToken"],[1720,66,1574,64],[1720,68,1574,66,"Number"],[1720,74,1574,72],[1720,75,1574,73,"expiresIn"],[1720,84,1574,82],[1720,85,1574,83],[1720,86,1574,84],[1721,8,1575,4],[1721,9,1575,5],[1722,8,1575,5],[1722,17,1572,10,"refresh"],[1722,24,1572,17,"refresh"],[1722,25,1572,17,"_x33"],[1722,29,1572,17],[1722,31,1572,17,"_x34"],[1722,35,1572,17],[1723,10,1572,17],[1723,17,1572,17,"_refresh"],[1723,25,1572,17],[1723,26,1572,17,"apply"],[1723,31,1572,17],[1723,38,1572,17,"arguments"],[1723,47,1572,17],[1724,8,1572,17],[1725,8,1572,17],[1725,15,1572,10,"refresh"],[1725,22,1572,17],[1726,6,1572,17],[1727,4,1572,17],[1728,6,1572,17,"key"],[1728,9,1572,17],[1729,6,1572,17,"value"],[1729,11,1572,17],[1729,13,1576,4],[1729,22,1576,4,"updateTokensAndExpiration"],[1729,47,1576,29,"updateTokensAndExpiration"],[1729,48,1576,30,"accessToken"],[1729,59,1576,41],[1729,61,1576,43,"refreshToken"],[1729,73,1576,55],[1729,75,1576,57,"expiresInSec"],[1729,87,1576,69],[1729,89,1576,71],[1730,8,1577,8],[1730,12,1577,12],[1730,13,1577,13,"refreshToken"],[1730,25,1577,25],[1730,28,1577,28,"refreshToken"],[1730,40,1577,40],[1730,44,1577,44],[1730,48,1577,48],[1731,8,1578,8],[1731,12,1578,12],[1731,13,1578,13,"accessToken"],[1731,24,1578,24],[1731,27,1578,27,"accessToken"],[1731,38,1578,38],[1731,42,1578,42],[1731,46,1578,46],[1732,8,1579,8],[1732,12,1579,12],[1732,13,1579,13,"expirationTime"],[1732,27,1579,27],[1732,30,1579,30,"Date"],[1732,34,1579,34],[1732,35,1579,35,"now"],[1732,38,1579,38],[1732,39,1579,39],[1732,40,1579,40],[1732,43,1579,43,"expiresInSec"],[1732,55,1579,55],[1732,58,1579,58],[1732,62,1579,62],[1733,6,1580,4],[1734,4,1580,5],[1735,6,1580,5,"key"],[1735,9,1580,5],[1736,6,1580,5,"value"],[1736,11,1580,5],[1736,13,1604,4],[1736,22,1604,4,"toJSON"],[1736,28,1604,10,"toJSON"],[1736,29,1604,10],[1736,31,1604,13],[1737,8,1605,8],[1737,15,1605,15],[1738,10,1606,12,"refreshToken"],[1738,22,1606,24],[1738,24,1606,26],[1738,28,1606,30],[1738,29,1606,31,"refreshToken"],[1738,41,1606,43],[1739,10,1607,12,"accessToken"],[1739,21,1607,23],[1739,23,1607,25],[1739,27,1607,29],[1739,28,1607,30,"accessToken"],[1739,39,1607,41],[1740,10,1608,12,"expirationTime"],[1740,24,1608,26],[1740,26,1608,28],[1740,30,1608,32],[1740,31,1608,33,"expirationTime"],[1741,8,1609,8],[1741,9,1609,9],[1742,6,1610,4],[1743,4,1610,5],[1744,6,1610,5,"key"],[1744,9,1610,5],[1745,6,1610,5,"value"],[1745,11,1610,5],[1745,13,1611,4],[1745,22,1611,4,"_assign"],[1745,29,1611,11,"_assign"],[1745,30,1611,12,"stsTokenManager"],[1745,45,1611,27],[1745,47,1611,29],[1746,8,1612,8],[1746,12,1612,12],[1746,13,1612,13,"accessToken"],[1746,24,1612,24],[1746,27,1612,27,"stsTokenManager"],[1746,42,1612,42],[1746,43,1612,43,"accessToken"],[1746,54,1612,54],[1747,8,1613,8],[1747,12,1613,12],[1747,13,1613,13,"refreshToken"],[1747,25,1613,25],[1747,28,1613,28,"stsTokenManager"],[1747,43,1613,43],[1747,44,1613,44,"refreshToken"],[1747,56,1613,56],[1748,8,1614,8],[1748,12,1614,12],[1748,13,1614,13,"expirationTime"],[1748,27,1614,27],[1748,30,1614,30,"stsTokenManager"],[1748,45,1614,45],[1748,46,1614,46,"expirationTime"],[1748,60,1614,60],[1749,6,1615,4],[1750,4,1615,5],[1751,6,1615,5,"key"],[1751,9,1615,5],[1752,6,1615,5,"value"],[1752,11,1615,5],[1752,13,1616,4],[1752,22,1616,4,"_clone"],[1752,28,1616,10,"_clone"],[1752,29,1616,10],[1752,31,1616,13],[1753,8,1617,8],[1753,15,1617,15,"Object"],[1753,21,1617,21],[1753,22,1617,22,"assign"],[1753,28,1617,28],[1753,29,1617,29],[1753,33,1617,33,"StsTokenManager"],[1753,48,1617,48],[1753,49,1617,49],[1753,50,1617,50],[1753,52,1617,52],[1753,56,1617,56],[1753,57,1617,57,"toJSON"],[1753,63,1617,63],[1753,64,1617,64],[1753,65,1617,65],[1753,66,1617,66],[1754,6,1618,4],[1755,4,1618,5],[1756,6,1618,5,"key"],[1756,9,1618,5],[1757,6,1618,5,"value"],[1757,11,1618,5],[1757,13,1619,4],[1757,22,1619,4,"_performRefresh"],[1757,37,1619,19,"_performRefresh"],[1757,38,1619,19],[1757,40,1619,22],[1758,8,1620,8],[1758,15,1620,15,"debugFail"],[1758,24,1620,24],[1758,25,1620,25],[1758,42,1620,42],[1758,43,1620,43],[1759,6,1621,4],[1760,4,1621,5],[1761,6,1621,5,"key"],[1761,9,1621,5],[1762,6,1621,5,"value"],[1762,11,1621,5],[1762,13,1581,4],[1762,22,1581,11,"fromJSON"],[1762,30,1581,19,"fromJSON"],[1762,31,1581,20,"appName"],[1762,38,1581,27],[1762,40,1581,29,"object"],[1762,46,1581,35],[1762,48,1581,37],[1763,8,1582,8],[1763,12,1582,16,"refreshToken"],[1763,24,1582,28],[1763,27,1582,62,"object"],[1763,33,1582,68],[1763,34,1582,16,"refreshToken"],[1763,46,1582,28],[1764,10,1582,30,"accessToken"],[1764,21,1582,41],[1764,24,1582,62,"object"],[1764,30,1582,68],[1764,31,1582,30,"accessToken"],[1764,42,1582,41],[1765,10,1582,43,"expirationTime"],[1765,24,1582,57],[1765,27,1582,62,"object"],[1765,33,1582,68],[1765,34,1582,43,"expirationTime"],[1765,48,1582,57],[1766,8,1583,8],[1766,12,1583,14,"manager"],[1766,19,1583,21],[1766,22,1583,24],[1766,26,1583,28,"StsTokenManager"],[1766,41,1583,43],[1766,42,1583,44],[1766,43,1583,45],[1767,8,1584,8],[1767,12,1584,12,"refreshToken"],[1767,24,1584,24],[1767,26,1584,26],[1768,10,1585,12,"_assert"],[1768,17,1585,19],[1768,18,1585,20],[1768,25,1585,27,"refreshToken"],[1768,37,1585,39],[1768,42,1585,44],[1768,50,1585,52],[1768,52,1585,54],[1768,68,1585,70],[1768,69,1585,71],[1768,105,1585,107],[1769,12,1586,16,"appName"],[1770,10,1587,12],[1770,11,1587,13],[1770,12,1587,14],[1771,10,1588,12,"manager"],[1771,17,1588,19],[1771,18,1588,20,"refreshToken"],[1771,30,1588,32],[1771,33,1588,35,"refreshToken"],[1771,45,1588,47],[1772,8,1589,8],[1773,8,1590,8],[1773,12,1590,12,"accessToken"],[1773,23,1590,23],[1773,25,1590,25],[1774,10,1591,12,"_assert"],[1774,17,1591,19],[1774,18,1591,20],[1774,25,1591,27,"accessToken"],[1774,36,1591,38],[1774,41,1591,43],[1774,49,1591,51],[1774,51,1591,53],[1774,67,1591,69],[1774,68,1591,70],[1774,104,1591,106],[1775,12,1592,16,"appName"],[1776,10,1593,12],[1776,11,1593,13],[1776,12,1593,14],[1777,10,1594,12,"manager"],[1777,17,1594,19],[1777,18,1594,20,"accessToken"],[1777,29,1594,31],[1777,32,1594,34,"accessToken"],[1777,43,1594,45],[1778,8,1595,8],[1779,8,1596,8],[1779,12,1596,12,"expirationTime"],[1779,26,1596,26],[1779,28,1596,28],[1780,10,1597,12,"_assert"],[1780,17,1597,19],[1780,18,1597,20],[1780,25,1597,27,"expirationTime"],[1780,39,1597,41],[1780,44,1597,46],[1780,52,1597,54],[1780,54,1597,56],[1780,70,1597,72],[1780,71,1597,73],[1780,107,1597,109],[1781,12,1598,16,"appName"],[1782,10,1599,12],[1782,11,1599,13],[1782,12,1599,14],[1783,10,1600,12,"manager"],[1783,17,1600,19],[1783,18,1600,20,"expirationTime"],[1783,32,1600,34],[1783,35,1600,37,"expirationTime"],[1783,49,1600,51],[1784,8,1601,8],[1785,8,1602,8],[1785,15,1602,15,"manager"],[1785,22,1602,22],[1786,6,1603,4],[1787,4,1603,5],[1788,2,1603,5],[1789,2,1624,0],[1790,0,1625,0],[1791,0,1626,0],[1792,0,1627,0],[1793,0,1628,0],[1794,0,1629,0],[1795,0,1630,0],[1796,0,1631,0],[1797,0,1632,0],[1798,0,1633,0],[1799,0,1634,0],[1800,0,1635,0],[1801,0,1636,0],[1802,0,1637,0],[1803,0,1638,0],[1804,0,1639,0],[1805,2,1640,0],[1805,11,1640,9,"assertStringOrUndefined"],[1805,34,1640,32,"assertStringOrUndefined"],[1805,35,1640,33,"assertion"],[1805,44,1640,42],[1805,46,1640,44,"appName"],[1805,53,1640,51],[1805,55,1640,53],[1806,4,1641,4,"_assert"],[1806,11,1641,11],[1806,12,1641,12],[1806,19,1641,19,"assertion"],[1806,28,1641,28],[1806,33,1641,33],[1806,41,1641,41],[1806,45,1641,45],[1806,52,1641,52,"assertion"],[1806,61,1641,61],[1806,66,1641,66],[1806,77,1641,77],[1806,79,1641,79],[1806,95,1641,95],[1806,96,1641,96],[1806,132,1641,132],[1807,6,1641,134,"appName"],[1808,4,1641,142],[1808,5,1641,143],[1808,6,1641,144],[1809,2,1642,0],[1810,2,1642,1],[1810,6,1643,6,"UserImpl"],[1810,14,1643,14],[1811,4,1644,4],[1811,13,1644,4,"UserImpl"],[1811,22,1644,4,"_ref4"],[1811,27,1644,4],[1811,29,1644,56],[1812,6,1644,56],[1812,10,1644,18,"uid"],[1812,13,1644,21],[1812,16,1644,21,"_ref4"],[1812,21,1644,21],[1812,22,1644,18,"uid"],[1812,25,1644,21],[1813,8,1644,23,"auth"],[1813,12,1644,27],[1813,15,1644,27,"_ref4"],[1813,20,1644,27],[1813,21,1644,23,"auth"],[1813,25,1644,27],[1814,8,1644,29,"stsTokenManager"],[1814,23,1644,44],[1814,26,1644,44,"_ref4"],[1814,31,1644,44],[1814,32,1644,29,"stsTokenManager"],[1814,47,1644,44],[1815,8,1644,49,"opt"],[1815,11,1644,52],[1815,14,1644,52,"_objectWithoutProperties"],[1815,38,1644,52],[1815,39,1644,52,"_ref4"],[1815,44,1644,52],[1815,46,1644,52,"_excluded2"],[1815,56,1644,52],[1816,6,1644,52,"_classCallCheck"],[1816,21,1644,52],[1816,28,1644,52,"UserImpl"],[1816,36,1644,52],[1817,6,1645,8],[1818,6,1646,8],[1818,10,1646,12],[1818,11,1646,13,"providerId"],[1818,21,1646,23],[1818,24,1646,26],[1818,34,1646,36],[1818,35,1646,37],[1819,6,1647,8],[1819,10,1647,12],[1819,11,1647,13,"proactiveRefresh"],[1819,27,1647,29],[1819,30,1647,32],[1819,34,1647,36,"ProactiveRefresh"],[1819,50,1647,52],[1819,51,1647,53],[1819,55,1647,57],[1819,56,1647,58],[1820,6,1648,8],[1820,10,1648,12],[1820,11,1648,13,"reloadUserInfo"],[1820,25,1648,27],[1820,28,1648,30],[1820,32,1648,34],[1821,6,1649,8],[1821,10,1649,12],[1821,11,1649,13,"reloadListener"],[1821,25,1649,27],[1821,28,1649,30],[1821,32,1649,34],[1822,6,1650,8],[1822,10,1650,12],[1822,11,1650,13,"uid"],[1822,14,1650,16],[1822,17,1650,19,"uid"],[1822,20,1650,22],[1823,6,1651,8],[1823,10,1651,12],[1823,11,1651,13,"auth"],[1823,15,1651,17],[1823,18,1651,20,"auth"],[1823,22,1651,24],[1824,6,1652,8],[1824,10,1652,12],[1824,11,1652,13,"stsTokenManager"],[1824,26,1652,28],[1824,29,1652,31,"stsTokenManager"],[1824,44,1652,46],[1825,6,1653,8],[1825,10,1653,12],[1825,11,1653,13,"accessToken"],[1825,22,1653,24],[1825,25,1653,27,"stsTokenManager"],[1825,40,1653,42],[1825,41,1653,43,"accessToken"],[1825,52,1653,54],[1826,6,1654,8],[1826,10,1654,12],[1826,11,1654,13,"displayName"],[1826,22,1654,24],[1826,25,1654,27,"opt"],[1826,28,1654,30],[1826,29,1654,31,"displayName"],[1826,40,1654,42],[1826,44,1654,46],[1826,48,1654,50],[1827,6,1655,8],[1827,10,1655,12],[1827,11,1655,13,"email"],[1827,16,1655,18],[1827,19,1655,21,"opt"],[1827,22,1655,24],[1827,23,1655,25,"email"],[1827,28,1655,30],[1827,32,1655,34],[1827,36,1655,38],[1828,6,1656,8],[1828,10,1656,12],[1828,11,1656,13,"emailVerified"],[1828,24,1656,26],[1828,27,1656,29,"opt"],[1828,30,1656,32],[1828,31,1656,33,"emailVerified"],[1828,44,1656,46],[1828,48,1656,50],[1828,53,1656,55],[1829,6,1657,8],[1829,10,1657,12],[1829,11,1657,13,"phoneNumber"],[1829,22,1657,24],[1829,25,1657,27,"opt"],[1829,28,1657,30],[1829,29,1657,31,"phoneNumber"],[1829,40,1657,42],[1829,44,1657,46],[1829,48,1657,50],[1830,6,1658,8],[1830,10,1658,12],[1830,11,1658,13,"photoURL"],[1830,19,1658,21],[1830,22,1658,24,"opt"],[1830,25,1658,27],[1830,26,1658,28,"photoURL"],[1830,34,1658,36],[1830,38,1658,40],[1830,42,1658,44],[1831,6,1659,8],[1831,10,1659,12],[1831,11,1659,13,"isAnonymous"],[1831,22,1659,24],[1831,25,1659,27,"opt"],[1831,28,1659,30],[1831,29,1659,31,"isAnonymous"],[1831,40,1659,42],[1831,44,1659,46],[1831,49,1659,51],[1832,6,1660,8],[1832,10,1660,12],[1832,11,1660,13,"tenantId"],[1832,19,1660,21],[1832,22,1660,24,"opt"],[1832,25,1660,27],[1832,26,1660,28,"tenantId"],[1832,34,1660,36],[1832,38,1660,40],[1832,42,1660,44],[1833,6,1661,8],[1833,10,1661,12],[1833,11,1661,13,"providerData"],[1833,23,1661,25],[1833,26,1661,28,"opt"],[1833,29,1661,31],[1833,30,1661,32,"providerData"],[1833,42,1661,44],[1833,45,1661,47],[1833,46,1661,48],[1833,49,1661,51,"opt"],[1833,52,1661,54],[1833,53,1661,55,"providerData"],[1833,65,1661,67],[1833,66,1661,68],[1833,69,1661,71],[1833,71,1661,73],[1834,6,1662,8],[1834,10,1662,12],[1834,11,1662,13,"metadata"],[1834,19,1662,21],[1834,22,1662,24],[1834,26,1662,28,"UserMetadata"],[1834,38,1662,40],[1834,39,1662,41,"opt"],[1834,42,1662,44],[1834,43,1662,45,"createdAt"],[1834,52,1662,54],[1834,56,1662,58,"undefined"],[1834,65,1662,67],[1834,67,1662,69,"opt"],[1834,70,1662,72],[1834,71,1662,73,"lastLoginAt"],[1834,82,1662,84],[1834,86,1662,88,"undefined"],[1834,95,1662,97],[1834,96,1662,98],[1835,4,1663,4],[1836,4,1663,5],[1836,11,1663,5,"_createClass"],[1836,23,1663,5],[1836,24,1663,5,"UserImpl"],[1836,32,1663,5],[1837,6,1663,5,"key"],[1837,9,1663,5],[1838,6,1663,5,"value"],[1838,11,1663,5],[1839,8,1663,5],[1839,12,1663,5,"_getIdToken"],[1839,23,1663,5],[1839,26,1663,5,"_asyncToGenerator"],[1839,43,1663,5],[1839,44,1664,4],[1839,55,1664,21,"forceRefresh"],[1839,67,1664,33],[1839,69,1664,35],[1840,10,1665,8],[1840,14,1665,14,"accessToken"],[1840,25,1665,25],[1840,34,1665,34,"_logoutIfInvalidated"],[1840,54,1665,54],[1840,55,1665,55],[1840,59,1665,59],[1840,61,1665,61],[1840,65,1665,65],[1840,66,1665,66,"stsTokenManager"],[1840,81,1665,81],[1840,82,1665,82,"getToken"],[1840,90,1665,90],[1840,91,1665,91],[1840,95,1665,95],[1840,96,1665,96,"auth"],[1840,100,1665,100],[1840,102,1665,102,"forceRefresh"],[1840,114,1665,114],[1840,115,1665,115],[1840,116,1665,116],[1841,10,1666,8,"_assert"],[1841,17,1666,15],[1841,18,1666,16,"accessToken"],[1841,29,1666,27],[1841,31,1666,29],[1841,35,1666,33],[1841,36,1666,34,"auth"],[1841,40,1666,38],[1841,42,1666,40],[1841,58,1666,56],[1841,59,1666,57],[1841,93,1666,91],[1841,94,1666,92],[1842,10,1667,8],[1842,14,1667,12],[1842,18,1667,16],[1842,19,1667,17,"accessToken"],[1842,30,1667,28],[1842,35,1667,33,"accessToken"],[1842,46,1667,44],[1842,48,1667,46],[1843,12,1668,12],[1843,16,1668,16],[1843,17,1668,17,"accessToken"],[1843,28,1668,28],[1843,31,1668,31,"accessToken"],[1843,42,1668,42],[1844,12,1669,12],[1844,18,1669,18],[1844,22,1669,22],[1844,23,1669,23,"auth"],[1844,27,1669,27],[1844,28,1669,28,"_persistUserIfCurrent"],[1844,49,1669,49],[1844,50,1669,50],[1844,54,1669,54],[1844,55,1669,55],[1845,12,1670,12],[1845,16,1670,16],[1845,17,1670,17,"auth"],[1845,21,1670,21],[1845,22,1670,22,"_notifyListenersIfCurrent"],[1845,47,1670,47],[1845,48,1670,48],[1845,52,1670,52],[1845,53,1670,53],[1846,10,1671,8],[1847,10,1672,8],[1847,17,1672,15,"accessToken"],[1847,28,1672,26],[1848,8,1673,4],[1848,9,1673,5],[1849,8,1673,5],[1849,17,1664,10,"getIdToken"],[1849,27,1664,20,"getIdToken"],[1849,28,1664,20,"_x35"],[1849,32,1664,20],[1850,10,1664,20],[1850,17,1664,20,"_getIdToken"],[1850,28,1664,20],[1850,29,1664,20,"apply"],[1850,34,1664,20],[1850,41,1664,20,"arguments"],[1850,50,1664,20],[1851,8,1664,20],[1852,8,1664,20],[1852,15,1664,10,"getIdToken"],[1852,25,1664,20],[1853,6,1664,20],[1854,4,1664,20],[1855,6,1664,20,"key"],[1855,9,1664,20],[1856,6,1664,20,"value"],[1856,11,1664,20],[1856,13,1674,4],[1856,22,1674,4,"getIdTokenResult"],[1856,38,1674,20,"getIdTokenResult"],[1856,39,1674,21,"forceRefresh"],[1856,51,1674,33],[1856,53,1674,35],[1857,8,1675,8],[1857,15,1675,15,"getIdTokenResult"],[1857,33,1675,31],[1857,34,1675,32],[1857,38,1675,36],[1857,40,1675,38,"forceRefresh"],[1857,52,1675,50],[1857,53,1675,51],[1858,6,1676,4],[1859,4,1676,5],[1860,6,1676,5,"key"],[1860,9,1676,5],[1861,6,1676,5,"value"],[1861,11,1676,5],[1861,13,1677,4],[1861,22,1677,4,"reload"],[1861,28,1677,10,"reload"],[1861,29,1677,10],[1861,31,1677,13],[1862,8,1678,8],[1862,15,1678,15,"reload"],[1862,23,1678,21],[1862,24,1678,22],[1862,28,1678,26],[1862,29,1678,27],[1863,6,1679,4],[1864,4,1679,5],[1865,6,1679,5,"key"],[1865,9,1679,5],[1866,6,1679,5,"value"],[1866,11,1679,5],[1866,13,1680,4],[1866,22,1680,4,"_assign"],[1866,29,1680,11,"_assign"],[1866,30,1680,12,"user"],[1866,34,1680,16],[1866,36,1680,18],[1867,8,1681,8],[1867,12,1681,12],[1867,16,1681,16],[1867,21,1681,21,"user"],[1867,25,1681,25],[1867,27,1681,27],[1868,10,1682,12],[1869,8,1683,8],[1870,8,1684,8,"_assert"],[1870,15,1684,15],[1870,16,1684,16],[1870,20,1684,20],[1870,21,1684,21,"uid"],[1870,24,1684,24],[1870,29,1684,29,"user"],[1870,33,1684,33],[1870,34,1684,34,"uid"],[1870,37,1684,37],[1870,39,1684,39],[1870,43,1684,43],[1870,44,1684,44,"auth"],[1870,48,1684,48],[1870,50,1684,50],[1870,66,1684,66],[1870,67,1684,67],[1870,101,1684,101],[1870,102,1684,102],[1871,8,1685,8],[1871,12,1685,12],[1871,13,1685,13,"displayName"],[1871,24,1685,24],[1871,27,1685,27,"user"],[1871,31,1685,31],[1871,32,1685,32,"displayName"],[1871,43,1685,43],[1872,8,1686,8],[1872,12,1686,12],[1872,13,1686,13,"photoURL"],[1872,21,1686,21],[1872,24,1686,24,"user"],[1872,28,1686,28],[1872,29,1686,29,"photoURL"],[1872,37,1686,37],[1873,8,1687,8],[1873,12,1687,12],[1873,13,1687,13,"email"],[1873,18,1687,18],[1873,21,1687,21,"user"],[1873,25,1687,25],[1873,26,1687,26,"email"],[1873,31,1687,31],[1874,8,1688,8],[1874,12,1688,12],[1874,13,1688,13,"emailVerified"],[1874,26,1688,26],[1874,29,1688,29,"user"],[1874,33,1688,33],[1874,34,1688,34,"emailVerified"],[1874,47,1688,47],[1875,8,1689,8],[1875,12,1689,12],[1875,13,1689,13,"phoneNumber"],[1875,24,1689,24],[1875,27,1689,27,"user"],[1875,31,1689,31],[1875,32,1689,32,"phoneNumber"],[1875,43,1689,43],[1876,8,1690,8],[1876,12,1690,12],[1876,13,1690,13,"isAnonymous"],[1876,24,1690,24],[1876,27,1690,27,"user"],[1876,31,1690,31],[1876,32,1690,32,"isAnonymous"],[1876,43,1690,43],[1877,8,1691,8],[1877,12,1691,12],[1877,13,1691,13,"tenantId"],[1877,21,1691,21],[1877,24,1691,24,"user"],[1877,28,1691,28],[1877,29,1691,29,"tenantId"],[1877,37,1691,37],[1878,8,1692,8],[1878,12,1692,12],[1878,13,1692,13,"providerData"],[1878,25,1692,25],[1878,28,1692,28,"user"],[1878,32,1692,32],[1878,33,1692,33,"providerData"],[1878,45,1692,45],[1878,46,1692,46,"map"],[1878,49,1692,49],[1878,50,1692,50,"userInfo"],[1878,58,1692,58],[1878,63,1692,63],[1879,10,1692,65],[1879,13,1692,68,"userInfo"],[1880,8,1692,77],[1880,9,1692,78],[1880,10,1692,79],[1880,11,1692,80],[1881,8,1693,8],[1881,12,1693,12],[1881,13,1693,13,"metadata"],[1881,21,1693,21],[1881,22,1693,22,"_copy"],[1881,27,1693,27],[1881,28,1693,28,"user"],[1881,32,1693,32],[1881,33,1693,33,"metadata"],[1881,41,1693,41],[1881,42,1693,42],[1882,8,1694,8],[1882,12,1694,12],[1882,13,1694,13,"stsTokenManager"],[1882,28,1694,28],[1882,29,1694,29,"_assign"],[1882,36,1694,36],[1882,37,1694,37,"user"],[1882,41,1694,41],[1882,42,1694,42,"stsTokenManager"],[1882,57,1694,57],[1882,58,1694,58],[1883,6,1695,4],[1884,4,1695,5],[1885,6,1695,5,"key"],[1885,9,1695,5],[1886,6,1695,5,"value"],[1886,11,1695,5],[1886,13,1696,4],[1886,22,1696,4,"_clone"],[1886,28,1696,10,"_clone"],[1886,29,1696,11,"auth"],[1886,33,1696,15],[1886,35,1696,17],[1887,8,1697,8],[1887,12,1697,14,"newUser"],[1887,19,1697,21],[1887,22,1697,24],[1887,26,1697,28,"UserImpl"],[1887,34,1697,36],[1887,35,1697,37],[1888,10,1698,12],[1888,13,1698,15],[1888,17,1698,19],[1889,10,1699,12,"auth"],[1889,14,1699,16],[1890,10,1700,12,"stsTokenManager"],[1890,25,1700,27],[1890,27,1700,29],[1890,31,1700,33],[1890,32,1700,34,"stsTokenManager"],[1890,47,1700,49],[1890,48,1700,50,"_clone"],[1890,54,1700,56],[1890,55,1700,57],[1891,8,1701,8],[1891,9,1701,9],[1891,10,1701,10],[1892,8,1702,8,"newUser"],[1892,15,1702,15],[1892,16,1702,16,"metadata"],[1892,24,1702,24],[1892,25,1702,25,"_copy"],[1892,30,1702,30],[1892,31,1702,31],[1892,35,1702,35],[1892,36,1702,36,"metadata"],[1892,44,1702,44],[1892,45,1702,45],[1893,8,1703,8],[1893,15,1703,15,"newUser"],[1893,22,1703,22],[1894,6,1704,4],[1895,4,1704,5],[1896,6,1704,5,"key"],[1896,9,1704,5],[1897,6,1704,5,"value"],[1897,11,1704,5],[1897,13,1705,4],[1897,22,1705,4,"_onReload"],[1897,31,1705,13,"_onReload"],[1897,32,1705,14,"callback"],[1897,40,1705,22],[1897,42,1705,24],[1898,8,1706,8],[1899,8,1707,8,"_assert"],[1899,15,1707,15],[1899,16,1707,16],[1899,17,1707,17],[1899,21,1707,21],[1899,22,1707,22,"reloadListener"],[1899,36,1707,36],[1899,38,1707,38],[1899,42,1707,42],[1899,43,1707,43,"auth"],[1899,47,1707,47],[1899,49,1707,49],[1899,65,1707,65],[1899,66,1707,66],[1899,100,1707,100],[1899,101,1707,101],[1900,8,1708,8],[1900,12,1708,12],[1900,13,1708,13,"reloadListener"],[1900,27,1708,27],[1900,30,1708,30,"callback"],[1900,38,1708,38],[1901,8,1709,8],[1901,12,1709,12],[1901,16,1709,16],[1901,17,1709,17,"reloadUserInfo"],[1901,31,1709,31],[1901,33,1709,33],[1902,10,1710,12],[1902,14,1710,16],[1902,15,1710,17,"_notifyReloadListener"],[1902,36,1710,38],[1902,37,1710,39],[1902,41,1710,43],[1902,42,1710,44,"reloadUserInfo"],[1902,56,1710,58],[1902,57,1710,59],[1903,10,1711,12],[1903,14,1711,16],[1903,15,1711,17,"reloadUserInfo"],[1903,29,1711,31],[1903,32,1711,34],[1903,36,1711,38],[1904,8,1712,8],[1905,6,1713,4],[1906,4,1713,5],[1907,6,1713,5,"key"],[1907,9,1713,5],[1908,6,1713,5,"value"],[1908,11,1713,5],[1908,13,1714,4],[1908,22,1714,4,"_notifyReloadListener"],[1908,43,1714,25,"_notifyReloadListener"],[1908,44,1714,26,"userInfo"],[1908,52,1714,34],[1908,54,1714,36],[1909,8,1715,8],[1909,12,1715,12],[1909,16,1715,16],[1909,17,1715,17,"reloadListener"],[1909,31,1715,31],[1909,33,1715,33],[1910,10,1716,12],[1910,14,1716,16],[1910,15,1716,17,"reloadListener"],[1910,29,1716,31],[1910,30,1716,32,"userInfo"],[1910,38,1716,40],[1910,39,1716,41],[1911,8,1717,8],[1911,9,1717,9],[1911,15,1718,13],[1912,10,1719,12],[1913,10,1720,12],[1913,14,1720,16],[1913,15,1720,17,"reloadUserInfo"],[1913,29,1720,31],[1913,32,1720,34,"userInfo"],[1913,40,1720,42],[1914,8,1721,8],[1915,6,1722,4],[1916,4,1722,5],[1917,6,1722,5,"key"],[1917,9,1722,5],[1918,6,1722,5,"value"],[1918,11,1722,5],[1918,13,1723,4],[1918,22,1723,4,"_startProactiveRefresh"],[1918,44,1723,26,"_startProactiveRefresh"],[1918,45,1723,26],[1918,47,1723,29],[1919,8,1724,8],[1919,12,1724,12],[1919,13,1724,13,"proactiveRefresh"],[1919,29,1724,29],[1919,30,1724,30,"_start"],[1919,36,1724,36],[1919,37,1724,37],[1919,38,1724,38],[1920,6,1725,4],[1921,4,1725,5],[1922,6,1725,5,"key"],[1922,9,1725,5],[1923,6,1725,5,"value"],[1923,11,1725,5],[1923,13,1726,4],[1923,22,1726,4,"_stopProactiveRefresh"],[1923,43,1726,25,"_stopProactiveRefresh"],[1923,44,1726,25],[1923,46,1726,28],[1924,8,1727,8],[1924,12,1727,12],[1924,13,1727,13,"proactiveRefresh"],[1924,29,1727,29],[1924,30,1727,30,"_stop"],[1924,35,1727,35],[1924,36,1727,36],[1924,37,1727,37],[1925,6,1728,4],[1926,4,1728,5],[1927,6,1728,5,"key"],[1927,9,1728,5],[1928,6,1728,5,"value"],[1928,11,1728,5],[1929,8,1728,5],[1929,12,1728,5,"_updateTokensIfNecessary2"],[1929,37,1728,5],[1929,40,1728,5,"_asyncToGenerator"],[1929,57,1728,5],[1929,58,1729,4],[1929,69,1729,35,"response"],[1929,77,1729,43],[1929,79,1729,61],[1930,10,1729,61],[1930,14,1729,45,"reload"],[1930,20,1729,51],[1930,23,1729,51,"arguments"],[1930,32,1729,51],[1930,33,1729,51,"length"],[1930,39,1729,51],[1930,47,1729,51,"arguments"],[1930,56,1729,51],[1930,64,1729,51,"undefined"],[1930,73,1729,51],[1930,76,1729,51,"arguments"],[1930,85,1729,51],[1930,91,1729,54],[1930,96,1729,59],[1931,10,1730,8],[1931,14,1730,12,"tokensRefreshed"],[1931,29,1730,27],[1931,32,1730,30],[1931,37,1730,35],[1932,10,1731,8],[1932,14,1731,12,"response"],[1932,22,1731,20],[1932,23,1731,21,"idToken"],[1932,30,1731,28],[1932,34,1732,12,"response"],[1932,42,1732,20],[1932,43,1732,21,"idToken"],[1932,50,1732,28],[1932,55,1732,33],[1932,59,1732,37],[1932,60,1732,38,"stsTokenManager"],[1932,75,1732,53],[1932,76,1732,54,"accessToken"],[1932,87,1732,65],[1932,89,1732,67],[1933,12,1733,12],[1933,16,1733,16],[1933,17,1733,17,"stsTokenManager"],[1933,32,1733,32],[1933,33,1733,33,"updateFromServerResponse"],[1933,57,1733,57],[1933,58,1733,58,"response"],[1933,66,1733,66],[1933,67,1733,67],[1934,12,1734,12,"tokensRefreshed"],[1934,27,1734,27],[1934,30,1734,30],[1934,34,1734,34],[1935,10,1735,8],[1936,10,1736,8],[1936,14,1736,12,"reload"],[1936,20,1736,18],[1936,22,1736,20],[1937,12,1737,12],[1937,18,1737,18,"_reloadWithoutSaving"],[1937,38,1737,38],[1937,39,1737,39],[1937,43,1737,43],[1937,44,1737,44],[1938,10,1738,8],[1939,10,1739,8],[1939,16,1739,14],[1939,20,1739,18],[1939,21,1739,19,"auth"],[1939,25,1739,23],[1939,26,1739,24,"_persistUserIfCurrent"],[1939,47,1739,45],[1939,48,1739,46],[1939,52,1739,50],[1939,53,1739,51],[1940,10,1740,8],[1940,14,1740,12,"tokensRefreshed"],[1940,29,1740,27],[1940,31,1740,29],[1941,12,1741,12],[1941,16,1741,16],[1941,17,1741,17,"auth"],[1941,21,1741,21],[1941,22,1741,22,"_notifyListenersIfCurrent"],[1941,47,1741,47],[1941,48,1741,48],[1941,52,1741,52],[1941,53,1741,53],[1942,10,1742,8],[1943,8,1743,4],[1943,9,1743,5],[1944,8,1743,5],[1944,17,1729,10,"_updateTokensIfNecessary"],[1944,41,1729,34,"_updateTokensIfNecessary"],[1944,42,1729,34,"_x36"],[1944,46,1729,34],[1945,10,1729,34],[1945,17,1729,34,"_updateTokensIfNecessary2"],[1945,42,1729,34],[1945,43,1729,34,"apply"],[1945,48,1729,34],[1945,55,1729,34,"arguments"],[1945,64,1729,34],[1946,8,1729,34],[1947,8,1729,34],[1947,15,1729,10,"_updateTokensIfNecessary"],[1947,39,1729,34],[1948,6,1729,34],[1949,4,1729,34],[1950,6,1729,34,"key"],[1950,9,1729,34],[1951,6,1729,34,"value"],[1951,11,1729,34],[1952,8,1729,34],[1952,12,1729,34,"_delete2"],[1952,20,1729,34],[1952,23,1729,34,"_asyncToGenerator"],[1952,40,1729,34],[1952,41,1744,4],[1952,54,1744,19],[1953,10,1745,8],[1953,14,1745,12,"app"],[1953,17,1745,15],[1953,18,1745,16,"_isFirebaseServerApp"],[1953,38,1745,36],[1953,39,1745,37],[1953,43,1745,41],[1953,44,1745,42,"auth"],[1953,48,1745,46],[1953,49,1745,47,"app"],[1953,52,1745,50],[1953,53,1745,51],[1953,55,1745,53],[1954,12,1746,12],[1954,19,1746,19,"Promise"],[1954,26,1746,26],[1954,27,1746,27,"reject"],[1954,33,1746,33],[1954,34,1746,34,"_serverAppCurrentUserOperationNotSupportedError"],[1954,81,1746,81],[1954,82,1746,82],[1954,86,1746,86],[1954,87,1746,87,"auth"],[1954,91,1746,91],[1954,92,1746,92],[1954,93,1746,93],[1955,10,1747,8],[1956,10,1748,8],[1956,14,1748,14,"idToken"],[1956,21,1748,21],[1956,30,1748,30],[1956,34,1748,34],[1956,35,1748,35,"getIdToken"],[1956,45,1748,45],[1956,46,1748,46],[1956,47,1748,47],[1957,10,1749,8],[1957,16,1749,14,"_logoutIfInvalidated"],[1957,36,1749,34],[1957,37,1749,35],[1957,41,1749,39],[1957,43,1749,41,"deleteAccount"],[1957,56,1749,54],[1957,57,1749,55],[1957,61,1749,59],[1957,62,1749,60,"auth"],[1957,66,1749,64],[1957,68,1749,66],[1958,12,1749,68,"idToken"],[1959,10,1749,76],[1959,11,1749,77],[1959,12,1749,78],[1959,13,1749,79],[1960,10,1750,8],[1960,14,1750,12],[1960,15,1750,13,"stsTokenManager"],[1960,30,1750,28],[1960,31,1750,29,"clearRefreshToken"],[1960,48,1750,46],[1960,49,1750,47],[1960,50,1750,48],[1961,10,1751,8],[1962,10,1752,8],[1963,10,1753,8],[1963,17,1753,15],[1963,21,1753,19],[1963,22,1753,20,"auth"],[1963,26,1753,24],[1963,27,1753,25,"signOut"],[1963,34,1753,32],[1963,35,1753,33],[1963,36,1753,34],[1964,8,1754,4],[1964,9,1754,5],[1965,8,1754,5],[1965,17,1744,10,"delete"],[1965,24,1744,16,"delete"],[1965,25,1744,16],[1966,10,1744,16],[1966,17,1744,16,"_delete2"],[1966,25,1744,16],[1966,26,1744,16,"apply"],[1966,31,1744,16],[1966,38,1744,16,"arguments"],[1966,47,1744,16],[1967,8,1744,16],[1968,8,1744,16],[1968,15,1744,10,"delete"],[1968,22,1744,16],[1969,6,1744,16],[1970,4,1744,16],[1971,6,1744,16,"key"],[1971,9,1744,16],[1972,6,1744,16,"value"],[1972,11,1744,16],[1972,13,1755,4],[1972,22,1755,4,"toJSON"],[1972,28,1755,10,"toJSON"],[1972,29,1755,10],[1972,31,1755,13],[1973,8,1756,8],[1973,15,1756,15],[1974,10,1757,12,"uid"],[1974,13,1757,15],[1974,15,1757,17],[1974,19,1757,21],[1974,20,1757,22,"uid"],[1974,23,1757,25],[1975,10,1758,12,"email"],[1975,15,1758,17],[1975,17,1758,19],[1975,21,1758,23],[1975,22,1758,24,"email"],[1975,27,1758,29],[1975,31,1758,33,"undefined"],[1975,40,1758,42],[1976,10,1759,12,"emailVerified"],[1976,23,1759,25],[1976,25,1759,27],[1976,29,1759,31],[1976,30,1759,32,"emailVerified"],[1976,43,1759,45],[1977,10,1760,12,"displayName"],[1977,21,1760,23],[1977,23,1760,25],[1977,27,1760,29],[1977,28,1760,30,"displayName"],[1977,39,1760,41],[1977,43,1760,45,"undefined"],[1977,52,1760,54],[1978,10,1761,12,"isAnonymous"],[1978,21,1761,23],[1978,23,1761,25],[1978,27,1761,29],[1978,28,1761,30,"isAnonymous"],[1978,39,1761,41],[1979,10,1762,12,"photoURL"],[1979,18,1762,20],[1979,20,1762,22],[1979,24,1762,26],[1979,25,1762,27,"photoURL"],[1979,33,1762,35],[1979,37,1762,39,"undefined"],[1979,46,1762,48],[1980,10,1763,12,"phoneNumber"],[1980,21,1763,23],[1980,23,1763,25],[1980,27,1763,29],[1980,28,1763,30,"phoneNumber"],[1980,39,1763,41],[1980,43,1763,45,"undefined"],[1980,52,1763,54],[1981,10,1764,12,"tenantId"],[1981,18,1764,20],[1981,20,1764,22],[1981,24,1764,26],[1981,25,1764,27,"tenantId"],[1981,33,1764,35],[1981,37,1764,39,"undefined"],[1981,46,1764,48],[1982,10,1765,12,"providerData"],[1982,22,1765,24],[1982,24,1765,26],[1982,28,1765,30],[1982,29,1765,31,"providerData"],[1982,41,1765,43],[1982,42,1765,44,"map"],[1982,45,1765,47],[1982,46,1765,48,"userInfo"],[1982,54,1765,56],[1982,59,1765,61],[1983,12,1765,63],[1983,15,1765,66,"userInfo"],[1984,10,1765,75],[1984,11,1765,76],[1984,12,1765,77],[1984,13,1765,78],[1985,10,1766,12,"stsTokenManager"],[1985,25,1766,27],[1985,27,1766,29],[1985,31,1766,33],[1985,32,1766,34,"stsTokenManager"],[1985,47,1766,49],[1985,48,1766,50,"toJSON"],[1985,54,1766,56],[1985,55,1766,57],[1985,56,1766,58],[1986,10,1767,12],[1987,10,1768,12],[1988,10,1769,12,"_redirectEventId"],[1988,26,1769,28],[1988,28,1769,30],[1988,32,1769,34],[1988,33,1769,35,"_redirectEventId"],[1988,49,1769,51],[1989,10,1770,12],[1989,13,1770,15],[1989,17,1770,19],[1989,18,1770,20,"metadata"],[1989,26,1770,28],[1989,27,1770,29,"toJSON"],[1989,33,1770,35],[1989,34,1770,36],[1989,35,1770,37],[1990,10,1771,12],[1991,10,1772,12,"apiKey"],[1991,16,1772,18],[1991,18,1772,20],[1991,22,1772,24],[1991,23,1772,25,"auth"],[1991,27,1772,29],[1991,28,1772,30,"config"],[1991,34,1772,36],[1991,35,1772,37,"apiKey"],[1991,41,1772,43],[1992,10,1773,12,"appName"],[1992,17,1773,19],[1992,19,1773,21],[1992,23,1773,25],[1992,24,1773,26,"auth"],[1992,28,1773,30],[1992,29,1773,31,"name"],[1993,10,1774,12],[1994,10,1775,12],[1995,8,1776,8],[1995,9,1776,9],[1996,6,1777,4],[1997,4,1777,5],[1998,6,1777,5,"key"],[1998,9,1777,5],[1999,6,1777,5,"get"],[1999,9,1777,5],[1999,11,1778,4],[1999,20,1778,4,"get"],[1999,21,1778,4],[1999,23,1778,23],[2000,8,1779,8],[2000,15,1779,15],[2000,19,1779,19],[2000,20,1779,20,"stsTokenManager"],[2000,35,1779,35],[2000,36,1779,36,"refreshToken"],[2000,48,1779,48],[2000,52,1779,52],[2000,54,1779,54],[2001,6,1780,4],[2002,4,1780,5],[2003,6,1780,5,"key"],[2003,9,1780,5],[2004,6,1780,5,"value"],[2004,11,1780,5],[2004,13,1781,4],[2004,22,1781,11,"_fromJSON"],[2004,31,1781,20,"_fromJSON"],[2004,32,1781,21,"auth"],[2004,36,1781,25],[2004,38,1781,27,"object"],[2004,44,1781,33],[2004,46,1781,35],[2005,8,1782,8],[2005,12,1782,14,"displayName"],[2005,23,1782,25],[2005,26,1782,28,"object"],[2005,32,1782,34],[2005,33,1782,35,"displayName"],[2005,44,1782,46],[2005,48,1782,50,"undefined"],[2005,57,1782,59],[2006,8,1783,8],[2006,12,1783,14,"email"],[2006,17,1783,19],[2006,20,1783,22,"object"],[2006,26,1783,28],[2006,27,1783,29,"email"],[2006,32,1783,34],[2006,36,1783,38,"undefined"],[2006,45,1783,47],[2007,8,1784,8],[2007,12,1784,14,"phoneNumber"],[2007,23,1784,25],[2007,26,1784,28,"object"],[2007,32,1784,34],[2007,33,1784,35,"phoneNumber"],[2007,44,1784,46],[2007,48,1784,50,"undefined"],[2007,57,1784,59],[2008,8,1785,8],[2008,12,1785,14,"photoURL"],[2008,20,1785,22],[2008,23,1785,25,"object"],[2008,29,1785,31],[2008,30,1785,32,"photoURL"],[2008,38,1785,40],[2008,42,1785,44,"undefined"],[2008,51,1785,53],[2009,8,1786,8],[2009,12,1786,14,"tenantId"],[2009,20,1786,22],[2009,23,1786,25,"object"],[2009,29,1786,31],[2009,30,1786,32,"tenantId"],[2009,38,1786,40],[2009,42,1786,44,"undefined"],[2009,51,1786,53],[2010,8,1787,8],[2010,12,1787,14,"_redirectEventId"],[2010,28,1787,30],[2010,31,1787,33,"object"],[2010,37,1787,39],[2010,38,1787,40,"_redirectEventId"],[2010,54,1787,56],[2010,58,1787,60,"undefined"],[2010,67,1787,69],[2011,8,1788,8],[2011,12,1788,14,"createdAt"],[2011,21,1788,23],[2011,24,1788,26,"object"],[2011,30,1788,32],[2011,31,1788,33,"createdAt"],[2011,40,1788,42],[2011,44,1788,46,"undefined"],[2011,53,1788,55],[2012,8,1789,8],[2012,12,1789,14,"lastLoginAt"],[2012,23,1789,25],[2012,26,1789,28,"object"],[2012,32,1789,34],[2012,33,1789,35,"lastLoginAt"],[2012,44,1789,46],[2012,48,1789,50,"undefined"],[2012,57,1789,59],[2013,8,1790,8],[2013,12,1790,16,"uid"],[2013,15,1790,19],[2013,18,1790,108,"object"],[2013,24,1790,114],[2013,25,1790,16,"uid"],[2013,28,1790,19],[2014,10,1790,21,"emailVerified"],[2014,23,1790,34],[2014,26,1790,108,"object"],[2014,32,1790,114],[2014,33,1790,21,"emailVerified"],[2014,46,1790,34],[2015,10,1790,36,"isAnonymous"],[2015,21,1790,47],[2015,24,1790,108,"object"],[2015,30,1790,114],[2015,31,1790,36,"isAnonymous"],[2015,42,1790,47],[2016,10,1790,49,"providerData"],[2016,22,1790,61],[2016,25,1790,108,"object"],[2016,31,1790,114],[2016,32,1790,49,"providerData"],[2016,44,1790,61],[2017,10,1790,80,"plainObjectTokenManager"],[2017,33,1790,103],[2017,36,1790,108,"object"],[2017,42,1790,114],[2017,43,1790,63,"stsTokenManager"],[2017,58,1790,78],[2018,8,1791,8,"_assert"],[2018,15,1791,15],[2018,16,1791,16,"uid"],[2018,19,1791,19],[2018,23,1791,23,"plainObjectTokenManager"],[2018,46,1791,46],[2018,48,1791,48,"auth"],[2018,52,1791,52],[2018,54,1791,54],[2018,70,1791,70],[2018,71,1791,71],[2018,105,1791,105],[2018,106,1791,106],[2019,8,1792,8],[2019,12,1792,14,"stsTokenManager"],[2019,27,1792,29],[2019,30,1792,32,"StsTokenManager"],[2019,45,1792,47],[2019,46,1792,48,"fromJSON"],[2019,54,1792,56],[2019,55,1792,57],[2019,59,1792,61],[2019,60,1792,62,"name"],[2019,64,1792,66],[2019,66,1792,68,"plainObjectTokenManager"],[2019,89,1792,91],[2019,90,1792,92],[2020,8,1793,8,"_assert"],[2020,15,1793,15],[2020,16,1793,16],[2020,23,1793,23,"uid"],[2020,26,1793,26],[2020,31,1793,31],[2020,39,1793,39],[2020,41,1793,41,"auth"],[2020,45,1793,45],[2020,47,1793,47],[2020,63,1793,63],[2020,64,1793,64],[2020,98,1793,98],[2020,99,1793,99],[2021,8,1794,8,"assertStringOrUndefined"],[2021,31,1794,31],[2021,32,1794,32,"displayName"],[2021,43,1794,43],[2021,45,1794,45,"auth"],[2021,49,1794,49],[2021,50,1794,50,"name"],[2021,54,1794,54],[2021,55,1794,55],[2022,8,1795,8,"assertStringOrUndefined"],[2022,31,1795,31],[2022,32,1795,32,"email"],[2022,37,1795,37],[2022,39,1795,39,"auth"],[2022,43,1795,43],[2022,44,1795,44,"name"],[2022,48,1795,48],[2022,49,1795,49],[2023,8,1796,8,"_assert"],[2023,15,1796,15],[2023,16,1796,16],[2023,23,1796,23,"emailVerified"],[2023,36,1796,36],[2023,41,1796,41],[2023,50,1796,50],[2023,52,1796,52,"auth"],[2023,56,1796,56],[2023,58,1796,58],[2023,74,1796,74],[2023,75,1796,75],[2023,109,1796,109],[2023,110,1796,110],[2024,8,1797,8,"_assert"],[2024,15,1797,15],[2024,16,1797,16],[2024,23,1797,23,"isAnonymous"],[2024,34,1797,34],[2024,39,1797,39],[2024,48,1797,48],[2024,50,1797,50,"auth"],[2024,54,1797,54],[2024,56,1797,56],[2024,72,1797,72],[2024,73,1797,73],[2024,107,1797,107],[2024,108,1797,108],[2025,8,1798,8,"assertStringOrUndefined"],[2025,31,1798,31],[2025,32,1798,32,"phoneNumber"],[2025,43,1798,43],[2025,45,1798,45,"auth"],[2025,49,1798,49],[2025,50,1798,50,"name"],[2025,54,1798,54],[2025,55,1798,55],[2026,8,1799,8,"assertStringOrUndefined"],[2026,31,1799,31],[2026,32,1799,32,"photoURL"],[2026,40,1799,40],[2026,42,1799,42,"auth"],[2026,46,1799,46],[2026,47,1799,47,"name"],[2026,51,1799,51],[2026,52,1799,52],[2027,8,1800,8,"assertStringOrUndefined"],[2027,31,1800,31],[2027,32,1800,32,"tenantId"],[2027,40,1800,40],[2027,42,1800,42,"auth"],[2027,46,1800,46],[2027,47,1800,47,"name"],[2027,51,1800,51],[2027,52,1800,52],[2028,8,1801,8,"assertStringOrUndefined"],[2028,31,1801,31],[2028,32,1801,32,"_redirectEventId"],[2028,48,1801,48],[2028,50,1801,50,"auth"],[2028,54,1801,54],[2028,55,1801,55,"name"],[2028,59,1801,59],[2028,60,1801,60],[2029,8,1802,8,"assertStringOrUndefined"],[2029,31,1802,31],[2029,32,1802,32,"createdAt"],[2029,41,1802,41],[2029,43,1802,43,"auth"],[2029,47,1802,47],[2029,48,1802,48,"name"],[2029,52,1802,52],[2029,53,1802,53],[2030,8,1803,8,"assertStringOrUndefined"],[2030,31,1803,31],[2030,32,1803,32,"lastLoginAt"],[2030,43,1803,43],[2030,45,1803,45,"auth"],[2030,49,1803,49],[2030,50,1803,50,"name"],[2030,54,1803,54],[2030,55,1803,55],[2031,8,1804,8],[2031,12,1804,14,"user"],[2031,16,1804,18],[2031,19,1804,21],[2031,23,1804,25,"UserImpl"],[2031,31,1804,33],[2031,32,1804,34],[2032,10,1805,12,"uid"],[2032,13,1805,15],[2033,10,1806,12,"auth"],[2033,14,1806,16],[2034,10,1807,12,"email"],[2034,15,1807,17],[2035,10,1808,12,"emailVerified"],[2035,23,1808,25],[2036,10,1809,12,"displayName"],[2036,21,1809,23],[2037,10,1810,12,"isAnonymous"],[2037,21,1810,23],[2038,10,1811,12,"photoURL"],[2038,18,1811,20],[2039,10,1812,12,"phoneNumber"],[2039,21,1812,23],[2040,10,1813,12,"tenantId"],[2040,18,1813,20],[2041,10,1814,12,"stsTokenManager"],[2041,25,1814,27],[2042,10,1815,12,"createdAt"],[2042,19,1815,21],[2043,10,1816,12,"lastLoginAt"],[2044,8,1817,8],[2044,9,1817,9],[2044,10,1817,10],[2045,8,1818,8],[2045,12,1818,12,"providerData"],[2045,24,1818,24],[2045,28,1818,28,"Array"],[2045,33,1818,33],[2045,34,1818,34,"isArray"],[2045,41,1818,41],[2045,42,1818,42,"providerData"],[2045,54,1818,54],[2045,55,1818,55],[2045,57,1818,57],[2046,10,1819,12,"user"],[2046,14,1819,16],[2046,15,1819,17,"providerData"],[2046,27,1819,29],[2046,30,1819,32,"providerData"],[2046,42,1819,44],[2046,43,1819,45,"map"],[2046,46,1819,48],[2046,47,1819,49,"userInfo"],[2046,55,1819,57],[2046,60,1819,62],[2047,12,1819,64],[2047,15,1819,67,"userInfo"],[2048,10,1819,76],[2048,11,1819,77],[2048,12,1819,78],[2048,13,1819,79],[2049,8,1820,8],[2050,8,1821,8],[2050,12,1821,12,"_redirectEventId"],[2050,28,1821,28],[2050,30,1821,30],[2051,10,1822,12,"user"],[2051,14,1822,16],[2051,15,1822,17,"_redirectEventId"],[2051,31,1822,33],[2051,34,1822,36,"_redirectEventId"],[2051,50,1822,52],[2052,8,1823,8],[2053,8,1824,8],[2053,15,1824,15,"user"],[2053,19,1824,19],[2054,6,1825,4],[2055,6,1826,4],[2056,0,1827,0],[2057,0,1828,0],[2058,0,1829,0],[2059,0,1830,0],[2060,4,1826,4],[2061,6,1826,4,"key"],[2061,9,1826,4],[2062,6,1826,4,"value"],[2062,11,1826,4],[2063,8,1826,4],[2063,12,1826,4,"_fromIdTokenResponse2"],[2063,33,1826,4],[2063,36,1826,4,"_asyncToGenerator"],[2063,53,1826,4],[2063,54,1831,4],[2063,65,1831,38,"auth"],[2063,69,1831,42],[2063,71,1831,44,"idTokenResponse"],[2063,86,1831,59],[2063,88,1831,82],[2064,10,1831,82],[2064,14,1831,61,"isAnonymous"],[2064,25,1831,72],[2064,28,1831,72,"arguments"],[2064,37,1831,72],[2064,38,1831,72,"length"],[2064,44,1831,72],[2064,52,1831,72,"arguments"],[2064,61,1831,72],[2064,69,1831,72,"undefined"],[2064,78,1831,72],[2064,81,1831,72,"arguments"],[2064,90,1831,72],[2064,96,1831,75],[2064,101,1831,80],[2065,10,1832,8],[2065,14,1832,14,"stsTokenManager"],[2065,29,1832,29],[2065,32,1832,32],[2065,36,1832,36,"StsTokenManager"],[2065,51,1832,51],[2065,52,1832,52],[2065,53,1832,53],[2066,10,1833,8,"stsTokenManager"],[2066,25,1833,23],[2066,26,1833,24,"updateFromServerResponse"],[2066,50,1833,48],[2066,51,1833,49,"idTokenResponse"],[2066,66,1833,64],[2066,67,1833,65],[2067,10,1834,8],[2068,10,1835,8],[2068,14,1835,14,"user"],[2068,18,1835,18],[2068,21,1835,21],[2068,25,1835,25,"UserImpl"],[2068,33,1835,33],[2068,34,1835,34],[2069,12,1836,12,"uid"],[2069,15,1836,15],[2069,17,1836,17,"idTokenResponse"],[2069,32,1836,32],[2069,33,1836,33,"localId"],[2069,40,1836,40],[2070,12,1837,12,"auth"],[2070,16,1837,16],[2071,12,1838,12,"stsTokenManager"],[2071,27,1838,27],[2072,12,1839,12,"isAnonymous"],[2073,10,1840,8],[2073,11,1840,9],[2073,12,1840,10],[2074,10,1841,8],[2075,10,1842,8],[2075,16,1842,14,"_reloadWithoutSaving"],[2075,36,1842,34],[2075,37,1842,35,"user"],[2075,41,1842,39],[2075,42,1842,40],[2076,10,1843,8],[2076,17,1843,15,"user"],[2076,21,1843,19],[2077,8,1844,4],[2077,9,1844,5],[2078,8,1844,5],[2078,17,1831,17,"_fromIdTokenResponse"],[2078,37,1831,37,"_fromIdTokenResponse"],[2078,38,1831,37,"_x37"],[2078,42,1831,37],[2078,44,1831,37,"_x38"],[2078,48,1831,37],[2079,10,1831,37],[2079,17,1831,37,"_fromIdTokenResponse2"],[2079,38,1831,37],[2079,39,1831,37,"apply"],[2079,44,1831,37],[2079,51,1831,37,"arguments"],[2079,60,1831,37],[2080,8,1831,37],[2081,8,1831,37],[2081,15,1831,17,"_fromIdTokenResponse"],[2081,35,1831,37],[2082,6,1831,37],[2083,6,1845,4],[2084,0,1846,0],[2085,0,1847,0],[2086,0,1848,0],[2087,0,1849,0],[2088,6,1845,4],[2089,4,1845,4],[2090,6,1845,4,"key"],[2090,9,1845,4],[2091,6,1845,4,"value"],[2091,11,1845,4],[2092,8,1845,4],[2092,12,1845,4,"_fromGetAccountInfoResponse2"],[2092,40,1845,4],[2092,43,1845,4,"_asyncToGenerator"],[2092,60,1845,4],[2092,61,1850,4],[2092,72,1850,45,"auth"],[2092,76,1850,49],[2092,78,1850,51,"response"],[2092,86,1850,59],[2092,88,1850,61,"idToken"],[2092,95,1850,68],[2092,97,1850,70],[2093,10,1851,8],[2093,14,1851,14,"coreAccount"],[2093,25,1851,25],[2093,28,1851,28,"response"],[2093,36,1851,36],[2093,37,1851,37,"users"],[2093,42,1851,42],[2093,43,1851,43],[2093,44,1851,44],[2093,45,1851,45],[2094,10,1852,8,"_assert"],[2094,17,1852,15],[2094,18,1852,16,"coreAccount"],[2094,29,1852,27],[2094,30,1852,28,"localId"],[2094,37,1852,35],[2094,42,1852,40,"undefined"],[2094,51,1852,49],[2094,53,1852,51],[2094,69,1852,67],[2094,70,1852,68],[2094,104,1852,102],[2094,105,1852,103],[2095,10,1853,8],[2095,14,1853,14,"providerData"],[2095,26,1853,26],[2095,29,1853,29,"coreAccount"],[2095,40,1853,40],[2095,41,1853,41,"providerUserInfo"],[2095,57,1853,57],[2095,62,1853,62,"undefined"],[2095,71,1853,71],[2095,74,1854,14,"extractProviderData"],[2095,93,1854,33],[2095,94,1854,34,"coreAccount"],[2095,105,1854,45],[2095,106,1854,46,"providerUserInfo"],[2095,122,1854,62],[2095,123,1854,63],[2095,126,1855,14],[2095,128,1855,16],[2096,10,1856,8],[2096,14,1856,14,"isAnonymous"],[2096,25,1856,25],[2096,28,1856,28],[2096,30,1856,30,"coreAccount"],[2096,41,1856,41],[2096,42,1856,42,"email"],[2096,47,1856,47],[2096,51,1856,51,"coreAccount"],[2096,62,1856,62],[2096,63,1856,63,"passwordHash"],[2096,75,1856,75],[2096,76,1856,76],[2096,80,1856,80],[2096,81,1856,81,"providerData"],[2096,93,1856,93],[2096,95,1856,95,"length"],[2096,101,1856,101],[2097,10,1857,8],[2097,14,1857,14,"stsTokenManager"],[2097,29,1857,29],[2097,32,1857,32],[2097,36,1857,36,"StsTokenManager"],[2097,51,1857,51],[2097,52,1857,52],[2097,53,1857,53],[2098,10,1858,8,"stsTokenManager"],[2098,25,1858,23],[2098,26,1858,24,"updateFromIdToken"],[2098,43,1858,41],[2098,44,1858,42,"idToken"],[2098,51,1858,49],[2098,52,1858,50],[2099,10,1859,8],[2100,10,1860,8],[2100,14,1860,14,"user"],[2100,18,1860,18],[2100,21,1860,21],[2100,25,1860,25,"UserImpl"],[2100,33,1860,33],[2100,34,1860,34],[2101,12,1861,12,"uid"],[2101,15,1861,15],[2101,17,1861,17,"coreAccount"],[2101,28,1861,28],[2101,29,1861,29,"localId"],[2101,36,1861,36],[2102,12,1862,12,"auth"],[2102,16,1862,16],[2103,12,1863,12,"stsTokenManager"],[2103,27,1863,27],[2104,12,1864,12,"isAnonymous"],[2105,10,1865,8],[2105,11,1865,9],[2105,12,1865,10],[2106,10,1866,8],[2107,10,1867,8],[2107,14,1867,14,"updates"],[2107,21,1867,21],[2107,24,1867,24],[2108,12,1868,12,"uid"],[2108,15,1868,15],[2108,17,1868,17,"coreAccount"],[2108,28,1868,28],[2108,29,1868,29,"localId"],[2108,36,1868,36],[2109,12,1869,12,"displayName"],[2109,23,1869,23],[2109,25,1869,25,"coreAccount"],[2109,36,1869,36],[2109,37,1869,37,"displayName"],[2109,48,1869,48],[2109,52,1869,52],[2109,56,1869,56],[2110,12,1870,12,"photoURL"],[2110,20,1870,20],[2110,22,1870,22,"coreAccount"],[2110,33,1870,33],[2110,34,1870,34,"photoUrl"],[2110,42,1870,42],[2110,46,1870,46],[2110,50,1870,50],[2111,12,1871,12,"email"],[2111,17,1871,17],[2111,19,1871,19,"coreAccount"],[2111,30,1871,30],[2111,31,1871,31,"email"],[2111,36,1871,36],[2111,40,1871,40],[2111,44,1871,44],[2112,12,1872,12,"emailVerified"],[2112,25,1872,25],[2112,27,1872,27,"coreAccount"],[2112,38,1872,38],[2112,39,1872,39,"emailVerified"],[2112,52,1872,52],[2112,56,1872,56],[2112,61,1872,61],[2113,12,1873,12,"phoneNumber"],[2113,23,1873,23],[2113,25,1873,25,"coreAccount"],[2113,36,1873,36],[2113,37,1873,37,"phoneNumber"],[2113,48,1873,48],[2113,52,1873,52],[2113,56,1873,56],[2114,12,1874,12,"tenantId"],[2114,20,1874,20],[2114,22,1874,22,"coreAccount"],[2114,33,1874,33],[2114,34,1874,34,"tenantId"],[2114,42,1874,42],[2114,46,1874,46],[2114,50,1874,50],[2115,12,1875,12,"providerData"],[2115,24,1875,24],[2116,12,1876,12,"metadata"],[2116,20,1876,20],[2116,22,1876,22],[2116,26,1876,26,"UserMetadata"],[2116,38,1876,38],[2116,39,1876,39,"coreAccount"],[2116,50,1876,50],[2116,51,1876,51,"createdAt"],[2116,60,1876,60],[2116,62,1876,62,"coreAccount"],[2116,73,1876,73],[2116,74,1876,74,"lastLoginAt"],[2116,85,1876,85],[2116,86,1876,86],[2117,12,1877,12,"isAnonymous"],[2117,23,1877,23],[2117,25,1877,25],[2117,27,1877,27,"coreAccount"],[2117,38,1877,38],[2117,39,1877,39,"email"],[2117,44,1877,44],[2117,48,1877,48,"coreAccount"],[2117,59,1877,59],[2117,60,1877,60,"passwordHash"],[2117,72,1877,72],[2117,73,1877,73],[2117,77,1878,16],[2117,78,1878,17,"providerData"],[2117,90,1878,29],[2117,92,1878,31,"length"],[2118,10,1879,8],[2118,11,1879,9],[2119,10,1880,8,"Object"],[2119,16,1880,14],[2119,17,1880,15,"assign"],[2119,23,1880,21],[2119,24,1880,22,"user"],[2119,28,1880,26],[2119,30,1880,28,"updates"],[2119,37,1880,35],[2119,38,1880,36],[2120,10,1881,8],[2120,17,1881,15,"user"],[2120,21,1881,19],[2121,8,1882,4],[2121,9,1882,5],[2122,8,1882,5],[2122,17,1850,17,"_fromGetAccountInfoResponse"],[2122,44,1850,44,"_fromGetAccountInfoResponse"],[2122,45,1850,44,"_x39"],[2122,49,1850,44],[2122,51,1850,44,"_x40"],[2122,55,1850,44],[2122,57,1850,44,"_x41"],[2122,61,1850,44],[2123,10,1850,44],[2123,17,1850,44,"_fromGetAccountInfoResponse2"],[2123,45,1850,44],[2123,46,1850,44,"apply"],[2123,51,1850,44],[2123,58,1850,44,"arguments"],[2123,67,1850,44],[2124,8,1850,44],[2125,8,1850,44],[2125,15,1850,17,"_fromGetAccountInfoResponse"],[2125,42,1850,44],[2126,6,1850,44],[2127,4,1850,44],[2128,2,1850,44],[2129,2,1885,0],[2130,0,1886,0],[2131,0,1887,0],[2132,0,1888,0],[2133,0,1889,0],[2134,0,1890,0],[2135,0,1891,0],[2136,0,1892,0],[2137,0,1893,0],[2138,0,1894,0],[2139,0,1895,0],[2140,0,1896,0],[2141,0,1897,0],[2142,0,1898,0],[2143,0,1899,0],[2144,0,1900,0],[2145,2,1901,0],[2145,6,1901,6,"instanceCache"],[2145,19,1901,19],[2145,22,1901,22],[2145,26,1901,26,"Map"],[2145,29,1901,29],[2145,30,1901,30],[2145,31,1901,31],[2146,2,1902,0],[2146,11,1902,9,"_getInstance"],[2146,23,1902,21,"_getInstance"],[2146,24,1902,22,"cls"],[2146,27,1902,25],[2146,29,1902,27],[2147,4,1903,4,"debugAssert"],[2147,15,1903,15],[2147,16,1903,16,"cls"],[2147,19,1903,19],[2147,31,1903,31,"Function"],[2147,39,1903,39],[2147,41,1903,41],[2147,70,1903,70],[2147,71,1903,71],[2148,4,1904,4],[2148,8,1904,8,"instance"],[2148,16,1904,16],[2148,19,1904,19,"instanceCache"],[2148,32,1904,32],[2148,33,1904,33,"get"],[2148,36,1904,36],[2148,37,1904,37,"cls"],[2148,40,1904,40],[2148,41,1904,41],[2149,4,1905,4],[2149,8,1905,8,"instance"],[2149,16,1905,16],[2149,18,1905,18],[2150,6,1906,8,"debugAssert"],[2150,17,1906,19],[2150,18,1906,20,"instance"],[2150,26,1906,28],[2150,38,1906,40,"cls"],[2150,41,1906,43],[2150,43,1906,45],[2150,91,1906,93],[2150,92,1906,94],[2151,6,1907,8],[2151,13,1907,15,"instance"],[2151,21,1907,23],[2152,4,1908,4],[2153,4,1909,4,"instance"],[2153,12,1909,12],[2153,15,1909,15],[2153,19,1909,19,"cls"],[2153,22,1909,22],[2153,23,1909,23],[2153,24,1909,24],[2154,4,1910,4,"instanceCache"],[2154,17,1910,17],[2154,18,1910,18,"set"],[2154,21,1910,21],[2154,22,1910,22,"cls"],[2154,25,1910,25],[2154,27,1910,27,"instance"],[2154,35,1910,35],[2154,36,1910,36],[2155,4,1911,4],[2155,11,1911,11,"instance"],[2155,19,1911,19],[2156,2,1912,0],[2158,2,1914,0],[2159,0,1915,0],[2160,0,1916,0],[2161,0,1917,0],[2162,0,1918,0],[2163,0,1919,0],[2164,0,1920,0],[2165,0,1921,0],[2166,0,1922,0],[2167,0,1923,0],[2168,0,1924,0],[2169,0,1925,0],[2170,0,1926,0],[2171,0,1927,0],[2172,0,1928,0],[2173,0,1929,0],[2174,2,1914,0],[2174,6,1930,6,"InMemoryPersistence"],[2174,25,1930,25],[2175,4,1931,4],[2175,13,1931,4,"InMemoryPersistence"],[2175,33,1931,4],[2175,35,1931,18],[2176,6,1931,18,"_classCallCheck"],[2176,21,1931,18],[2176,28,1931,18,"InMemoryPersistence"],[2176,47,1931,18],[2177,6,1932,8],[2177,10,1932,12],[2177,11,1932,13,"type"],[2177,15,1932,17],[2177,18,1932,20],[2177,24,1932,26],[2177,25,1932,27],[2178,6,1933,8],[2178,10,1933,12],[2178,11,1933,13,"storage"],[2178,18,1933,20],[2178,21,1933,23],[2178,22,1933,24],[2178,23,1933,25],[2179,4,1934,4],[2180,4,1934,5],[2180,11,1934,5,"_createClass"],[2180,23,1934,5],[2180,24,1934,5,"InMemoryPersistence"],[2180,43,1934,5],[2181,6,1934,5,"key"],[2181,9,1934,5],[2182,6,1934,5,"value"],[2182,11,1934,5],[2183,8,1934,5],[2183,12,1934,5,"_isAvailable2"],[2183,25,1934,5],[2183,28,1934,5,"_asyncToGenerator"],[2183,45,1934,5],[2183,46,1935,4],[2183,59,1935,25],[2184,10,1936,8],[2184,17,1936,15],[2184,21,1936,19],[2185,8,1937,4],[2185,9,1937,5],[2186,8,1937,5],[2186,17,1935,10,"_isAvailable"],[2186,29,1935,22,"_isAvailable"],[2186,30,1935,22],[2187,10,1935,22],[2187,17,1935,22,"_isAvailable2"],[2187,30,1935,22],[2187,31,1935,22,"apply"],[2187,36,1935,22],[2187,43,1935,22,"arguments"],[2187,52,1935,22],[2188,8,1935,22],[2189,8,1935,22],[2189,15,1935,10,"_isAvailable"],[2189,27,1935,22],[2190,6,1935,22],[2191,4,1935,22],[2192,6,1935,22,"key"],[2192,9,1935,22],[2193,6,1935,22,"value"],[2193,11,1935,22],[2194,8,1935,22],[2194,12,1935,22,"_set2"],[2194,17,1935,22],[2194,20,1935,22,"_asyncToGenerator"],[2194,37,1935,22],[2194,38,1938,4],[2194,49,1938,15,"key"],[2194,52,1938,18],[2194,54,1938,20,"value"],[2194,59,1938,25],[2194,61,1938,27],[2195,10,1939,8],[2195,14,1939,12],[2195,15,1939,13,"storage"],[2195,22,1939,20],[2195,23,1939,21,"key"],[2195,26,1939,24],[2195,27,1939,25],[2195,30,1939,28,"value"],[2195,35,1939,33],[2196,8,1940,4],[2196,9,1940,5],[2197,8,1940,5],[2197,17,1938,10,"_set"],[2197,21,1938,14,"_set"],[2197,22,1938,14,"_x42"],[2197,26,1938,14],[2197,28,1938,14,"_x43"],[2197,32,1938,14],[2198,10,1938,14],[2198,17,1938,14,"_set2"],[2198,22,1938,14],[2198,23,1938,14,"apply"],[2198,28,1938,14],[2198,35,1938,14,"arguments"],[2198,44,1938,14],[2199,8,1938,14],[2200,8,1938,14],[2200,15,1938,10,"_set"],[2200,19,1938,14],[2201,6,1938,14],[2202,4,1938,14],[2203,6,1938,14,"key"],[2203,9,1938,14],[2204,6,1938,14,"value"],[2204,11,1938,14],[2205,8,1938,14],[2205,12,1938,14,"_get2"],[2205,17,1938,14],[2205,20,1938,14,"_asyncToGenerator"],[2205,37,1938,14],[2205,38,1941,4],[2205,49,1941,15,"key"],[2205,52,1941,18],[2205,54,1941,20],[2206,10,1942,8],[2206,14,1942,14,"value"],[2206,19,1942,19],[2206,22,1942,22],[2206,26,1942,26],[2206,27,1942,27,"storage"],[2206,34,1942,34],[2206,35,1942,35,"key"],[2206,38,1942,38],[2206,39,1942,39],[2207,10,1943,8],[2207,17,1943,15,"value"],[2207,22,1943,20],[2207,27,1943,25,"undefined"],[2207,36,1943,34],[2207,39,1943,37],[2207,43,1943,41],[2207,46,1943,44,"value"],[2207,51,1943,49],[2208,8,1944,4],[2208,9,1944,5],[2209,8,1944,5],[2209,17,1941,10,"_get"],[2209,21,1941,14,"_get"],[2209,22,1941,14,"_x44"],[2209,26,1941,14],[2210,10,1941,14],[2210,17,1941,14,"_get2"],[2210,22,1941,14],[2210,23,1941,14,"apply"],[2210,28,1941,14],[2210,35,1941,14,"arguments"],[2210,44,1941,14],[2211,8,1941,14],[2212,8,1941,14],[2212,15,1941,10,"_get"],[2212,19,1941,14],[2213,6,1941,14],[2214,4,1941,14],[2215,6,1941,14,"key"],[2215,9,1941,14],[2216,6,1941,14,"value"],[2216,11,1941,14],[2217,8,1941,14],[2217,12,1941,14,"_remove2"],[2217,20,1941,14],[2217,23,1941,14,"_asyncToGenerator"],[2217,40,1941,14],[2217,41,1945,4],[2217,52,1945,18,"key"],[2217,55,1945,21],[2217,57,1945,23],[2218,10,1946,8],[2218,17,1946,15],[2218,21,1946,19],[2218,22,1946,20,"storage"],[2218,29,1946,27],[2218,30,1946,28,"key"],[2218,33,1946,31],[2218,34,1946,32],[2219,8,1947,4],[2219,9,1947,5],[2220,8,1947,5],[2220,17,1945,10,"_remove"],[2220,24,1945,17,"_remove"],[2220,25,1945,17,"_x45"],[2220,29,1945,17],[2221,10,1945,17],[2221,17,1945,17,"_remove2"],[2221,25,1945,17],[2221,26,1945,17,"apply"],[2221,31,1945,17],[2221,38,1945,17,"arguments"],[2221,47,1945,17],[2222,8,1945,17],[2223,8,1945,17],[2223,15,1945,10,"_remove"],[2223,22,1945,17],[2224,6,1945,17],[2225,4,1945,17],[2226,6,1945,17,"key"],[2226,9,1945,17],[2227,6,1945,17,"value"],[2227,11,1945,17],[2227,13,1948,4],[2227,22,1948,4,"_addListener"],[2227,34,1948,16,"_addListener"],[2227,35,1948,17,"_key"],[2227,39,1948,21],[2227,41,1948,23,"_listener"],[2227,50,1948,32],[2227,52,1948,34],[2228,8,1949,8],[2229,8,1950,8],[2230,6,1951,4],[2231,4,1951,5],[2232,6,1951,5,"key"],[2232,9,1951,5],[2233,6,1951,5,"value"],[2233,11,1951,5],[2233,13,1952,4],[2233,22,1952,4,"_removeListener"],[2233,37,1952,19,"_removeListener"],[2233,38,1952,20,"_key"],[2233,42,1952,24],[2233,44,1952,26,"_listener"],[2233,53,1952,35],[2233,55,1952,37],[2234,8,1953,8],[2235,8,1954,8],[2236,6,1955,4],[2237,4,1955,5],[2238,2,1955,5],[2239,2,1957,0,"InMemoryPersistence"],[2239,21,1957,19],[2239,22,1957,20,"type"],[2239,26,1957,24],[2239,29,1957,27],[2239,35,1957,33],[2240,2,1958,0],[2241,0,1959,0],[2242,0,1960,0],[2243,0,1961,0],[2244,0,1962,0],[2245,2,1963,0],[2245,6,1963,6,"inMemoryPersistence"],[2245,25,1963,25],[2245,28,1963,28,"InMemoryPersistence"],[2245,47,1963,47],[2247,2,1965,0],[2248,0,1966,0],[2249,0,1967,0],[2250,0,1968,0],[2251,0,1969,0],[2252,0,1970,0],[2253,0,1971,0],[2254,0,1972,0],[2255,0,1973,0],[2256,0,1974,0],[2257,0,1975,0],[2258,0,1976,0],[2259,0,1977,0],[2260,0,1978,0],[2261,0,1979,0],[2262,0,1980,0],[2263,2,1981,0],[2263,11,1981,9,"_persistenceKeyName"],[2263,30,1981,28,"_persistenceKeyName"],[2263,31,1981,29,"key"],[2263,34,1981,32],[2263,36,1981,34,"apiKey"],[2263,42,1981,40],[2263,44,1981,42,"appName"],[2263,51,1981,49],[2263,53,1981,51],[2264,4,1982,4],[2264,11,1982,11],[2264,14,1982,14],[2264,24,1982,24],[2264,25,1982,25],[2264,56,1982,56,"key"],[2264,59,1982,59],[2264,63,1982,63,"apiKey"],[2264,69,1982,69],[2264,73,1982,73,"appName"],[2264,80,1982,80],[2264,82,1982,82],[2265,2,1983,0],[2266,2,1983,1],[2266,6,1984,6,"PersistenceUserManager"],[2266,28,1984,28],[2267,4,1985,4],[2267,13,1985,4,"PersistenceUserManager"],[2267,36,1985,16,"persistence"],[2267,47,1985,27],[2267,49,1985,29,"auth"],[2267,53,1985,33],[2267,55,1985,35,"userKey"],[2267,62,1985,42],[2267,64,1985,44],[2268,6,1985,44,"_classCallCheck"],[2268,21,1985,44],[2268,28,1985,44,"PersistenceUserManager"],[2268,50,1985,44],[2269,6,1986,8],[2269,10,1986,12],[2269,11,1986,13,"persistence"],[2269,22,1986,24],[2269,25,1986,27,"persistence"],[2269,36,1986,38],[2270,6,1987,8],[2270,10,1987,12],[2270,11,1987,13,"auth"],[2270,15,1987,17],[2270,18,1987,20,"auth"],[2270,22,1987,24],[2271,6,1988,8],[2271,10,1988,12],[2271,11,1988,13,"userKey"],[2271,18,1988,20],[2271,21,1988,23,"userKey"],[2271,28,1988,30],[2272,6,1989,8],[2272,10,1989,8,"_this$auth"],[2272,20,1989,8],[2272,23,1989,33],[2272,27,1989,37],[2272,28,1989,38,"auth"],[2272,32,1989,42],[2273,8,1989,16,"config"],[2273,14,1989,22],[2273,17,1989,22,"_this$auth"],[2273,27,1989,22],[2273,28,1989,16,"config"],[2273,34,1989,22],[2274,8,1989,24,"name"],[2274,12,1989,28],[2274,15,1989,28,"_this$auth"],[2274,25,1989,28],[2274,26,1989,24,"name"],[2274,30,1989,28],[2275,6,1990,8],[2275,10,1990,12],[2275,11,1990,13,"fullUserKey"],[2275,22,1990,24],[2275,25,1990,27,"_persistenceKeyName"],[2275,44,1990,46],[2275,45,1990,47],[2275,49,1990,51],[2275,50,1990,52,"userKey"],[2275,57,1990,59],[2275,59,1990,61,"config"],[2275,65,1990,67],[2275,66,1990,68,"apiKey"],[2275,72,1990,74],[2275,74,1990,76,"name"],[2275,78,1990,80],[2275,79,1990,81],[2276,6,1991,8],[2276,10,1991,12],[2276,11,1991,13,"fullPersistenceKey"],[2276,29,1991,31],[2276,32,1991,34,"_persistenceKeyName"],[2276,51,1991,53],[2276,52,1991,54],[2276,65,1991,67],[2276,66,1991,68],[2276,98,1991,100,"config"],[2276,104,1991,106],[2276,105,1991,107,"apiKey"],[2276,111,1991,113],[2276,113,1991,115,"name"],[2276,117,1991,119],[2276,118,1991,120],[2277,6,1992,8],[2277,10,1992,12],[2277,11,1992,13,"boundEventHandler"],[2277,28,1992,30],[2277,31,1992,33,"auth"],[2277,35,1992,37],[2277,36,1992,38,"_onStorageEvent"],[2277,51,1992,53],[2277,52,1992,54,"bind"],[2277,56,1992,58],[2277,57,1992,59,"auth"],[2277,61,1992,63],[2277,62,1992,64],[2278,6,1993,8],[2278,10,1993,12],[2278,11,1993,13,"persistence"],[2278,22,1993,24],[2278,23,1993,25,"_addListener"],[2278,35,1993,37],[2278,36,1993,38],[2278,40,1993,42],[2278,41,1993,43,"fullUserKey"],[2278,52,1993,54],[2278,54,1993,56],[2278,58,1993,60],[2278,59,1993,61,"boundEventHandler"],[2278,76,1993,78],[2278,77,1993,79],[2279,4,1994,4],[2280,4,1994,5],[2280,11,1994,5,"_createClass"],[2280,23,1994,5],[2280,24,1994,5,"PersistenceUserManager"],[2280,46,1994,5],[2281,6,1994,5,"key"],[2281,9,1994,5],[2282,6,1994,5,"value"],[2282,11,1994,5],[2282,13,1995,4],[2282,22,1995,4,"setCurrentUser"],[2282,36,1995,18,"setCurrentUser"],[2282,37,1995,19,"user"],[2282,41,1995,23],[2282,43,1995,25],[2283,8,1996,8],[2283,15,1996,15],[2283,19,1996,19],[2283,20,1996,20,"persistence"],[2283,31,1996,31],[2283,32,1996,32,"_set"],[2283,36,1996,36],[2283,37,1996,37],[2283,41,1996,41],[2283,42,1996,42,"fullUserKey"],[2283,53,1996,53],[2283,55,1996,55,"user"],[2283,59,1996,59],[2283,60,1996,60,"toJSON"],[2283,66,1996,66],[2283,67,1996,67],[2283,68,1996,68],[2283,69,1996,69],[2284,6,1997,4],[2285,4,1997,5],[2286,6,1997,5,"key"],[2286,9,1997,5],[2287,6,1997,5,"value"],[2287,11,1997,5],[2288,8,1997,5],[2288,12,1997,5,"_getCurrentUser"],[2288,27,1997,5],[2288,30,1997,5,"_asyncToGenerator"],[2288,47,1997,5],[2288,48,1998,4],[2288,61,1998,27],[2289,10,1999,8],[2289,14,1999,14,"blob"],[2289,18,1999,18],[2289,27,1999,27],[2289,31,1999,31],[2289,32,1999,32,"persistence"],[2289,43,1999,43],[2289,44,1999,44,"_get"],[2289,48,1999,48],[2289,49,1999,49],[2289,53,1999,53],[2289,54,1999,54,"fullUserKey"],[2289,65,1999,65],[2289,66,1999,66],[2290,10,2000,8],[2290,14,2000,12],[2290,15,2000,13,"blob"],[2290,19,2000,17],[2290,21,2000,19],[2291,12,2001,12],[2291,19,2001,19],[2291,23,2001,23],[2292,10,2002,8],[2293,10,2003,8],[2293,14,2003,12],[2293,21,2003,19,"blob"],[2293,25,2003,23],[2293,30,2003,28],[2293,38,2003,36],[2293,40,2003,38],[2294,12,2004,12],[2294,16,2004,18,"response"],[2294,24,2004,26],[2294,33,2004,35,"getAccountInfo"],[2294,47,2004,49],[2294,48,2004,50],[2294,52,2004,54],[2294,53,2004,55,"auth"],[2294,57,2004,59],[2294,59,2004,61],[2295,14,2004,63,"idToken"],[2295,21,2004,70],[2295,23,2004,72,"blob"],[2296,12,2004,77],[2296,13,2004,78],[2296,14,2004,79],[2296,15,2004,80,"catch"],[2296,20,2004,85],[2296,21,2004,86],[2296,27,2004,92,"undefined"],[2296,36,2004,101],[2296,37,2004,102],[2297,12,2005,12],[2297,16,2005,16],[2297,17,2005,17,"response"],[2297,25,2005,25],[2297,27,2005,27],[2298,14,2006,16],[2298,21,2006,23],[2298,25,2006,27],[2299,12,2007,12],[2300,12,2008,12],[2300,19,2008,19,"UserImpl"],[2300,27,2008,27],[2300,28,2008,28,"_fromGetAccountInfoResponse"],[2300,55,2008,55],[2300,56,2008,56],[2300,60,2008,60],[2300,61,2008,61,"auth"],[2300,65,2008,65],[2300,67,2008,67,"response"],[2300,75,2008,75],[2300,77,2008,77,"blob"],[2300,81,2008,81],[2300,82,2008,82],[2301,10,2009,8],[2302,10,2010,8],[2302,17,2010,15,"UserImpl"],[2302,25,2010,23],[2302,26,2010,24,"_fromJSON"],[2302,35,2010,33],[2302,36,2010,34],[2302,40,2010,38],[2302,41,2010,39,"auth"],[2302,45,2010,43],[2302,47,2010,45,"blob"],[2302,51,2010,49],[2302,52,2010,50],[2303,8,2011,4],[2303,9,2011,5],[2304,8,2011,5],[2304,17,1998,10,"getCurrentUser"],[2304,31,1998,24,"getCurrentUser"],[2304,32,1998,24],[2305,10,1998,24],[2305,17,1998,24,"_getCurrentUser"],[2305,32,1998,24],[2305,33,1998,24,"apply"],[2305,38,1998,24],[2305,45,1998,24,"arguments"],[2305,54,1998,24],[2306,8,1998,24],[2307,8,1998,24],[2307,15,1998,10,"getCurrentUser"],[2307,29,1998,24],[2308,6,1998,24],[2309,4,1998,24],[2310,6,1998,24,"key"],[2310,9,1998,24],[2311,6,1998,24,"value"],[2311,11,1998,24],[2311,13,2012,4],[2311,22,2012,4,"removeCurrentUser"],[2311,39,2012,21,"removeCurrentUser"],[2311,40,2012,21],[2311,42,2012,24],[2312,8,2013,8],[2312,15,2013,15],[2312,19,2013,19],[2312,20,2013,20,"persistence"],[2312,31,2013,31],[2312,32,2013,32,"_remove"],[2312,39,2013,39],[2312,40,2013,40],[2312,44,2013,44],[2312,45,2013,45,"fullUserKey"],[2312,56,2013,56],[2312,57,2013,57],[2313,6,2014,4],[2314,4,2014,5],[2315,6,2014,5,"key"],[2315,9,2014,5],[2316,6,2014,5,"value"],[2316,11,2014,5],[2316,13,2015,4],[2316,22,2015,4,"savePersistenceForRedirect"],[2316,48,2015,30,"savePersistenceForRedirect"],[2316,49,2015,30],[2316,51,2015,33],[2317,8,2016,8],[2317,15,2016,15],[2317,19,2016,19],[2317,20,2016,20,"persistence"],[2317,31,2016,31],[2317,32,2016,32,"_set"],[2317,36,2016,36],[2317,37,2016,37],[2317,41,2016,41],[2317,42,2016,42,"fullPersistenceKey"],[2317,60,2016,60],[2317,62,2016,62],[2317,66,2016,66],[2317,67,2016,67,"persistence"],[2317,78,2016,78],[2317,79,2016,79,"type"],[2317,83,2016,83],[2317,84,2016,84],[2318,6,2017,4],[2319,4,2017,5],[2320,6,2017,5,"key"],[2320,9,2017,5],[2321,6,2017,5,"value"],[2321,11,2017,5],[2322,8,2017,5],[2322,12,2017,5,"_setPersistence"],[2322,27,2017,5],[2322,30,2017,5,"_asyncToGenerator"],[2322,47,2017,5],[2322,48,2018,4],[2322,59,2018,25,"newPersistence"],[2322,73,2018,39],[2322,75,2018,41],[2323,10,2019,8],[2323,14,2019,12],[2323,18,2019,16],[2323,19,2019,17,"persistence"],[2323,30,2019,28],[2323,35,2019,33,"newPersistence"],[2323,49,2019,47],[2323,51,2019,49],[2324,12,2020,12],[2325,10,2021,8],[2326,10,2022,8],[2326,14,2022,14,"currentUser"],[2326,25,2022,25],[2326,34,2022,34],[2326,38,2022,38],[2326,39,2022,39,"getCurrentUser"],[2326,53,2022,53],[2326,54,2022,54],[2326,55,2022,55],[2327,10,2023,8],[2327,16,2023,14],[2327,20,2023,18],[2327,21,2023,19,"removeCurrentUser"],[2327,38,2023,36],[2327,39,2023,37],[2327,40,2023,38],[2328,10,2024,8],[2328,14,2024,12],[2328,15,2024,13,"persistence"],[2328,26,2024,24],[2328,29,2024,27,"newPersistence"],[2328,43,2024,41],[2329,10,2025,8],[2329,14,2025,12,"currentUser"],[2329,25,2025,23],[2329,27,2025,25],[2330,12,2026,12],[2330,19,2026,19],[2330,23,2026,23],[2330,24,2026,24,"setCurrentUser"],[2330,38,2026,38],[2330,39,2026,39,"currentUser"],[2330,50,2026,50],[2330,51,2026,51],[2331,10,2027,8],[2332,8,2028,4],[2332,9,2028,5],[2333,8,2028,5],[2333,17,2018,10,"setPersistence"],[2333,31,2018,24,"setPersistence"],[2333,32,2018,24,"_x46"],[2333,36,2018,24],[2334,10,2018,24],[2334,17,2018,24,"_setPersistence"],[2334,32,2018,24],[2334,33,2018,24,"apply"],[2334,38,2018,24],[2334,45,2018,24,"arguments"],[2334,54,2018,24],[2335,8,2018,24],[2336,8,2018,24],[2336,15,2018,10,"setPersistence"],[2336,29,2018,24],[2337,6,2018,24],[2338,4,2018,24],[2339,6,2018,24,"key"],[2339,9,2018,24],[2340,6,2018,24,"value"],[2340,11,2018,24],[2340,13,2029,4],[2340,22,2029,4,"delete"],[2340,29,2029,10,"delete"],[2340,30,2029,10],[2340,32,2029,13],[2341,8,2030,8],[2341,12,2030,12],[2341,13,2030,13,"persistence"],[2341,24,2030,24],[2341,25,2030,25,"_removeListener"],[2341,40,2030,40],[2341,41,2030,41],[2341,45,2030,45],[2341,46,2030,46,"fullUserKey"],[2341,57,2030,57],[2341,59,2030,59],[2341,63,2030,63],[2341,64,2030,64,"boundEventHandler"],[2341,81,2030,81],[2341,82,2030,82],[2342,6,2031,4],[2343,4,2031,5],[2344,6,2031,5,"key"],[2344,9,2031,5],[2345,6,2031,5,"value"],[2345,11,2031,5],[2346,8,2031,5],[2346,12,2031,5,"_create"],[2346,19,2031,5],[2346,22,2031,5,"_asyncToGenerator"],[2346,39,2031,5],[2346,40,2032,4],[2346,51,2032,24,"auth"],[2346,55,2032,28],[2346,57,2032,30,"persistenceHierarchy"],[2346,77,2032,50],[2346,79,2032,98],[2347,10,2032,98],[2347,14,2032,52,"userKey"],[2347,21,2032,59],[2347,24,2032,59,"arguments"],[2347,33,2032,59],[2347,34,2032,59,"length"],[2347,40,2032,59],[2347,48,2032,59,"arguments"],[2347,57,2032,59],[2347,65,2032,59,"undefined"],[2347,74,2032,59],[2347,77,2032,59,"arguments"],[2347,86,2032,59],[2347,92,2032,62],[2347,102,2032,72],[2348,10,2033,8],[2348,14,2033,12],[2348,15,2033,13,"persistenceHierarchy"],[2348,35,2033,33],[2348,36,2033,34,"length"],[2348,42,2033,40],[2348,44,2033,42],[2349,12,2034,12],[2349,19,2034,19],[2349,23,2034,23,"PersistenceUserManager"],[2349,45,2034,45],[2349,46,2034,46,"_getInstance"],[2349,58,2034,58],[2349,59,2034,59,"inMemoryPersistence"],[2349,78,2034,78],[2349,79,2034,79],[2349,81,2034,81,"auth"],[2349,85,2034,85],[2349,87,2034,87,"userKey"],[2349,94,2034,94],[2349,95,2034,95],[2350,10,2035,8],[2351,10,2036,8],[2352,10,2037,8],[2352,14,2037,14,"availablePersistences"],[2352,35,2037,35],[2352,38,2037,38],[2352,45,2037,45,"Promise"],[2352,52,2037,52],[2352,53,2037,53,"all"],[2352,56,2037,56],[2352,57,2037,57,"persistenceHierarchy"],[2352,77,2037,77],[2352,78,2037,78,"map"],[2352,81,2037,81],[2353,12,2037,81],[2353,16,2037,81,"_ref5"],[2353,21,2037,81],[2353,24,2037,81,"_asyncToGenerator"],[2353,41,2037,81],[2353,42,2037,82],[2353,53,2037,89,"persistence"],[2353,64,2037,100],[2353,66,2037,105],[2354,14,2038,12],[2354,24,2038,22,"persistence"],[2354,35,2038,33],[2354,36,2038,34,"_isAvailable"],[2354,48,2038,46],[2354,49,2038,47],[2354,50,2038,48],[2354,52,2038,50],[2355,16,2039,16],[2355,23,2039,23,"persistence"],[2355,34,2039,34],[2356,14,2040,12],[2357,14,2041,12],[2357,21,2041,19,"undefined"],[2357,30,2041,28],[2358,12,2042,8],[2358,13,2042,9],[2359,12,2042,9],[2359,29,2042,9,"_x49"],[2359,33,2042,9],[2360,14,2042,9],[2360,21,2042,9,"_ref5"],[2360,26,2042,9],[2360,27,2042,9,"apply"],[2360,32,2042,9],[2360,39,2042,9,"arguments"],[2360,48,2042,9],[2361,12,2042,9],[2362,10,2042,9],[2362,14,2042,10],[2362,15,2042,11],[2362,17,2042,13,"filter"],[2362,23,2042,19],[2362,24,2042,20,"persistence"],[2362,35,2042,31],[2362,39,2042,35,"persistence"],[2362,50,2042,46],[2362,51,2042,47],[2363,10,2043,8],[2364,10,2044,8],[2364,14,2044,12,"selectedPersistence"],[2364,33,2044,31],[2364,36,2044,34,"availablePersistences"],[2364,57,2044,55],[2364,58,2044,56],[2364,59,2044,57],[2364,60,2044,58],[2364,64,2045,12,"_getInstance"],[2364,76,2045,24],[2364,77,2045,25,"inMemoryPersistence"],[2364,96,2045,44],[2364,97,2045,45],[2365,10,2046,8],[2365,14,2046,14,"key"],[2365,17,2046,17],[2365,20,2046,20,"_persistenceKeyName"],[2365,39,2046,39],[2365,40,2046,40,"userKey"],[2365,47,2046,47],[2365,49,2046,49,"auth"],[2365,53,2046,53],[2365,54,2046,54,"config"],[2365,60,2046,60],[2365,61,2046,61,"apiKey"],[2365,67,2046,67],[2365,69,2046,69,"auth"],[2365,73,2046,73],[2365,74,2046,74,"name"],[2365,78,2046,78],[2365,79,2046,79],[2366,10,2047,8],[2367,10,2048,8],[2368,10,2049,8],[2368,14,2049,12,"userToMigrate"],[2368,27,2049,25],[2368,30,2049,28],[2368,34,2049,32],[2369,10,2050,8],[2370,10,2051,8],[2371,10,2052,8],[2372,10,2053,8],[2372,15,2053,13],[2372,19,2053,19,"persistence"],[2372,30,2053,30],[2372,34,2053,34,"persistenceHierarchy"],[2372,54,2053,54],[2372,56,2053,56],[2373,12,2054,12],[2373,16,2054,16],[2374,14,2055,16],[2374,18,2055,22,"blob"],[2374,22,2055,26],[2374,31,2055,35,"persistence"],[2374,42,2055,46],[2374,43,2055,47,"_get"],[2374,47,2055,51],[2374,48,2055,52,"key"],[2374,51,2055,55],[2374,52,2055,56],[2375,14,2056,16],[2375,18,2056,20,"blob"],[2375,22,2056,24],[2375,24,2056,26],[2376,16,2057,20],[2376,20,2057,24,"user"],[2376,24,2057,28],[2377,16,2058,20],[2377,20,2058,24],[2377,27,2058,31,"blob"],[2377,31,2058,35],[2377,36,2058,40],[2377,44,2058,48],[2377,46,2058,50],[2378,18,2059,24],[2378,22,2059,30,"response"],[2378,30,2059,38],[2378,39,2059,47,"getAccountInfo"],[2378,53,2059,61],[2378,54,2059,62,"auth"],[2378,58,2059,66],[2378,60,2059,68],[2379,20,2060,28,"idToken"],[2379,27,2060,35],[2379,29,2060,37,"blob"],[2380,18,2061,24],[2380,19,2061,25],[2380,20,2061,26],[2380,21,2061,27,"catch"],[2380,26,2061,32],[2380,27,2061,33],[2380,33,2061,39,"undefined"],[2380,42,2061,48],[2380,43,2061,49],[2381,18,2062,24],[2381,22,2062,28],[2381,23,2062,29,"response"],[2381,31,2062,37],[2381,33,2062,39],[2382,20,2063,28],[2383,18,2064,24],[2384,18,2065,24,"user"],[2384,22,2065,28],[2384,31,2065,37,"UserImpl"],[2384,39,2065,45],[2384,40,2065,46,"_fromGetAccountInfoResponse"],[2384,67,2065,73],[2384,68,2065,74,"auth"],[2384,72,2065,78],[2384,74,2065,80,"response"],[2384,82,2065,88],[2384,84,2065,90,"blob"],[2384,88,2065,94],[2384,89,2065,95],[2385,16,2066,20],[2385,17,2066,21],[2385,23,2067,25],[2386,18,2068,24,"user"],[2386,22,2068,28],[2386,25,2068,31,"UserImpl"],[2386,33,2068,39],[2386,34,2068,40,"_fromJSON"],[2386,43,2068,49],[2386,44,2068,50,"auth"],[2386,48,2068,54],[2386,50,2068,56,"blob"],[2386,54,2068,60],[2386,55,2068,61],[2386,56,2068,62],[2386,57,2068,63],[2387,16,2069,20],[2388,16,2070,20],[2388,20,2070,24,"persistence"],[2388,31,2070,35],[2388,36,2070,40,"selectedPersistence"],[2388,55,2070,59],[2388,57,2070,61],[2389,18,2071,24,"userToMigrate"],[2389,31,2071,37],[2389,34,2071,40,"user"],[2389,38,2071,44],[2390,16,2072,20],[2391,16,2073,20,"selectedPersistence"],[2391,35,2073,39],[2391,38,2073,42,"persistence"],[2391,49,2073,53],[2392,16,2074,20],[2393,14,2075,16],[2394,12,2076,12],[2394,13,2076,13],[2394,14,2077,12],[2394,20,2077,18],[2394,21,2077,20],[2395,10,2078,8],[2396,10,2079,8],[2397,10,2080,8],[2398,10,2081,8],[2398,14,2081,14,"migrationHierarchy"],[2398,32,2081,32],[2398,35,2081,35,"availablePersistences"],[2398,56,2081,56],[2398,57,2081,57,"filter"],[2398,63,2081,63],[2398,64,2081,64,"p"],[2398,65,2081,65],[2398,69,2081,69,"p"],[2398,70,2081,70],[2398,71,2081,71,"_shouldAllowMigration"],[2398,92,2081,92],[2398,93,2081,93],[2399,10,2082,8],[2400,10,2083,8],[2400,14,2083,12],[2400,15,2083,13,"selectedPersistence"],[2400,34,2083,32],[2400,35,2083,33,"_shouldAllowMigration"],[2400,56,2083,54],[2400,60,2084,12],[2400,61,2084,13,"migrationHierarchy"],[2400,79,2084,31],[2400,80,2084,32,"length"],[2400,86,2084,38],[2400,88,2084,40],[2401,12,2085,12],[2401,19,2085,19],[2401,23,2085,23,"PersistenceUserManager"],[2401,45,2085,45],[2401,46,2085,46,"selectedPersistence"],[2401,65,2085,65],[2401,67,2085,67,"auth"],[2401,71,2085,71],[2401,73,2085,73,"userKey"],[2401,80,2085,80],[2401,81,2085,81],[2402,10,2086,8],[2403,10,2087,8,"selectedPersistence"],[2403,29,2087,27],[2403,32,2087,30,"migrationHierarchy"],[2403,50,2087,48],[2403,51,2087,49],[2403,52,2087,50],[2403,53,2087,51],[2404,10,2088,8],[2404,14,2088,12,"userToMigrate"],[2404,27,2088,25],[2404,29,2088,27],[2405,12,2089,12],[2406,12,2090,12],[2407,12,2091,12],[2407,18,2091,18,"selectedPersistence"],[2407,37,2091,37],[2407,38,2091,38,"_set"],[2407,42,2091,42],[2407,43,2091,43,"key"],[2407,46,2091,46],[2407,48,2091,48,"userToMigrate"],[2407,61,2091,61],[2407,62,2091,62,"toJSON"],[2407,68,2091,68],[2407,69,2091,69],[2407,70,2091,70],[2407,71,2091,71],[2408,10,2092,8],[2409,10,2093,8],[2410,10,2094,8],[2411,10,2095,8],[2411,16,2095,14,"Promise"],[2411,23,2095,21],[2411,24,2095,22,"all"],[2411,27,2095,25],[2411,28,2095,26,"persistenceHierarchy"],[2411,48,2095,46],[2411,49,2095,47,"map"],[2411,52,2095,50],[2412,12,2095,50],[2412,16,2095,50,"_ref6"],[2412,21,2095,50],[2412,24,2095,50,"_asyncToGenerator"],[2412,41,2095,50],[2412,42,2095,51],[2412,53,2095,58,"persistence"],[2412,64,2095,69],[2412,66,2095,74],[2413,14,2096,12],[2413,18,2096,16,"persistence"],[2413,29,2096,27],[2413,34,2096,32,"selectedPersistence"],[2413,53,2096,51],[2413,55,2096,53],[2414,16,2097,16],[2414,20,2097,20],[2415,18,2098,20],[2415,24,2098,26,"persistence"],[2415,35,2098,37],[2415,36,2098,38,"_remove"],[2415,43,2098,45],[2415,44,2098,46,"key"],[2415,47,2098,49],[2415,48,2098,50],[2416,16,2099,16],[2416,17,2099,17],[2416,18,2100,16],[2416,24,2100,22],[2416,25,2100,24],[2417,14,2101,12],[2418,12,2102,8],[2418,13,2102,9],[2419,12,2102,9],[2419,29,2102,9,"_x50"],[2419,33,2102,9],[2420,14,2102,9],[2420,21,2102,9,"_ref6"],[2420,26,2102,9],[2420,27,2102,9,"apply"],[2420,32,2102,9],[2420,39,2102,9,"arguments"],[2420,48,2102,9],[2421,12,2102,9],[2422,10,2102,9],[2422,14,2102,10],[2422,15,2102,11],[2423,10,2103,8],[2423,17,2103,15],[2423,21,2103,19,"PersistenceUserManager"],[2423,43,2103,41],[2423,44,2103,42,"selectedPersistence"],[2423,63,2103,61],[2423,65,2103,63,"auth"],[2423,69,2103,67],[2423,71,2103,69,"userKey"],[2423,78,2103,76],[2423,79,2103,77],[2424,8,2104,4],[2424,9,2104,5],[2425,8,2104,5],[2425,17,2032,17,"create"],[2425,23,2032,23,"create"],[2425,24,2032,23,"_x47"],[2425,28,2032,23],[2425,30,2032,23,"_x48"],[2425,34,2032,23],[2426,10,2032,23],[2426,17,2032,23,"_create"],[2426,24,2032,23],[2426,25,2032,23,"apply"],[2426,30,2032,23],[2426,37,2032,23,"arguments"],[2426,46,2032,23],[2427,8,2032,23],[2428,8,2032,23],[2428,15,2032,17,"create"],[2428,21,2032,23],[2429,6,2032,23],[2430,4,2032,23],[2431,2,2032,23],[2432,2,2107,0],[2433,0,2108,0],[2434,0,2109,0],[2435,0,2110,0],[2436,0,2111,0],[2437,0,2112,0],[2438,0,2113,0],[2439,0,2114,0],[2440,0,2115,0],[2441,0,2116,0],[2442,0,2117,0],[2443,0,2118,0],[2444,0,2119,0],[2445,0,2120,0],[2446,0,2121,0],[2447,0,2122,0],[2448,2,2123,0],[2449,0,2124,0],[2450,0,2125,0],[2451,2,2126,0],[2451,11,2126,9,"_getBrowserName"],[2451,26,2126,24,"_getBrowserName"],[2451,27,2126,25,"userAgent"],[2451,36,2126,34],[2451,38,2126,36],[2452,4,2127,4],[2452,8,2127,10,"ua"],[2452,10,2127,12],[2452,13,2127,15,"userAgent"],[2452,22,2127,24],[2452,23,2127,25,"toLowerCase"],[2452,34,2127,36],[2452,35,2127,37],[2452,36,2127,38],[2453,4,2128,4],[2453,8,2128,8,"ua"],[2453,10,2128,10],[2453,11,2128,11,"includes"],[2453,19,2128,19],[2453,20,2128,20],[2453,28,2128,28],[2453,29,2128,29],[2453,33,2128,33,"ua"],[2453,35,2128,35],[2453,36,2128,36,"includes"],[2453,44,2128,44],[2453,45,2128,45],[2453,51,2128,51],[2453,52,2128,52],[2453,56,2128,56,"ua"],[2453,58,2128,58],[2453,59,2128,59,"includes"],[2453,67,2128,67],[2453,68,2128,68],[2453,76,2128,76],[2453,77,2128,77],[2453,79,2128,79],[2454,6,2129,8],[2454,13,2129,15],[2454,20,2129,22],[2454,21,2129,23],[2455,4,2130,4],[2455,5,2130,5],[2455,11,2131,9],[2455,15,2131,13,"_isIEMobile"],[2455,26,2131,24],[2455,27,2131,25,"ua"],[2455,29,2131,27],[2455,30,2131,28],[2455,32,2131,30],[2456,6,2132,8],[2457,6,2133,8],[2457,13,2133,15],[2457,23,2133,25],[2457,24,2133,26],[2458,4,2134,4],[2458,5,2134,5],[2458,11,2135,9],[2458,15,2135,13,"ua"],[2458,17,2135,15],[2458,18,2135,16,"includes"],[2458,26,2135,24],[2458,27,2135,25],[2458,33,2135,31],[2458,34,2135,32],[2458,38,2135,36,"ua"],[2458,40,2135,38],[2458,41,2135,39,"includes"],[2458,49,2135,47],[2458,50,2135,48],[2458,60,2135,58],[2458,61,2135,59],[2458,63,2135,61],[2459,6,2136,8],[2459,13,2136,15],[2459,17,2136,19],[2459,18,2136,20],[2460,4,2137,4],[2460,5,2137,5],[2460,11,2138,9],[2460,15,2138,13,"ua"],[2460,17,2138,15],[2460,18,2138,16,"includes"],[2460,26,2138,24],[2460,27,2138,25],[2460,34,2138,32],[2460,35,2138,33],[2460,37,2138,35],[2461,6,2139,8],[2461,13,2139,15],[2461,19,2139,21],[2461,20,2139,22],[2462,4,2140,4],[2462,5,2140,5],[2462,11,2141,9],[2462,15,2141,13,"_isFirefox"],[2462,25,2141,23],[2462,26,2141,24,"ua"],[2462,28,2141,26],[2462,29,2141,27],[2462,31,2141,29],[2463,6,2142,8],[2463,13,2142,15],[2463,22,2142,24],[2463,23,2142,25],[2464,4,2143,4],[2464,5,2143,5],[2464,11,2144,9],[2464,15,2144,13,"ua"],[2464,17,2144,15],[2464,18,2144,16,"includes"],[2464,26,2144,24],[2464,27,2144,25],[2464,34,2144,32],[2464,35,2144,33],[2464,37,2144,35],[2465,6,2145,8],[2465,13,2145,15],[2465,19,2145,21],[2465,20,2145,22],[2466,4,2146,4],[2466,5,2146,5],[2466,11,2147,9],[2466,15,2147,13,"_isBlackBerry"],[2466,28,2147,26],[2466,29,2147,27,"ua"],[2466,31,2147,29],[2466,32,2147,30],[2466,34,2147,32],[2467,6,2148,8],[2468,6,2149,8],[2468,13,2149,15],[2468,25,2149,27],[2468,26,2149,28],[2469,4,2150,4],[2469,5,2150,5],[2469,11,2151,9],[2469,15,2151,13,"_isWebOS"],[2469,23,2151,21],[2469,24,2151,22,"ua"],[2469,26,2151,24],[2469,27,2151,25],[2469,29,2151,27],[2470,6,2152,8],[2471,6,2153,8],[2471,13,2153,15],[2471,20,2153,22],[2471,21,2153,23],[2472,4,2154,4],[2472,5,2154,5],[2472,11,2155,9],[2472,15,2155,13,"_isSafari"],[2472,24,2155,22],[2472,25,2155,23,"ua"],[2472,27,2155,25],[2472,28,2155,26],[2472,30,2155,28],[2473,6,2156,8],[2473,13,2156,15],[2473,21,2156,23],[2473,22,2156,24],[2474,4,2157,4],[2474,5,2157,5],[2474,11,2158,9],[2474,15,2158,13],[2474,16,2158,14,"ua"],[2474,18,2158,16],[2474,19,2158,17,"includes"],[2474,27,2158,25],[2474,28,2158,26],[2474,37,2158,35],[2474,38,2158,36],[2474,42,2158,40,"_isChromeIOS"],[2474,54,2158,52],[2474,55,2158,53,"ua"],[2474,57,2158,55],[2474,58,2158,56],[2474,63,2159,8],[2474,64,2159,9,"ua"],[2474,66,2159,11],[2474,67,2159,12,"includes"],[2474,75,2159,20],[2474,76,2159,21],[2474,83,2159,28],[2474,84,2159,29],[2474,86,2159,31],[2475,6,2160,8],[2475,13,2160,15],[2475,21,2160,23],[2475,22,2160,24],[2476,4,2161,4],[2476,5,2161,5],[2476,11,2162,9],[2476,15,2162,13,"_isAndroid"],[2476,25,2162,23],[2476,26,2162,24,"ua"],[2476,28,2162,26],[2476,29,2162,27],[2476,31,2162,29],[2477,6,2163,8],[2478,6,2164,8],[2478,13,2164,15],[2478,22,2164,24],[2478,23,2164,25],[2479,4,2165,4],[2479,5,2165,5],[2479,11,2166,9],[2480,6,2167,8],[2481,6,2168,8],[2481,10,2168,14,"re"],[2481,12,2168,16],[2481,15,2168,19],[2481,48,2168,52],[2482,6,2169,8],[2482,10,2169,14,"matches"],[2482,17,2169,21],[2482,20,2169,24,"userAgent"],[2482,29,2169,33],[2482,30,2169,34,"match"],[2482,35,2169,39],[2482,36,2169,40,"re"],[2482,38,2169,42],[2482,39,2169,43],[2483,6,2170,8],[2483,10,2170,12,"matches"],[2483,17,2170,19],[2483,19,2170,21,"length"],[2483,25,2170,27],[2483,30,2170,32],[2483,31,2170,33],[2483,33,2170,35],[2484,8,2171,12],[2484,15,2171,19,"matches"],[2484,22,2171,26],[2484,23,2171,27],[2484,24,2171,28],[2484,25,2171,29],[2485,6,2172,8],[2486,4,2173,4],[2487,4,2174,4],[2487,11,2174,11],[2487,18,2174,18],[2487,19,2174,19],[2488,2,2175,0],[2489,2,2176,0],[2489,11,2176,9,"_isFirefox"],[2489,21,2176,19,"_isFirefox"],[2489,22,2176,19],[2489,24,2176,39],[2490,4,2176,39],[2490,8,2176,20,"ua"],[2490,10,2176,22],[2490,13,2176,22,"arguments"],[2490,22,2176,22],[2490,23,2176,22,"length"],[2490,29,2176,22],[2490,37,2176,22,"arguments"],[2490,46,2176,22],[2490,54,2176,22,"undefined"],[2490,63,2176,22],[2490,66,2176,22,"arguments"],[2490,75,2176,22],[2490,81,2176,25,"util"],[2490,85,2176,29],[2490,86,2176,30,"getUA"],[2490,91,2176,35],[2490,92,2176,36],[2490,93,2176,37],[2491,4,2177,4],[2491,11,2177,11],[2491,23,2177,23],[2491,24,2177,24,"test"],[2491,28,2177,28],[2491,29,2177,29,"ua"],[2491,31,2177,31],[2491,32,2177,32],[2492,2,2178,0],[2493,2,2179,0],[2493,11,2179,9,"_isSafari"],[2493,20,2179,18,"_isSafari"],[2493,21,2179,18],[2493,23,2179,45],[2494,4,2179,45],[2494,8,2179,19,"userAgent"],[2494,17,2179,28],[2494,20,2179,28,"arguments"],[2494,29,2179,28],[2494,30,2179,28,"length"],[2494,36,2179,28],[2494,44,2179,28,"arguments"],[2494,53,2179,28],[2494,61,2179,28,"undefined"],[2494,70,2179,28],[2494,73,2179,28,"arguments"],[2494,82,2179,28],[2494,88,2179,31,"util"],[2494,92,2179,35],[2494,93,2179,36,"getUA"],[2494,98,2179,41],[2494,99,2179,42],[2494,100,2179,43],[2495,4,2180,4],[2495,8,2180,10,"ua"],[2495,10,2180,12],[2495,13,2180,15,"userAgent"],[2495,22,2180,24],[2495,23,2180,25,"toLowerCase"],[2495,34,2180,36],[2495,35,2180,37],[2495,36,2180,38],[2496,4,2181,4],[2496,11,2181,12,"ua"],[2496,13,2181,14],[2496,14,2181,15,"includes"],[2496,22,2181,23],[2496,23,2181,24],[2496,32,2181,33],[2496,33,2181,34],[2496,37,2182,8],[2496,38,2182,9,"ua"],[2496,40,2182,11],[2496,41,2182,12,"includes"],[2496,49,2182,20],[2496,50,2182,21],[2496,59,2182,30],[2496,60,2182,31],[2496,64,2183,8],[2496,65,2183,9,"ua"],[2496,67,2183,11],[2496,68,2183,12,"includes"],[2496,76,2183,20],[2496,77,2183,21],[2496,85,2183,29],[2496,86,2183,30],[2496,90,2184,8],[2496,91,2184,9,"ua"],[2496,93,2184,11],[2496,94,2184,12,"includes"],[2496,102,2184,20],[2496,103,2184,21],[2496,112,2184,30],[2496,113,2184,31],[2497,2,2185,0],[2498,2,2186,0],[2498,11,2186,9,"_isChromeIOS"],[2498,23,2186,21,"_isChromeIOS"],[2498,24,2186,21],[2498,26,2186,41],[2499,4,2186,41],[2499,8,2186,22,"ua"],[2499,10,2186,24],[2499,13,2186,24,"arguments"],[2499,22,2186,24],[2499,23,2186,24,"length"],[2499,29,2186,24],[2499,37,2186,24,"arguments"],[2499,46,2186,24],[2499,54,2186,24,"undefined"],[2499,63,2186,24],[2499,66,2186,24,"arguments"],[2499,75,2186,24],[2499,81,2186,27,"util"],[2499,85,2186,31],[2499,86,2186,32,"getUA"],[2499,91,2186,37],[2499,92,2186,38],[2499,93,2186,39],[2500,4,2187,4],[2500,11,2187,11],[2500,21,2187,21],[2500,22,2187,22,"test"],[2500,26,2187,26],[2500,27,2187,27,"ua"],[2500,29,2187,29],[2500,30,2187,30],[2501,2,2188,0],[2502,2,2189,0],[2502,11,2189,9,"_isIEMobile"],[2502,22,2189,20,"_isIEMobile"],[2502,23,2189,20],[2502,25,2189,40],[2503,4,2189,40],[2503,8,2189,21,"ua"],[2503,10,2189,23],[2503,13,2189,23,"arguments"],[2503,22,2189,23],[2503,23,2189,23,"length"],[2503,29,2189,23],[2503,37,2189,23,"arguments"],[2503,46,2189,23],[2503,54,2189,23,"undefined"],[2503,63,2189,23],[2503,66,2189,23,"arguments"],[2503,75,2189,23],[2503,81,2189,26,"util"],[2503,85,2189,30],[2503,86,2189,31,"getUA"],[2503,91,2189,36],[2503,92,2189,37],[2503,93,2189,38],[2504,4,2190,4],[2504,11,2190,11],[2504,22,2190,22],[2504,23,2190,23,"test"],[2504,27,2190,27],[2504,28,2190,28,"ua"],[2504,30,2190,30],[2504,31,2190,31],[2505,2,2191,0],[2506,2,2192,0],[2506,11,2192,9,"_isAndroid"],[2506,21,2192,19,"_isAndroid"],[2506,22,2192,19],[2506,24,2192,39],[2507,4,2192,39],[2507,8,2192,20,"ua"],[2507,10,2192,22],[2507,13,2192,22,"arguments"],[2507,22,2192,22],[2507,23,2192,22,"length"],[2507,29,2192,22],[2507,37,2192,22,"arguments"],[2507,46,2192,22],[2507,54,2192,22,"undefined"],[2507,63,2192,22],[2507,66,2192,22,"arguments"],[2507,75,2192,22],[2507,81,2192,25,"util"],[2507,85,2192,29],[2507,86,2192,30,"getUA"],[2507,91,2192,35],[2507,92,2192,36],[2507,93,2192,37],[2508,4,2193,4],[2508,11,2193,11],[2508,21,2193,21],[2508,22,2193,22,"test"],[2508,26,2193,26],[2508,27,2193,27,"ua"],[2508,29,2193,29],[2508,30,2193,30],[2509,2,2194,0],[2510,2,2195,0],[2510,11,2195,9,"_isBlackBerry"],[2510,24,2195,22,"_isBlackBerry"],[2510,25,2195,22],[2510,27,2195,42],[2511,4,2195,42],[2511,8,2195,23,"ua"],[2511,10,2195,25],[2511,13,2195,25,"arguments"],[2511,22,2195,25],[2511,23,2195,25,"length"],[2511,29,2195,25],[2511,37,2195,25,"arguments"],[2511,46,2195,25],[2511,54,2195,25,"undefined"],[2511,63,2195,25],[2511,66,2195,25,"arguments"],[2511,75,2195,25],[2511,81,2195,28,"util"],[2511,85,2195,32],[2511,86,2195,33,"getUA"],[2511,91,2195,38],[2511,92,2195,39],[2511,93,2195,40],[2512,4,2196,4],[2512,11,2196,11],[2512,24,2196,24],[2512,25,2196,25,"test"],[2512,29,2196,29],[2512,30,2196,30,"ua"],[2512,32,2196,32],[2512,33,2196,33],[2513,2,2197,0],[2514,2,2198,0],[2514,11,2198,9,"_isWebOS"],[2514,19,2198,17,"_isWebOS"],[2514,20,2198,17],[2514,22,2198,37],[2515,4,2198,37],[2515,8,2198,18,"ua"],[2515,10,2198,20],[2515,13,2198,20,"arguments"],[2515,22,2198,20],[2515,23,2198,20,"length"],[2515,29,2198,20],[2515,37,2198,20,"arguments"],[2515,46,2198,20],[2515,54,2198,20,"undefined"],[2515,63,2198,20],[2515,66,2198,20,"arguments"],[2515,75,2198,20],[2515,81,2198,23,"util"],[2515,85,2198,27],[2515,86,2198,28,"getUA"],[2515,91,2198,33],[2515,92,2198,34],[2515,93,2198,35],[2516,4,2199,4],[2516,11,2199,11],[2516,19,2199,19],[2516,20,2199,20,"test"],[2516,24,2199,24],[2516,25,2199,25,"ua"],[2516,27,2199,27],[2516,28,2199,28],[2517,2,2200,0],[2518,2,2201,0],[2518,11,2201,9,"_isIOS"],[2518,17,2201,15,"_isIOS"],[2518,18,2201,15],[2518,20,2201,35],[2519,4,2201,35],[2519,8,2201,16,"ua"],[2519,10,2201,18],[2519,13,2201,18,"arguments"],[2519,22,2201,18],[2519,23,2201,18,"length"],[2519,29,2201,18],[2519,37,2201,18,"arguments"],[2519,46,2201,18],[2519,54,2201,18,"undefined"],[2519,63,2201,18],[2519,66,2201,18,"arguments"],[2519,75,2201,18],[2519,81,2201,21,"util"],[2519,85,2201,25],[2519,86,2201,26,"getUA"],[2519,91,2201,31],[2519,92,2201,32],[2519,93,2201,33],[2520,4,2202,4],[2520,11,2202,12],[2520,30,2202,31],[2520,31,2202,32,"test"],[2520,35,2202,36],[2520,36,2202,37,"ua"],[2520,38,2202,39],[2520,39,2202,40],[2520,43,2203,9],[2520,55,2203,21],[2520,56,2203,22,"test"],[2520,60,2203,26],[2520,61,2203,27,"ua"],[2520,63,2203,29],[2520,64,2203,30],[2520,68,2203,34],[2520,77,2203,43],[2520,78,2203,44,"test"],[2520,82,2203,48],[2520,83,2203,49,"ua"],[2520,85,2203,51],[2520,86,2203,53],[2521,2,2204,0],[2522,2,2205,0],[2522,11,2205,9,"_isIOS7Or8"],[2522,21,2205,19,"_isIOS7Or8"],[2522,22,2205,19],[2522,24,2205,39],[2523,4,2205,39],[2523,8,2205,20,"ua"],[2523,10,2205,22],[2523,13,2205,22,"arguments"],[2523,22,2205,22],[2523,23,2205,22,"length"],[2523,29,2205,22],[2523,37,2205,22,"arguments"],[2523,46,2205,22],[2523,54,2205,22,"undefined"],[2523,63,2205,22],[2523,66,2205,22,"arguments"],[2523,75,2205,22],[2523,81,2205,25,"util"],[2523,85,2205,29],[2523,86,2205,30,"getUA"],[2523,91,2205,35],[2523,92,2205,36],[2523,93,2205,37],[2524,4,2206,4],[2524,11,2206,12],[2524,41,2206,42],[2524,42,2206,43,"test"],[2524,46,2206,47],[2524,47,2206,48,"ua"],[2524,49,2206,50],[2524,50,2206,51],[2524,54,2207,8],[2524,84,2207,38],[2524,85,2207,39,"test"],[2524,89,2207,43],[2524,90,2207,44,"ua"],[2524,92,2207,46],[2524,93,2207,47],[2525,2,2208,0],[2526,2,2209,0],[2526,11,2209,9,"_isIOSStandalone"],[2526,27,2209,25,"_isIOSStandalone"],[2526,28,2209,25],[2526,30,2209,45],[2527,4,2209,45],[2527,8,2209,26,"ua"],[2527,10,2209,28],[2527,13,2209,28,"arguments"],[2527,22,2209,28],[2527,23,2209,28,"length"],[2527,29,2209,28],[2527,37,2209,28,"arguments"],[2527,46,2209,28],[2527,54,2209,28,"undefined"],[2527,63,2209,28],[2527,66,2209,28,"arguments"],[2527,75,2209,28],[2527,81,2209,31,"util"],[2527,85,2209,35],[2527,86,2209,36,"getUA"],[2527,91,2209,41],[2527,92,2209,42],[2527,93,2209,43],[2528,4,2210,4],[2528,11,2210,11,"_isIOS"],[2528,17,2210,17],[2528,18,2210,18,"ua"],[2528,20,2210,20],[2528,21,2210,21],[2528,25,2210,25],[2528,26,2210,26],[2528,27,2210,27,"window"],[2528,33,2210,33],[2528,34,2210,34,"navigator"],[2528,43,2210,43],[2528,45,2210,45,"standalone"],[2528,55,2210,55],[2529,2,2211,0],[2530,2,2212,0],[2530,11,2212,9,"_isIE10"],[2530,18,2212,16,"_isIE10"],[2530,19,2212,16],[2530,21,2212,19],[2531,4,2213,4],[2531,11,2213,11,"util"],[2531,15,2213,15],[2531,16,2213,16,"isIE"],[2531,20,2213,20],[2531,21,2213,21],[2531,22,2213,22],[2531,26,2213,26,"document"],[2531,34,2213,34],[2531,35,2213,35,"documentMode"],[2531,47,2213,47],[2531,52,2213,52],[2531,54,2213,54],[2532,2,2214,0],[2533,2,2215,0],[2533,11,2215,9,"_isMobileBrowser"],[2533,27,2215,25,"_isMobileBrowser"],[2533,28,2215,25],[2533,30,2215,45],[2534,4,2215,45],[2534,8,2215,26,"ua"],[2534,10,2215,28],[2534,13,2215,28,"arguments"],[2534,22,2215,28],[2534,23,2215,28,"length"],[2534,29,2215,28],[2534,37,2215,28,"arguments"],[2534,46,2215,28],[2534,54,2215,28,"undefined"],[2534,63,2215,28],[2534,66,2215,28,"arguments"],[2534,75,2215,28],[2534,81,2215,31,"util"],[2534,85,2215,35],[2534,86,2215,36,"getUA"],[2534,91,2215,41],[2534,92,2215,42],[2534,93,2215,43],[2535,4,2216,4],[2536,4,2217,4],[2536,11,2217,12,"_isIOS"],[2536,17,2217,18],[2536,18,2217,19,"ua"],[2536,20,2217,21],[2536,21,2217,22],[2536,25,2218,8,"_isAndroid"],[2536,35,2218,18],[2536,36,2218,19,"ua"],[2536,38,2218,21],[2536,39,2218,22],[2536,43,2219,8,"_isWebOS"],[2536,51,2219,16],[2536,52,2219,17,"ua"],[2536,54,2219,19],[2536,55,2219,20],[2536,59,2220,8,"_isBlackBerry"],[2536,72,2220,21],[2536,73,2220,22,"ua"],[2536,75,2220,24],[2536,76,2220,25],[2536,80,2221,8],[2536,96,2221,24],[2536,97,2221,25,"test"],[2536,101,2221,29],[2536,102,2221,30,"ua"],[2536,104,2221,32],[2536,105,2221,33],[2536,109,2222,8,"_isIEMobile"],[2536,120,2222,19],[2536,121,2222,20,"ua"],[2536,123,2222,22],[2536,124,2222,23],[2537,2,2223,0],[2539,2,2225,0],[2540,0,2226,0],[2541,0,2227,0],[2542,0,2228,0],[2543,0,2229,0],[2544,0,2230,0],[2545,0,2231,0],[2546,0,2232,0],[2547,0,2233,0],[2548,0,2234,0],[2549,0,2235,0],[2550,0,2236,0],[2551,0,2237,0],[2552,0,2238,0],[2553,0,2239,0],[2554,0,2240,0],[2555,2,2241,0],[2556,0,2242,0],[2557,0,2243,0],[2558,2,2244,0],[2558,11,2244,9,"_getClientVersion"],[2558,28,2244,26,"_getClientVersion"],[2558,29,2244,27,"clientPlatform"],[2558,43,2244,41],[2558,45,2244,60],[2559,4,2244,60],[2559,8,2244,43,"frameworks"],[2559,18,2244,53],[2559,21,2244,53,"arguments"],[2559,30,2244,53],[2559,31,2244,53,"length"],[2559,37,2244,53],[2559,45,2244,53,"arguments"],[2559,54,2244,53],[2559,62,2244,53,"undefined"],[2559,71,2244,53],[2559,74,2244,53,"arguments"],[2559,83,2244,53],[2559,89,2244,56],[2559,91,2244,58],[2560,4,2245,4],[2560,8,2245,8,"reportedPlatform"],[2560,24,2245,24],[2561,4,2246,4],[2561,12,2246,12,"clientPlatform"],[2561,26,2246,26],[2562,6,2247,8],[2562,11,2247,13],[2562,20,2247,22],[2562,21,2247,23],[2563,8,2248,12],[2564,8,2249,12,"reportedPlatform"],[2564,24,2249,28],[2564,27,2249,31,"_getBrowserName"],[2564,42,2249,46],[2564,43,2249,47,"util"],[2564,47,2249,51],[2564,48,2249,52,"getUA"],[2564,53,2249,57],[2564,54,2249,58],[2564,55,2249,59],[2564,56,2249,60],[2565,8,2250,12],[2566,6,2251,8],[2566,11,2251,13],[2566,19,2251,21],[2566,20,2251,22],[2567,8,2252,12],[2568,8,2253,12],[2569,8,2254,12],[2570,8,2255,12,"reportedPlatform"],[2570,24,2255,28],[2570,27,2255,31],[2570,30,2255,34,"_getBrowserName"],[2570,45,2255,49],[2570,46,2255,50,"util"],[2570,50,2255,54],[2570,51,2255,55,"getUA"],[2570,56,2255,60],[2570,57,2255,61],[2570,58,2255,62],[2570,59,2255,63],[2570,63,2255,67,"clientPlatform"],[2570,77,2255,81],[2570,79,2255,83],[2571,8,2256,12],[2572,6,2257,8],[2573,8,2258,12,"reportedPlatform"],[2573,24,2258,28],[2573,27,2258,31,"clientPlatform"],[2573,41,2258,45],[2574,4,2259,4],[2575,4,2260,4],[2575,8,2260,10,"reportedFrameworks"],[2575,26,2260,28],[2575,29,2260,31,"frameworks"],[2575,39,2260,41],[2575,40,2260,42,"length"],[2575,46,2260,48],[2575,49,2261,10,"frameworks"],[2575,59,2261,20],[2575,60,2261,21,"join"],[2575,64,2261,25],[2575,65,2261,26],[2575,68,2261,29],[2575,69,2261,30],[2575,72,2262,10],[2575,90,2262,28],[2575,91,2262,29],[2575,92,2262,30],[2576,4,2263,4],[2576,11,2263,11],[2576,14,2263,14,"reportedPlatform"],[2576,30,2263,30],[2576,34,2263,34],[2576,42,2263,42],[2576,43,2263,43],[2576,78,2263,78,"app"],[2576,81,2263,81],[2576,82,2263,82,"SDK_VERSION"],[2576,93,2263,93],[2576,97,2263,97,"reportedFrameworks"],[2576,115,2263,115],[2576,117,2263,117],[2577,2,2264,0],[2579,2,2266,0],[2580,0,2267,0],[2581,0,2268,0],[2582,0,2269,0],[2583,0,2270,0],[2584,0,2271,0],[2585,0,2272,0],[2586,0,2273,0],[2587,0,2274,0],[2588,0,2275,0],[2589,0,2276,0],[2590,0,2277,0],[2591,0,2278,0],[2592,0,2279,0],[2593,0,2280,0],[2594,0,2281,0],[2595,2,2266,0],[2595,6,2282,6,"AuthMiddlewareQueue"],[2595,25,2282,25],[2596,4,2283,4],[2596,13,2283,4,"AuthMiddlewareQueue"],[2596,33,2283,16,"auth"],[2596,37,2283,20],[2596,39,2283,22],[2597,6,2283,22,"_classCallCheck"],[2597,21,2283,22],[2597,28,2283,22,"AuthMiddlewareQueue"],[2597,47,2283,22],[2598,6,2284,8],[2598,10,2284,12],[2598,11,2284,13,"auth"],[2598,15,2284,17],[2598,18,2284,20,"auth"],[2598,22,2284,24],[2599,6,2285,8],[2599,10,2285,12],[2599,11,2285,13,"queue"],[2599,16,2285,18],[2599,19,2285,21],[2599,21,2285,23],[2600,4,2286,4],[2601,4,2286,5],[2601,11,2286,5,"_createClass"],[2601,23,2286,5],[2601,24,2286,5,"AuthMiddlewareQueue"],[2601,43,2286,5],[2602,6,2286,5,"key"],[2602,9,2286,5],[2603,6,2286,5,"value"],[2603,11,2286,5],[2603,13,2287,4],[2603,22,2287,4,"pushCallback"],[2603,34,2287,16,"pushCallback"],[2603,35,2287,17,"callback"],[2603,43,2287,25],[2603,45,2287,27,"onAbort"],[2603,52,2287,34],[2603,54,2287,36],[2604,8,2288,8],[2605,8,2289,8],[2606,8,2290,8],[2606,12,2290,14,"wrappedCallback"],[2606,27,2290,29],[2606,30,2290,33,"user"],[2606,34,2290,37],[2606,38,2290,42],[2606,42,2290,46,"Promise"],[2606,49,2290,53],[2606,50,2290,54],[2606,51,2290,55,"resolve"],[2606,58,2290,62],[2606,60,2290,64,"reject"],[2606,66,2290,70],[2606,71,2290,75],[2607,10,2291,12],[2607,14,2291,16],[2608,12,2292,16],[2608,16,2292,22,"result"],[2608,22,2292,28],[2608,25,2292,31,"callback"],[2608,33,2292,39],[2608,34,2292,40,"user"],[2608,38,2292,44],[2608,39,2292,45],[2609,12,2293,16],[2610,12,2294,16],[2611,12,2295,16,"resolve"],[2611,19,2295,23],[2611,20,2295,24,"result"],[2611,26,2295,30],[2611,27,2295,31],[2612,10,2296,12],[2612,11,2296,13],[2612,12,2297,12],[2612,19,2297,19,"e"],[2612,20,2297,20],[2612,22,2297,22],[2613,12,2298,16],[2614,12,2299,16,"reject"],[2614,18,2299,22],[2614,19,2299,23,"e"],[2614,20,2299,24],[2614,21,2299,25],[2615,10,2300,12],[2616,8,2301,8],[2616,9,2301,9],[2616,10,2301,10],[2617,8,2302,8],[2618,8,2303,8,"wrappedCallback"],[2618,23,2303,23],[2618,24,2303,24,"onAbort"],[2618,31,2303,31],[2618,34,2303,34,"onAbort"],[2618,41,2303,41],[2619,8,2304,8],[2619,12,2304,12],[2619,13,2304,13,"queue"],[2619,18,2304,18],[2619,19,2304,19,"push"],[2619,23,2304,23],[2619,24,2304,24,"wrappedCallback"],[2619,39,2304,39],[2619,40,2304,40],[2620,8,2305,8],[2620,12,2305,14,"index"],[2620,17,2305,19],[2620,20,2305,22],[2620,24,2305,26],[2620,25,2305,27,"queue"],[2620,30,2305,32],[2620,31,2305,33,"length"],[2620,37,2305,39],[2620,40,2305,42],[2620,41,2305,43],[2621,8,2306,8],[2621,15,2306,15],[2621,21,2306,21],[2622,10,2307,12],[2623,10,2308,12],[2624,10,2309,12],[2624,14,2309,16],[2624,15,2309,17,"queue"],[2624,20,2309,22],[2624,21,2309,23,"index"],[2624,26,2309,28],[2624,27,2309,29],[2624,30,2309,32],[2624,36,2309,38,"Promise"],[2624,43,2309,45],[2624,44,2309,46,"resolve"],[2624,51,2309,53],[2624,52,2309,54],[2624,53,2309,55],[2625,8,2310,8],[2625,9,2310,9],[2626,6,2311,4],[2627,4,2311,5],[2628,6,2311,5,"key"],[2628,9,2311,5],[2629,6,2311,5,"value"],[2629,11,2311,5],[2630,8,2311,5],[2630,12,2311,5,"_runMiddleware"],[2630,26,2311,5],[2630,29,2311,5,"_asyncToGenerator"],[2630,46,2311,5],[2630,47,2312,4],[2630,58,2312,24,"nextUser"],[2630,66,2312,32],[2630,68,2312,34],[2631,10,2313,8],[2631,14,2313,12],[2631,18,2313,16],[2631,19,2313,17,"auth"],[2631,23,2313,21],[2631,24,2313,22,"currentUser"],[2631,35,2313,33],[2631,40,2313,38,"nextUser"],[2631,48,2313,46],[2631,50,2313,48],[2632,12,2314,12],[2633,10,2315,8],[2634,10,2316,8],[2635,10,2317,8],[2636,10,2318,8],[2636,14,2318,14,"onAbortStack"],[2636,26,2318,26],[2636,29,2318,29],[2636,31,2318,31],[2637,10,2319,8],[2637,14,2319,12],[2638,12,2320,12],[2638,17,2320,17],[2638,21,2320,23,"beforeStateCallback"],[2638,40,2320,42],[2638,44,2320,46],[2638,48,2320,50],[2638,49,2320,51,"queue"],[2638,54,2320,56],[2638,56,2320,58],[2639,14,2321,16],[2639,20,2321,22,"beforeStateCallback"],[2639,39,2321,41],[2639,40,2321,42,"nextUser"],[2639,48,2321,50],[2639,49,2321,51],[2640,14,2322,16],[2641,14,2323,16],[2641,18,2323,20,"beforeStateCallback"],[2641,37,2323,39],[2641,38,2323,40,"onAbort"],[2641,45,2323,47],[2641,47,2323,49],[2642,16,2324,20,"onAbortStack"],[2642,28,2324,32],[2642,29,2324,33,"push"],[2642,33,2324,37],[2642,34,2324,38,"beforeStateCallback"],[2642,53,2324,57],[2642,54,2324,58,"onAbort"],[2642,61,2324,65],[2642,62,2324,66],[2643,14,2325,16],[2644,12,2326,12],[2645,10,2327,8],[2645,11,2327,9],[2645,12,2328,8],[2645,19,2328,15,"e"],[2645,20,2328,16],[2645,22,2328,18],[2646,12,2329,12],[2647,12,2330,12],[2648,12,2331,12,"onAbortStack"],[2648,24,2331,24],[2648,25,2331,25,"reverse"],[2648,32,2331,32],[2648,33,2331,33],[2648,34,2331,34],[2649,12,2332,12],[2649,17,2332,17],[2649,21,2332,23,"onAbort"],[2649,28,2332,30],[2649,32,2332,34,"onAbortStack"],[2649,44,2332,46],[2649,46,2332,48],[2650,14,2333,16],[2650,18,2333,20],[2651,16,2334,20,"onAbort"],[2651,23,2334,27],[2651,24,2334,28],[2651,25,2334,29],[2652,14,2335,16],[2652,15,2335,17],[2652,16,2336,16],[2652,23,2336,23,"_"],[2652,24,2336,24],[2652,26,2336,26],[2653,16,2337,20],[2654,14,2337,20],[2655,12,2339,12],[2656,12,2340,12],[2656,18,2340,18],[2656,22,2340,22],[2656,23,2340,23,"auth"],[2656,27,2340,27],[2656,28,2340,28,"_errorFactory"],[2656,41,2340,41],[2656,42,2340,42,"create"],[2656,48,2340,48],[2656,49,2340,49],[2656,64,2340,64],[2656,65,2340,65],[2656,100,2340,100],[2657,14,2341,16,"originalMessage"],[2657,29,2341,31],[2657,31,2341,33,"e"],[2657,32,2341,34],[2657,34,2341,36,"message"],[2658,12,2342,12],[2658,13,2342,13],[2658,14,2342,14],[2659,10,2343,8],[2660,8,2344,4],[2660,9,2344,5],[2661,8,2344,5],[2661,17,2312,10,"runMiddleware"],[2661,30,2312,23,"runMiddleware"],[2661,31,2312,23,"_x51"],[2661,35,2312,23],[2662,10,2312,23],[2662,17,2312,23,"_runMiddleware"],[2662,31,2312,23],[2662,32,2312,23,"apply"],[2662,37,2312,23],[2662,44,2312,23,"arguments"],[2662,53,2312,23],[2663,8,2312,23],[2664,8,2312,23],[2664,15,2312,10,"runMiddleware"],[2664,28,2312,23],[2665,6,2312,23],[2666,4,2312,23],[2667,2,2312,23],[2668,2,2347,0],[2669,0,2348,0],[2670,0,2349,0],[2671,0,2350,0],[2672,0,2351,0],[2673,0,2352,0],[2674,0,2353,0],[2675,0,2354,0],[2676,0,2355,0],[2677,0,2356,0],[2678,0,2357,0],[2679,0,2358,0],[2680,0,2359,0],[2681,0,2360,0],[2682,0,2361,0],[2683,0,2362,0],[2684,2,2363,0],[2685,0,2364,0],[2686,0,2365,0],[2687,0,2366,0],[2688,0,2367,0],[2689,0,2368,0],[2690,0,2369,0],[2691,2,2363,0],[2691,11,2370,15,"_getPasswordPolicy"],[2691,29,2370,33,"_getPasswordPolicy"],[2691,30,2370,33,"_x52"],[2691,34,2370,33],[2692,4,2370,33],[2692,11,2370,33,"_getPasswordPolicy2"],[2692,30,2370,33],[2692,31,2370,33,"apply"],[2692,36,2370,33],[2692,43,2370,33,"arguments"],[2692,52,2370,33],[2693,2,2370,33],[2694,2,2374,0],[2695,0,2375,0],[2696,0,2376,0],[2697,0,2377,0],[2698,0,2378,0],[2699,0,2379,0],[2700,0,2380,0],[2701,0,2381,0],[2702,0,2382,0],[2703,0,2383,0],[2704,0,2384,0],[2705,0,2385,0],[2706,0,2386,0],[2707,0,2387,0],[2708,0,2388,0],[2709,0,2389,0],[2710,2,2390,0],[2711,2,2390,0],[2711,11,2390,0,"_getPasswordPolicy2"],[2711,31,2390,0],[2712,4,2390,0,"_getPasswordPolicy2"],[2712,23,2390,0],[2712,26,2390,0,"_asyncToGenerator"],[2712,43,2390,0],[2712,44,2370,0],[2712,55,2370,34,"auth"],[2712,59,2370,38],[2712,61,2370,54],[2713,6,2370,54],[2713,10,2370,40,"request"],[2713,17,2370,47],[2713,20,2370,47,"arguments"],[2713,29,2370,47],[2713,30,2370,47,"length"],[2713,36,2370,47],[2713,44,2370,47,"arguments"],[2713,53,2370,47],[2713,61,2370,47,"undefined"],[2713,70,2370,47],[2713,73,2370,47,"arguments"],[2713,82,2370,47],[2713,88,2370,50],[2713,89,2370,51],[2713,90,2370,52],[2714,6,2371,4],[2714,13,2371,11,"_performApiRequest"],[2714,31,2371,29],[2714,32,2371,30,"auth"],[2714,36,2371,34],[2714,38,2371,36],[2714,43,2371,41],[2714,44,2371,42],[2714,66,2371,64],[2714,86,2371,84],[2714,87,2371,85],[2714,123,2371,121,"_addTidIfNecessary"],[2714,141,2371,139],[2714,142,2371,140,"auth"],[2714,146,2371,144],[2714,148,2371,146,"request"],[2714,155,2371,153],[2714,156,2371,154],[2714,157,2371,155],[2715,4,2372,0],[2715,5,2372,1],[2716,4,2372,1],[2716,11,2372,1,"_getPasswordPolicy2"],[2716,30,2372,1],[2716,31,2372,1,"apply"],[2716,36,2372,1],[2716,43,2372,1,"arguments"],[2716,52,2372,1],[2717,2,2372,1],[2718,2,2391,0],[2718,6,2391,6,"MINIMUM_MIN_PASSWORD_LENGTH"],[2718,33,2391,33],[2718,36,2391,36],[2718,37,2391,37],[2719,2,2392,0],[2720,0,2393,0],[2721,0,2394,0],[2722,0,2395,0],[2723,0,2396,0],[2724,2,2392,0],[2724,6,2397,6,"PasswordPolicyImpl"],[2724,24,2397,24],[2725,4,2398,4],[2725,13,2398,4,"PasswordPolicyImpl"],[2725,32,2398,16,"response"],[2725,40,2398,24],[2725,42,2398,26],[2726,6,2398,26,"_classCallCheck"],[2726,21,2398,26],[2726,28,2398,26,"PasswordPolicyImpl"],[2726,46,2398,26],[2727,6,2399,8],[2728,6,2400,8],[2728,10,2400,14,"responseOptions"],[2728,25,2400,29],[2728,28,2400,32,"response"],[2728,36,2400,40],[2728,37,2400,41,"customStrengthOptions"],[2728,58,2400,62],[2729,6,2401,8],[2729,10,2401,12],[2729,11,2401,13,"customStrengthOptions"],[2729,32,2401,34],[2729,35,2401,37],[2729,36,2401,38],[2729,37,2401,39],[2730,6,2402,8],[2731,6,2403,8],[2731,10,2403,12],[2731,11,2403,13,"customStrengthOptions"],[2731,32,2403,34],[2731,33,2403,35,"minPasswordLength"],[2731,50,2403,52],[2731,53,2404,12,"responseOptions"],[2731,68,2404,27],[2731,69,2404,28,"minPasswordLength"],[2731,86,2404,45],[2731,90,2404,49,"MINIMUM_MIN_PASSWORD_LENGTH"],[2731,117,2404,76],[2732,6,2405,8],[2732,10,2405,12,"responseOptions"],[2732,25,2405,27],[2732,26,2405,28,"maxPasswordLength"],[2732,43,2405,45],[2732,45,2405,47],[2733,8,2406,12],[2733,12,2406,16],[2733,13,2406,17,"customStrengthOptions"],[2733,34,2406,38],[2733,35,2406,39,"maxPasswordLength"],[2733,52,2406,56],[2733,55,2407,16,"responseOptions"],[2733,70,2407,31],[2733,71,2407,32,"maxPasswordLength"],[2733,88,2407,49],[2734,6,2408,8],[2735,6,2409,8],[2735,10,2409,12,"responseOptions"],[2735,25,2409,27],[2735,26,2409,28,"containsLowercaseCharacter"],[2735,52,2409,54],[2735,57,2409,59,"undefined"],[2735,66,2409,68],[2735,68,2409,70],[2736,8,2410,12],[2736,12,2410,16],[2736,13,2410,17,"customStrengthOptions"],[2736,34,2410,38],[2736,35,2410,39,"containsLowercaseLetter"],[2736,58,2410,62],[2736,61,2411,16,"responseOptions"],[2736,76,2411,31],[2736,77,2411,32,"containsLowercaseCharacter"],[2736,103,2411,58],[2737,6,2412,8],[2738,6,2413,8],[2738,10,2413,12,"responseOptions"],[2738,25,2413,27],[2738,26,2413,28,"containsUppercaseCharacter"],[2738,52,2413,54],[2738,57,2413,59,"undefined"],[2738,66,2413,68],[2738,68,2413,70],[2739,8,2414,12],[2739,12,2414,16],[2739,13,2414,17,"customStrengthOptions"],[2739,34,2414,38],[2739,35,2414,39,"containsUppercaseLetter"],[2739,58,2414,62],[2739,61,2415,16,"responseOptions"],[2739,76,2415,31],[2739,77,2415,32,"containsUppercaseCharacter"],[2739,103,2415,58],[2740,6,2416,8],[2741,6,2417,8],[2741,10,2417,12,"responseOptions"],[2741,25,2417,27],[2741,26,2417,28,"containsNumericCharacter"],[2741,50,2417,52],[2741,55,2417,57,"undefined"],[2741,64,2417,66],[2741,66,2417,68],[2742,8,2418,12],[2742,12,2418,16],[2742,13,2418,17,"customStrengthOptions"],[2742,34,2418,38],[2742,35,2418,39,"containsNumericCharacter"],[2742,59,2418,63],[2742,62,2419,16,"responseOptions"],[2742,77,2419,31],[2742,78,2419,32,"containsNumericCharacter"],[2742,102,2419,56],[2743,6,2420,8],[2744,6,2421,8],[2744,10,2421,12,"responseOptions"],[2744,25,2421,27],[2744,26,2421,28,"containsNonAlphanumericCharacter"],[2744,58,2421,60],[2744,63,2421,65,"undefined"],[2744,72,2421,74],[2744,74,2421,76],[2745,8,2422,12],[2745,12,2422,16],[2745,13,2422,17,"customStrengthOptions"],[2745,34,2422,38],[2745,35,2422,39,"containsNonAlphanumericCharacter"],[2745,67,2422,71],[2745,70,2423,16,"responseOptions"],[2745,85,2423,31],[2745,86,2423,32,"containsNonAlphanumericCharacter"],[2745,118,2423,64],[2746,6,2424,8],[2747,6,2425,8],[2747,10,2425,12],[2747,11,2425,13,"enforcementState"],[2747,27,2425,29],[2747,30,2425,32,"response"],[2747,38,2425,40],[2747,39,2425,41,"enforcementState"],[2747,55,2425,57],[2748,6,2426,8],[2748,10,2426,12],[2748,14,2426,16],[2748,15,2426,17,"enforcementState"],[2748,31,2426,33],[2748,36,2426,38],[2748,67,2426,69],[2748,69,2426,71],[2749,8,2427,12],[2749,12,2427,16],[2749,13,2427,17,"enforcementState"],[2749,29,2427,33],[2749,32,2427,36],[2749,37,2427,41],[2750,6,2428,8],[2751,6,2429,8],[2752,6,2430,8],[2752,10,2430,12],[2752,11,2430,13,"allowedNonAlphanumericCharacters"],[2752,43,2430,45],[2752,46,2431,12,"response"],[2752,54,2431,20],[2752,55,2431,21,"allowedNonAlphanumericCharacters"],[2752,87,2431,53],[2752,89,2431,55,"join"],[2752,93,2431,59],[2752,94,2431,60],[2752,96,2431,62],[2752,97,2431,63],[2752,101,2431,67],[2752,103,2431,69],[2753,6,2432,8],[2753,10,2432,12],[2753,11,2432,13,"forceUpgradeOnSignin"],[2753,31,2432,33],[2753,34,2432,36,"response"],[2753,42,2432,44],[2753,43,2432,45,"forceUpgradeOnSignin"],[2753,63,2432,65],[2753,67,2432,69],[2753,72,2432,74],[2754,6,2433,8],[2754,10,2433,12],[2754,11,2433,13,"schemaVersion"],[2754,24,2433,26],[2754,27,2433,29,"response"],[2754,35,2433,37],[2754,36,2433,38,"schemaVersion"],[2754,49,2433,51],[2755,4,2434,4],[2756,4,2434,5],[2756,11,2434,5,"_createClass"],[2756,23,2434,5],[2756,24,2434,5,"PasswordPolicyImpl"],[2756,42,2434,5],[2757,6,2434,5,"key"],[2757,9,2434,5],[2758,6,2434,5,"value"],[2758,11,2434,5],[2758,13,2435,4],[2758,22,2435,4,"validatePassword"],[2758,38,2435,20,"validatePassword"],[2758,39,2435,21,"password"],[2758,47,2435,29],[2758,49,2435,31],[2759,8,2436,8],[2759,12,2436,14,"status"],[2759,18,2436,20],[2759,21,2436,23],[2760,10,2437,12,"isValid"],[2760,17,2437,19],[2760,19,2437,21],[2760,23,2437,25],[2761,10,2438,12,"passwordPolicy"],[2761,24,2438,26],[2761,26,2438,28],[2762,8,2439,8],[2762,9,2439,9],[2763,8,2440,8],[2764,8,2441,8],[2764,12,2441,12],[2764,13,2441,13,"validatePasswordLengthOptions"],[2764,42,2441,42],[2764,43,2441,43,"password"],[2764,51,2441,51],[2764,53,2441,53,"status"],[2764,59,2441,59],[2764,60,2441,60],[2765,8,2442,8],[2765,12,2442,12],[2765,13,2442,13,"validatePasswordCharacterOptions"],[2765,45,2442,45],[2765,46,2442,46,"password"],[2765,54,2442,54],[2765,56,2442,56,"status"],[2765,62,2442,62],[2765,63,2442,63],[2766,8,2443,8],[2767,8,2444,8,"status"],[2767,14,2444,14],[2767,15,2444,15,"isValid"],[2767,22,2444,22],[2767,27,2444,27,"status"],[2767,33,2444,33],[2767,34,2444,34,"isValid"],[2767,41,2444,41],[2767,44,2444,44,"status"],[2767,50,2444,50],[2767,51,2444,51,"meetsMinPasswordLength"],[2767,73,2444,73],[2767,77,2444,77],[2767,81,2444,81],[2767,82,2444,82],[2768,8,2445,8,"status"],[2768,14,2445,14],[2768,15,2445,15,"isValid"],[2768,22,2445,22],[2768,27,2445,27,"status"],[2768,33,2445,33],[2768,34,2445,34,"isValid"],[2768,41,2445,41],[2768,44,2445,44,"status"],[2768,50,2445,50],[2768,51,2445,51,"meetsMaxPasswordLength"],[2768,73,2445,73],[2768,77,2445,77],[2768,81,2445,81],[2768,82,2445,82],[2769,8,2446,8,"status"],[2769,14,2446,14],[2769,15,2446,15,"isValid"],[2769,22,2446,22],[2769,27,2446,27,"status"],[2769,33,2446,33],[2769,34,2446,34,"isValid"],[2769,41,2446,41],[2769,44,2446,44,"status"],[2769,50,2446,50],[2769,51,2446,51,"containsLowercaseLetter"],[2769,74,2446,74],[2769,78,2446,78],[2769,82,2446,82],[2769,83,2446,83],[2770,8,2447,8,"status"],[2770,14,2447,14],[2770,15,2447,15,"isValid"],[2770,22,2447,22],[2770,27,2447,27,"status"],[2770,33,2447,33],[2770,34,2447,34,"isValid"],[2770,41,2447,41],[2770,44,2447,44,"status"],[2770,50,2447,50],[2770,51,2447,51,"containsUppercaseLetter"],[2770,74,2447,74],[2770,78,2447,78],[2770,82,2447,82],[2770,83,2447,83],[2771,8,2448,8,"status"],[2771,14,2448,14],[2771,15,2448,15,"isValid"],[2771,22,2448,22],[2771,27,2448,27,"status"],[2771,33,2448,33],[2771,34,2448,34,"isValid"],[2771,41,2448,41],[2771,44,2448,44,"status"],[2771,50,2448,50],[2771,51,2448,51,"containsNumericCharacter"],[2771,75,2448,75],[2771,79,2448,79],[2771,83,2448,83],[2771,84,2448,84],[2772,8,2449,8,"status"],[2772,14,2449,14],[2772,15,2449,15,"isValid"],[2772,22,2449,22],[2772,27,2449,27,"status"],[2772,33,2449,33],[2772,34,2449,34,"isValid"],[2772,41,2449,41],[2772,44,2449,44,"status"],[2772,50,2449,50],[2772,51,2449,51,"containsNonAlphanumericCharacter"],[2772,83,2449,83],[2772,87,2449,87],[2772,91,2449,91],[2772,92,2449,92],[2773,8,2450,8],[2773,15,2450,15,"status"],[2773,21,2450,21],[2774,6,2451,4],[2775,6,2452,4],[2776,0,2453,0],[2777,0,2454,0],[2778,0,2455,0],[2779,0,2456,0],[2780,0,2457,0],[2781,4,2452,4],[2782,6,2452,4,"key"],[2782,9,2452,4],[2783,6,2452,4,"value"],[2783,11,2452,4],[2783,13,2458,4],[2783,22,2458,4,"validatePasswordLengthOptions"],[2783,51,2458,33,"validatePasswordLengthOptions"],[2783,52,2458,34,"password"],[2783,60,2458,42],[2783,62,2458,44,"status"],[2783,68,2458,50],[2783,70,2458,52],[2784,8,2459,8],[2784,12,2459,14,"minPasswordLength"],[2784,29,2459,31],[2784,32,2459,34],[2784,36,2459,38],[2784,37,2459,39,"customStrengthOptions"],[2784,58,2459,60],[2784,59,2459,61,"minPasswordLength"],[2784,76,2459,78],[2785,8,2460,8],[2785,12,2460,14,"maxPasswordLength"],[2785,29,2460,31],[2785,32,2460,34],[2785,36,2460,38],[2785,37,2460,39,"customStrengthOptions"],[2785,58,2460,60],[2785,59,2460,61,"maxPasswordLength"],[2785,76,2460,78],[2786,8,2461,8],[2786,12,2461,12,"minPasswordLength"],[2786,29,2461,29],[2786,31,2461,31],[2787,10,2462,12,"status"],[2787,16,2462,18],[2787,17,2462,19,"meetsMinPasswordLength"],[2787,39,2462,41],[2787,42,2462,44,"password"],[2787,50,2462,52],[2787,51,2462,53,"length"],[2787,57,2462,59],[2787,61,2462,63,"minPasswordLength"],[2787,78,2462,80],[2788,8,2463,8],[2789,8,2464,8],[2789,12,2464,12,"maxPasswordLength"],[2789,29,2464,29],[2789,31,2464,31],[2790,10,2465,12,"status"],[2790,16,2465,18],[2790,17,2465,19,"meetsMaxPasswordLength"],[2790,39,2465,41],[2790,42,2465,44,"password"],[2790,50,2465,52],[2790,51,2465,53,"length"],[2790,57,2465,59],[2790,61,2465,63,"maxPasswordLength"],[2790,78,2465,80],[2791,8,2466,8],[2792,6,2467,4],[2793,6,2468,4],[2794,0,2469,0],[2795,0,2470,0],[2796,0,2471,0],[2797,0,2472,0],[2798,0,2473,0],[2799,4,2468,4],[2800,6,2468,4,"key"],[2800,9,2468,4],[2801,6,2468,4,"value"],[2801,11,2468,4],[2801,13,2474,4],[2801,22,2474,4,"validatePasswordCharacterOptions"],[2801,54,2474,36,"validatePasswordCharacterOptions"],[2801,55,2474,37,"password"],[2801,63,2474,45],[2801,65,2474,47,"status"],[2801,71,2474,53],[2801,73,2474,55],[2802,8,2475,8],[2803,8,2476,8],[2803,12,2476,12],[2803,13,2476,13,"updatePasswordCharacterOptionsStatuses"],[2803,51,2476,51],[2803,52,2476,52,"status"],[2803,58,2476,58],[2803,60,2477,8],[2803,93,2477,42],[2803,98,2477,47],[2803,100,2478,8],[2803,133,2478,42],[2803,138,2478,47],[2803,140,2479,8],[2803,171,2479,40],[2803,176,2479,45],[2803,178,2480,8],[2803,217,2480,48],[2803,222,2480,53],[2803,223,2480,54],[2804,8,2481,8],[2804,12,2481,12,"passwordChar"],[2804,24,2481,24],[2805,8,2482,8],[2805,13,2482,13],[2805,17,2482,17,"i"],[2805,18,2482,18],[2805,21,2482,21],[2805,22,2482,22],[2805,24,2482,24,"i"],[2805,25,2482,25],[2805,28,2482,28,"password"],[2805,36,2482,36],[2805,37,2482,37,"length"],[2805,43,2482,43],[2805,45,2482,45,"i"],[2805,46,2482,46],[2805,48,2482,48],[2805,50,2482,50],[2806,10,2483,12,"passwordChar"],[2806,22,2483,24],[2806,25,2483,27,"password"],[2806,33,2483,35],[2806,34,2483,36,"charAt"],[2806,40,2483,42],[2806,41,2483,43,"i"],[2806,42,2483,44],[2806,43,2483,45],[2807,10,2484,12],[2807,14,2484,16],[2807,15,2484,17,"updatePasswordCharacterOptionsStatuses"],[2807,53,2484,55],[2807,54,2484,56,"status"],[2807,60,2484,62],[2807,62,2485,12],[2807,95,2485,46,"passwordChar"],[2807,107,2485,58],[2807,111,2485,62],[2807,114,2485,65],[2807,118,2486,16,"passwordChar"],[2807,130,2486,28],[2807,134,2486,32],[2807,137,2486,35],[2807,139,2487,12],[2807,172,2487,46,"passwordChar"],[2807,184,2487,58],[2807,188,2487,62],[2807,191,2487,65],[2807,195,2488,16,"passwordChar"],[2807,207,2488,28],[2807,211,2488,32],[2807,214,2488,35],[2807,216,2489,12],[2807,247,2489,44,"passwordChar"],[2807,259,2489,56],[2807,263,2489,60],[2807,266,2489,63],[2807,270,2490,16,"passwordChar"],[2807,282,2490,28],[2807,286,2490,32],[2807,289,2490,35],[2807,291,2491,12],[2807,330,2491,52],[2807,334,2491,56],[2807,335,2491,57,"allowedNonAlphanumericCharacters"],[2807,367,2491,89],[2807,368,2491,90,"includes"],[2807,376,2491,98],[2807,377,2491,99,"passwordChar"],[2807,389,2491,111],[2807,390,2491,112],[2807,391,2491,113],[2808,8,2492,8],[2809,6,2493,4],[2810,6,2494,4],[2811,0,2495,0],[2812,0,2496,0],[2813,0,2497,0],[2814,0,2498,0],[2815,0,2499,0],[2816,0,2500,0],[2817,0,2501,0],[2818,0,2502,0],[2819,0,2503,0],[2820,0,2504,0],[2821,4,2494,4],[2822,6,2494,4,"key"],[2822,9,2494,4],[2823,6,2494,4,"value"],[2823,11,2494,4],[2823,13,2505,4],[2823,22,2505,4,"updatePasswordCharacterOptionsStatuses"],[2823,60,2505,42,"updatePasswordCharacterOptionsStatuses"],[2823,61,2505,43,"status"],[2823,67,2505,49],[2823,69,2505,51,"containsLowercaseCharacter"],[2823,95,2505,77],[2823,97,2505,79,"containsUppercaseCharacter"],[2823,123,2505,105],[2823,125,2505,107,"containsNumericCharacter"],[2823,149,2505,131],[2823,151,2505,133,"containsNonAlphanumericCharacter"],[2823,183,2505,165],[2823,185,2505,167],[2824,8,2506,8],[2824,12,2506,12],[2824,16,2506,16],[2824,17,2506,17,"customStrengthOptions"],[2824,38,2506,38],[2824,39,2506,39,"containsLowercaseLetter"],[2824,62,2506,62],[2824,64,2506,64],[2825,10,2507,12,"status"],[2825,16,2507,18],[2825,17,2507,19,"containsLowercaseLetter"],[2825,40,2507,42],[2825,45,2507,47,"status"],[2825,51,2507,53],[2825,52,2507,54,"containsLowercaseLetter"],[2825,75,2507,77],[2825,78,2507,80,"containsLowercaseCharacter"],[2825,104,2507,106],[2825,105,2507,107],[2826,8,2508,8],[2827,8,2509,8],[2827,12,2509,12],[2827,16,2509,16],[2827,17,2509,17,"customStrengthOptions"],[2827,38,2509,38],[2827,39,2509,39,"containsUppercaseLetter"],[2827,62,2509,62],[2827,64,2509,64],[2828,10,2510,12,"status"],[2828,16,2510,18],[2828,17,2510,19,"containsUppercaseLetter"],[2828,40,2510,42],[2828,45,2510,47,"status"],[2828,51,2510,53],[2828,52,2510,54,"containsUppercaseLetter"],[2828,75,2510,77],[2828,78,2510,80,"containsUppercaseCharacter"],[2828,104,2510,106],[2828,105,2510,107],[2829,8,2511,8],[2830,8,2512,8],[2830,12,2512,12],[2830,16,2512,16],[2830,17,2512,17,"customStrengthOptions"],[2830,38,2512,38],[2830,39,2512,39,"containsNumericCharacter"],[2830,63,2512,63],[2830,65,2512,65],[2831,10,2513,12,"status"],[2831,16,2513,18],[2831,17,2513,19,"containsNumericCharacter"],[2831,41,2513,43],[2831,46,2513,48,"status"],[2831,52,2513,54],[2831,53,2513,55,"containsNumericCharacter"],[2831,77,2513,79],[2831,80,2513,82,"containsNumericCharacter"],[2831,104,2513,106],[2831,105,2513,107],[2832,8,2514,8],[2833,8,2515,8],[2833,12,2515,12],[2833,16,2515,16],[2833,17,2515,17,"customStrengthOptions"],[2833,38,2515,38],[2833,39,2515,39,"containsNonAlphanumericCharacter"],[2833,71,2515,71],[2833,73,2515,73],[2834,10,2516,12,"status"],[2834,16,2516,18],[2834,17,2516,19,"containsNonAlphanumericCharacter"],[2834,49,2516,51],[2834,54,2516,56,"status"],[2834,60,2516,62],[2834,61,2516,63,"containsNonAlphanumericCharacter"],[2834,93,2516,95],[2834,96,2516,98,"containsNonAlphanumericCharacter"],[2834,128,2516,130],[2834,129,2516,131],[2835,8,2517,8],[2836,6,2518,4],[2837,4,2518,5],[2838,2,2518,5],[2839,2,2521,0],[2840,0,2522,0],[2841,0,2523,0],[2842,0,2524,0],[2843,0,2525,0],[2844,0,2526,0],[2845,0,2527,0],[2846,0,2528,0],[2847,0,2529,0],[2848,0,2530,0],[2849,0,2531,0],[2850,0,2532,0],[2851,0,2533,0],[2852,0,2534,0],[2853,0,2535,0],[2854,0,2536,0],[2855,2,2521,0],[2855,6,2537,6,"AuthImpl"],[2855,14,2537,14],[2856,4,2538,4],[2856,13,2538,4,"AuthImpl"],[2856,22,2538,16,"app"],[2856,25,2538,19],[2856,27,2538,21,"heartbeatServiceProvider"],[2856,51,2538,45],[2856,53,2538,47,"appCheckServiceProvider"],[2856,76,2538,70],[2856,78,2538,72,"config"],[2856,84,2538,78],[2856,86,2538,80],[2857,6,2538,80,"_classCallCheck"],[2857,21,2538,80],[2857,28,2538,80,"AuthImpl"],[2857,36,2538,80],[2858,6,2539,8],[2858,10,2539,12],[2858,11,2539,13,"app"],[2858,14,2539,16],[2858,17,2539,19,"app"],[2858,20,2539,22],[2859,6,2540,8],[2859,10,2540,12],[2859,11,2540,13,"heartbeatServiceProvider"],[2859,35,2540,37],[2859,38,2540,40,"heartbeatServiceProvider"],[2859,62,2540,64],[2860,6,2541,8],[2860,10,2541,12],[2860,11,2541,13,"appCheckServiceProvider"],[2860,34,2541,36],[2860,37,2541,39,"appCheckServiceProvider"],[2860,60,2541,62],[2861,6,2542,8],[2861,10,2542,12],[2861,11,2542,13,"config"],[2861,17,2542,19],[2861,20,2542,22,"config"],[2861,26,2542,28],[2862,6,2543,8],[2862,10,2543,12],[2862,11,2543,13,"currentUser"],[2862,22,2543,24],[2862,25,2543,27],[2862,29,2543,31],[2863,6,2544,8],[2863,10,2544,12],[2863,11,2544,13,"emulatorConfig"],[2863,25,2544,27],[2863,28,2544,30],[2863,32,2544,34],[2864,6,2545,8],[2864,10,2545,12],[2864,11,2545,13,"operations"],[2864,21,2545,23],[2864,24,2545,26,"Promise"],[2864,31,2545,33],[2864,32,2545,34,"resolve"],[2864,39,2545,41],[2864,40,2545,42],[2864,41,2545,43],[2865,6,2546,8],[2865,10,2546,12],[2865,11,2546,13,"authStateSubscription"],[2865,32,2546,34],[2865,35,2546,37],[2865,39,2546,41,"Subscription"],[2865,51,2546,53],[2865,52,2546,54],[2865,56,2546,58],[2865,57,2546,59],[2866,6,2547,8],[2866,10,2547,12],[2866,11,2547,13,"idTokenSubscription"],[2866,30,2547,32],[2866,33,2547,35],[2866,37,2547,39,"Subscription"],[2866,49,2547,51],[2866,50,2547,52],[2866,54,2547,56],[2866,55,2547,57],[2867,6,2548,8],[2867,10,2548,12],[2867,11,2548,13,"beforeStateQueue"],[2867,27,2548,29],[2867,30,2548,32],[2867,34,2548,36,"AuthMiddlewareQueue"],[2867,53,2548,55],[2867,54,2548,56],[2867,58,2548,60],[2867,59,2548,61],[2868,6,2549,8],[2868,10,2549,12],[2868,11,2549,13,"redirectUser"],[2868,23,2549,25],[2868,26,2549,28],[2868,30,2549,32],[2869,6,2550,8],[2869,10,2550,12],[2869,11,2550,13,"isProactiveRefreshEnabled"],[2869,36,2550,38],[2869,39,2550,41],[2869,44,2550,46],[2870,6,2551,8],[2870,10,2551,12],[2870,11,2551,13,"EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION"],[2870,50,2551,52],[2870,53,2551,55],[2870,54,2551,56],[2871,6,2552,8],[2872,6,2553,8],[2873,6,2554,8],[2873,10,2554,12],[2873,11,2554,13,"_canInitEmulator"],[2873,27,2554,29],[2873,30,2554,32],[2873,34,2554,36],[2874,6,2555,8],[2874,10,2555,12],[2874,11,2555,13,"_isInitialized"],[2874,25,2555,27],[2874,28,2555,30],[2874,33,2555,35],[2875,6,2556,8],[2875,10,2556,12],[2875,11,2556,13,"_deleted"],[2875,19,2556,21],[2875,22,2556,24],[2875,27,2556,29],[2876,6,2557,8],[2876,10,2557,12],[2876,11,2557,13,"_initializationPromise"],[2876,33,2557,35],[2876,36,2557,38],[2876,40,2557,42],[2877,6,2558,8],[2877,10,2558,12],[2877,11,2558,13,"_popupRedirectResolver"],[2877,33,2558,35],[2877,36,2558,38],[2877,40,2558,42],[2878,6,2559,8],[2878,10,2559,12],[2878,11,2559,13,"_errorFactory"],[2878,24,2559,26],[2878,27,2559,29,"_DEFAULT_AUTH_ERROR_FACTORY"],[2878,54,2559,56],[2879,6,2560,8],[2879,10,2560,12],[2879,11,2560,13,"_agentRecaptchaConfig"],[2879,32,2560,34],[2879,35,2560,37],[2879,39,2560,41],[2880,6,2561,8],[2880,10,2561,12],[2880,11,2561,13,"_tenantRecaptchaConfigs"],[2880,34,2561,36],[2880,37,2561,39],[2880,38,2561,40],[2880,39,2561,41],[2881,6,2562,8],[2881,10,2562,12],[2881,11,2562,13,"_projectPasswordPolicy"],[2881,33,2562,35],[2881,36,2562,38],[2881,40,2562,42],[2882,6,2563,8],[2882,10,2563,12],[2882,11,2563,13,"_tenantPasswordPolicies"],[2882,34,2563,36],[2882,37,2563,39],[2882,38,2563,40],[2882,39,2563,41],[2883,6,2564,8],[2883,10,2564,12],[2883,11,2564,13,"_resolvePersistenceManagerAvailable"],[2883,46,2564,48],[2883,49,2564,51,"undefined"],[2883,58,2564,60],[2884,6,2565,8],[2885,6,2566,8],[2886,6,2567,8],[2887,6,2568,8],[2887,10,2568,12],[2887,11,2568,13,"lastNotifiedUid"],[2887,26,2568,28],[2887,29,2568,31,"undefined"],[2887,38,2568,40],[2888,6,2569,8],[2888,10,2569,12],[2888,11,2569,13,"languageCode"],[2888,23,2569,25],[2888,26,2569,28],[2888,30,2569,32],[2889,6,2570,8],[2889,10,2570,12],[2889,11,2570,13,"tenantId"],[2889,19,2570,21],[2889,22,2570,24],[2889,26,2570,28],[2890,6,2571,8],[2890,10,2571,12],[2890,11,2571,13,"settings"],[2890,19,2571,21],[2890,22,2571,24],[2891,8,2571,26,"appVerificationDisabledForTesting"],[2891,41,2571,59],[2891,43,2571,61],[2892,6,2571,67],[2892,7,2571,68],[2893,6,2572,8],[2893,10,2572,12],[2893,11,2572,13,"frameworks"],[2893,21,2572,23],[2893,24,2572,26],[2893,26,2572,28],[2894,6,2573,8],[2894,10,2573,12],[2894,11,2573,13,"name"],[2894,15,2573,17],[2894,18,2573,20,"app"],[2894,21,2573,23],[2894,22,2573,24,"name"],[2894,26,2573,28],[2895,6,2574,8],[2895,10,2574,12],[2895,11,2574,13,"clientVersion"],[2895,24,2574,26],[2895,27,2574,29,"config"],[2895,33,2574,35],[2895,34,2574,36,"sdkClientVersion"],[2895,50,2574,52],[2896,6,2575,8],[2897,6,2576,8],[2898,6,2577,8],[2898,10,2577,12],[2898,11,2577,13,"_persistenceManagerAvailable"],[2898,39,2577,41],[2898,42,2577,44],[2898,46,2577,48,"Promise"],[2898,53,2577,55],[2898,54,2577,56,"resolve"],[2898,61,2577,63],[2898,65,2577,68],[2898,69,2577,72],[2898,70,2577,73,"_resolvePersistenceManagerAvailable"],[2898,105,2577,108],[2898,108,2577,111,"resolve"],[2898,115,2577,119],[2898,116,2577,120],[2899,4,2578,4],[2900,4,2578,5],[2900,11,2578,5,"_createClass"],[2900,23,2578,5],[2900,24,2578,5,"AuthImpl"],[2900,32,2578,5],[2901,6,2578,5,"key"],[2901,9,2578,5],[2902,6,2578,5,"value"],[2902,11,2578,5],[2902,13,2579,4],[2902,22,2579,4,"_initializeWithPersistence"],[2902,48,2579,30,"_initializeWithPersistence"],[2902,49,2579,31,"persistenceHierarchy"],[2902,69,2579,51],[2902,71,2579,53,"popupRedirectResolver"],[2902,92,2579,74],[2902,94,2579,76],[2903,8,2579,76],[2903,12,2579,76,"_this2"],[2903,18,2579,76],[2904,8,2580,8],[2904,12,2580,12,"popupRedirectResolver"],[2904,33,2580,33],[2904,35,2580,35],[2905,10,2581,12],[2905,14,2581,16],[2905,15,2581,17,"_popupRedirectResolver"],[2905,37,2581,39],[2905,40,2581,42,"_getInstance"],[2905,52,2581,54],[2905,53,2581,55,"popupRedirectResolver"],[2905,74,2581,76],[2905,75,2581,77],[2906,8,2582,8],[2907,8,2583,8],[2908,8,2584,8],[2909,8,2585,8],[2909,12,2585,12],[2909,13,2585,13,"_initializationPromise"],[2909,35,2585,35],[2909,38,2585,38],[2909,42,2585,42],[2909,43,2585,43,"queue"],[2909,48,2585,48],[2909,62,2585,48,"_asyncToGenerator"],[2909,79,2585,48],[2909,80,2585,49],[2909,93,2585,61],[2910,10,2586,12],[2910,14,2586,16,"_this2"],[2910,20,2586,20],[2910,21,2586,21,"_deleted"],[2910,29,2586,29],[2910,31,2586,31],[2911,12,2587,16],[2912,10,2588,12],[2913,10,2589,12,"_this2"],[2913,16,2589,16],[2913,17,2589,17,"persistenceManager"],[2913,35,2589,35],[2913,44,2589,44,"PersistenceUserManager"],[2913,66,2589,66],[2913,67,2589,67,"create"],[2913,73,2589,73],[2913,74,2589,74,"_this2"],[2913,80,2589,78],[2913,82,2589,80,"persistenceHierarchy"],[2913,102,2589,100],[2913,103,2589,101],[2914,10,2590,12,"_this2"],[2914,16,2590,16],[2914,17,2590,17,"_resolvePersistenceManagerAvailable"],[2914,52,2590,52],[2914,55,2590,55],[2914,56,2590,56],[2915,10,2591,12],[2915,14,2591,16,"_this2"],[2915,20,2591,20],[2915,21,2591,21,"_deleted"],[2915,29,2591,29],[2915,31,2591,31],[2916,12,2592,16],[2917,10,2593,12],[2918,10,2594,12],[2919,10,2595,12],[2920,10,2596,12],[2920,14,2596,16,"_this2"],[2920,20,2596,20],[2920,21,2596,21,"_popupRedirectResolver"],[2920,43,2596,43],[2920,45,2596,45,"_shouldInitProactively"],[2920,67,2596,67],[2920,69,2596,69],[2921,12,2597,16],[2922,12,2598,16],[2922,16,2598,20],[2923,14,2599,20],[2923,20,2599,26,"_this2"],[2923,26,2599,30],[2923,27,2599,31,"_popupRedirectResolver"],[2923,49,2599,53],[2923,50,2599,54,"_initialize"],[2923,61,2599,65],[2923,62,2599,66,"_this2"],[2923,68,2599,70],[2923,69,2599,71],[2924,12,2600,16],[2924,13,2600,17],[2924,14,2601,16],[2924,21,2601,23,"e"],[2924,22,2601,24],[2924,24,2601,26],[2925,14,2602,20],[2926,12,2602,20],[2927,10,2604,12],[2928,10,2605,12],[2928,16,2605,18,"_this2"],[2928,22,2605,22],[2928,23,2605,23,"initializeCurrentUser"],[2928,44,2605,44],[2928,45,2605,45,"popupRedirectResolver"],[2928,66,2605,66],[2928,67,2605,67],[2929,10,2606,12,"_this2"],[2929,16,2606,16],[2929,17,2606,17,"lastNotifiedUid"],[2929,32,2606,32],[2929,35,2606,35,"_this2"],[2929,41,2606,39],[2929,42,2606,40,"currentUser"],[2929,53,2606,51],[2929,55,2606,53,"uid"],[2929,58,2606,56],[2929,62,2606,60],[2929,66,2606,64],[2930,10,2607,12],[2930,14,2607,16,"_this2"],[2930,20,2607,20],[2930,21,2607,21,"_deleted"],[2930,29,2607,29],[2930,31,2607,31],[2931,12,2608,16],[2932,10,2609,12],[2933,10,2610,12,"_this2"],[2933,16,2610,16],[2933,17,2610,17,"_isInitialized"],[2933,31,2610,31],[2933,34,2610,34],[2933,38,2610,38],[2934,8,2611,8],[2934,9,2611,9],[2934,11,2611,10],[2935,8,2612,8],[2935,15,2612,15],[2935,19,2612,19],[2935,20,2612,20,"_initializationPromise"],[2935,42,2612,42],[2936,6,2613,4],[2937,6,2614,4],[2938,0,2615,0],[2939,0,2616,0],[2940,4,2614,4],[2941,6,2614,4,"key"],[2941,9,2614,4],[2942,6,2614,4,"value"],[2942,11,2614,4],[2943,8,2614,4],[2943,12,2614,4,"_onStorageEvent2"],[2943,28,2614,4],[2943,31,2614,4,"_asyncToGenerator"],[2943,48,2614,4],[2943,49,2617,4],[2943,62,2617,28],[2944,10,2618,8],[2944,14,2618,12],[2944,18,2618,16],[2944,19,2618,17,"_deleted"],[2944,27,2618,25],[2944,29,2618,27],[2945,12,2619,12],[2946,10,2620,8],[2947,10,2621,8],[2947,14,2621,14,"user"],[2947,18,2621,18],[2947,27,2621,27],[2947,31,2621,31],[2947,32,2621,32,"assertedPersistence"],[2947,51,2621,51],[2947,52,2621,52,"getCurrentUser"],[2947,66,2621,66],[2947,67,2621,67],[2947,68,2621,68],[2948,10,2622,8],[2948,14,2622,12],[2948,15,2622,13],[2948,19,2622,17],[2948,20,2622,18,"currentUser"],[2948,31,2622,29],[2948,35,2622,33],[2948,36,2622,34,"user"],[2948,40,2622,38],[2948,42,2622,40],[2949,12,2623,12],[2950,12,2624,12],[2951,10,2625,8],[2952,10,2626,8],[2953,10,2627,8],[2953,14,2627,12],[2953,18,2627,16],[2953,19,2627,17,"currentUser"],[2953,30,2627,28],[2953,34,2627,32,"user"],[2953,38,2627,36],[2953,42,2627,40],[2953,46,2627,44],[2953,47,2627,45,"currentUser"],[2953,58,2627,56],[2953,59,2627,57,"uid"],[2953,62,2627,60],[2953,67,2627,65,"user"],[2953,71,2627,69],[2953,72,2627,70,"uid"],[2953,75,2627,73],[2953,77,2627,75],[2954,12,2628,12],[2955,12,2629,12],[2955,16,2629,16],[2955,17,2629,17,"_currentUser"],[2955,29,2629,29],[2955,30,2629,30,"_assign"],[2955,37,2629,37],[2955,38,2629,38,"user"],[2955,42,2629,42],[2955,43,2629,43],[2956,12,2630,12],[2957,12,2631,12],[2958,12,2632,12],[2958,18,2632,18],[2958,22,2632,22],[2958,23,2632,23,"currentUser"],[2958,34,2632,34],[2958,35,2632,35,"getIdToken"],[2958,45,2632,45],[2958,46,2632,46],[2958,47,2632,47],[2959,12,2633,12],[2960,10,2634,8],[2961,10,2635,8],[2962,10,2636,8],[2963,10,2637,8],[2963,16,2637,14],[2963,20,2637,18],[2963,21,2637,19,"_updateCurrentUser"],[2963,39,2637,37],[2963,40,2637,38,"user"],[2963,44,2637,42],[2963,46,2637,44],[2963,76,2637,75],[2963,80,2637,79],[2963,81,2637,80],[2964,8,2638,4],[2964,9,2638,5],[2965,8,2638,5],[2965,17,2617,10,"_onStorageEvent"],[2965,32,2617,25,"_onStorageEvent"],[2965,33,2617,25],[2966,10,2617,25],[2966,17,2617,25,"_onStorageEvent2"],[2966,33,2617,25],[2966,34,2617,25,"apply"],[2966,39,2617,25],[2966,46,2617,25,"arguments"],[2966,55,2617,25],[2967,8,2617,25],[2968,8,2617,25],[2968,15,2617,10,"_onStorageEvent"],[2968,30,2617,25],[2969,6,2617,25],[2970,4,2617,25],[2971,6,2617,25,"key"],[2971,9,2617,25],[2972,6,2617,25,"value"],[2972,11,2617,25],[2973,8,2617,25],[2973,12,2617,25,"_initializeCurrentUserFromIdToken"],[2973,45,2617,25],[2973,48,2617,25,"_asyncToGenerator"],[2973,65,2617,25],[2973,66,2639,4],[2973,77,2639,43,"idToken"],[2973,84,2639,50],[2973,86,2639,52],[2974,10,2640,8],[2974,14,2640,12],[2975,12,2641,12],[2975,16,2641,18,"response"],[2975,24,2641,26],[2975,33,2641,35,"getAccountInfo"],[2975,47,2641,49],[2975,48,2641,50],[2975,52,2641,54],[2975,54,2641,56],[2976,14,2641,58,"idToken"],[2977,12,2641,66],[2977,13,2641,67],[2977,14,2641,68],[2978,12,2642,12],[2978,16,2642,18,"user"],[2978,20,2642,22],[2978,29,2642,31,"UserImpl"],[2978,37,2642,39],[2978,38,2642,40,"_fromGetAccountInfoResponse"],[2978,65,2642,67],[2978,66,2642,68],[2978,70,2642,72],[2978,72,2642,74,"response"],[2978,80,2642,82],[2978,82,2642,84,"idToken"],[2978,89,2642,91],[2978,90,2642,92],[2979,12,2643,12],[2979,18,2643,18],[2979,22,2643,22],[2979,23,2643,23,"directlySetCurrentUser"],[2979,45,2643,45],[2979,46,2643,46,"user"],[2979,50,2643,50],[2979,51,2643,51],[2980,10,2644,8],[2980,11,2644,9],[2980,12,2645,8],[2980,19,2645,15,"err"],[2980,22,2645,18],[2980,24,2645,20],[2981,12,2646,12,"console"],[2981,19,2646,19],[2981,20,2646,20,"warn"],[2981,24,2646,24],[2981,25,2646,25],[2981,93,2646,93],[2981,95,2646,95,"err"],[2981,98,2646,98],[2981,99,2646,99],[2982,12,2647,12],[2982,18,2647,18],[2982,22,2647,22],[2982,23,2647,23,"directlySetCurrentUser"],[2982,45,2647,45],[2982,46,2647,46],[2982,50,2647,50],[2982,51,2647,51],[2983,10,2648,8],[2984,8,2649,4],[2984,9,2649,5],[2985,8,2649,5],[2985,17,2639,10,"initializeCurrentUserFromIdToken"],[2985,49,2639,42,"initializeCurrentUserFromIdToken"],[2985,50,2639,42,"_x53"],[2985,54,2639,42],[2986,10,2639,42],[2986,17,2639,42,"_initializeCurrentUserFromIdToken"],[2986,50,2639,42],[2986,51,2639,42,"apply"],[2986,56,2639,42],[2986,63,2639,42,"arguments"],[2986,72,2639,42],[2987,8,2639,42],[2988,8,2639,42],[2988,15,2639,10,"initializeCurrentUserFromIdToken"],[2988,47,2639,42],[2989,6,2639,42],[2990,4,2639,42],[2991,6,2639,42,"key"],[2991,9,2639,42],[2992,6,2639,42,"value"],[2992,11,2639,42],[2993,8,2639,42],[2993,12,2639,42,"_initializeCurrentUser"],[2993,34,2639,42],[2993,37,2639,42,"_asyncToGenerator"],[2993,54,2639,42],[2993,55,2650,4],[2993,66,2650,32,"popupRedirectResolver"],[2993,87,2650,53],[2993,89,2650,55],[2994,10,2651,8],[2994,14,2651,12,"app"],[2994,17,2651,15],[2994,18,2651,16,"_isFirebaseServerApp"],[2994,38,2651,36],[2994,39,2651,37],[2994,43,2651,41],[2994,44,2651,42,"app"],[2994,47,2651,45],[2994,48,2651,46],[2994,50,2651,48],[2995,12,2652,12],[2995,16,2652,18,"idToken"],[2995,23,2652,25],[2995,26,2652,28],[2995,30,2652,32],[2995,31,2652,33,"app"],[2995,34,2652,36],[2995,35,2652,37,"settings"],[2995,43,2652,45],[2995,44,2652,46,"authIdToken"],[2995,55,2652,57],[2996,12,2653,12],[2996,16,2653,16,"idToken"],[2996,23,2653,23],[2996,25,2653,25],[2997,14,2654,16],[2998,14,2655,16],[2999,14,2656,16],[2999,21,2656,23],[2999,25,2656,27,"Promise"],[2999,32,2656,34],[2999,33,2656,35,"resolve"],[2999,40,2656,42],[2999,44,2656,46],[3000,16,2657,20,"setTimeout"],[3000,26,2657,30],[3000,27,2657,31],[3000,33,2657,37],[3000,37,2657,41],[3000,38,2657,42,"initializeCurrentUserFromIdToken"],[3000,70,2657,74],[3000,71,2657,75,"idToken"],[3000,78,2657,82],[3000,79,2657,83],[3000,80,2657,84,"then"],[3000,84,2657,88],[3000,85,2657,89,"resolve"],[3000,92,2657,96],[3000,94,2657,98,"resolve"],[3000,101,2657,105],[3000,102,2657,106],[3000,103,2657,107],[3001,14,2658,16],[3001,15,2658,17],[3001,16,2658,18],[3002,12,2659,12],[3002,13,2659,13],[3002,19,2660,17],[3003,14,2661,16],[3003,21,2661,23],[3003,25,2661,27],[3003,26,2661,28,"directlySetCurrentUser"],[3003,48,2661,50],[3003,49,2661,51],[3003,53,2661,55],[3003,54,2661,56],[3004,12,2662,12],[3005,10,2663,8],[3006,10,2664,8],[3007,10,2665,8],[3007,14,2665,14,"previouslyStoredUser"],[3007,34,2665,34],[3007,43,2665,44],[3007,47,2665,48],[3007,48,2665,49,"assertedPersistence"],[3007,67,2665,68],[3007,68,2665,69,"getCurrentUser"],[3007,82,2665,83],[3007,83,2665,84],[3007,84,2665,86],[3008,10,2666,8],[3008,14,2666,12,"futureCurrentUser"],[3008,31,2666,29],[3008,34,2666,32,"previouslyStoredUser"],[3008,54,2666,52],[3009,10,2667,8],[3009,14,2667,12,"needsTocheckMiddleware"],[3009,36,2667,34],[3009,39,2667,37],[3009,44,2667,42],[3010,10,2668,8],[3010,14,2668,12,"popupRedirectResolver"],[3010,35,2668,33],[3010,39,2668,37],[3010,43,2668,41],[3010,44,2668,42,"config"],[3010,50,2668,48],[3010,51,2668,49,"authDomain"],[3010,61,2668,59],[3010,63,2668,61],[3011,12,2669,12],[3011,18,2669,18],[3011,22,2669,22],[3011,23,2669,23,"getOrInitRedirectPersistenceManager"],[3011,58,2669,58],[3011,59,2669,59],[3011,60,2669,60],[3012,12,2670,12],[3012,16,2670,18,"redirectUserEventId"],[3012,35,2670,37],[3012,38,2670,40],[3012,42,2670,44],[3012,43,2670,45,"redirectUser"],[3012,55,2670,57],[3012,57,2670,59,"_redirectEventId"],[3012,73,2670,75],[3013,12,2671,12],[3013,16,2671,18,"storedUserEventId"],[3013,33,2671,35],[3013,36,2671,38,"futureCurrentUser"],[3013,53,2671,55],[3013,55,2671,57,"_redirectEventId"],[3013,71,2671,73],[3014,12,2672,12],[3014,16,2672,18,"result"],[3014,22,2672,24],[3014,31,2672,33],[3014,35,2672,37],[3014,36,2672,38,"tryRedirectSignIn"],[3014,53,2672,55],[3014,54,2672,56,"popupRedirectResolver"],[3014,75,2672,77],[3014,76,2672,78],[3015,12,2673,12],[3016,12,2674,12],[3017,12,2675,12],[3018,12,2676,12],[3019,12,2677,12],[3019,16,2677,16],[3019,17,2677,17],[3019,18,2677,18,"redirectUserEventId"],[3019,37,2677,37],[3019,41,2677,41,"redirectUserEventId"],[3019,60,2677,60],[3019,65,2677,65,"storedUserEventId"],[3019,82,2677,82],[3019,87,2678,16,"result"],[3019,93,2678,22],[3019,95,2678,24,"user"],[3019,99,2678,28],[3019,101,2678,30],[3020,14,2679,16,"futureCurrentUser"],[3020,31,2679,33],[3020,34,2679,36,"result"],[3020,40,2679,42],[3020,41,2679,43,"user"],[3020,45,2679,47],[3021,14,2680,16,"needsTocheckMiddleware"],[3021,36,2680,38],[3021,39,2680,41],[3021,43,2680,45],[3022,12,2681,12],[3023,10,2682,8],[3024,10,2683,8],[3025,10,2684,8],[3025,14,2684,12],[3025,15,2684,13,"futureCurrentUser"],[3025,32,2684,30],[3025,34,2684,32],[3026,12,2685,12],[3026,19,2685,19],[3026,23,2685,23],[3026,24,2685,24,"directlySetCurrentUser"],[3026,46,2685,46],[3026,47,2685,47],[3026,51,2685,51],[3026,52,2685,52],[3027,10,2686,8],[3028,10,2687,8],[3028,14,2687,12],[3028,15,2687,13,"futureCurrentUser"],[3028,32,2687,30],[3028,33,2687,31,"_redirectEventId"],[3028,49,2687,47],[3028,51,2687,49],[3029,12,2688,12],[3030,12,2689,12],[3031,12,2690,12],[3031,16,2690,16,"needsTocheckMiddleware"],[3031,38,2690,38],[3031,40,2690,40],[3032,14,2691,16],[3032,18,2691,20],[3033,16,2692,20],[3033,22,2692,26],[3033,26,2692,30],[3033,27,2692,31,"beforeStateQueue"],[3033,43,2692,47],[3033,44,2692,48,"runMiddleware"],[3033,57,2692,61],[3033,58,2692,62,"futureCurrentUser"],[3033,75,2692,79],[3033,76,2692,80],[3034,14,2693,16],[3034,15,2693,17],[3034,16,2694,16],[3034,23,2694,23,"e"],[3034,24,2694,24],[3034,26,2694,26],[3035,16,2695,20,"futureCurrentUser"],[3035,33,2695,37],[3035,36,2695,40,"previouslyStoredUser"],[3035,56,2695,60],[3036,16,2696,20],[3037,16,2697,20],[3038,16,2698,20],[3038,20,2698,24],[3038,21,2698,25,"_popupRedirectResolver"],[3038,43,2698,47],[3038,44,2698,48,"_overrideRedirectResult"],[3038,67,2698,71],[3038,68,2698,72],[3038,72,2698,76],[3038,74,2698,78],[3038,80,2698,84,"Promise"],[3038,87,2698,91],[3038,88,2698,92,"reject"],[3038,94,2698,98],[3038,95,2698,99,"e"],[3038,96,2698,100],[3038,97,2698,101],[3038,98,2698,102],[3039,14,2699,16],[3040,12,2700,12],[3041,12,2701,12],[3041,16,2701,16,"futureCurrentUser"],[3041,33,2701,33],[3041,35,2701,35],[3042,14,2702,16],[3042,21,2702,23],[3042,25,2702,27],[3042,26,2702,28,"reloadAndSetCurrentUserOrClear"],[3042,56,2702,58],[3042,57,2702,59,"futureCurrentUser"],[3042,74,2702,76],[3042,75,2702,77],[3043,12,2703,12],[3043,13,2703,13],[3043,19,2704,17],[3044,14,2705,16],[3044,21,2705,23],[3044,25,2705,27],[3044,26,2705,28,"directlySetCurrentUser"],[3044,48,2705,50],[3044,49,2705,51],[3044,53,2705,55],[3044,54,2705,56],[3045,12,2706,12],[3046,10,2707,8],[3047,10,2708,8,"_assert"],[3047,17,2708,15],[3047,18,2708,16],[3047,22,2708,20],[3047,23,2708,21,"_popupRedirectResolver"],[3047,45,2708,43],[3047,47,2708,45],[3047,51,2708,49],[3047,53,2708,51],[3047,69,2708,67],[3047,70,2708,68],[3047,104,2708,102],[3047,105,2708,103],[3048,10,2709,8],[3048,16,2709,14],[3048,20,2709,18],[3048,21,2709,19,"getOrInitRedirectPersistenceManager"],[3048,56,2709,54],[3048,57,2709,55],[3048,58,2709,56],[3049,10,2710,8],[3050,10,2711,8],[3051,10,2712,8],[3052,10,2713,8],[3052,14,2713,12],[3052,18,2713,16],[3052,19,2713,17,"redirectUser"],[3052,31,2713,29],[3052,35,2714,12],[3052,39,2714,16],[3052,40,2714,17,"redirectUser"],[3052,52,2714,29],[3052,53,2714,30,"_redirectEventId"],[3052,69,2714,46],[3052,74,2714,51,"futureCurrentUser"],[3052,91,2714,68],[3052,92,2714,69,"_redirectEventId"],[3052,108,2714,85],[3052,110,2714,87],[3053,12,2715,12],[3053,19,2715,19],[3053,23,2715,23],[3053,24,2715,24,"directlySetCurrentUser"],[3053,46,2715,46],[3053,47,2715,47,"futureCurrentUser"],[3053,64,2715,64],[3053,65,2715,65],[3054,10,2716,8],[3055,10,2717,8],[3055,17,2717,15],[3055,21,2717,19],[3055,22,2717,20,"reloadAndSetCurrentUserOrClear"],[3055,52,2717,50],[3055,53,2717,51,"futureCurrentUser"],[3055,70,2717,68],[3055,71,2717,69],[3056,8,2718,4],[3056,9,2718,5],[3057,8,2718,5],[3057,17,2650,10,"initializeCurrentUser"],[3057,38,2650,31,"initializeCurrentUser"],[3057,39,2650,31,"_x54"],[3057,43,2650,31],[3058,10,2650,31],[3058,17,2650,31,"_initializeCurrentUser"],[3058,39,2650,31],[3058,40,2650,31,"apply"],[3058,45,2650,31],[3058,52,2650,31,"arguments"],[3058,61,2650,31],[3059,8,2650,31],[3060,8,2650,31],[3060,15,2650,10,"initializeCurrentUser"],[3060,36,2650,31],[3061,6,2650,31],[3062,4,2650,31],[3063,6,2650,31,"key"],[3063,9,2650,31],[3064,6,2650,31,"value"],[3064,11,2650,31],[3065,8,2650,31],[3065,12,2650,31,"_tryRedirectSignIn"],[3065,30,2650,31],[3065,33,2650,31,"_asyncToGenerator"],[3065,50,2650,31],[3065,51,2719,4],[3065,62,2719,28,"redirectResolver"],[3065,78,2719,44],[3065,80,2719,46],[3066,10,2720,8],[3067,10,2721,8],[3068,10,2722,8],[3069,10,2723,8],[3070,10,2724,8],[3071,10,2725,8],[3072,10,2726,8],[3073,10,2727,8],[3074,10,2728,8],[3075,10,2729,8],[3076,10,2730,8],[3077,10,2731,8],[3078,10,2732,8],[3079,10,2733,8],[3080,10,2734,8],[3081,10,2735,8],[3081,14,2735,12,"result"],[3081,20,2735,18],[3081,23,2735,21],[3081,27,2735,25],[3082,10,2736,8],[3082,14,2736,12],[3083,12,2737,12],[3084,12,2738,12],[3085,12,2739,12,"result"],[3085,18,2739,18],[3085,27,2739,27],[3085,31,2739,31],[3085,32,2739,32,"_popupRedirectResolver"],[3085,54,2739,54],[3085,55,2739,55,"_completeRedirectFn"],[3085,74,2739,74],[3085,75,2739,75],[3085,79,2739,79],[3085,81,2739,81,"redirectResolver"],[3085,97,2739,97],[3085,99,2739,99],[3085,103,2739,103],[3085,104,2739,104],[3086,10,2740,8],[3086,11,2740,9],[3086,12,2741,8],[3086,19,2741,15,"e"],[3086,20,2741,16],[3086,22,2741,18],[3087,12,2742,12],[3088,12,2743,12],[3089,12,2744,12],[3089,18,2744,18],[3089,22,2744,22],[3089,23,2744,23,"_setRedirectUser"],[3089,39,2744,39],[3089,40,2744,40],[3089,44,2744,44],[3089,45,2744,45],[3090,10,2745,8],[3091,10,2746,8],[3091,17,2746,15,"result"],[3091,23,2746,21],[3092,8,2747,4],[3092,9,2747,5],[3093,8,2747,5],[3093,17,2719,10,"tryRedirectSignIn"],[3093,34,2719,27,"tryRedirectSignIn"],[3093,35,2719,27,"_x55"],[3093,39,2719,27],[3094,10,2719,27],[3094,17,2719,27,"_tryRedirectSignIn"],[3094,35,2719,27],[3094,36,2719,27,"apply"],[3094,41,2719,27],[3094,48,2719,27,"arguments"],[3094,57,2719,27],[3095,8,2719,27],[3096,8,2719,27],[3096,15,2719,10,"tryRedirectSignIn"],[3096,32,2719,27],[3097,6,2719,27],[3098,4,2719,27],[3099,6,2719,27,"key"],[3099,9,2719,27],[3100,6,2719,27,"value"],[3100,11,2719,27],[3101,8,2719,27],[3101,12,2719,27,"_reloadAndSetCurrentUserOrClear"],[3101,43,2719,27],[3101,46,2719,27,"_asyncToGenerator"],[3101,63,2719,27],[3101,64,2748,4],[3101,75,2748,41,"user"],[3101,79,2748,45],[3101,81,2748,47],[3102,10,2749,8],[3102,14,2749,12],[3103,12,2750,12],[3103,18,2750,18,"_reloadWithoutSaving"],[3103,38,2750,38],[3103,39,2750,39,"user"],[3103,43,2750,43],[3103,44,2750,44],[3104,10,2751,8],[3104,11,2751,9],[3104,12,2752,8],[3104,19,2752,15,"e"],[3104,20,2752,16],[3104,22,2752,18],[3105,12,2753,12],[3105,16,2753,16,"e"],[3105,17,2753,17],[3105,19,2753,19,"code"],[3105,23,2753,23],[3105,28,2754,16],[3105,36,2754,24],[3105,60,2754,48],[3105,61,2754,49],[3105,105,2754,93],[3105,107,2754,95],[3106,14,2755,16],[3107,14,2756,16],[3108,14,2757,16],[3108,21,2757,23],[3108,25,2757,27],[3108,26,2757,28,"directlySetCurrentUser"],[3108,48,2757,50],[3108,49,2757,51],[3108,53,2757,55],[3108,54,2757,56],[3109,12,2758,12],[3110,10,2759,8],[3111,10,2760,8],[3111,17,2760,15],[3111,21,2760,19],[3111,22,2760,20,"directlySetCurrentUser"],[3111,44,2760,42],[3111,45,2760,43,"user"],[3111,49,2760,47],[3111,50,2760,48],[3112,8,2761,4],[3112,9,2761,5],[3113,8,2761,5],[3113,17,2748,10,"reloadAndSetCurrentUserOrClear"],[3113,47,2748,40,"reloadAndSetCurrentUserOrClear"],[3113,48,2748,40,"_x56"],[3113,52,2748,40],[3114,10,2748,40],[3114,17,2748,40,"_reloadAndSetCurrentUserOrClear"],[3114,48,2748,40],[3114,49,2748,40,"apply"],[3114,54,2748,40],[3114,61,2748,40,"arguments"],[3114,70,2748,40],[3115,8,2748,40],[3116,8,2748,40],[3116,15,2748,10,"reloadAndSetCurrentUserOrClear"],[3116,45,2748,40],[3117,6,2748,40],[3118,4,2748,40],[3119,6,2748,40,"key"],[3119,9,2748,40],[3120,6,2748,40,"value"],[3120,11,2748,40],[3120,13,2762,4],[3120,22,2762,4,"useDeviceLanguage"],[3120,39,2762,21,"useDeviceLanguage"],[3120,40,2762,21],[3120,42,2762,24],[3121,8,2763,8],[3121,12,2763,12],[3121,13,2763,13,"languageCode"],[3121,25,2763,25],[3121,28,2763,28,"_getUserLanguage"],[3121,44,2763,44],[3121,45,2763,45],[3121,46,2763,46],[3122,6,2764,4],[3123,4,2764,5],[3124,6,2764,5,"key"],[3124,9,2764,5],[3125,6,2764,5,"value"],[3125,11,2764,5],[3126,8,2764,5],[3126,12,2764,5,"_delete3"],[3126,20,2764,5],[3126,23,2764,5,"_asyncToGenerator"],[3126,40,2764,5],[3126,41,2765,4],[3126,54,2765,20],[3127,10,2766,8],[3127,14,2766,12],[3127,15,2766,13,"_deleted"],[3127,23,2766,21],[3127,26,2766,24],[3127,30,2766,28],[3128,8,2767,4],[3128,9,2767,5],[3129,8,2767,5],[3129,17,2765,10,"_delete"],[3129,24,2765,17,"_delete"],[3129,25,2765,17],[3130,10,2765,17],[3130,17,2765,17,"_delete3"],[3130,25,2765,17],[3130,26,2765,17,"apply"],[3130,31,2765,17],[3130,38,2765,17,"arguments"],[3130,47,2765,17],[3131,8,2765,17],[3132,8,2765,17],[3132,15,2765,10,"_delete"],[3132,22,2765,17],[3133,6,2765,17],[3134,4,2765,17],[3135,6,2765,17,"key"],[3135,9,2765,17],[3136,6,2765,17,"value"],[3136,11,2765,17],[3137,8,2765,17],[3137,12,2765,17,"_updateCurrentUser2"],[3137,31,2765,17],[3137,34,2765,17,"_asyncToGenerator"],[3137,51,2765,17],[3137,52,2768,4],[3137,63,2768,28,"userExtern"],[3137,73,2768,38],[3137,75,2768,40],[3138,10,2769,8],[3138,14,2769,12,"app"],[3138,17,2769,15],[3138,18,2769,16,"_isFirebaseServerApp"],[3138,38,2769,36],[3138,39,2769,37],[3138,43,2769,41],[3138,44,2769,42,"app"],[3138,47,2769,45],[3138,48,2769,46],[3138,50,2769,48],[3139,12,2770,12],[3139,19,2770,19,"Promise"],[3139,26,2770,26],[3139,27,2770,27,"reject"],[3139,33,2770,33],[3139,34,2770,34,"_serverAppCurrentUserOperationNotSupportedError"],[3139,81,2770,81],[3139,82,2770,82],[3139,86,2770,86],[3139,87,2770,87],[3139,88,2770,88],[3140,10,2771,8],[3141,10,2772,8],[3142,10,2773,8],[3143,10,2774,8],[3143,14,2774,14,"user"],[3143,18,2774,18],[3143,21,2774,21,"userExtern"],[3143,31,2774,31],[3143,34,2775,14,"util"],[3143,38,2775,18],[3143,39,2775,19,"getModularInstance"],[3143,57,2775,37],[3143,58,2775,38,"userExtern"],[3143,68,2775,48],[3143,69,2775,49],[3143,72,2776,14],[3143,76,2776,18],[3144,10,2777,8],[3144,14,2777,12,"user"],[3144,18,2777,16],[3144,20,2777,18],[3145,12,2778,12,"_assert"],[3145,19,2778,19],[3145,20,2778,20,"user"],[3145,24,2778,24],[3145,25,2778,25,"auth"],[3145,29,2778,29],[3145,30,2778,30,"config"],[3145,36,2778,36],[3145,37,2778,37,"apiKey"],[3145,43,2778,43],[3145,48,2778,48],[3145,52,2778,52],[3145,53,2778,53,"config"],[3145,59,2778,59],[3145,60,2778,60,"apiKey"],[3145,66,2778,66],[3145,68,2778,68],[3145,72,2778,72],[3145,74,2778,74],[3145,94,2778,94],[3145,95,2778,95],[3145,127,2778,127],[3145,128,2778,128],[3146,10,2779,8],[3147,10,2780,8],[3147,17,2780,15],[3147,21,2780,19],[3147,22,2780,20,"_updateCurrentUser"],[3147,40,2780,38],[3147,41,2780,39,"user"],[3147,45,2780,43],[3147,49,2780,47,"user"],[3147,53,2780,51],[3147,54,2780,52,"_clone"],[3147,60,2780,58],[3147,61,2780,59],[3147,65,2780,63],[3147,66,2780,64],[3147,67,2780,65],[3148,8,2781,4],[3148,9,2781,5],[3149,8,2781,5],[3149,17,2768,10,"updateCurrentUser"],[3149,34,2768,27,"updateCurrentUser"],[3149,35,2768,27,"_x57"],[3149,39,2768,27],[3150,10,2768,27],[3150,17,2768,27,"_updateCurrentUser2"],[3150,36,2768,27],[3150,37,2768,27,"apply"],[3150,42,2768,27],[3150,49,2768,27,"arguments"],[3150,58,2768,27],[3151,8,2768,27],[3152,8,2768,27],[3152,15,2768,10,"updateCurrentUser"],[3152,32,2768,27],[3153,6,2768,27],[3154,4,2768,27],[3155,6,2768,27,"key"],[3155,9,2768,27],[3156,6,2768,27,"value"],[3156,11,2768,27],[3157,8,2768,27],[3157,12,2768,27,"_updateCurrentUser3"],[3157,31,2768,27],[3157,34,2768,27,"_asyncToGenerator"],[3157,51,2768,27],[3157,52,2782,4],[3157,63,2782,29,"user"],[3157,67,2782,33],[3157,69,2782,69],[3158,10,2782,69],[3158,14,2782,69,"_this3"],[3158,20,2782,69],[3159,10,2782,69],[3159,14,2782,35,"skipBeforeStateCallbacks"],[3159,38,2782,59],[3159,41,2782,59,"arguments"],[3159,50,2782,59],[3159,51,2782,59,"length"],[3159,57,2782,59],[3159,65,2782,59,"arguments"],[3159,74,2782,59],[3159,82,2782,59,"undefined"],[3159,91,2782,59],[3159,94,2782,59,"arguments"],[3159,103,2782,59],[3159,109,2782,62],[3159,114,2782,67],[3160,10,2783,8],[3160,14,2783,12],[3160,18,2783,16],[3160,19,2783,17,"_deleted"],[3160,27,2783,25],[3160,29,2783,27],[3161,12,2784,12],[3162,10,2785,8],[3163,10,2786,8],[3163,14,2786,12,"user"],[3163,18,2786,16],[3163,20,2786,18],[3164,12,2787,12,"_assert"],[3164,19,2787,19],[3164,20,2787,20],[3164,24,2787,24],[3164,25,2787,25,"tenantId"],[3164,33,2787,33],[3164,38,2787,38,"user"],[3164,42,2787,42],[3164,43,2787,43,"tenantId"],[3164,51,2787,51],[3164,53,2787,53],[3164,57,2787,57],[3164,59,2787,59],[3164,79,2787,79],[3164,80,2787,80],[3164,118,2787,118],[3164,119,2787,119],[3165,10,2788,8],[3166,10,2789,8],[3166,14,2789,12],[3166,15,2789,13,"skipBeforeStateCallbacks"],[3166,39,2789,37],[3166,41,2789,39],[3167,12,2790,12],[3167,18,2790,18],[3167,22,2790,22],[3167,23,2790,23,"beforeStateQueue"],[3167,39,2790,39],[3167,40,2790,40,"runMiddleware"],[3167,53,2790,53],[3167,54,2790,54,"user"],[3167,58,2790,58],[3167,59,2790,59],[3168,10,2791,8],[3169,10,2792,8],[3169,17,2792,15],[3169,21,2792,19],[3169,22,2792,20,"queue"],[3169,27,2792,25],[3169,41,2792,25,"_asyncToGenerator"],[3169,58,2792,25],[3169,59,2792,26],[3169,72,2792,38],[3170,12,2793,12],[3170,18,2793,18,"_this3"],[3170,24,2793,22],[3170,25,2793,23,"directlySetCurrentUser"],[3170,47,2793,45],[3170,48,2793,46,"user"],[3170,52,2793,50],[3170,53,2793,51],[3171,12,2794,12,"_this3"],[3171,18,2794,16],[3171,19,2794,17,"notifyAuthListeners"],[3171,38,2794,36],[3171,39,2794,37],[3171,40,2794,38],[3172,10,2795,8],[3172,11,2795,9],[3172,13,2795,10],[3173,8,2796,4],[3173,9,2796,5],[3174,8,2796,5],[3174,17,2782,10,"_updateCurrentUser"],[3174,35,2782,28,"_updateCurrentUser"],[3174,36,2782,28,"_x58"],[3174,40,2782,28],[3175,10,2782,28],[3175,17,2782,28,"_updateCurrentUser3"],[3175,36,2782,28],[3175,37,2782,28,"apply"],[3175,42,2782,28],[3175,49,2782,28,"arguments"],[3175,58,2782,28],[3176,8,2782,28],[3177,8,2782,28],[3177,15,2782,10,"_updateCurrentUser"],[3177,33,2782,28],[3178,6,2782,28],[3179,4,2782,28],[3180,6,2782,28,"key"],[3180,9,2782,28],[3181,6,2782,28,"value"],[3181,11,2782,28],[3182,8,2782,28],[3182,12,2782,28,"_signOut"],[3182,20,2782,28],[3182,23,2782,28,"_asyncToGenerator"],[3182,40,2782,28],[3182,41,2797,4],[3182,54,2797,20],[3183,10,2798,8],[3183,14,2798,12,"app"],[3183,17,2798,15],[3183,18,2798,16,"_isFirebaseServerApp"],[3183,38,2798,36],[3183,39,2798,37],[3183,43,2798,41],[3183,44,2798,42,"app"],[3183,47,2798,45],[3183,48,2798,46],[3183,50,2798,48],[3184,12,2799,12],[3184,19,2799,19,"Promise"],[3184,26,2799,26],[3184,27,2799,27,"reject"],[3184,33,2799,33],[3184,34,2799,34,"_serverAppCurrentUserOperationNotSupportedError"],[3184,81,2799,81],[3184,82,2799,82],[3184,86,2799,86],[3184,87,2799,87],[3184,88,2799,88],[3185,10,2800,8],[3186,10,2801,8],[3187,10,2802,8],[3187,16,2802,14],[3187,20,2802,18],[3187,21,2802,19,"beforeStateQueue"],[3187,37,2802,35],[3187,38,2802,36,"runMiddleware"],[3187,51,2802,49],[3187,52,2802,50],[3187,56,2802,54],[3187,57,2802,55],[3188,10,2803,8],[3189,10,2804,8],[3189,14,2804,12],[3189,18,2804,16],[3189,19,2804,17,"redirectPersistenceManager"],[3189,45,2804,43],[3189,49,2804,47],[3189,53,2804,51],[3189,54,2804,52,"_popupRedirectResolver"],[3189,76,2804,74],[3189,78,2804,76],[3190,12,2805,12],[3190,18,2805,18],[3190,22,2805,22],[3190,23,2805,23,"_setRedirectUser"],[3190,39,2805,39],[3190,40,2805,40],[3190,44,2805,44],[3190,45,2805,45],[3191,10,2806,8],[3192,10,2807,8],[3193,10,2808,8],[3194,10,2809,8],[3194,17,2809,15],[3194,21,2809,19],[3194,22,2809,20,"_updateCurrentUser"],[3194,40,2809,38],[3194,41,2809,39],[3194,45,2809,43],[3194,47,2809,45],[3194,77,2809,76],[3194,81,2809,80],[3194,82,2809,81],[3195,8,2810,4],[3195,9,2810,5],[3196,8,2810,5],[3196,17,2797,10,"signOut"],[3196,24,2797,17,"signOut"],[3196,25,2797,17],[3197,10,2797,17],[3197,17,2797,17,"_signOut"],[3197,25,2797,17],[3197,26,2797,17,"apply"],[3197,31,2797,17],[3197,38,2797,17,"arguments"],[3197,47,2797,17],[3198,8,2797,17],[3199,8,2797,17],[3199,15,2797,10,"signOut"],[3199,22,2797,17],[3200,6,2797,17],[3201,4,2797,17],[3202,6,2797,17,"key"],[3202,9,2797,17],[3203,6,2797,17,"value"],[3203,11,2797,17],[3203,13,2811,4],[3203,22,2811,4,"setPersistence"],[3203,36,2811,18,"setPersistence"],[3203,37,2811,19,"persistence"],[3203,48,2811,30],[3203,50,2811,32],[3204,8,2811,32],[3204,12,2811,32,"_this4"],[3204,18,2811,32],[3205,8,2812,8],[3205,12,2812,12,"app"],[3205,15,2812,15],[3205,16,2812,16,"_isFirebaseServerApp"],[3205,36,2812,36],[3205,37,2812,37],[3205,41,2812,41],[3205,42,2812,42,"app"],[3205,45,2812,45],[3205,46,2812,46],[3205,48,2812,48],[3206,10,2813,12],[3206,17,2813,19,"Promise"],[3206,24,2813,26],[3206,25,2813,27,"reject"],[3206,31,2813,33],[3206,32,2813,34,"_serverAppCurrentUserOperationNotSupportedError"],[3206,79,2813,81],[3206,80,2813,82],[3206,84,2813,86],[3206,85,2813,87],[3206,86,2813,88],[3207,8,2814,8],[3208,8,2815,8],[3208,15,2815,15],[3208,19,2815,19],[3208,20,2815,20,"queue"],[3208,25,2815,25],[3208,39,2815,25,"_asyncToGenerator"],[3208,56,2815,25],[3208,57,2815,26],[3208,70,2815,38],[3209,10,2816,12],[3209,16,2816,18,"_this4"],[3209,22,2816,22],[3209,23,2816,23,"assertedPersistence"],[3209,42,2816,42],[3209,43,2816,43,"setPersistence"],[3209,57,2816,57],[3209,58,2816,58,"_getInstance"],[3209,70,2816,70],[3209,71,2816,71,"persistence"],[3209,82,2816,82],[3209,83,2816,83],[3209,84,2816,84],[3210,8,2817,8],[3210,9,2817,9],[3210,11,2817,10],[3211,6,2818,4],[3212,4,2818,5],[3213,6,2818,5,"key"],[3213,9,2818,5],[3214,6,2818,5,"value"],[3214,11,2818,5],[3214,13,2819,4],[3214,22,2819,4,"_getRecaptchaConfig"],[3214,41,2819,23,"_getRecaptchaConfig"],[3214,42,2819,23],[3214,44,2819,26],[3215,8,2820,8],[3215,12,2820,12],[3215,16,2820,16],[3215,17,2820,17,"tenantId"],[3215,25,2820,25],[3215,29,2820,29],[3215,33,2820,33],[3215,35,2820,35],[3216,10,2821,12],[3216,17,2821,19],[3216,21,2821,23],[3216,22,2821,24,"_agentRecaptchaConfig"],[3216,43,2821,45],[3217,8,2822,8],[3217,9,2822,9],[3217,15,2823,13],[3218,10,2824,12],[3218,17,2824,19],[3218,21,2824,23],[3218,22,2824,24,"_tenantRecaptchaConfigs"],[3218,45,2824,47],[3218,46,2824,48],[3218,50,2824,52],[3218,51,2824,53,"tenantId"],[3218,59,2824,61],[3218,60,2824,62],[3219,8,2825,8],[3220,6,2826,4],[3221,4,2826,5],[3222,6,2826,5,"key"],[3222,9,2826,5],[3223,6,2826,5,"value"],[3223,11,2826,5],[3224,8,2826,5],[3224,12,2826,5,"_validatePassword"],[3224,29,2826,5],[3224,32,2826,5,"_asyncToGenerator"],[3224,49,2826,5],[3224,50,2827,4],[3224,61,2827,27,"password"],[3224,69,2827,35],[3224,71,2827,37],[3225,10,2828,8],[3225,14,2828,12],[3225,15,2828,13],[3225,19,2828,17],[3225,20,2828,18,"_getPasswordPolicyInternal"],[3225,46,2828,44],[3225,47,2828,45],[3225,48,2828,46],[3225,50,2828,48],[3226,12,2829,12],[3226,18,2829,18],[3226,22,2829,22],[3226,23,2829,23,"_updatePasswordPolicy"],[3226,44,2829,44],[3226,45,2829,45],[3226,46,2829,46],[3227,10,2830,8],[3228,10,2831,8],[3229,10,2832,8],[3229,14,2832,14,"passwordPolicy"],[3229,28,2832,28],[3229,31,2832,31],[3229,35,2832,35],[3229,36,2832,36,"_getPasswordPolicyInternal"],[3229,62,2832,62],[3229,63,2832,63],[3229,64,2832,64],[3230,10,2833,8],[3231,10,2834,8],[3232,10,2835,8],[3232,14,2835,12,"passwordPolicy"],[3232,28,2835,26],[3232,29,2835,27,"schemaVersion"],[3232,42,2835,40],[3232,47,2836,12],[3232,51,2836,16],[3232,52,2836,17,"EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION"],[3232,91,2836,56],[3232,93,2836,58],[3233,12,2837,12],[3233,19,2837,19,"Promise"],[3233,26,2837,26],[3233,27,2837,27,"reject"],[3233,33,2837,33],[3233,34,2837,34],[3233,38,2837,38],[3233,39,2837,39,"_errorFactory"],[3233,52,2837,52],[3233,53,2837,53,"create"],[3233,59,2837,59],[3233,60,2837,60],[3233,104,2837,104],[3233,105,2837,105],[3233,169,2837,169],[3233,170,2837,170],[3233,171,2837,171],[3233,172,2837,172],[3233,173,2837,173],[3234,10,2838,8],[3235,10,2839,8],[3235,17,2839,15,"passwordPolicy"],[3235,31,2839,29],[3235,32,2839,30,"validatePassword"],[3235,48,2839,46],[3235,49,2839,47,"password"],[3235,57,2839,55],[3235,58,2839,56],[3236,8,2840,4],[3236,9,2840,5],[3237,8,2840,5],[3237,17,2827,10,"validatePassword"],[3237,33,2827,26,"validatePassword"],[3237,34,2827,26,"_x59"],[3237,38,2827,26],[3238,10,2827,26],[3238,17,2827,26,"_validatePassword"],[3238,34,2827,26],[3238,35,2827,26,"apply"],[3238,40,2827,26],[3238,47,2827,26,"arguments"],[3238,56,2827,26],[3239,8,2827,26],[3240,8,2827,26],[3240,15,2827,10,"validatePassword"],[3240,31,2827,26],[3241,6,2827,26],[3242,4,2827,26],[3243,6,2827,26,"key"],[3243,9,2827,26],[3244,6,2827,26,"value"],[3244,11,2827,26],[3244,13,2841,4],[3244,22,2841,4,"_getPasswordPolicyInternal"],[3244,48,2841,30,"_getPasswordPolicyInternal"],[3244,49,2841,30],[3244,51,2841,33],[3245,8,2842,8],[3245,12,2842,12],[3245,16,2842,16],[3245,17,2842,17,"tenantId"],[3245,25,2842,25],[3245,30,2842,30],[3245,34,2842,34],[3245,36,2842,36],[3246,10,2843,12],[3246,17,2843,19],[3246,21,2843,23],[3246,22,2843,24,"_projectPasswordPolicy"],[3246,44,2843,46],[3247,8,2844,8],[3247,9,2844,9],[3247,15,2845,13],[3248,10,2846,12],[3248,17,2846,19],[3248,21,2846,23],[3248,22,2846,24,"_tenantPasswordPolicies"],[3248,45,2846,47],[3248,46,2846,48],[3248,50,2846,52],[3248,51,2846,53,"tenantId"],[3248,59,2846,61],[3248,60,2846,62],[3249,8,2847,8],[3250,6,2848,4],[3251,4,2848,5],[3252,6,2848,5,"key"],[3252,9,2848,5],[3253,6,2848,5,"value"],[3253,11,2848,5],[3254,8,2848,5],[3254,12,2848,5,"_updatePasswordPolicy2"],[3254,34,2848,5],[3254,37,2848,5,"_asyncToGenerator"],[3254,54,2848,5],[3254,55,2849,4],[3254,68,2849,34],[3255,10,2850,8],[3255,14,2850,14,"response"],[3255,22,2850,22],[3255,31,2850,31,"_getPasswordPolicy"],[3255,49,2850,49],[3255,50,2850,50],[3255,54,2850,54],[3255,55,2850,55],[3256,10,2851,8],[3256,14,2851,14,"passwordPolicy"],[3256,28,2851,28],[3256,31,2851,31],[3256,35,2851,35,"PasswordPolicyImpl"],[3256,53,2851,53],[3256,54,2851,54,"response"],[3256,62,2851,62],[3256,63,2851,63],[3257,10,2852,8],[3257,14,2852,12],[3257,18,2852,16],[3257,19,2852,17,"tenantId"],[3257,27,2852,25],[3257,32,2852,30],[3257,36,2852,34],[3257,38,2852,36],[3258,12,2853,12],[3258,16,2853,16],[3258,17,2853,17,"_projectPasswordPolicy"],[3258,39,2853,39],[3258,42,2853,42,"passwordPolicy"],[3258,56,2853,56],[3259,10,2854,8],[3259,11,2854,9],[3259,17,2855,13],[3260,12,2856,12],[3260,16,2856,16],[3260,17,2856,17,"_tenantPasswordPolicies"],[3260,40,2856,40],[3260,41,2856,41],[3260,45,2856,45],[3260,46,2856,46,"tenantId"],[3260,54,2856,54],[3260,55,2856,55],[3260,58,2856,58,"passwordPolicy"],[3260,72,2856,72],[3261,10,2857,8],[3262,8,2858,4],[3262,9,2858,5],[3263,8,2858,5],[3263,17,2849,10,"_updatePasswordPolicy"],[3263,38,2849,31,"_updatePasswordPolicy"],[3263,39,2849,31],[3264,10,2849,31],[3264,17,2849,31,"_updatePasswordPolicy2"],[3264,39,2849,31],[3264,40,2849,31,"apply"],[3264,45,2849,31],[3264,52,2849,31,"arguments"],[3264,61,2849,31],[3265,8,2849,31],[3266,8,2849,31],[3266,15,2849,10,"_updatePasswordPolicy"],[3266,36,2849,31],[3267,6,2849,31],[3268,4,2849,31],[3269,6,2849,31,"key"],[3269,9,2849,31],[3270,6,2849,31,"value"],[3270,11,2849,31],[3270,13,2859,4],[3270,22,2859,4,"_getPersistenceType"],[3270,41,2859,23,"_getPersistenceType"],[3270,42,2859,23],[3270,44,2859,26],[3271,8,2860,8],[3271,15,2860,15],[3271,19,2860,19],[3271,20,2860,20,"assertedPersistence"],[3271,39,2860,39],[3271,40,2860,40,"persistence"],[3271,51,2860,51],[3271,52,2860,52,"type"],[3271,56,2860,56],[3272,6,2861,4],[3273,4,2861,5],[3274,6,2861,5,"key"],[3274,9,2861,5],[3275,6,2861,5,"value"],[3275,11,2861,5],[3275,13,2862,4],[3275,22,2862,4,"_getPersistence"],[3275,37,2862,19,"_getPersistence"],[3275,38,2862,19],[3275,40,2862,22],[3276,8,2863,8],[3276,15,2863,15],[3276,19,2863,19],[3276,20,2863,20,"assertedPersistence"],[3276,39,2863,39],[3276,40,2863,40,"persistence"],[3276,51,2863,51],[3277,6,2864,4],[3278,4,2864,5],[3279,6,2864,5,"key"],[3279,9,2864,5],[3280,6,2864,5,"value"],[3280,11,2864,5],[3280,13,2865,4],[3280,22,2865,4,"_updateErrorMap"],[3280,37,2865,19,"_updateErrorMap"],[3280,38,2865,20,"errorMap"],[3280,46,2865,28],[3280,48,2865,30],[3281,8,2866,8],[3281,12,2866,12],[3281,13,2866,13,"_errorFactory"],[3281,26,2866,26],[3281,29,2866,29],[3281,33,2866,33,"util"],[3281,37,2866,37],[3281,38,2866,38,"ErrorFactory"],[3281,50,2866,50],[3281,51,2866,51],[3281,57,2866,57],[3281,59,2866,59],[3281,69,2866,69],[3281,71,2866,71,"errorMap"],[3281,79,2866,79],[3281,80,2866,80],[3281,81,2866,81],[3281,82,2866,82],[3282,6,2867,4],[3283,4,2867,5],[3284,6,2867,5,"key"],[3284,9,2867,5],[3285,6,2867,5,"value"],[3285,11,2867,5],[3285,13,2868,4],[3285,22,2868,4,"onAuthStateChanged"],[3285,40,2868,22,"onAuthStateChanged"],[3285,41,2868,23,"nextOrObserver"],[3285,55,2868,37],[3285,57,2868,39,"error"],[3285,62,2868,44],[3285,64,2868,46,"completed"],[3285,73,2868,55],[3285,75,2868,57],[3286,8,2869,8],[3286,15,2869,15],[3286,19,2869,19],[3286,20,2869,20,"registerStateListener"],[3286,41,2869,41],[3286,42,2869,42],[3286,46,2869,46],[3286,47,2869,47,"authStateSubscription"],[3286,68,2869,68],[3286,70,2869,70,"nextOrObserver"],[3286,84,2869,84],[3286,86,2869,86,"error"],[3286,91,2869,91],[3286,93,2869,93,"completed"],[3286,102,2869,102],[3286,103,2869,103],[3287,6,2870,4],[3288,4,2870,5],[3289,6,2870,5,"key"],[3289,9,2870,5],[3290,6,2870,5,"value"],[3290,11,2870,5],[3290,13,2871,4],[3290,22,2871,4,"beforeAuthStateChanged"],[3290,44,2871,26,"beforeAuthStateChanged"],[3290,45,2871,27,"callback"],[3290,53,2871,35],[3290,55,2871,37,"onAbort"],[3290,62,2871,44],[3290,64,2871,46],[3291,8,2872,8],[3291,15,2872,15],[3291,19,2872,19],[3291,20,2872,20,"beforeStateQueue"],[3291,36,2872,36],[3291,37,2872,37,"pushCallback"],[3291,49,2872,49],[3291,50,2872,50,"callback"],[3291,58,2872,58],[3291,60,2872,60,"onAbort"],[3291,67,2872,67],[3291,68,2872,68],[3292,6,2873,4],[3293,4,2873,5],[3294,6,2873,5,"key"],[3294,9,2873,5],[3295,6,2873,5,"value"],[3295,11,2873,5],[3295,13,2874,4],[3295,22,2874,4,"onIdTokenChanged"],[3295,38,2874,20,"onIdTokenChanged"],[3295,39,2874,21,"nextOrObserver"],[3295,53,2874,35],[3295,55,2874,37,"error"],[3295,60,2874,42],[3295,62,2874,44,"completed"],[3295,71,2874,53],[3295,73,2874,55],[3296,8,2875,8],[3296,15,2875,15],[3296,19,2875,19],[3296,20,2875,20,"registerStateListener"],[3296,41,2875,41],[3296,42,2875,42],[3296,46,2875,46],[3296,47,2875,47,"idTokenSubscription"],[3296,66,2875,66],[3296,68,2875,68,"nextOrObserver"],[3296,82,2875,82],[3296,84,2875,84,"error"],[3296,89,2875,89],[3296,91,2875,91,"completed"],[3296,100,2875,100],[3296,101,2875,101],[3297,6,2876,4],[3298,4,2876,5],[3299,6,2876,5,"key"],[3299,9,2876,5],[3300,6,2876,5,"value"],[3300,11,2876,5],[3300,13,2877,4],[3300,22,2877,4,"authStateReady"],[3300,36,2877,18,"authStateReady"],[3300,37,2877,18],[3300,39,2877,21],[3301,8,2878,8],[3301,15,2878,15],[3301,19,2878,19,"Promise"],[3301,26,2878,26],[3301,27,2878,27],[3301,28,2878,28,"resolve"],[3301,35,2878,35],[3301,37,2878,37,"reject"],[3301,43,2878,43],[3301,48,2878,48],[3302,10,2879,12],[3302,14,2879,16],[3302,18,2879,20],[3302,19,2879,21,"currentUser"],[3302,30,2879,32],[3302,32,2879,34],[3303,12,2880,16,"resolve"],[3303,19,2880,23],[3303,20,2880,24],[3303,21,2880,25],[3304,10,2881,12],[3304,11,2881,13],[3304,17,2882,17],[3305,12,2883,16],[3305,16,2883,22,"unsubscribe"],[3305,27,2883,33],[3305,30,2883,36],[3305,34,2883,40],[3305,35,2883,41,"onAuthStateChanged"],[3305,53,2883,59],[3305,54,2883,60],[3305,60,2883,66],[3306,14,2884,20,"unsubscribe"],[3306,25,2884,31],[3306,26,2884,32],[3306,27,2884,33],[3307,14,2885,20,"resolve"],[3307,21,2885,27],[3307,22,2885,28],[3307,23,2885,29],[3308,12,2886,16],[3308,13,2886,17],[3308,15,2886,19,"reject"],[3308,21,2886,25],[3308,22,2886,26],[3309,10,2887,12],[3310,8,2888,8],[3310,9,2888,9],[3310,10,2888,10],[3311,6,2889,4],[3312,6,2890,4],[3313,0,2891,0],[3314,0,2892,0],[3315,4,2890,4],[3316,6,2890,4,"key"],[3316,9,2890,4],[3317,6,2890,4,"value"],[3317,11,2890,4],[3318,8,2890,4],[3318,12,2890,4,"_revokeAccessToken"],[3318,30,2890,4],[3318,33,2890,4,"_asyncToGenerator"],[3318,50,2890,4],[3318,51,2893,4],[3318,62,2893,28,"token"],[3318,67,2893,33],[3318,69,2893,35],[3319,10,2894,8],[3319,14,2894,12],[3319,18,2894,16],[3319,19,2894,17,"currentUser"],[3319,30,2894,28],[3319,32,2894,30],[3320,12,2895,12],[3320,16,2895,18,"idToken"],[3320,23,2895,25],[3320,32,2895,34],[3320,36,2895,38],[3320,37,2895,39,"currentUser"],[3320,48,2895,50],[3320,49,2895,51,"getIdToken"],[3320,59,2895,61],[3320,60,2895,62],[3320,61,2895,63],[3321,12,2896,12],[3322,12,2897,12],[3322,16,2897,18,"request"],[3322,23,2897,25],[3322,26,2897,28],[3323,14,2898,16,"providerId"],[3323,24,2898,26],[3323,26,2898,28],[3323,37,2898,39],[3324,14,2899,16,"tokenType"],[3324,23,2899,25],[3324,25,2899,27],[3324,39,2899,41],[3324,40,2899,42],[3325,14,2900,16,"token"],[3325,19,2900,21],[3326,14,2901,16,"idToken"],[3327,12,2902,12],[3327,13,2902,13],[3328,12,2903,12],[3328,16,2903,16],[3328,20,2903,20],[3328,21,2903,21,"tenantId"],[3328,29,2903,29],[3328,33,2903,33],[3328,37,2903,37],[3328,39,2903,39],[3329,14,2904,16,"request"],[3329,21,2904,23],[3329,22,2904,24,"tenantId"],[3329,30,2904,32],[3329,33,2904,35],[3329,37,2904,39],[3329,38,2904,40,"tenantId"],[3329,46,2904,48],[3330,12,2905,12],[3331,12,2906,12],[3331,18,2906,18,"revokeToken"],[3331,29,2906,29],[3331,30,2906,30],[3331,34,2906,34],[3331,36,2906,36,"request"],[3331,43,2906,43],[3331,44,2906,44],[3332,10,2907,8],[3333,8,2908,4],[3333,9,2908,5],[3334,8,2908,5],[3334,17,2893,10,"revokeAccessToken"],[3334,34,2893,27,"revokeAccessToken"],[3334,35,2893,27,"_x60"],[3334,39,2893,27],[3335,10,2893,27],[3335,17,2893,27,"_revokeAccessToken"],[3335,35,2893,27],[3335,36,2893,27,"apply"],[3335,41,2893,27],[3335,48,2893,27,"arguments"],[3335,57,2893,27],[3336,8,2893,27],[3337,8,2893,27],[3337,15,2893,10,"revokeAccessToken"],[3337,32,2893,27],[3338,6,2893,27],[3339,4,2893,27],[3340,6,2893,27,"key"],[3340,9,2893,27],[3341,6,2893,27,"value"],[3341,11,2893,27],[3341,13,2909,4],[3341,22,2909,4,"toJSON"],[3341,28,2909,10,"toJSON"],[3341,29,2909,10],[3341,31,2909,13],[3342,8,2910,8],[3342,15,2910,15],[3343,10,2911,12,"apiKey"],[3343,16,2911,18],[3343,18,2911,20],[3343,22,2911,24],[3343,23,2911,25,"config"],[3343,29,2911,31],[3343,30,2911,32,"apiKey"],[3343,36,2911,38],[3344,10,2912,12,"authDomain"],[3344,20,2912,22],[3344,22,2912,24],[3344,26,2912,28],[3344,27,2912,29,"config"],[3344,33,2912,35],[3344,34,2912,36,"authDomain"],[3344,44,2912,46],[3345,10,2913,12,"appName"],[3345,17,2913,19],[3345,19,2913,21],[3345,23,2913,25],[3345,24,2913,26,"name"],[3345,28,2913,30],[3346,10,2914,12,"currentUser"],[3346,21,2914,23],[3346,23,2914,25],[3346,27,2914,29],[3346,28,2914,30,"_currentUser"],[3346,40,2914,42],[3346,42,2914,44,"toJSON"],[3346,48,2914,50],[3346,49,2914,51],[3347,8,2915,8],[3347,9,2915,9],[3348,6,2916,4],[3349,4,2916,5],[3350,6,2916,5,"key"],[3350,9,2916,5],[3351,6,2916,5,"value"],[3351,11,2916,5],[3352,8,2916,5],[3352,12,2916,5,"_setRedirectUser2"],[3352,29,2916,5],[3352,32,2916,5,"_asyncToGenerator"],[3352,49,2916,5],[3352,50,2917,4],[3352,61,2917,27,"user"],[3352,65,2917,31],[3352,67,2917,33,"popupRedirectResolver"],[3352,88,2917,54],[3352,90,2917,56],[3353,10,2918,8],[3353,14,2918,14,"redirectManager"],[3353,29,2918,29],[3353,38,2918,38],[3353,42,2918,42],[3353,43,2918,43,"getOrInitRedirectPersistenceManager"],[3353,78,2918,78],[3353,79,2918,79,"popupRedirectResolver"],[3353,100,2918,100],[3353,101,2918,101],[3354,10,2919,8],[3354,17,2919,15,"user"],[3354,21,2919,19],[3354,26,2919,24],[3354,30,2919,28],[3354,33,2920,14,"redirectManager"],[3354,48,2920,29],[3354,49,2920,30,"removeCurrentUser"],[3354,66,2920,47],[3354,67,2920,48],[3354,68,2920,49],[3354,71,2921,14,"redirectManager"],[3354,86,2921,29],[3354,87,2921,30,"setCurrentUser"],[3354,101,2921,44],[3354,102,2921,45,"user"],[3354,106,2921,49],[3354,107,2921,50],[3355,8,2922,4],[3355,9,2922,5],[3356,8,2922,5],[3356,17,2917,10,"_setRedirectUser"],[3356,33,2917,26,"_setRedirectUser"],[3356,34,2917,26,"_x61"],[3356,38,2917,26],[3356,40,2917,26,"_x62"],[3356,44,2917,26],[3357,10,2917,26],[3357,17,2917,26,"_setRedirectUser2"],[3357,34,2917,26],[3357,35,2917,26,"apply"],[3357,40,2917,26],[3357,47,2917,26,"arguments"],[3357,56,2917,26],[3358,8,2917,26],[3359,8,2917,26],[3359,15,2917,10,"_setRedirectUser"],[3359,31,2917,26],[3360,6,2917,26],[3361,4,2917,26],[3362,6,2917,26,"key"],[3362,9,2917,26],[3363,6,2917,26,"value"],[3363,11,2917,26],[3364,8,2917,26],[3364,12,2917,26,"_getOrInitRedirectPersistenceManager"],[3364,48,2917,26],[3364,51,2917,26,"_asyncToGenerator"],[3364,68,2917,26],[3364,69,2923,4],[3364,80,2923,46,"popupRedirectResolver"],[3364,101,2923,67],[3364,103,2923,69],[3365,10,2924,8],[3365,14,2924,12],[3365,15,2924,13],[3365,19,2924,17],[3365,20,2924,18,"redirectPersistenceManager"],[3365,46,2924,44],[3365,48,2924,46],[3366,12,2925,12],[3366,16,2925,18,"resolver"],[3366,24,2925,26],[3366,27,2925,30,"popupRedirectResolver"],[3366,48,2925,51],[3366,52,2925,55,"_getInstance"],[3366,64,2925,67],[3366,65,2925,68,"popupRedirectResolver"],[3366,86,2925,89],[3366,87,2925,90],[3366,91,2926,16],[3366,95,2926,20],[3366,96,2926,21,"_popupRedirectResolver"],[3366,118,2926,43],[3367,12,2927,12,"_assert"],[3367,19,2927,19],[3367,20,2927,20,"resolver"],[3367,28,2927,28],[3367,30,2927,30],[3367,34,2927,34],[3367,36,2927,36],[3367,52,2927,52],[3367,53,2927,53],[3367,87,2927,87],[3367,88,2927,88],[3368,12,2928,12],[3368,16,2928,16],[3368,17,2928,17,"redirectPersistenceManager"],[3368,43,2928,43],[3368,52,2928,52,"PersistenceUserManager"],[3368,74,2928,74],[3368,75,2928,75,"create"],[3368,81,2928,81],[3368,82,2928,82],[3368,86,2928,86],[3368,88,2928,88],[3368,89,2928,89,"_getInstance"],[3368,101,2928,101],[3368,102,2928,102,"resolver"],[3368,110,2928,110],[3368,111,2928,111,"_redirectPersistence"],[3368,131,2928,131],[3368,132,2928,132],[3368,133,2928,133],[3368,135,2928,135],[3368,149,2928,149],[3368,150,2928,150],[3368,177,2928,177],[3368,178,2928,178],[3369,12,2929,12],[3369,16,2929,16],[3369,17,2929,17,"redirectUser"],[3369,29,2929,29],[3369,38,2930,22],[3369,42,2930,26],[3369,43,2930,27,"redirectPersistenceManager"],[3369,69,2930,53],[3369,70,2930,54,"getCurrentUser"],[3369,84,2930,68],[3369,85,2930,69],[3369,86,2930,70],[3370,10,2931,8],[3371,10,2932,8],[3371,17,2932,15],[3371,21,2932,19],[3371,22,2932,20,"redirectPersistenceManager"],[3371,48,2932,46],[3372,8,2933,4],[3372,9,2933,5],[3373,8,2933,5],[3373,17,2923,10,"getOrInitRedirectPersistenceManager"],[3373,52,2923,45,"getOrInitRedirectPersistenceManager"],[3373,53,2923,45,"_x63"],[3373,57,2923,45],[3374,10,2923,45],[3374,17,2923,45,"_getOrInitRedirectPersistenceManager"],[3374,53,2923,45],[3374,54,2923,45,"apply"],[3374,59,2923,45],[3374,66,2923,45,"arguments"],[3374,75,2923,45],[3375,8,2923,45],[3376,8,2923,45],[3376,15,2923,10,"getOrInitRedirectPersistenceManager"],[3376,50,2923,45],[3377,6,2923,45],[3378,4,2923,45],[3379,6,2923,45,"key"],[3379,9,2923,45],[3380,6,2923,45,"value"],[3380,11,2923,45],[3381,8,2923,45],[3381,12,2923,45,"_redirectUserForId2"],[3381,31,2923,45],[3381,34,2923,45,"_asyncToGenerator"],[3381,51,2923,45],[3381,52,2934,4],[3381,63,2934,29,"id"],[3381,65,2934,31],[3381,67,2934,33],[3382,10,2935,8],[3383,10,2936,8],[3384,10,2937,8],[3384,14,2937,12],[3384,18,2937,16],[3384,19,2937,17,"_isInitialized"],[3384,33,2937,31],[3384,35,2937,33],[3385,12,2938,12],[3385,18,2938,18],[3385,22,2938,22],[3385,23,2938,23,"queue"],[3385,28,2938,28],[3385,42,2938,28,"_asyncToGenerator"],[3385,59,2938,28],[3385,60,2938,29],[3385,73,2938,41],[3385,74,2938,43],[3385,75,2938,44],[3385,77,2938,45],[3386,10,2939,8],[3387,10,2940,8],[3387,14,2940,12],[3387,18,2940,16],[3387,19,2940,17,"_currentUser"],[3387,31,2940,29],[3387,33,2940,31,"_redirectEventId"],[3387,49,2940,47],[3387,54,2940,52,"id"],[3387,56,2940,54],[3387,58,2940,56],[3388,12,2941,12],[3388,19,2941,19],[3388,23,2941,23],[3388,24,2941,24,"_currentUser"],[3388,36,2941,36],[3389,10,2942,8],[3390,10,2943,8],[3390,14,2943,12],[3390,18,2943,16],[3390,19,2943,17,"redirectUser"],[3390,31,2943,29],[3390,33,2943,31,"_redirectEventId"],[3390,49,2943,47],[3390,54,2943,52,"id"],[3390,56,2943,54],[3390,58,2943,56],[3391,12,2944,12],[3391,19,2944,19],[3391,23,2944,23],[3391,24,2944,24,"redirectUser"],[3391,36,2944,36],[3392,10,2945,8],[3393,10,2946,8],[3393,17,2946,15],[3393,21,2946,19],[3394,8,2947,4],[3394,9,2947,5],[3395,8,2947,5],[3395,17,2934,10,"_redirectUserForId"],[3395,35,2934,28,"_redirectUserForId"],[3395,36,2934,28,"_x64"],[3395,40,2934,28],[3396,10,2934,28],[3396,17,2934,28,"_redirectUserForId2"],[3396,36,2934,28],[3396,37,2934,28,"apply"],[3396,42,2934,28],[3396,49,2934,28,"arguments"],[3396,58,2934,28],[3397,8,2934,28],[3398,8,2934,28],[3398,15,2934,10,"_redirectUserForId"],[3398,33,2934,28],[3399,6,2934,28],[3400,4,2934,28],[3401,6,2934,28,"key"],[3401,9,2934,28],[3402,6,2934,28,"value"],[3402,11,2934,28],[3403,8,2934,28],[3403,12,2934,28,"_persistUserIfCurrent2"],[3403,34,2934,28],[3403,37,2934,28,"_asyncToGenerator"],[3403,54,2934,28],[3403,55,2948,4],[3403,66,2948,32,"user"],[3403,70,2948,36],[3403,72,2948,38],[3404,10,2948,38],[3404,14,2948,38,"_this5"],[3404,20,2948,38],[3405,10,2949,8],[3405,14,2949,12,"user"],[3405,18,2949,16],[3405,23,2949,21],[3405,27,2949,25],[3405,28,2949,26,"currentUser"],[3405,39,2949,37],[3405,41,2949,39],[3406,12,2950,12],[3406,19,2950,19],[3406,23,2950,23],[3406,24,2950,24,"queue"],[3406,29,2950,29],[3406,43,2950,29,"_asyncToGenerator"],[3406,60,2950,29],[3406,61,2950,30],[3407,14,2950,30],[3407,21,2950,42,"_this5"],[3407,27,2950,46],[3407,28,2950,47,"directlySetCurrentUser"],[3407,50,2950,69],[3407,51,2950,70,"user"],[3407,55,2950,74],[3407,56,2950,75],[3408,12,2950,75],[3408,15,2950,76],[3409,10,2951,8],[3410,8,2952,4],[3410,9,2952,5],[3411,8,2952,5],[3411,17,2948,10,"_persistUserIfCurrent"],[3411,38,2948,31,"_persistUserIfCurrent"],[3411,39,2948,31,"_x65"],[3411,43,2948,31],[3412,10,2948,31],[3412,17,2948,31,"_persistUserIfCurrent2"],[3412,39,2948,31],[3412,40,2948,31,"apply"],[3412,45,2948,31],[3412,52,2948,31,"arguments"],[3412,61,2948,31],[3413,8,2948,31],[3414,8,2948,31],[3414,15,2948,10,"_persistUserIfCurrent"],[3414,36,2948,31],[3415,6,2948,31],[3415,10,2953,4],[3416,4,2953,4],[3417,6,2953,4,"key"],[3417,9,2953,4],[3418,6,2953,4,"value"],[3418,11,2953,4],[3418,13,2954,4],[3418,22,2954,4,"_notifyListenersIfCurrent"],[3418,47,2954,29,"_notifyListenersIfCurrent"],[3418,48,2954,30,"user"],[3418,52,2954,34],[3418,54,2954,36],[3419,8,2955,8],[3419,12,2955,12,"user"],[3419,16,2955,16],[3419,21,2955,21],[3419,25,2955,25],[3419,26,2955,26,"currentUser"],[3419,37,2955,37],[3419,39,2955,39],[3420,10,2956,12],[3420,14,2956,16],[3420,15,2956,17,"notifyAuthListeners"],[3420,34,2956,36],[3420,35,2956,37],[3420,36,2956,38],[3421,8,2957,8],[3422,6,2958,4],[3423,4,2958,5],[3424,6,2958,5,"key"],[3424,9,2958,5],[3425,6,2958,5,"value"],[3425,11,2958,5],[3425,13,2959,4],[3425,22,2959,4,"_key"],[3425,26,2959,8,"_key"],[3425,27,2959,8],[3425,29,2959,11],[3426,8,2960,8],[3426,15,2960,15],[3426,18,2960,18],[3426,22,2960,22],[3426,23,2960,23,"config"],[3426,29,2960,29],[3426,30,2960,30,"authDomain"],[3426,40,2960,40],[3426,44,2960,44],[3426,48,2960,48],[3426,49,2960,49,"config"],[3426,55,2960,55],[3426,56,2960,56,"apiKey"],[3426,62,2960,62],[3426,66,2960,66],[3426,70,2960,70],[3426,71,2960,71,"name"],[3426,75,2960,75],[3426,77,2960,77],[3427,6,2961,4],[3428,4,2961,5],[3429,6,2961,5,"key"],[3429,9,2961,5],[3430,6,2961,5,"value"],[3430,11,2961,5],[3430,13,2962,4],[3430,22,2962,4,"_startProactiveRefresh"],[3430,44,2962,26,"_startProactiveRefresh"],[3430,45,2962,26],[3430,47,2962,29],[3431,8,2963,8],[3431,12,2963,12],[3431,13,2963,13,"isProactiveRefreshEnabled"],[3431,38,2963,38],[3431,41,2963,41],[3431,45,2963,45],[3432,8,2964,8],[3432,12,2964,12],[3432,16,2964,16],[3432,17,2964,17,"currentUser"],[3432,28,2964,28],[3432,30,2964,30],[3433,10,2965,12],[3433,14,2965,16],[3433,15,2965,17,"_currentUser"],[3433,27,2965,29],[3433,28,2965,30,"_startProactiveRefresh"],[3433,50,2965,52],[3433,51,2965,53],[3433,52,2965,54],[3434,8,2966,8],[3435,6,2967,4],[3436,4,2967,5],[3437,6,2967,5,"key"],[3437,9,2967,5],[3438,6,2967,5,"value"],[3438,11,2967,5],[3438,13,2968,4],[3438,22,2968,4,"_stopProactiveRefresh"],[3438,43,2968,25,"_stopProactiveRefresh"],[3438,44,2968,25],[3438,46,2968,28],[3439,8,2969,8],[3439,12,2969,12],[3439,13,2969,13,"isProactiveRefreshEnabled"],[3439,38,2969,38],[3439,41,2969,41],[3439,46,2969,46],[3440,8,2970,8],[3440,12,2970,12],[3440,16,2970,16],[3440,17,2970,17,"currentUser"],[3440,28,2970,28],[3440,30,2970,30],[3441,10,2971,12],[3441,14,2971,16],[3441,15,2971,17,"_currentUser"],[3441,27,2971,29],[3441,28,2971,30,"_stopProactiveRefresh"],[3441,49,2971,51],[3441,50,2971,52],[3441,51,2971,53],[3442,8,2972,8],[3443,6,2973,4],[3444,6,2974,4],[3445,4,2974,4],[3446,6,2974,4,"key"],[3446,9,2974,4],[3447,6,2974,4,"get"],[3447,9,2974,4],[3447,11,2975,4],[3447,20,2975,4,"get"],[3447,21,2975,4],[3447,23,2975,23],[3448,8,2976,8],[3448,15,2976,15],[3448,19,2976,19],[3448,20,2976,20,"currentUser"],[3448,31,2976,31],[3449,6,2977,4],[3450,4,2977,5],[3451,6,2977,5,"key"],[3451,9,2977,5],[3452,6,2977,5,"value"],[3452,11,2977,5],[3452,13,2978,4],[3452,22,2978,4,"notifyAuthListeners"],[3452,41,2978,23,"notifyAuthListeners"],[3452,42,2978,23],[3452,44,2978,26],[3453,8,2979,8],[3453,12,2979,12],[3453,13,2979,13],[3453,17,2979,17],[3453,18,2979,18,"_isInitialized"],[3453,32,2979,32],[3453,34,2979,34],[3454,10,2980,12],[3455,8,2981,8],[3456,8,2982,8],[3456,12,2982,12],[3456,13,2982,13,"idTokenSubscription"],[3456,32,2982,32],[3456,33,2982,33,"next"],[3456,37,2982,37],[3456,38,2982,38],[3456,42,2982,42],[3456,43,2982,43,"currentUser"],[3456,54,2982,54],[3456,55,2982,55],[3457,8,2983,8],[3457,12,2983,14,"currentUid"],[3457,22,2983,24],[3457,25,2983,27],[3457,29,2983,31],[3457,30,2983,32,"currentUser"],[3457,41,2983,43],[3457,43,2983,45,"uid"],[3457,46,2983,48],[3457,50,2983,52],[3457,54,2983,56],[3458,8,2984,8],[3458,12,2984,12],[3458,16,2984,16],[3458,17,2984,17,"lastNotifiedUid"],[3458,32,2984,32],[3458,37,2984,37,"currentUid"],[3458,47,2984,47],[3458,49,2984,49],[3459,10,2985,12],[3459,14,2985,16],[3459,15,2985,17,"lastNotifiedUid"],[3459,30,2985,32],[3459,33,2985,35,"currentUid"],[3459,43,2985,45],[3460,10,2986,12],[3460,14,2986,16],[3460,15,2986,17,"authStateSubscription"],[3460,36,2986,38],[3460,37,2986,39,"next"],[3460,41,2986,43],[3460,42,2986,44],[3460,46,2986,48],[3460,47,2986,49,"currentUser"],[3460,58,2986,60],[3460,59,2986,61],[3461,8,2987,8],[3462,6,2988,4],[3463,4,2988,5],[3464,6,2988,5,"key"],[3464,9,2988,5],[3465,6,2988,5,"value"],[3465,11,2988,5],[3465,13,2989,4],[3465,22,2989,4,"registerStateListener"],[3465,43,2989,25,"registerStateListener"],[3465,44,2989,26,"subscription"],[3465,56,2989,38],[3465,58,2989,40,"nextOrObserver"],[3465,72,2989,54],[3465,74,2989,56,"error"],[3465,79,2989,61],[3465,81,2989,63,"completed"],[3465,90,2989,72],[3465,92,2989,74],[3466,8,2990,8],[3466,12,2990,12],[3466,16,2990,16],[3466,17,2990,17,"_deleted"],[3466,25,2990,25],[3466,27,2990,27],[3467,10,2991,12],[3467,17,2991,19],[3467,23,2991,25],[3467,24,2991,27],[3467,25,2991,28],[3468,8,2992,8],[3469,8,2993,8],[3469,12,2993,14,"cb"],[3469,14,2993,16],[3469,17,2993,19],[3469,24,2993,26,"nextOrObserver"],[3469,38,2993,40],[3469,43,2993,45],[3469,53,2993,55],[3469,56,2994,14,"nextOrObserver"],[3469,70,2994,28],[3469,73,2995,14,"nextOrObserver"],[3469,87,2995,28],[3469,88,2995,29,"next"],[3469,92,2995,33],[3469,93,2995,34,"bind"],[3469,97,2995,38],[3469,98,2995,39,"nextOrObserver"],[3469,112,2995,53],[3469,113,2995,54],[3470,8,2996,8],[3470,12,2996,12,"isUnsubscribed"],[3470,26,2996,26],[3470,29,2996,29],[3470,34,2996,34],[3471,8,2997,8],[3471,12,2997,14,"promise"],[3471,19,2997,21],[3471,22,2997,24],[3471,26,2997,28],[3471,27,2997,29,"_isInitialized"],[3471,41,2997,43],[3471,44,2998,14,"Promise"],[3471,51,2998,21],[3471,52,2998,22,"resolve"],[3471,59,2998,29],[3471,60,2998,30],[3471,61,2998,31],[3471,64,2999,14],[3471,68,2999,18],[3471,69,2999,19,"_initializationPromise"],[3471,91,2999,41],[3472,8,3000,8,"_assert"],[3472,15,3000,15],[3472,16,3000,16,"promise"],[3472,23,3000,23],[3472,25,3000,25],[3472,29,3000,29],[3472,31,3000,31],[3472,47,3000,47],[3472,48,3000,48],[3472,82,3000,82],[3472,83,3000,83],[3473,8,3001,8],[3474,8,3002,8],[3475,8,3003,8,"promise"],[3475,15,3003,15],[3475,16,3003,16,"then"],[3475,20,3003,20],[3475,21,3003,21],[3475,27,3003,27],[3476,10,3004,12],[3476,14,3004,16,"isUnsubscribed"],[3476,28,3004,30],[3476,30,3004,32],[3477,12,3005,16],[3478,10,3006,12],[3479,10,3007,12,"cb"],[3479,12,3007,14],[3479,13,3007,15],[3479,17,3007,19],[3479,18,3007,20,"currentUser"],[3479,29,3007,31],[3479,30,3007,32],[3480,8,3008,8],[3480,9,3008,9],[3480,10,3008,10],[3481,8,3009,8],[3481,12,3009,12],[3481,19,3009,19,"nextOrObserver"],[3481,33,3009,33],[3481,38,3009,38],[3481,48,3009,48],[3481,50,3009,50],[3482,10,3010,12],[3482,14,3010,18,"unsubscribe"],[3482,25,3010,29],[3482,28,3010,32,"subscription"],[3482,40,3010,44],[3482,41,3010,45,"addObserver"],[3482,52,3010,56],[3482,53,3010,57,"nextOrObserver"],[3482,67,3010,71],[3482,69,3010,73,"error"],[3482,74,3010,78],[3482,76,3010,80,"completed"],[3482,85,3010,89],[3482,86,3010,90],[3483,10,3011,12],[3483,17,3011,19],[3483,23,3011,25],[3484,12,3012,16,"isUnsubscribed"],[3484,26,3012,30],[3484,29,3012,33],[3484,33,3012,37],[3485,12,3013,16,"unsubscribe"],[3485,23,3013,27],[3485,24,3013,28],[3485,25,3013,29],[3486,10,3014,12],[3486,11,3014,13],[3487,8,3015,8],[3487,9,3015,9],[3487,15,3016,13],[3488,10,3017,12],[3488,14,3017,18,"unsubscribe"],[3488,26,3017,29],[3488,29,3017,32,"subscription"],[3488,41,3017,44],[3488,42,3017,45,"addObserver"],[3488,53,3017,56],[3488,54,3017,57,"nextOrObserver"],[3488,68,3017,71],[3488,69,3017,72],[3489,10,3018,12],[3489,17,3018,19],[3489,23,3018,25],[3490,12,3019,16,"isUnsubscribed"],[3490,26,3019,30],[3490,29,3019,33],[3490,33,3019,37],[3491,12,3020,16,"unsubscribe"],[3491,24,3020,27],[3491,25,3020,28],[3491,26,3020,29],[3492,10,3021,12],[3492,11,3021,13],[3493,8,3022,8],[3494,6,3023,4],[3495,6,3024,4],[3496,0,3025,0],[3497,0,3026,0],[3498,0,3027,0],[3499,0,3028,0],[3500,4,3024,4],[3501,6,3024,4,"key"],[3501,9,3024,4],[3502,6,3024,4,"value"],[3502,11,3024,4],[3503,8,3024,4],[3503,12,3024,4,"_directlySetCurrentUser"],[3503,35,3024,4],[3503,38,3024,4,"_asyncToGenerator"],[3503,55,3024,4],[3503,56,3029,4],[3503,67,3029,33,"user"],[3503,71,3029,37],[3503,73,3029,39],[3504,10,3030,8],[3504,14,3030,12],[3504,18,3030,16],[3504,19,3030,17,"currentUser"],[3504,30,3030,28],[3504,34,3030,32],[3504,38,3030,36],[3504,39,3030,37,"currentUser"],[3504,50,3030,48],[3504,55,3030,53,"user"],[3504,59,3030,57],[3504,61,3030,59],[3505,12,3031,12],[3505,16,3031,16],[3505,17,3031,17,"_currentUser"],[3505,29,3031,29],[3505,30,3031,30,"_stopProactiveRefresh"],[3505,51,3031,51],[3505,52,3031,52],[3505,53,3031,53],[3506,10,3032,8],[3507,10,3033,8],[3507,14,3033,12,"user"],[3507,18,3033,16],[3507,22,3033,20],[3507,26,3033,24],[3507,27,3033,25,"isProactiveRefreshEnabled"],[3507,52,3033,50],[3507,54,3033,52],[3508,12,3034,12,"user"],[3508,16,3034,16],[3508,17,3034,17,"_startProactiveRefresh"],[3508,39,3034,39],[3508,40,3034,40],[3508,41,3034,41],[3509,10,3035,8],[3510,10,3036,8],[3510,14,3036,12],[3510,15,3036,13,"currentUser"],[3510,26,3036,24],[3510,29,3036,27,"user"],[3510,33,3036,31],[3511,10,3037,8],[3511,14,3037,12,"user"],[3511,18,3037,16],[3511,20,3037,18],[3512,12,3038,12],[3512,18,3038,18],[3512,22,3038,22],[3512,23,3038,23,"assertedPersistence"],[3512,42,3038,42],[3512,43,3038,43,"setCurrentUser"],[3512,57,3038,57],[3512,58,3038,58,"user"],[3512,62,3038,62],[3512,63,3038,63],[3513,10,3039,8],[3513,11,3039,9],[3513,17,3040,13],[3514,12,3041,12],[3514,18,3041,18],[3514,22,3041,22],[3514,23,3041,23,"assertedPersistence"],[3514,42,3041,42],[3514,43,3041,43,"removeCurrentUser"],[3514,60,3041,60],[3514,61,3041,61],[3514,62,3041,62],[3515,10,3042,8],[3516,8,3043,4],[3516,9,3043,5],[3517,8,3043,5],[3517,17,3029,10,"directlySetCurrentUser"],[3517,39,3029,32,"directlySetCurrentUser"],[3517,40,3029,32,"_x66"],[3517,44,3029,32],[3518,10,3029,32],[3518,17,3029,32,"_directlySetCurrentUser"],[3518,40,3029,32],[3518,41,3029,32,"apply"],[3518,46,3029,32],[3518,53,3029,32,"arguments"],[3518,62,3029,32],[3519,8,3029,32],[3520,8,3029,32],[3520,15,3029,10,"directlySetCurrentUser"],[3520,37,3029,32],[3521,6,3029,32],[3522,4,3029,32],[3523,6,3029,32,"key"],[3523,9,3029,32],[3524,6,3029,32,"value"],[3524,11,3029,32],[3524,13,3044,4],[3524,22,3044,4,"queue"],[3524,27,3044,9,"queue"],[3524,28,3044,10,"action"],[3524,34,3044,16],[3524,36,3044,18],[3525,8,3045,8],[3526,8,3046,8],[3527,8,3047,8],[3527,12,3047,12],[3527,13,3047,13,"operations"],[3527,23,3047,23],[3527,26,3047,26],[3527,30,3047,30],[3527,31,3047,31,"operations"],[3527,41,3047,41],[3527,42,3047,42,"then"],[3527,46,3047,46],[3527,47,3047,47,"action"],[3527,53,3047,53],[3527,55,3047,55,"action"],[3527,61,3047,61],[3527,62,3047,62],[3528,8,3048,8],[3528,15,3048,15],[3528,19,3048,19],[3528,20,3048,20,"operations"],[3528,30,3048,30],[3529,6,3049,4],[3530,4,3049,5],[3531,6,3049,5,"key"],[3531,9,3049,5],[3532,6,3049,5,"get"],[3532,9,3049,5],[3532,11,3050,4],[3532,20,3050,4,"get"],[3532,21,3050,4],[3532,23,3050,30],[3533,8,3051,8,"_assert"],[3533,15,3051,15],[3533,16,3051,16],[3533,20,3051,20],[3533,21,3051,21,"persistenceManager"],[3533,39,3051,39],[3533,41,3051,41],[3533,45,3051,45],[3533,47,3051,47],[3533,63,3051,63],[3533,64,3051,64],[3533,98,3051,98],[3533,99,3051,99],[3534,8,3052,8],[3534,15,3052,15],[3534,19,3052,19],[3534,20,3052,20,"persistenceManager"],[3534,38,3052,38],[3535,6,3053,4],[3536,4,3053,5],[3537,6,3053,5,"key"],[3537,9,3053,5],[3538,6,3053,5,"value"],[3538,11,3053,5],[3538,13,3054,4],[3538,22,3054,4,"_logFramework"],[3538,35,3054,17,"_logFramework"],[3538,36,3054,18,"framework"],[3538,45,3054,27],[3538,47,3054,29],[3539,8,3055,8],[3539,12,3055,12],[3539,13,3055,13,"framework"],[3539,22,3055,22],[3539,26,3055,26],[3539,30,3055,30],[3539,31,3055,31,"frameworks"],[3539,41,3055,41],[3539,42,3055,42,"includes"],[3539,50,3055,50],[3539,51,3055,51,"framework"],[3539,60,3055,60],[3539,61,3055,61],[3539,63,3055,63],[3540,10,3056,12],[3541,8,3057,8],[3542,8,3058,8],[3542,12,3058,12],[3542,13,3058,13,"frameworks"],[3542,23,3058,23],[3542,24,3058,24,"push"],[3542,28,3058,28],[3542,29,3058,29,"framework"],[3542,38,3058,38],[3542,39,3058,39],[3543,8,3059,8],[3544,8,3060,8],[3545,8,3061,8],[3545,12,3061,12],[3545,13,3061,13,"frameworks"],[3545,23,3061,23],[3545,24,3061,24,"sort"],[3545,28,3061,28],[3545,29,3061,29],[3545,30,3061,30],[3546,8,3062,8],[3546,12,3062,12],[3546,13,3062,13,"clientVersion"],[3546,26,3062,26],[3546,29,3062,29,"_getClientVersion"],[3546,46,3062,46],[3546,47,3062,47],[3546,51,3062,51],[3546,52,3062,52,"config"],[3546,58,3062,58],[3546,59,3062,59,"clientPlatform"],[3546,73,3062,73],[3546,75,3062,75],[3546,79,3062,79],[3546,80,3062,80,"_getFrameworks"],[3546,94,3062,94],[3546,95,3062,95],[3546,96,3062,96],[3546,97,3062,97],[3547,6,3063,4],[3548,4,3063,5],[3549,6,3063,5,"key"],[3549,9,3063,5],[3550,6,3063,5,"value"],[3550,11,3063,5],[3550,13,3064,4],[3550,22,3064,4,"_getFrameworks"],[3550,36,3064,18,"_getFrameworks"],[3550,37,3064,18],[3550,39,3064,21],[3551,8,3065,8],[3551,15,3065,15],[3551,19,3065,19],[3551,20,3065,20,"frameworks"],[3551,30,3065,30],[3552,6,3066,4],[3553,4,3066,5],[3554,6,3066,5,"key"],[3554,9,3066,5],[3555,6,3066,5,"value"],[3555,11,3066,5],[3556,8,3066,5],[3556,12,3066,5,"_getAdditionalHeaders2"],[3556,34,3066,5],[3556,37,3066,5,"_asyncToGenerator"],[3556,54,3066,5],[3556,55,3067,4],[3556,68,3067,34],[3557,10,3068,8],[3558,10,3069,8],[3558,14,3069,14,"headers"],[3558,21,3069,21],[3558,24,3069,24],[3559,12,3070,12],[3559,13,3070,13],[3559,31,3070,31],[3559,32,3070,32],[3559,68,3070,68],[3559,72,3070,72],[3559,73,3070,73,"clientVersion"],[3560,10,3071,8],[3560,11,3071,9],[3561,10,3072,8],[3561,14,3072,12],[3561,18,3072,16],[3561,19,3072,17,"app"],[3561,22,3072,20],[3561,23,3072,21,"options"],[3561,30,3072,28],[3561,31,3072,29,"appId"],[3561,36,3072,34],[3561,38,3072,36],[3562,12,3073,12,"headers"],[3562,19,3073,19],[3562,20,3073,20],[3562,38,3073,38],[3562,39,3073,39],[3562,73,3073,73],[3562,76,3073,76],[3562,80,3073,80],[3562,81,3073,81,"app"],[3562,84,3073,84],[3562,85,3073,85,"options"],[3562,92,3073,92],[3562,93,3073,93,"appId"],[3562,98,3073,98],[3563,10,3074,8],[3564,10,3075,8],[3565,10,3076,8],[3565,14,3076,14,"heartbeatsHeader"],[3565,30,3076,30],[3565,39,3076,39],[3565,43,3076,43],[3565,44,3076,44,"heartbeatServiceProvider"],[3565,68,3076,68],[3565,69,3077,13,"getImmediate"],[3565,81,3077,25],[3565,82,3077,26],[3566,12,3078,12,"optional"],[3566,20,3078,20],[3566,22,3078,22],[3567,10,3079,8],[3567,11,3079,9],[3567,12,3079,10],[3567,14,3080,14,"getHeartbeatsHeader"],[3567,33,3080,33],[3567,34,3080,34],[3567,35,3080,35],[3568,10,3081,8],[3568,14,3081,12,"heartbeatsHeader"],[3568,30,3081,28],[3568,32,3081,30],[3569,12,3082,12,"headers"],[3569,19,3082,19],[3569,20,3082,20],[3569,39,3082,39],[3569,40,3082,40],[3569,75,3082,75],[3569,78,3082,78,"heartbeatsHeader"],[3569,94,3082,94],[3570,10,3083,8],[3571,10,3084,8],[3572,10,3085,8],[3572,14,3085,14,"appCheckToken"],[3572,27,3085,27],[3572,36,3085,36],[3572,40,3085,40],[3572,41,3085,41,"_getAppCheckToken"],[3572,58,3085,58],[3572,59,3085,59],[3572,60,3085,60],[3573,10,3086,8],[3573,14,3086,12,"appCheckToken"],[3573,27,3086,25],[3573,29,3086,27],[3574,12,3087,12,"headers"],[3574,19,3087,19],[3574,20,3087,20],[3574,41,3087,41],[3574,42,3087,42],[3574,80,3087,80],[3574,83,3087,83,"appCheckToken"],[3574,96,3087,96],[3575,10,3088,8],[3576,10,3089,8],[3576,17,3089,15,"headers"],[3576,24,3089,22],[3577,8,3090,4],[3577,9,3090,5],[3578,8,3090,5],[3578,17,3067,10,"_getAdditionalHeaders"],[3578,38,3067,31,"_getAdditionalHeaders"],[3578,39,3067,31],[3579,10,3067,31],[3579,17,3067,31,"_getAdditionalHeaders2"],[3579,39,3067,31],[3579,40,3067,31,"apply"],[3579,45,3067,31],[3579,52,3067,31,"arguments"],[3579,61,3067,31],[3580,8,3067,31],[3581,8,3067,31],[3581,15,3067,10,"_getAdditionalHeaders"],[3581,36,3067,31],[3582,6,3067,31],[3583,4,3067,31],[3584,6,3067,31,"key"],[3584,9,3067,31],[3585,6,3067,31,"value"],[3585,11,3067,31],[3586,8,3067,31],[3586,12,3067,31,"_getAppCheckToken2"],[3586,30,3067,31],[3586,33,3067,31,"_asyncToGenerator"],[3586,50,3067,31],[3586,51,3091,4],[3586,64,3091,30],[3587,10,3092,8],[3587,14,3092,12,"app"],[3587,17,3092,15],[3587,18,3092,16,"_isFirebaseServerApp"],[3587,38,3092,36],[3587,39,3092,37],[3587,43,3092,41],[3587,44,3092,42,"app"],[3587,47,3092,45],[3587,48,3092,46],[3587,52,3092,50],[3587,56,3092,54],[3587,57,3092,55,"app"],[3587,60,3092,58],[3587,61,3092,59,"settings"],[3587,69,3092,67],[3587,70,3092,68,"appCheckToken"],[3587,83,3092,81],[3587,85,3092,83],[3588,12,3093,12],[3588,19,3093,19],[3588,23,3093,23],[3588,24,3093,24,"app"],[3588,27,3093,27],[3588,28,3093,28,"settings"],[3588,36,3093,36],[3588,37,3093,37,"appCheckToken"],[3588,50,3093,50],[3589,10,3094,8],[3590,10,3095,8],[3590,14,3095,14,"appCheckTokenResult"],[3590,33,3095,33],[3590,42,3095,42],[3590,46,3095,46],[3590,47,3095,47,"appCheckServiceProvider"],[3590,70,3095,70],[3590,71,3096,13,"getImmediate"],[3590,83,3096,25],[3590,84,3096,26],[3591,12,3096,28,"optional"],[3591,20,3096,36],[3591,22,3096,38],[3592,10,3096,43],[3592,11,3096,44],[3592,12,3096,45],[3592,14,3097,14,"getToken"],[3592,22,3097,22],[3592,23,3097,23],[3592,24,3097,24],[3593,10,3098,8],[3593,14,3098,12,"appCheckTokenResult"],[3593,33,3098,31],[3593,35,3098,33,"error"],[3593,40,3098,38],[3593,42,3098,40],[3594,12,3099,12],[3595,12,3100,12],[3596,12,3101,12],[3597,12,3102,12],[3598,12,3103,12,"_logWarn"],[3598,20,3103,20],[3598,21,3103,21],[3598,64,3103,64,"appCheckTokenResult"],[3598,83,3103,83],[3598,84,3103,84,"error"],[3598,89,3103,89],[3598,91,3103,91],[3598,92,3103,92],[3599,10,3104,8],[3600,10,3105,8],[3600,17,3105,15,"appCheckTokenResult"],[3600,36,3105,34],[3600,38,3105,36,"token"],[3600,43,3105,41],[3601,8,3106,4],[3601,9,3106,5],[3602,8,3106,5],[3602,17,3091,10,"_getAppCheckToken"],[3602,34,3091,27,"_getAppCheckToken"],[3602,35,3091,27],[3603,10,3091,27],[3603,17,3091,27,"_getAppCheckToken2"],[3603,35,3091,27],[3603,36,3091,27,"apply"],[3603,41,3091,27],[3603,48,3091,27,"arguments"],[3603,57,3091,27],[3604,8,3091,27],[3605,8,3091,27],[3605,15,3091,10,"_getAppCheckToken"],[3605,32,3091,27],[3606,6,3091,27],[3607,4,3091,27],[3608,2,3091,27],[3609,2,3108,0],[3610,0,3109,0],[3611,0,3110,0],[3612,0,3111,0],[3613,0,3112,0],[3614,0,3113,0],[3615,2,3114,0],[3615,11,3114,9,"_castAuth"],[3615,20,3114,18,"_castAuth"],[3615,21,3114,19,"auth"],[3615,25,3114,23],[3615,27,3114,25],[3616,4,3115,4],[3616,11,3115,11,"util"],[3616,15,3115,15],[3616,16,3115,16,"getModularInstance"],[3616,34,3115,34],[3616,35,3115,35,"auth"],[3616,39,3115,39],[3616,40,3115,40],[3617,2,3116,0],[3618,2,3117,0],[3619,2,3117,0],[3619,6,3118,6,"Subscription"],[3619,18,3118,18],[3620,4,3119,4],[3620,13,3119,4,"Subscription"],[3620,26,3119,16,"auth"],[3620,30,3119,20],[3620,32,3119,22],[3621,6,3119,22,"_classCallCheck"],[3621,21,3119,22],[3621,28,3119,22,"Subscription"],[3621,40,3119,22],[3622,6,3120,8],[3622,10,3120,12],[3622,11,3120,13,"auth"],[3622,15,3120,17],[3622,18,3120,20,"auth"],[3622,22,3120,24],[3623,6,3121,8],[3623,10,3121,12],[3623,11,3121,13,"observer"],[3623,19,3121,21],[3623,22,3121,24],[3623,26,3121,28],[3624,6,3122,8],[3624,10,3122,12],[3624,11,3122,13,"addObserver"],[3624,22,3122,24],[3624,25,3122,27,"util"],[3624,29,3122,31],[3624,30,3122,32,"createSubscribe"],[3624,45,3122,47],[3624,46,3122,48,"observer"],[3624,54,3122,56],[3624,58,3122,61],[3624,62,3122,65],[3624,63,3122,66,"observer"],[3624,71,3122,74],[3624,74,3122,77,"observer"],[3624,82,3122,86],[3624,83,3122,87],[3625,4,3123,4],[3626,4,3123,5],[3626,11,3123,5,"_createClass"],[3626,23,3123,5],[3626,24,3123,5,"Subscription"],[3626,36,3123,5],[3627,6,3123,5,"key"],[3627,9,3123,5],[3628,6,3123,5,"get"],[3628,9,3123,5],[3628,11,3124,4],[3628,20,3124,4,"get"],[3628,21,3124,4],[3628,23,3124,15],[3629,8,3125,8,"_assert"],[3629,15,3125,15],[3629,16,3125,16],[3629,20,3125,20],[3629,21,3125,21,"observer"],[3629,29,3125,29],[3629,31,3125,31],[3629,35,3125,35],[3629,36,3125,36,"auth"],[3629,40,3125,40],[3629,42,3125,42],[3629,58,3125,58],[3629,59,3125,59],[3629,93,3125,93],[3629,94,3125,94],[3630,8,3126,8],[3630,15,3126,15],[3630,19,3126,19],[3630,20,3126,20,"observer"],[3630,28,3126,28],[3630,29,3126,29,"next"],[3630,33,3126,33],[3630,34,3126,34,"bind"],[3630,38,3126,38],[3630,39,3126,39],[3630,43,3126,43],[3630,44,3126,44,"observer"],[3630,52,3126,52],[3630,53,3126,53],[3631,6,3127,4],[3632,4,3127,5],[3633,2,3127,5],[3634,2,3130,0],[3635,0,3131,0],[3636,0,3132,0],[3637,0,3133,0],[3638,0,3134,0],[3639,0,3135,0],[3640,0,3136,0],[3641,0,3137,0],[3642,0,3138,0],[3643,0,3139,0],[3644,0,3140,0],[3645,0,3141,0],[3646,0,3142,0],[3647,0,3143,0],[3648,0,3144,0],[3649,0,3145,0],[3650,2,3146,0],[3650,6,3146,4,"externalJSProvider"],[3650,24,3146,22],[3650,27,3146,25],[3651,4,3147,10,"loadJS"],[3651,10,3147,16,"loadJS"],[3651,11,3147,16],[3651,13,3147,19],[3652,6,3147,19],[3652,13,3147,19,"_asyncToGenerator"],[3652,30,3147,19],[3653,8,3148,8],[3653,14,3148,14],[3653,18,3148,18,"Error"],[3653,23,3148,23],[3653,24,3148,24],[3653,57,3148,57],[3653,58,3148,58],[3654,6,3148,59],[3655,4,3149,4],[3655,5,3149,5],[3656,4,3150,4,"recaptchaV2Script"],[3656,21,3150,21],[3656,23,3150,23],[3656,25,3150,25],[3657,4,3151,4,"recaptchaEnterpriseScript"],[3657,29,3151,29],[3657,31,3151,31],[3657,33,3151,33],[3658,4,3152,4,"gapiScript"],[3658,14,3152,14],[3658,16,3152,16],[3659,2,3153,0],[3659,3,3153,1],[3660,2,3154,0],[3660,11,3154,9,"_setExternalJSProvider"],[3660,33,3154,31,"_setExternalJSProvider"],[3660,34,3154,32,"p"],[3660,35,3154,33],[3660,37,3154,35],[3661,4,3155,4,"externalJSProvider"],[3661,22,3155,22],[3661,25,3155,25,"p"],[3661,26,3155,26],[3662,2,3156,0],[3663,2,3157,0],[3663,11,3157,9,"_loadJS"],[3663,18,3157,16,"_loadJS"],[3663,19,3157,17,"url"],[3663,22,3157,20],[3663,24,3157,22],[3664,4,3158,4],[3664,11,3158,11,"externalJSProvider"],[3664,29,3158,29],[3664,30,3158,30,"loadJS"],[3664,36,3158,36],[3664,37,3158,37,"url"],[3664,40,3158,40],[3664,41,3158,41],[3665,2,3159,0],[3666,2,3160,0],[3666,11,3160,9,"_recaptchaV2ScriptUrl"],[3666,32,3160,30,"_recaptchaV2ScriptUrl"],[3666,33,3160,30],[3666,35,3160,33],[3667,4,3161,4],[3667,11,3161,11,"externalJSProvider"],[3667,29,3161,29],[3667,30,3161,30,"recaptchaV2Script"],[3667,47,3161,47],[3668,2,3162,0],[3669,2,3163,0],[3669,11,3163,9,"_recaptchaEnterpriseScriptUrl"],[3669,40,3163,38,"_recaptchaEnterpriseScriptUrl"],[3669,41,3163,38],[3669,43,3163,41],[3670,4,3164,4],[3670,11,3164,11,"externalJSProvider"],[3670,29,3164,29],[3670,30,3164,30,"recaptchaEnterpriseScript"],[3670,55,3164,55],[3671,2,3165,0],[3672,2,3166,0],[3672,11,3166,9,"_gapiScriptUrl"],[3672,25,3166,23,"_gapiScriptUrl"],[3672,26,3166,23],[3672,28,3166,26],[3673,4,3167,4],[3673,11,3167,11,"externalJSProvider"],[3673,29,3167,29],[3673,30,3167,30,"gapiScript"],[3673,40,3167,40],[3674,2,3168,0],[3675,2,3169,0],[3675,11,3169,9,"_generateCallbackName"],[3675,32,3169,30,"_generateCallbackName"],[3675,33,3169,31,"prefix"],[3675,39,3169,37],[3675,41,3169,39],[3676,4,3170,4],[3676,11,3170,11],[3676,16,3170,16,"prefix"],[3676,22,3170,22],[3676,25,3170,25,"Math"],[3676,29,3170,29],[3676,30,3170,30,"floor"],[3676,35,3170,35],[3676,36,3170,36,"Math"],[3676,40,3170,40],[3676,41,3170,41,"random"],[3676,47,3170,47],[3676,48,3170,48],[3676,49,3170,49],[3676,52,3170,52],[3676,59,3170,59],[3676,60,3170,60],[3676,62,3170,62],[3677,2,3171,0],[3679,2,3173,0],[3680,0,3174,0],[3681,0,3175,0],[3682,0,3176,0],[3683,0,3177,0],[3684,0,3178,0],[3685,0,3179,0],[3686,0,3180,0],[3687,0,3181,0],[3688,0,3182,0],[3689,0,3183,0],[3690,0,3184,0],[3691,0,3185,0],[3692,0,3186,0],[3693,0,3187,0],[3694,0,3188,0],[3695,2,3189,0],[3695,6,3189,6,"_SOLVE_TIME_MS"],[3695,20,3189,20],[3695,23,3189,23],[3695,26,3189,26],[3696,2,3190,0],[3696,6,3190,6,"_EXPIRATION_TIME_MS"],[3696,25,3190,25],[3696,28,3190,28],[3696,33,3190,33],[3697,2,3191,0],[3697,6,3191,6,"_WIDGET_ID_START"],[3697,22,3191,22],[3697,25,3191,25],[3697,38,3191,38],[3698,2,3191,39],[3698,6,3192,6,"MockReCaptcha"],[3698,19,3192,19],[3699,4,3193,4],[3699,13,3193,4,"MockReCaptcha"],[3699,27,3193,16,"auth"],[3699,31,3193,20],[3699,33,3193,22],[3700,6,3193,22,"_classCallCheck"],[3700,21,3193,22],[3700,28,3193,22,"MockReCaptcha"],[3700,41,3193,22],[3701,6,3194,8],[3701,10,3194,12],[3701,11,3194,13,"auth"],[3701,15,3194,17],[3701,18,3194,20,"auth"],[3701,22,3194,24],[3702,6,3195,8],[3702,10,3195,12],[3702,11,3195,13,"counter"],[3702,18,3195,20],[3702,21,3195,23,"_WIDGET_ID_START"],[3702,37,3195,39],[3703,6,3196,8],[3703,10,3196,12],[3703,11,3196,13,"_widgets"],[3703,19,3196,21],[3703,22,3196,24],[3703,26,3196,28,"Map"],[3703,29,3196,31],[3703,30,3196,32],[3703,31,3196,33],[3704,4,3197,4],[3705,4,3197,5],[3705,11,3197,5,"_createClass"],[3705,23,3197,5],[3705,24,3197,5,"MockReCaptcha"],[3705,37,3197,5],[3706,6,3197,5,"key"],[3706,9,3197,5],[3707,6,3197,5,"value"],[3707,11,3197,5],[3707,13,3198,4],[3707,22,3198,4,"render"],[3707,28,3198,10,"render"],[3707,29,3198,11,"container"],[3707,38,3198,20],[3707,40,3198,22,"parameters"],[3707,50,3198,32],[3707,52,3198,34],[3708,8,3199,8],[3708,12,3199,14,"id"],[3708,14,3199,16],[3708,17,3199,19],[3708,21,3199,23],[3708,22,3199,24,"counter"],[3708,29,3199,31],[3709,8,3200,8],[3709,12,3200,12],[3709,13,3200,13,"_widgets"],[3709,21,3200,21],[3709,22,3200,22,"set"],[3709,25,3200,25],[3709,26,3200,26,"id"],[3709,28,3200,28],[3709,30,3200,30],[3709,34,3200,34,"MockWidget"],[3709,44,3200,44],[3709,45,3200,45,"container"],[3709,54,3200,54],[3709,56,3200,56],[3709,60,3200,60],[3709,61,3200,61,"auth"],[3709,65,3200,65],[3709,66,3200,66,"name"],[3709,70,3200,70],[3709,72,3200,72,"parameters"],[3709,82,3200,82],[3709,86,3200,86],[3709,87,3200,87],[3709,88,3200,88],[3709,89,3200,89],[3709,90,3200,90],[3710,8,3201,8],[3710,12,3201,12],[3710,13,3201,13,"counter"],[3710,20,3201,20],[3710,22,3201,22],[3711,8,3202,8],[3711,15,3202,15,"id"],[3711,17,3202,17],[3712,6,3203,4],[3713,4,3203,5],[3714,6,3203,5,"key"],[3714,9,3203,5],[3715,6,3203,5,"value"],[3715,11,3203,5],[3715,13,3204,4],[3715,22,3204,4,"reset"],[3715,27,3204,9,"reset"],[3715,28,3204,10,"optWidgetId"],[3715,39,3204,21],[3715,41,3204,23],[3716,8,3205,8],[3716,12,3205,14,"id"],[3716,14,3205,16],[3716,17,3205,19,"optWidgetId"],[3716,28,3205,30],[3716,32,3205,34,"_WIDGET_ID_START"],[3716,48,3205,50],[3717,8,3206,8],[3717,13,3206,13],[3717,17,3206,17],[3717,18,3206,18,"_widgets"],[3717,26,3206,26],[3717,27,3206,27,"get"],[3717,30,3206,30],[3717,31,3206,31,"id"],[3717,33,3206,33],[3717,34,3206,34],[3717,36,3206,36,"delete"],[3717,42,3206,42],[3717,43,3206,43],[3717,44,3206,44],[3718,8,3207,8],[3718,12,3207,12],[3718,13,3207,13,"_widgets"],[3718,21,3207,21],[3718,22,3207,22,"delete"],[3718,28,3207,28],[3718,29,3207,29,"id"],[3718,31,3207,31],[3718,32,3207,32],[3719,6,3208,4],[3720,4,3208,5],[3721,6,3208,5,"key"],[3721,9,3208,5],[3722,6,3208,5,"value"],[3722,11,3208,5],[3722,13,3209,4],[3722,22,3209,4,"getResponse"],[3722,33,3209,15,"getResponse"],[3722,34,3209,16,"optWidgetId"],[3722,45,3209,27],[3722,47,3209,29],[3723,8,3210,8],[3723,12,3210,14,"id"],[3723,14,3210,16],[3723,17,3210,19,"optWidgetId"],[3723,28,3210,30],[3723,32,3210,34,"_WIDGET_ID_START"],[3723,48,3210,50],[3724,8,3211,8],[3724,15,3211,15],[3724,19,3211,19],[3724,20,3211,20,"_widgets"],[3724,28,3211,28],[3724,29,3211,29,"get"],[3724,32,3211,32],[3724,33,3211,33,"id"],[3724,35,3211,35],[3724,36,3211,36],[3724,38,3211,38,"getResponse"],[3724,49,3211,49],[3724,50,3211,50],[3724,51,3211,51],[3724,55,3211,55],[3724,57,3211,57],[3725,6,3212,4],[3726,4,3212,5],[3727,6,3212,5,"key"],[3727,9,3212,5],[3728,6,3212,5,"value"],[3728,11,3212,5],[3729,8,3212,5],[3729,12,3212,5,"_execute"],[3729,20,3212,5],[3729,23,3212,5,"_asyncToGenerator"],[3729,40,3212,5],[3729,41,3213,4],[3729,52,3213,18,"optWidgetId"],[3729,63,3213,29],[3729,65,3213,31],[3730,10,3214,8],[3730,14,3214,14,"id"],[3730,16,3214,16],[3730,19,3214,19,"optWidgetId"],[3730,30,3214,30],[3730,34,3214,34,"_WIDGET_ID_START"],[3730,50,3214,50],[3731,10,3215,8],[3731,15,3215,13],[3731,19,3215,17],[3731,20,3215,18,"_widgets"],[3731,28,3215,26],[3731,29,3215,27,"get"],[3731,32,3215,30],[3731,33,3215,31,"id"],[3731,35,3215,33],[3731,36,3215,34],[3731,38,3215,36,"execute"],[3731,45,3215,43],[3731,46,3215,44],[3731,47,3215,45],[3732,10,3216,8],[3732,17,3216,15],[3732,19,3216,17],[3733,8,3217,4],[3733,9,3217,5],[3734,8,3217,5],[3734,17,3213,10,"execute"],[3734,24,3213,17,"execute"],[3734,25,3213,17,"_x67"],[3734,29,3213,17],[3735,10,3213,17],[3735,17,3213,17,"_execute"],[3735,25,3213,17],[3735,26,3213,17,"apply"],[3735,31,3213,17],[3735,38,3213,17,"arguments"],[3735,47,3213,17],[3736,8,3213,17],[3737,8,3213,17],[3737,15,3213,10,"execute"],[3737,22,3213,17],[3738,6,3213,17],[3739,4,3213,17],[3740,2,3213,17],[3741,2,3213,17],[3741,6,3219,6,"MockGreCAPTCHATopLevel"],[3741,28,3219,28],[3742,4,3220,4],[3742,13,3220,4,"MockGreCAPTCHATopLevel"],[3742,36,3220,4],[3742,38,3220,18],[3743,6,3220,18,"_classCallCheck"],[3743,21,3220,18],[3743,28,3220,18,"MockGreCAPTCHATopLevel"],[3743,50,3220,18],[3744,6,3221,8],[3744,10,3221,12],[3744,11,3221,13,"enterprise"],[3744,21,3221,23],[3744,24,3221,26],[3744,28,3221,30,"MockGreCAPTCHA"],[3744,42,3221,44],[3744,43,3221,45],[3744,44,3221,46],[3745,4,3222,4],[3746,4,3222,5],[3746,11,3222,5,"_createClass"],[3746,23,3222,5],[3746,24,3222,5,"MockGreCAPTCHATopLevel"],[3746,46,3222,5],[3747,6,3222,5,"key"],[3747,9,3222,5],[3748,6,3222,5,"value"],[3748,11,3222,5],[3748,13,3223,4],[3748,22,3223,4,"ready"],[3748,27,3223,9,"ready"],[3748,28,3223,10,"callback"],[3748,36,3223,18],[3748,38,3223,20],[3749,8,3224,8,"callback"],[3749,16,3224,16],[3749,17,3224,17],[3749,18,3224,18],[3750,6,3225,4],[3751,4,3225,5],[3752,6,3225,5,"key"],[3752,9,3225,5],[3753,6,3225,5,"value"],[3753,11,3225,5],[3753,13,3226,4],[3753,22,3226,4,"execute"],[3753,29,3226,11,"execute"],[3754,6,3227,4],[3755,6,3228,4,"_siteKey"],[3755,14,3228,12],[3755,16,3228,14,"_options"],[3755,24,3228,22],[3755,26,3228,24],[3756,8,3229,8],[3756,15,3229,15,"Promise"],[3756,22,3229,22],[3756,23,3229,23,"resolve"],[3756,30,3229,30],[3756,31,3229,31],[3756,38,3229,38],[3756,39,3229,39],[3757,6,3230,4],[3758,4,3230,5],[3759,6,3230,5,"key"],[3759,9,3230,5],[3760,6,3230,5,"value"],[3760,11,3230,5],[3760,13,3231,4],[3760,22,3231,4,"render"],[3760,28,3231,10,"render"],[3761,6,3232,4],[3762,6,3233,4,"_container"],[3762,16,3233,14],[3762,18,3233,16,"_parameters"],[3762,29,3233,27],[3762,31,3233,29],[3763,8,3234,8],[3763,15,3234,15],[3763,17,3234,17],[3764,6,3235,4],[3765,4,3235,5],[3766,2,3235,5],[3767,2,3235,5],[3767,6,3237,6,"MockGreCAPTCHA"],[3767,20,3237,20],[3768,4,3237,20],[3768,13,3237,20,"MockGreCAPTCHA"],[3768,28,3237,20],[3769,6,3237,20,"_classCallCheck"],[3769,21,3237,20],[3769,28,3237,20,"MockGreCAPTCHA"],[3769,42,3237,20],[3770,4,3237,20],[3771,4,3237,20],[3771,11,3237,20,"_createClass"],[3771,23,3237,20],[3771,24,3237,20,"MockGreCAPTCHA"],[3771,38,3237,20],[3772,6,3237,20,"key"],[3772,9,3237,20],[3773,6,3237,20,"value"],[3773,11,3237,20],[3773,13,3238,4],[3773,22,3238,4,"ready"],[3773,27,3238,9,"ready"],[3773,28,3238,10,"callback"],[3773,36,3238,18],[3773,38,3238,20],[3774,8,3239,8,"callback"],[3774,16,3239,16],[3774,17,3239,17],[3774,18,3239,18],[3775,6,3240,4],[3776,4,3240,5],[3777,6,3240,5,"key"],[3777,9,3240,5],[3778,6,3240,5,"value"],[3778,11,3240,5],[3778,13,3241,4],[3778,22,3241,4,"execute"],[3778,29,3241,11,"execute"],[3779,6,3242,4],[3780,6,3243,4,"_siteKey"],[3780,14,3243,12],[3780,16,3243,14,"_options"],[3780,24,3243,22],[3780,26,3243,24],[3781,8,3244,8],[3781,15,3244,15,"Promise"],[3781,22,3244,22],[3781,23,3244,23,"resolve"],[3781,30,3244,30],[3781,31,3244,31],[3781,38,3244,38],[3781,39,3244,39],[3782,6,3245,4],[3783,4,3245,5],[3784,6,3245,5,"key"],[3784,9,3245,5],[3785,6,3245,5,"value"],[3785,11,3245,5],[3785,13,3246,4],[3785,22,3246,4,"render"],[3785,28,3246,10,"render"],[3786,6,3247,4],[3787,6,3248,4,"_container"],[3787,16,3248,14],[3787,18,3248,16,"_parameters"],[3787,29,3248,27],[3787,31,3248,29],[3788,8,3249,8],[3788,15,3249,15],[3788,17,3249,17],[3789,6,3250,4],[3790,4,3250,5],[3791,2,3250,5],[3792,2,3250,5],[3792,6,3252,6,"MockWidget"],[3792,16,3252,16],[3793,4,3253,4],[3793,13,3253,4,"MockWidget"],[3793,24,3253,16,"containerOrId"],[3793,37,3253,29],[3793,39,3253,31,"appName"],[3793,46,3253,38],[3793,48,3253,40,"params"],[3793,54,3253,46],[3793,56,3253,48],[3794,6,3253,48,"_classCallCheck"],[3794,21,3253,48],[3794,28,3253,48,"MockWidget"],[3794,38,3253,48],[3795,6,3254,8],[3795,10,3254,12],[3795,11,3254,13,"params"],[3795,17,3254,19],[3795,20,3254,22,"params"],[3795,26,3254,28],[3796,6,3255,8],[3796,10,3255,12],[3796,11,3255,13,"timerId"],[3796,18,3255,20],[3796,21,3255,23],[3796,25,3255,27],[3797,6,3256,8],[3797,10,3256,12],[3797,11,3256,13,"deleted"],[3797,18,3256,20],[3797,21,3256,23],[3797,26,3256,28],[3798,6,3257,8],[3798,10,3257,12],[3798,11,3257,13,"responseToken"],[3798,24,3257,26],[3798,27,3257,29],[3798,31,3257,33],[3799,6,3258,8],[3799,10,3258,12],[3799,11,3258,13,"clickHandler"],[3799,23,3258,25],[3799,26,3258,28],[3799,32,3258,34],[3800,8,3259,12],[3800,12,3259,16],[3800,13,3259,17,"execute"],[3800,20,3259,24],[3800,21,3259,25],[3800,22,3259,26],[3801,6,3260,8],[3801,7,3260,9],[3802,6,3261,8],[3802,10,3261,14,"container"],[3802,19,3261,23],[3802,22,3261,26],[3802,29,3261,33,"containerOrId"],[3802,42,3261,46],[3802,47,3261,51],[3802,55,3261,59],[3802,58,3262,14,"document"],[3802,66,3262,22],[3802,67,3262,23,"getElementById"],[3802,81,3262,37],[3802,82,3262,38,"containerOrId"],[3802,95,3262,51],[3802,96,3262,52],[3802,99,3263,14,"containerOrId"],[3802,112,3263,27],[3803,6,3264,8,"_assert"],[3803,13,3264,15],[3803,14,3264,16,"container"],[3803,23,3264,25],[3803,25,3264,27],[3803,41,3264,43],[3803,42,3264,44],[3803,78,3264,80],[3804,8,3264,82,"appName"],[3805,6,3264,90],[3805,7,3264,91],[3805,8,3264,92],[3806,6,3265,8],[3806,10,3265,12],[3806,11,3265,13,"container"],[3806,20,3265,22],[3806,23,3265,25,"container"],[3806,32,3265,34],[3807,6,3266,8],[3807,10,3266,12],[3807,11,3266,13,"isVisible"],[3807,20,3266,22],[3807,23,3266,25],[3807,27,3266,29],[3807,28,3266,30,"params"],[3807,34,3266,36],[3807,35,3266,37,"size"],[3807,39,3266,41],[3807,44,3266,46],[3807,55,3266,57],[3808,6,3267,8],[3808,10,3267,12],[3808,14,3267,16],[3808,15,3267,17,"isVisible"],[3808,24,3267,26],[3808,26,3267,28],[3809,8,3268,12],[3809,12,3268,16],[3809,13,3268,17,"execute"],[3809,20,3268,24],[3809,21,3268,25],[3809,22,3268,26],[3810,6,3269,8],[3810,7,3269,9],[3810,13,3270,13],[3811,8,3271,12],[3811,12,3271,16],[3811,13,3271,17,"container"],[3811,22,3271,26],[3811,23,3271,27,"addEventListener"],[3811,39,3271,43],[3811,40,3271,44],[3811,47,3271,51],[3811,49,3271,53],[3811,53,3271,57],[3811,54,3271,58,"clickHandler"],[3811,66,3271,70],[3811,67,3271,71],[3812,6,3272,8],[3813,4,3273,4],[3814,4,3273,5],[3814,11,3273,5,"_createClass"],[3814,23,3273,5],[3814,24,3273,5,"MockWidget"],[3814,34,3273,5],[3815,6,3273,5,"key"],[3815,9,3273,5],[3816,6,3273,5,"value"],[3816,11,3273,5],[3816,13,3274,4],[3816,22,3274,4,"getResponse"],[3816,33,3274,15,"getResponse"],[3816,34,3274,15],[3816,36,3274,18],[3817,8,3275,8],[3817,12,3275,12],[3817,13,3275,13,"checkIfDeleted"],[3817,27,3275,27],[3817,28,3275,28],[3817,29,3275,29],[3818,8,3276,8],[3818,15,3276,15],[3818,19,3276,19],[3818,20,3276,20,"responseToken"],[3818,33,3276,33],[3819,6,3277,4],[3820,4,3277,5],[3821,6,3277,5,"key"],[3821,9,3277,5],[3822,6,3277,5,"value"],[3822,11,3277,5],[3822,13,3278,4],[3822,22,3278,4,"delete"],[3822,29,3278,10,"delete"],[3822,30,3278,10],[3822,32,3278,13],[3823,8,3279,8],[3823,12,3279,12],[3823,13,3279,13,"checkIfDeleted"],[3823,27,3279,27],[3823,28,3279,28],[3823,29,3279,29],[3824,8,3280,8],[3824,12,3280,12],[3824,13,3280,13,"deleted"],[3824,20,3280,20],[3824,23,3280,23],[3824,27,3280,27],[3825,8,3281,8],[3825,12,3281,12],[3825,16,3281,16],[3825,17,3281,17,"timerId"],[3825,24,3281,24],[3825,26,3281,26],[3826,10,3282,12,"clearTimeout"],[3826,22,3282,24],[3826,23,3282,25],[3826,27,3282,29],[3826,28,3282,30,"timerId"],[3826,35,3282,37],[3826,36,3282,38],[3827,10,3283,12],[3827,14,3283,16],[3827,15,3283,17,"timerId"],[3827,22,3283,24],[3827,25,3283,27],[3827,29,3283,31],[3828,8,3284,8],[3829,8,3285,8],[3829,12,3285,12],[3829,13,3285,13,"container"],[3829,22,3285,22],[3829,23,3285,23,"removeEventListener"],[3829,42,3285,42],[3829,43,3285,43],[3829,50,3285,50],[3829,52,3285,52],[3829,56,3285,56],[3829,57,3285,57,"clickHandler"],[3829,69,3285,69],[3829,70,3285,70],[3830,6,3286,4],[3831,4,3286,5],[3832,6,3286,5,"key"],[3832,9,3286,5],[3833,6,3286,5,"value"],[3833,11,3286,5],[3833,13,3287,4],[3833,22,3287,4,"execute"],[3833,29,3287,11,"execute"],[3833,30,3287,11],[3833,32,3287,14],[3834,8,3288,8],[3834,12,3288,12],[3834,13,3288,13,"checkIfDeleted"],[3834,27,3288,27],[3834,28,3288,28],[3834,29,3288,29],[3835,8,3289,8],[3835,12,3289,12],[3835,16,3289,16],[3835,17,3289,17,"timerId"],[3835,24,3289,24],[3835,26,3289,26],[3836,10,3290,12],[3837,8,3291,8],[3838,8,3292,8],[3838,12,3292,12],[3838,13,3292,13,"timerId"],[3838,20,3292,20],[3838,23,3292,23,"window"],[3838,29,3292,29],[3838,30,3292,30,"setTimeout"],[3838,40,3292,40],[3838,41,3292,41],[3838,47,3292,47],[3839,10,3293,12],[3839,14,3293,16],[3839,15,3293,17,"responseToken"],[3839,28,3293,30],[3839,31,3293,33,"generateRandomAlphaNumericString"],[3839,63,3293,65],[3839,64,3293,66],[3839,66,3293,68],[3839,67,3293,69],[3840,10,3294,12],[3840,14,3294,12,"_this$params"],[3840,26,3294,12],[3840,29,3294,70],[3840,33,3294,74],[3840,34,3294,75,"params"],[3840,40,3294,81],[3841,12,3294,20,"callback"],[3841,20,3294,28],[3841,23,3294,28,"_this$params"],[3841,35,3294,28],[3841,36,3294,20,"callback"],[3841,44,3294,28],[3842,12,3294,50,"expiredCallback"],[3842,27,3294,65],[3842,30,3294,65,"_this$params"],[3842,42,3294,65],[3842,43,3294,30],[3842,61,3294,48],[3843,10,3295,12],[3843,14,3295,16,"callback"],[3843,22,3295,24],[3843,24,3295,26],[3844,12,3296,16],[3844,16,3296,20],[3845,14,3297,20,"callback"],[3845,22,3297,28],[3845,23,3297,29],[3845,27,3297,33],[3845,28,3297,34,"responseToken"],[3845,41,3297,47],[3845,42,3297,48],[3846,12,3298,16],[3846,13,3298,17],[3846,14,3299,16],[3846,21,3299,23,"e"],[3846,22,3299,24],[3846,24,3299,26],[3846,25,3299,28],[3847,10,3300,12],[3848,10,3301,12],[3848,14,3301,16],[3848,15,3301,17,"timerId"],[3848,22,3301,24],[3848,25,3301,27,"window"],[3848,31,3301,33],[3848,32,3301,34,"setTimeout"],[3848,42,3301,44],[3848,43,3301,45],[3848,49,3301,51],[3849,12,3302,16],[3849,16,3302,20],[3849,17,3302,21,"timerId"],[3849,24,3302,28],[3849,27,3302,31],[3849,31,3302,35],[3850,12,3303,16],[3850,16,3303,20],[3850,17,3303,21,"responseToken"],[3850,30,3303,34],[3850,33,3303,37],[3850,37,3303,41],[3851,12,3304,16],[3851,16,3304,20,"expiredCallback"],[3851,31,3304,35],[3851,33,3304,37],[3852,14,3305,20],[3852,18,3305,24],[3853,16,3306,24,"expiredCallback"],[3853,31,3306,39],[3853,32,3306,40],[3853,33,3306,41],[3854,14,3307,20],[3854,15,3307,21],[3854,16,3308,20],[3854,23,3308,27,"e"],[3854,24,3308,28],[3854,26,3308,30],[3854,27,3308,32],[3855,12,3309,16],[3856,12,3310,16],[3856,16,3310,20],[3856,20,3310,24],[3856,21,3310,25,"isVisible"],[3856,30,3310,34],[3856,32,3310,36],[3857,14,3311,20],[3857,18,3311,24],[3857,19,3311,25,"execute"],[3857,26,3311,32],[3857,27,3311,33],[3857,28,3311,34],[3858,12,3312,16],[3859,10,3313,12],[3859,11,3313,13],[3859,13,3313,15,"_EXPIRATION_TIME_MS"],[3859,32,3313,34],[3859,33,3313,35],[3860,8,3314,8],[3860,9,3314,9],[3860,11,3314,11,"_SOLVE_TIME_MS"],[3860,25,3314,25],[3860,26,3314,26],[3861,6,3315,4],[3862,4,3315,5],[3863,6,3315,5,"key"],[3863,9,3315,5],[3864,6,3315,5,"value"],[3864,11,3315,5],[3864,13,3316,4],[3864,22,3316,4,"checkIfDeleted"],[3864,36,3316,18,"checkIfDeleted"],[3864,37,3316,18],[3864,39,3316,21],[3865,8,3317,8],[3865,12,3317,12],[3865,16,3317,16],[3865,17,3317,17,"deleted"],[3865,24,3317,24],[3865,26,3317,26],[3866,10,3318,12],[3866,16,3318,18],[3866,20,3318,22,"Error"],[3866,25,3318,27],[3866,26,3318,28],[3866,63,3318,65],[3866,64,3318,66],[3867,8,3319,8],[3868,6,3320,4],[3869,4,3320,5],[3870,2,3320,5],[3871,2,3322,0],[3871,11,3322,9,"generateRandomAlphaNumericString"],[3871,43,3322,41,"generateRandomAlphaNumericString"],[3871,44,3322,42,"len"],[3871,47,3322,45],[3871,49,3322,47],[3872,4,3323,4],[3872,8,3323,10,"chars"],[3872,13,3323,15],[3872,16,3323,18],[3872,18,3323,20],[3873,4,3324,4],[3873,8,3324,10,"allowedChars"],[3873,20,3324,22],[3873,23,3324,25],[3873,87,3324,89],[3874,4,3325,4],[3874,9,3325,9],[3874,13,3325,13,"i"],[3874,14,3325,14],[3874,17,3325,17],[3874,18,3325,18],[3874,20,3325,20,"i"],[3874,21,3325,21],[3874,24,3325,24,"len"],[3874,27,3325,27],[3874,29,3325,29,"i"],[3874,30,3325,30],[3874,32,3325,32],[3874,34,3325,34],[3875,6,3326,8,"chars"],[3875,11,3326,13],[3875,12,3326,14,"push"],[3875,16,3326,18],[3875,17,3326,19,"allowedChars"],[3875,29,3326,31],[3875,30,3326,32,"charAt"],[3875,36,3326,38],[3875,37,3326,39,"Math"],[3875,41,3326,43],[3875,42,3326,44,"floor"],[3875,47,3326,49],[3875,48,3326,50,"Math"],[3875,52,3326,54],[3875,53,3326,55,"random"],[3875,59,3326,61],[3875,60,3326,62],[3875,61,3326,63],[3875,64,3326,66,"allowedChars"],[3875,76,3326,78],[3875,77,3326,79,"length"],[3875,83,3326,85],[3875,84,3326,86],[3875,85,3326,87],[3875,86,3326,88],[3876,4,3327,4],[3877,4,3328,4],[3877,11,3328,11,"chars"],[3877,16,3328,16],[3877,17,3328,17,"join"],[3877,21,3328,21],[3877,22,3328,22],[3877,24,3328,24],[3877,25,3328,25],[3878,2,3329,0],[3880,2,3331,0],[3881,2,3332,0],[3881,6,3332,6,"RECAPTCHA_ENTERPRISE_VERIFIER_TYPE"],[3881,40,3332,40],[3881,43,3332,43],[3881,65,3332,65],[3882,2,3333,0],[3882,6,3333,6,"FAKE_TOKEN"],[3882,16,3333,16],[3882,19,3333,19],[3882,33,3333,33],[3883,2,3333,34],[3883,6,3334,6,"RecaptchaEnterpriseVerifier"],[3883,33,3334,33],[3884,4,3335,4],[3885,0,3336,0],[3886,0,3337,0],[3887,0,3338,0],[3888,0,3339,0],[3889,4,3340,4],[3889,13,3340,4,"RecaptchaEnterpriseVerifier"],[3889,41,3340,16,"authExtern"],[3889,51,3340,26],[3889,53,3340,28],[3890,6,3340,28,"_classCallCheck"],[3890,21,3340,28],[3890,28,3340,28,"RecaptchaEnterpriseVerifier"],[3890,55,3340,28],[3891,6,3341,8],[3892,0,3342,0],[3893,0,3343,0],[3894,6,3344,8],[3894,10,3344,12],[3894,11,3344,13,"type"],[3894,15,3344,17],[3894,18,3344,20,"RECAPTCHA_ENTERPRISE_VERIFIER_TYPE"],[3894,52,3344,54],[3895,6,3345,8],[3895,10,3345,12],[3895,11,3345,13,"auth"],[3895,15,3345,17],[3895,18,3345,20,"_castAuth"],[3895,27,3345,29],[3895,28,3345,30,"authExtern"],[3895,38,3345,40],[3895,39,3345,41],[3896,4,3346,4],[3897,4,3347,4],[3898,0,3348,0],[3899,0,3349,0],[3900,0,3350,0],[3901,0,3351,0],[3902,4,3347,4],[3902,11,3347,4,"_createClass"],[3902,23,3347,4],[3902,24,3347,4,"RecaptchaEnterpriseVerifier"],[3902,51,3347,4],[3903,6,3347,4,"key"],[3903,9,3347,4],[3904,6,3347,4,"value"],[3904,11,3347,4],[3905,8,3347,4],[3905,12,3347,4,"_verify"],[3905,19,3347,4],[3905,22,3347,4,"_asyncToGenerator"],[3905,39,3347,4],[3905,40,3352,4],[3905,53,3352,58],[3906,10,3352,58],[3906,14,3352,17,"action"],[3906,20,3352,23],[3906,23,3352,23,"arguments"],[3906,32,3352,23],[3906,33,3352,23,"length"],[3906,39,3352,23],[3906,47,3352,23,"arguments"],[3906,56,3352,23],[3906,64,3352,23,"undefined"],[3906,73,3352,23],[3906,76,3352,23,"arguments"],[3906,85,3352,23],[3906,91,3352,26],[3906,99,3352,34],[3907,10,3352,34],[3907,14,3352,36,"forceRefresh"],[3907,26,3352,48],[3907,29,3352,48,"arguments"],[3907,38,3352,48],[3907,39,3352,48,"length"],[3907,45,3352,48],[3907,53,3352,48,"arguments"],[3907,62,3352,48],[3907,70,3352,48,"undefined"],[3907,79,3352,48],[3907,82,3352,48,"arguments"],[3907,91,3352,48],[3907,97,3352,51],[3907,102,3352,56],[3908,10,3352,56],[3908,19,3353,23,"retrieveSiteKey"],[3908,34,3353,38,"retrieveSiteKey"],[3908,35,3353,38,"_x68"],[3908,39,3353,38],[3909,12,3353,38],[3909,19,3353,38,"_retrieveSiteKey"],[3909,35,3353,38],[3909,36,3353,38,"apply"],[3909,41,3353,38],[3909,48,3353,38,"arguments"],[3909,57,3353,38],[3910,10,3353,38],[3911,10,3353,38],[3911,19,3353,38,"_retrieveSiteKey"],[3911,36,3353,38],[3912,12,3353,38,"_retrieveSiteKey"],[3912,28,3353,38],[3912,31,3353,38,"_asyncToGenerator"],[3912,48,3353,38],[3912,49,3353,8],[3912,60,3353,39,"auth"],[3912,64,3353,43],[3912,66,3353,45],[3913,14,3354,12],[3913,18,3354,16],[3913,19,3354,17,"forceRefresh"],[3913,31,3354,29],[3913,33,3354,31],[3914,16,3355,16],[3914,20,3355,20,"auth"],[3914,24,3355,24],[3914,25,3355,25,"tenantId"],[3914,33,3355,33],[3914,37,3355,37],[3914,41,3355,41],[3914,45,3355,45,"auth"],[3914,49,3355,49],[3914,50,3355,50,"_agentRecaptchaConfig"],[3914,71,3355,71],[3914,75,3355,75],[3914,79,3355,79],[3914,81,3355,81],[3915,18,3356,20],[3915,25,3356,27,"auth"],[3915,29,3356,31],[3915,30,3356,32,"_agentRecaptchaConfig"],[3915,51,3356,53],[3915,52,3356,54,"siteKey"],[3915,59,3356,61],[3916,16,3357,16],[3917,16,3358,16],[3917,20,3358,20,"auth"],[3917,24,3358,24],[3917,25,3358,25,"tenantId"],[3917,33,3358,33],[3917,37,3358,37],[3917,41,3358,41],[3917,45,3359,20,"auth"],[3917,49,3359,24],[3917,50,3359,25,"_tenantRecaptchaConfigs"],[3917,73,3359,48],[3917,74,3359,49,"auth"],[3917,78,3359,53],[3917,79,3359,54,"tenantId"],[3917,87,3359,62],[3917,88,3359,63],[3917,93,3359,68,"undefined"],[3917,102,3359,77],[3917,104,3359,79],[3918,18,3360,20],[3918,25,3360,27,"auth"],[3918,29,3360,31],[3918,30,3360,32,"_tenantRecaptchaConfigs"],[3918,53,3360,55],[3918,54,3360,56,"auth"],[3918,58,3360,60],[3918,59,3360,61,"tenantId"],[3918,67,3360,69],[3918,68,3360,70],[3918,69,3360,71,"siteKey"],[3918,76,3360,78],[3919,16,3361,16],[3920,14,3362,12],[3921,14,3363,12],[3921,21,3363,19],[3921,25,3363,23,"Promise"],[3921,32,3363,30],[3922,16,3363,30],[3922,20,3363,30,"_ref10"],[3922,26,3363,30],[3922,29,3363,30,"_asyncToGenerator"],[3922,46,3363,30],[3922,47,3363,31],[3922,58,3363,38,"resolve"],[3922,65,3363,45],[3922,67,3363,47,"reject"],[3922,73,3363,53],[3922,75,3363,58],[3923,18,3364,16,"getRecaptchaConfig"],[3923,36,3364,34],[3923,37,3364,35,"auth"],[3923,41,3364,39],[3923,43,3364,41],[3924,20,3365,20,"clientType"],[3924,30,3365,30],[3924,32,3365,32],[3924,49,3365,49],[3924,50,3365,50],[3925,20,3366,20,"version"],[3925,27,3366,27],[3925,29,3366,29],[3925,51,3366,51],[3925,52,3366,52],[3926,18,3367,16],[3926,19,3367,17],[3926,20,3367,18],[3926,21,3368,21,"then"],[3926,25,3368,25],[3926,26,3368,26,"response"],[3926,34,3368,34],[3926,38,3368,38],[3927,20,3369,20],[3927,24,3369,24,"response"],[3927,32,3369,32],[3927,33,3369,33,"recaptchaKey"],[3927,45,3369,45],[3927,50,3369,50,"undefined"],[3927,59,3369,59],[3927,61,3369,61],[3928,22,3370,24,"reject"],[3928,28,3370,30],[3928,29,3370,31],[3928,33,3370,35,"Error"],[3928,38,3370,40],[3928,39,3370,41],[3928,80,3370,82],[3928,81,3370,83],[3928,82,3370,84],[3929,20,3371,20],[3929,21,3371,21],[3929,27,3372,25],[3930,22,3373,24],[3930,26,3373,30,"config"],[3930,32,3373,36],[3930,35,3373,39],[3930,39,3373,43,"RecaptchaConfig"],[3930,54,3373,58],[3930,55,3373,59,"response"],[3930,63,3373,67],[3930,64,3373,68],[3931,22,3374,24],[3931,26,3374,28,"auth"],[3931,30,3374,32],[3931,31,3374,33,"tenantId"],[3931,39,3374,41],[3931,43,3374,45],[3931,47,3374,49],[3931,49,3374,51],[3932,24,3375,28,"auth"],[3932,28,3375,32],[3932,29,3375,33,"_agentRecaptchaConfig"],[3932,50,3375,54],[3932,53,3375,57,"config"],[3932,59,3375,63],[3933,22,3376,24],[3933,23,3376,25],[3933,29,3377,29],[3934,24,3378,28,"auth"],[3934,28,3378,32],[3934,29,3378,33,"_tenantRecaptchaConfigs"],[3934,52,3378,56],[3934,53,3378,57,"auth"],[3934,57,3378,61],[3934,58,3378,62,"tenantId"],[3934,66,3378,70],[3934,67,3378,71],[3934,70,3378,74,"config"],[3934,76,3378,80],[3935,22,3379,24],[3936,22,3380,24],[3936,29,3380,31,"resolve"],[3936,36,3380,38],[3936,37,3380,39,"config"],[3936,43,3380,45],[3936,44,3380,46,"siteKey"],[3936,51,3380,53],[3936,52,3380,54],[3937,20,3381,20],[3938,18,3382,16],[3938,19,3382,17],[3938,20,3382,18],[3938,21,3383,21,"catch"],[3938,26,3383,26],[3938,27,3383,27,"error"],[3938,32,3383,32],[3938,36,3383,36],[3939,20,3384,20,"reject"],[3939,26,3384,26],[3939,27,3384,27,"error"],[3939,32,3384,32],[3939,33,3384,33],[3940,18,3385,16],[3940,19,3385,17],[3940,20,3385,18],[3941,16,3386,12],[3941,17,3386,13],[3942,16,3386,13],[3942,33,3386,13,"_x69"],[3942,37,3386,13],[3942,39,3386,13,"_x70"],[3942,43,3386,13],[3943,18,3386,13],[3943,25,3386,13,"_ref10"],[3943,31,3386,13],[3943,32,3386,13,"apply"],[3943,37,3386,13],[3943,44,3386,13,"arguments"],[3943,53,3386,13],[3944,16,3386,13],[3945,14,3386,13],[3945,18,3386,14],[3946,12,3387,8],[3946,13,3387,9],[3947,12,3387,9],[3947,19,3387,9,"_retrieveSiteKey"],[3947,35,3387,9],[3947,36,3387,9,"apply"],[3947,41,3387,9],[3947,48,3387,9,"arguments"],[3947,57,3387,9],[3948,10,3387,9],[3949,10,3388,8],[3949,19,3388,17,"retrieveRecaptchaToken"],[3949,41,3388,39,"retrieveRecaptchaToken"],[3949,42,3388,40,"siteKey"],[3949,49,3388,47],[3949,51,3388,49,"resolve"],[3949,58,3388,56],[3949,60,3388,58,"reject"],[3949,66,3388,64],[3949,68,3388,66],[3950,12,3389,12],[3950,16,3389,18,"grecaptcha"],[3950,26,3389,28],[3950,29,3389,31,"window"],[3950,35,3389,37],[3950,36,3389,38,"grecaptcha"],[3950,46,3389,48],[3951,12,3390,12],[3951,16,3390,16,"isEnterprise"],[3951,28,3390,28],[3951,29,3390,29,"grecaptcha"],[3951,39,3390,39],[3951,40,3390,40],[3951,42,3390,42],[3952,14,3391,16,"grecaptcha"],[3952,24,3391,26],[3952,25,3391,27,"enterprise"],[3952,35,3391,37],[3952,36,3391,38,"ready"],[3952,41,3391,43],[3952,42,3391,44],[3952,48,3391,50],[3953,16,3392,20,"grecaptcha"],[3953,26,3392,30],[3953,27,3392,31,"enterprise"],[3953,37,3392,41],[3953,38,3393,25,"execute"],[3953,45,3393,32],[3953,46,3393,33,"siteKey"],[3953,53,3393,40],[3953,55,3393,42],[3954,18,3393,44,"action"],[3955,16,3393,51],[3955,17,3393,52],[3955,18,3393,53],[3955,19,3394,25,"then"],[3955,23,3394,29],[3955,24,3394,30,"token"],[3955,29,3394,35],[3955,33,3394,39],[3956,18,3395,24,"resolve"],[3956,25,3395,31],[3956,26,3395,32,"token"],[3956,31,3395,37],[3956,32,3395,38],[3957,16,3396,20],[3957,17,3396,21],[3957,18,3396,22],[3957,19,3397,25,"catch"],[3957,24,3397,30],[3957,25,3397,31],[3957,31,3397,37],[3958,18,3398,24,"resolve"],[3958,25,3398,31],[3958,26,3398,32,"FAKE_TOKEN"],[3958,36,3398,42],[3958,37,3398,43],[3959,16,3399,20],[3959,17,3399,21],[3959,18,3399,22],[3960,14,3400,16],[3960,15,3400,17],[3960,16,3400,18],[3961,12,3401,12],[3961,13,3401,13],[3961,19,3402,17],[3962,14,3403,16,"reject"],[3962,20,3403,22],[3962,21,3403,23,"Error"],[3962,26,3403,28],[3962,27,3403,29],[3962,67,3403,69],[3962,68,3403,70],[3962,69,3403,71],[3963,12,3404,12],[3964,10,3405,8],[3965,10,3406,8],[3966,10,3407,8],[3966,14,3407,12],[3966,18,3407,16],[3966,19,3407,17,"auth"],[3966,23,3407,21],[3966,24,3407,22,"settings"],[3966,32,3407,30],[3966,33,3407,31,"appVerificationDisabledForTesting"],[3966,66,3407,64],[3966,68,3407,66],[3967,12,3408,12],[3967,16,3408,18,"mockRecaptcha"],[3967,29,3408,31],[3967,32,3408,34],[3967,36,3408,38,"MockGreCAPTCHATopLevel"],[3967,58,3408,60],[3967,59,3408,61],[3967,60,3408,62],[3968,12,3409,12],[3968,19,3409,19,"mockRecaptcha"],[3968,32,3409,32],[3968,33,3409,33,"execute"],[3968,40,3409,40],[3968,41,3409,41],[3968,50,3409,50],[3968,52,3409,52],[3969,14,3409,54,"action"],[3969,20,3409,60],[3969,22,3409,62],[3970,12,3409,71],[3970,13,3409,72],[3970,14,3409,73],[3971,10,3410,8],[3972,10,3411,8],[3972,17,3411,15],[3972,21,3411,19,"Promise"],[3972,28,3411,26],[3972,29,3411,27],[3972,30,3411,28,"resolve"],[3972,37,3411,35],[3972,39,3411,37,"reject"],[3972,45,3411,43],[3972,50,3411,48],[3973,12,3412,12,"retrieveSiteKey"],[3973,27,3412,27],[3973,28,3412,28],[3973,32,3412,32],[3973,33,3412,33,"auth"],[3973,37,3412,37],[3973,38,3412,38],[3973,39,3413,17,"then"],[3973,43,3413,21],[3973,44,3413,22,"siteKey"],[3973,51,3413,29],[3973,55,3413,33],[3974,14,3414,16],[3974,18,3414,20],[3974,19,3414,21,"forceRefresh"],[3974,31,3414,33],[3974,35,3414,37,"isEnterprise"],[3974,47,3414,49],[3974,48,3414,50,"window"],[3974,54,3414,56],[3974,55,3414,57,"grecaptcha"],[3974,65,3414,67],[3974,66,3414,68],[3974,68,3414,70],[3975,16,3415,20,"retrieveRecaptchaToken"],[3975,38,3415,42],[3975,39,3415,43,"siteKey"],[3975,46,3415,50],[3975,48,3415,52,"resolve"],[3975,55,3415,59],[3975,57,3415,61,"reject"],[3975,63,3415,67],[3975,64,3415,68],[3976,14,3416,16],[3976,15,3416,17],[3976,21,3417,21],[3977,16,3418,20],[3977,20,3418,24],[3977,27,3418,31,"window"],[3977,33,3418,37],[3977,38,3418,42],[3977,49,3418,53],[3977,51,3418,55],[3978,18,3419,24,"reject"],[3978,24,3419,30],[3978,25,3419,31],[3978,29,3419,35,"Error"],[3978,34,3419,40],[3978,35,3419,41],[3978,83,3419,89],[3978,84,3419,90],[3978,85,3419,91],[3979,18,3420,24],[3980,16,3421,20],[3981,16,3422,20],[3981,20,3422,24,"url"],[3981,23,3422,27],[3981,26,3422,30,"_recaptchaEnterpriseScriptUrl"],[3981,55,3422,59],[3981,56,3422,60],[3981,57,3422,61],[3982,16,3423,20],[3982,20,3423,24,"url"],[3982,23,3423,27],[3982,24,3423,28,"length"],[3982,30,3423,34],[3982,35,3423,39],[3982,36,3423,40],[3982,38,3423,42],[3983,18,3424,24,"url"],[3983,21,3424,27],[3983,25,3424,31,"siteKey"],[3983,32,3424,38],[3984,16,3425,20],[3985,16,3426,20,"_loadJS"],[3985,23,3426,27],[3985,24,3426,28,"url"],[3985,27,3426,31],[3985,28,3426,32],[3985,29,3427,25,"then"],[3985,33,3427,29],[3985,34,3427,30],[3985,40,3427,36],[3986,18,3428,24,"retrieveRecaptchaToken"],[3986,40,3428,46],[3986,41,3428,47,"siteKey"],[3986,48,3428,54],[3986,50,3428,56,"resolve"],[3986,57,3428,63],[3986,59,3428,65,"reject"],[3986,65,3428,71],[3986,66,3428,72],[3987,16,3429,20],[3987,17,3429,21],[3987,18,3429,22],[3987,19,3430,25,"catch"],[3987,24,3430,30],[3987,25,3430,31,"error"],[3987,30,3430,36],[3987,34,3430,40],[3988,18,3431,24,"reject"],[3988,24,3431,30],[3988,25,3431,31,"error"],[3988,30,3431,36],[3988,31,3431,37],[3989,16,3432,20],[3989,17,3432,21],[3989,18,3432,22],[3990,14,3433,16],[3991,12,3434,12],[3991,13,3434,13],[3991,14,3434,14],[3991,15,3435,17,"catch"],[3991,20,3435,22],[3991,21,3435,23,"error"],[3991,26,3435,28],[3991,30,3435,32],[3992,14,3436,16,"reject"],[3992,20,3436,22],[3992,21,3436,23,"error"],[3992,26,3436,28],[3992,27,3436,29],[3993,12,3437,12],[3993,13,3437,13],[3993,14,3437,14],[3994,10,3438,8],[3994,11,3438,9],[3994,12,3438,10],[3995,8,3439,4],[3995,9,3439,5],[3996,8,3439,5],[3996,17,3352,10,"verify"],[3996,23,3352,16,"verify"],[3996,24,3352,16],[3997,10,3352,16],[3997,17,3352,16,"_verify"],[3997,24,3352,16],[3997,25,3352,16,"apply"],[3997,30,3352,16],[3997,37,3352,16,"arguments"],[3997,46,3352,16],[3998,8,3352,16],[3999,8,3352,16],[3999,15,3352,10,"verify"],[3999,21,3352,16],[4000,6,3352,16],[4001,4,3352,16],[4002,2,3352,16],[4003,2,3352,16],[4003,11,3441,15,"injectRecaptchaFields"],[4003,32,3441,36,"injectRecaptchaFields"],[4003,33,3441,36,"_x71"],[4003,37,3441,36],[4003,39,3441,36,"_x72"],[4003,43,3441,36],[4003,45,3441,36,"_x73"],[4003,49,3441,36],[4004,4,3441,36],[4004,11,3441,36,"_injectRecaptchaFields"],[4004,33,3441,36],[4004,34,3441,36,"apply"],[4004,39,3441,36],[4004,46,3441,36,"arguments"],[4004,55,3441,36],[4005,2,3441,36],[4006,2,3441,36],[4006,11,3441,36,"_injectRecaptchaFields"],[4006,34,3441,36],[4007,4,3441,36,"_injectRecaptchaFields"],[4007,26,3441,36],[4007,29,3441,36,"_asyncToGenerator"],[4007,46,3441,36],[4007,47,3441,0],[4007,58,3441,37,"auth"],[4007,62,3441,41],[4007,64,3441,43,"request"],[4007,71,3441,50],[4007,73,3441,52,"action"],[4007,79,3441,58],[4007,81,3441,104],[4008,6,3441,104],[4008,10,3441,60,"isCaptchaResp"],[4008,23,3441,73],[4008,26,3441,73,"arguments"],[4008,35,3441,73],[4008,36,3441,73,"length"],[4008,42,3441,73],[4008,50,3441,73,"arguments"],[4008,59,3441,73],[4008,67,3441,73,"undefined"],[4008,76,3441,73],[4008,79,3441,73,"arguments"],[4008,88,3441,73],[4008,94,3441,76],[4008,99,3441,81],[4009,6,3441,81],[4009,10,3441,83,"isFakeToken"],[4009,21,3441,94],[4009,24,3441,94,"arguments"],[4009,33,3441,94],[4009,34,3441,94,"length"],[4009,40,3441,94],[4009,48,3441,94,"arguments"],[4009,57,3441,94],[4009,65,3441,94,"undefined"],[4009,74,3441,94],[4009,77,3441,94,"arguments"],[4009,86,3441,94],[4009,92,3441,97],[4009,97,3441,102],[4010,6,3442,4],[4010,10,3442,10,"verifier"],[4010,18,3442,18],[4010,21,3442,21],[4010,25,3442,25,"RecaptchaEnterpriseVerifier"],[4010,52,3442,52],[4010,53,3442,53,"auth"],[4010,57,3442,57],[4010,58,3442,58],[4011,6,3443,4],[4011,10,3443,8,"captchaResponse"],[4011,25,3443,23],[4012,6,3444,4],[4012,10,3444,8,"isFakeToken"],[4012,21,3444,19],[4012,23,3444,21],[4013,8,3445,8,"captchaResponse"],[4013,23,3445,23],[4013,26,3445,26,"FAKE_TOKEN"],[4013,36,3445,36],[4014,6,3446,4],[4014,7,3446,5],[4014,13,3447,9],[4015,8,3448,8],[4015,12,3448,12],[4016,10,3449,12,"captchaResponse"],[4016,25,3449,27],[4016,34,3449,36,"verifier"],[4016,42,3449,44],[4016,43,3449,45,"verify"],[4016,49,3449,51],[4016,50,3449,52,"action"],[4016,56,3449,58],[4016,57,3449,59],[4017,8,3450,8],[4017,9,3450,9],[4017,10,3451,8],[4017,17,3451,15,"error"],[4017,22,3451,20],[4017,24,3451,22],[4018,10,3452,12,"captchaResponse"],[4018,25,3452,27],[4018,34,3452,36,"verifier"],[4018,42,3452,44],[4018,43,3452,45,"verify"],[4018,49,3452,51],[4018,50,3452,52,"action"],[4018,56,3452,58],[4018,58,3452,60],[4018,62,3452,64],[4018,63,3452,65],[4019,8,3453,8],[4020,6,3454,4],[4021,6,3455,4],[4021,10,3455,10,"newRequest"],[4021,20,3455,20],[4021,23,3455,23],[4022,8,3455,25],[4022,11,3455,28,"request"],[4023,6,3455,36],[4023,7,3455,37],[4024,6,3456,4],[4024,10,3456,8,"action"],[4024,16,3456,14],[4024,21,3456,19],[4024,39,3456,37],[4024,40,3456,38],[4024,88,3457,8,"action"],[4024,94,3457,14],[4024,99,3457,19],[4024,113,3457,33],[4024,114,3457,34],[4024,156,3457,76],[4025,8,3458,8],[4025,12,3458,12],[4025,33,3458,33],[4025,37,3458,37,"newRequest"],[4025,47,3458,47],[4025,49,3458,49],[4026,10,3459,12],[4026,14,3459,18,"phoneNumber"],[4026,25,3459,29],[4026,28,3459,32,"newRequest"],[4026,38,3459,42],[4026,39,3459,43,"phoneEnrollmentInfo"],[4026,58,3459,62],[4026,59,3459,63,"phoneNumber"],[4026,70,3459,74],[4027,10,3460,12],[4027,14,3460,18,"recaptchaToken"],[4027,28,3460,32],[4027,31,3460,35,"newRequest"],[4027,41,3460,45],[4027,42,3460,46,"phoneEnrollmentInfo"],[4027,61,3460,65],[4027,62,3460,66,"recaptchaToken"],[4027,76,3460,80],[4028,10,3461,12,"Object"],[4028,16,3461,18],[4028,17,3461,19,"assign"],[4028,23,3461,25],[4028,24,3461,26,"newRequest"],[4028,34,3461,36],[4028,36,3461,38],[4029,12,3462,16],[4029,33,3462,37],[4029,35,3462,39],[4030,14,3463,20,"phoneNumber"],[4030,25,3463,31],[4031,14,3464,20,"recaptchaToken"],[4031,28,3464,34],[4032,14,3465,20,"captchaResponse"],[4032,29,3465,35],[4033,14,3466,20],[4033,26,3466,32],[4033,28,3466,34],[4033,45,3466,51],[4033,46,3466,52],[4034,14,3467,20],[4034,32,3467,38],[4034,34,3467,40],[4034,56,3467,62],[4034,57,3467,63],[4035,12,3468,16],[4036,10,3469,12],[4036,11,3469,13],[4036,12,3469,14],[4037,8,3470,8],[4037,9,3470,9],[4037,15,3471,13],[4037,19,3471,17],[4037,36,3471,34],[4037,40,3471,38,"newRequest"],[4037,50,3471,48],[4037,52,3471,50],[4038,10,3472,12],[4038,14,3472,18,"recaptchaToken"],[4038,29,3472,32],[4038,32,3472,35,"newRequest"],[4038,42,3472,45],[4038,43,3472,46,"phoneSignInInfo"],[4038,58,3472,61],[4038,59,3472,62,"recaptchaToken"],[4038,73,3472,76],[4039,10,3473,12,"Object"],[4039,16,3473,18],[4039,17,3473,19,"assign"],[4039,23,3473,25],[4039,24,3473,26,"newRequest"],[4039,34,3473,36],[4039,36,3473,38],[4040,12,3474,16],[4040,29,3474,33],[4040,31,3474,35],[4041,14,3475,20,"recaptchaToken"],[4041,28,3475,34],[4041,30,3475,20,"recaptchaToken"],[4041,45,3475,34],[4042,14,3476,20,"captchaResponse"],[4042,29,3476,35],[4043,14,3477,20],[4043,26,3477,32],[4043,28,3477,34],[4043,45,3477,51],[4043,46,3477,52],[4044,14,3478,20],[4044,32,3478,38],[4044,34,3478,40],[4044,56,3478,62],[4044,57,3478,63],[4045,12,3479,16],[4046,10,3480,12],[4046,11,3480,13],[4046,12,3480,14],[4047,8,3481,8],[4048,8,3482,8],[4048,15,3482,15,"newRequest"],[4048,25,3482,25],[4049,6,3483,4],[4050,6,3484,4],[4050,10,3484,8],[4050,11,3484,9,"isCaptchaResp"],[4050,24,3484,22],[4050,26,3484,24],[4051,8,3485,8,"Object"],[4051,14,3485,14],[4051,15,3485,15,"assign"],[4051,21,3485,21],[4051,22,3485,22,"newRequest"],[4051,32,3485,32],[4051,34,3485,34],[4052,10,3485,36,"captchaResponse"],[4053,8,3485,52],[4053,9,3485,53],[4053,10,3485,54],[4054,6,3486,4],[4054,7,3486,5],[4054,13,3487,9],[4055,8,3488,8,"Object"],[4055,14,3488,14],[4055,15,3488,15,"assign"],[4055,21,3488,21],[4055,22,3488,22,"newRequest"],[4055,32,3488,32],[4055,34,3488,34],[4056,10,3488,36],[4056,23,3488,49],[4056,25,3488,51,"captchaResponse"],[4057,8,3488,67],[4057,9,3488,68],[4057,10,3488,69],[4058,6,3489,4],[4059,6,3490,4,"Object"],[4059,12,3490,10],[4059,13,3490,11,"assign"],[4059,19,3490,17],[4059,20,3490,18,"newRequest"],[4059,30,3490,28],[4059,32,3490,30],[4060,8,3490,32],[4060,20,3490,44],[4060,22,3490,46],[4060,39,3490,63],[4060,40,3490,64],[4061,6,3490,94],[4061,7,3490,95],[4061,8,3490,96],[4062,6,3491,4,"Object"],[4062,12,3491,10],[4062,13,3491,11,"assign"],[4062,19,3491,17],[4062,20,3491,18,"newRequest"],[4062,30,3491,28],[4062,32,3491,30],[4063,8,3492,8],[4063,26,3492,26],[4063,28,3492,28],[4063,50,3492,50],[4063,51,3492,51],[4064,6,3493,4],[4064,7,3493,5],[4064,8,3493,6],[4065,6,3494,4],[4065,13,3494,11,"newRequest"],[4065,23,3494,21],[4066,4,3495,0],[4066,5,3495,1],[4067,4,3495,1],[4067,11,3495,1,"_injectRecaptchaFields"],[4067,33,3495,1],[4067,34,3495,1,"apply"],[4067,39,3495,1],[4067,46,3495,1,"arguments"],[4067,55,3495,1],[4068,2,3495,1],[4069,2,3495,1],[4069,11,3496,15,"handleRecaptchaFlow"],[4069,30,3496,34,"handleRecaptchaFlow"],[4069,31,3496,34,"_x74"],[4069,35,3496,34],[4069,37,3496,34,"_x75"],[4069,41,3496,34],[4069,43,3496,34,"_x76"],[4069,47,3496,34],[4069,49,3496,34,"_x77"],[4069,53,3496,34],[4069,55,3496,34,"_x78"],[4069,59,3496,34],[4070,4,3496,34],[4070,11,3496,34,"_handleRecaptchaFlow"],[4070,31,3496,34],[4070,32,3496,34,"apply"],[4070,37,3496,34],[4070,44,3496,34,"arguments"],[4070,53,3496,34],[4071,2,3496,34],[4072,2,3496,34],[4072,11,3496,34,"_handleRecaptchaFlow"],[4072,32,3496,34],[4073,4,3496,34,"_handleRecaptchaFlow"],[4073,24,3496,34],[4073,27,3496,34,"_asyncToGenerator"],[4073,44,3496,34],[4073,45,3496,0],[4073,56,3496,35,"authInstance"],[4073,68,3496,47],[4073,70,3496,49,"request"],[4073,77,3496,56],[4073,79,3496,58,"actionName"],[4073,89,3496,68],[4073,91,3496,70,"actionMethod"],[4073,103,3496,82],[4073,105,3496,84,"recaptchaAuthProvider"],[4073,126,3496,105],[4073,128,3496,107],[4074,6,3497,4],[4074,10,3497,8,"recaptchaAuthProvider"],[4074,31,3497,29],[4074,36,3497,34],[4074,61,3497,59],[4074,62,3497,60],[4074,115,3497,113],[4075,8,3498,8],[4075,12,3498,12,"authInstance"],[4075,24,3498,24],[4075,25,3499,13,"_getRecaptchaConfig"],[4075,44,3499,32],[4075,45,3499,33],[4075,46,3499,34],[4075,48,3500,14,"isProviderEnabled"],[4075,65,3500,31],[4075,66,3500,32],[4075,91,3500,57],[4075,92,3500,58],[4075,143,3500,109],[4075,144,3500,110],[4075,146,3500,112],[4076,10,3501,12],[4076,14,3501,18,"requestWithRecaptcha"],[4076,34,3501,38],[4076,43,3501,47,"injectRecaptchaFields"],[4076,64,3501,68],[4076,65,3501,69,"authInstance"],[4076,77,3501,81],[4076,79,3501,83,"request"],[4076,86,3501,90],[4076,88,3501,92,"actionName"],[4076,98,3501,102],[4076,100,3501,104,"actionName"],[4076,110,3501,114],[4076,115,3501,119],[4076,127,3501,131],[4076,128,3501,132],[4076,166,3501,170],[4076,167,3501,171],[4077,10,3502,12],[4077,17,3502,19,"actionMethod"],[4077,29,3502,31],[4077,30,3502,32,"authInstance"],[4077,42,3502,44],[4077,44,3502,46,"requestWithRecaptcha"],[4077,64,3502,66],[4077,65,3502,67],[4078,8,3503,8],[4078,9,3503,9],[4078,15,3504,13],[4079,10,3505,12],[4079,17,3505,19,"actionMethod"],[4079,29,3505,31],[4079,30,3505,32,"authInstance"],[4079,42,3505,44],[4079,44,3505,46,"request"],[4079,51,3505,53],[4079,52,3505,54],[4079,53,3505,55,"catch"],[4079,58,3505,60],[4080,12,3505,60],[4080,16,3505,60,"_ref26"],[4080,22,3505,60],[4080,25,3505,60,"_asyncToGenerator"],[4080,42,3505,60],[4080,43,3505,61],[4080,54,3505,68,"error"],[4080,59,3505,73],[4080,61,3505,78],[4081,14,3506,16],[4081,18,3506,20,"error"],[4081,23,3506,25],[4081,24,3506,26,"code"],[4081,28,3506,30],[4081,33,3506,35],[4081,41,3506,43],[4081,66,3506,68],[4081,67,3506,69],[4081,112,3506,114],[4081,114,3506,116],[4082,16,3507,20,"console"],[4082,23,3507,27],[4082,24,3507,28,"log"],[4082,27,3507,31],[4082,28,3507,32],[4082,31,3507,35,"actionName"],[4082,41,3507,45],[4082,167,3507,171],[4082,168,3507,172],[4083,16,3508,20],[4083,20,3508,26,"requestWithRecaptcha"],[4083,41,3508,46],[4083,50,3508,55,"injectRecaptchaFields"],[4083,71,3508,76],[4083,72,3508,77,"authInstance"],[4083,84,3508,89],[4083,86,3508,91,"request"],[4083,93,3508,98],[4083,95,3508,100,"actionName"],[4083,105,3508,110],[4083,107,3508,112,"actionName"],[4083,117,3508,122],[4083,122,3508,127],[4083,134,3508,139],[4083,135,3508,140],[4083,173,3508,178],[4083,174,3508,179],[4084,16,3509,20],[4084,23,3509,27,"actionMethod"],[4084,35,3509,39],[4084,36,3509,40,"authInstance"],[4084,48,3509,52],[4084,50,3509,54,"requestWithRecaptcha"],[4084,71,3509,74],[4084,72,3509,75],[4085,14,3510,16],[4085,15,3510,17],[4085,21,3511,21],[4086,16,3512,20],[4086,23,3512,27,"Promise"],[4086,30,3512,34],[4086,31,3512,35,"reject"],[4086,37,3512,41],[4086,38,3512,42,"error"],[4086,43,3512,47],[4086,44,3512,48],[4087,14,3513,16],[4088,12,3514,12],[4088,13,3514,13],[4089,12,3514,13],[4089,29,3514,13,"_x219"],[4089,34,3514,13],[4090,14,3514,13],[4090,21,3514,13,"_ref26"],[4090,27,3514,13],[4090,28,3514,13,"apply"],[4090,33,3514,13],[4090,40,3514,13,"arguments"],[4090,49,3514,13],[4091,12,3514,13],[4092,10,3514,13],[4092,14,3514,14],[4093,8,3515,8],[4094,6,3516,4],[4094,7,3516,5],[4094,13,3517,9],[4094,17,3517,13,"recaptchaAuthProvider"],[4094,38,3517,34],[4094,43,3517,39],[4094,59,3517,55],[4094,60,3517,56],[4094,104,3517,100],[4095,8,3518,8],[4095,12,3518,12,"authInstance"],[4095,24,3518,24],[4095,25,3519,13,"_getRecaptchaConfig"],[4095,44,3519,32],[4095,45,3519,33],[4095,46,3519,34],[4095,48,3520,14,"isProviderEnabled"],[4095,65,3520,31],[4095,66,3520,32],[4095,82,3520,48],[4095,83,3520,49],[4095,125,3520,91],[4095,126,3520,92],[4095,128,3520,94],[4096,10,3521,12],[4096,14,3521,18,"requestWithRecaptcha"],[4096,36,3521,38],[4096,45,3521,47,"injectRecaptchaFields"],[4096,66,3521,68],[4096,67,3521,69,"authInstance"],[4096,79,3521,81],[4096,81,3521,83,"request"],[4096,88,3521,90],[4096,90,3521,92,"actionName"],[4096,100,3521,102],[4096,101,3521,103],[4097,10,3522,12],[4097,17,3522,19,"actionMethod"],[4097,29,3522,31],[4097,30,3522,32,"authInstance"],[4097,42,3522,44],[4097,44,3522,46,"requestWithRecaptcha"],[4097,66,3522,66],[4097,67,3522,67],[4097,68,3522,68,"catch"],[4097,73,3522,73],[4098,12,3522,73],[4098,16,3522,73,"_ref27"],[4098,22,3522,73],[4098,25,3522,73,"_asyncToGenerator"],[4098,42,3522,73],[4098,43,3522,74],[4098,54,3522,81,"error"],[4098,59,3522,86],[4098,61,3522,91],[4099,14,3523,16],[4099,18,3523,20,"authInstance"],[4099,30,3523,32],[4099,31,3524,21,"_getRecaptchaConfig"],[4099,50,3524,40],[4099,51,3524,41],[4099,52,3524,42],[4099,54,3525,22,"getProviderEnforcementState"],[4099,81,3525,49],[4099,82,3525,50],[4099,98,3525,66],[4099,99,3525,67],[4099,141,3525,109],[4099,142,3525,110],[4099,147,3525,115],[4099,154,3525,122],[4099,155,3525,123],[4099,185,3525,153],[4100,16,3526,20],[4101,16,3527,20],[4101,20,3527,24,"error"],[4101,25,3527,29],[4101,26,3527,30,"code"],[4101,30,3527,34],[4101,35,3527,39],[4101,43,3527,47],[4101,68,3527,72],[4101,69,3527,73],[4101,114,3527,118],[4101,118,3528,24,"error"],[4101,123,3528,29],[4101,124,3528,30,"code"],[4101,128,3528,34],[4101,133,3528,39],[4101,141,3528,47],[4101,165,3528,71],[4101,166,3528,72],[4101,210,3528,116],[4101,212,3528,118],[4102,18,3529,24,"console"],[4102,25,3529,31],[4102,26,3529,32,"log"],[4102,29,3529,35],[4102,30,3529,36],[4102,140,3529,146,"actionName"],[4102,150,3529,156],[4102,158,3529,164],[4102,159,3529,165],[4103,18,3530,24],[4104,18,3531,24],[4105,18,3532,24],[4106,18,3533,24],[4106,22,3533,30,"requestWithRecaptchaFields"],[4106,48,3533,56],[4106,57,3533,65,"injectRecaptchaFields"],[4106,78,3533,86],[4106,79,3533,87,"authInstance"],[4106,91,3533,99],[4106,93,3533,101,"request"],[4106,100,3533,108],[4106,102,3533,110,"actionName"],[4106,112,3533,120],[4106,114,3533,122],[4106,119,3533,127],[4107,18,3533,129],[4108,18,3534,24],[4108,22,3534,28],[4108,23,3534,29],[4109,18,3535,24],[4109,19,3535,25],[4110,18,3536,24],[4111,18,3537,24],[4111,25,3537,31,"actionMethod"],[4111,37,3537,43],[4111,38,3537,44,"authInstance"],[4111,50,3537,56],[4111,52,3537,58,"requestWithRecaptchaFields"],[4111,78,3537,84],[4111,79,3537,85],[4112,16,3538,20],[4113,14,3539,16],[4114,14,3540,16],[4115,14,3541,16],[4115,21,3541,23,"Promise"],[4115,28,3541,30],[4115,29,3541,31,"reject"],[4115,35,3541,37],[4115,36,3541,38,"error"],[4115,41,3541,43],[4115,42,3541,44],[4116,12,3542,12],[4116,13,3542,13],[4117,12,3542,13],[4117,29,3542,13,"_x220"],[4117,34,3542,13],[4118,14,3542,13],[4118,21,3542,13,"_ref27"],[4118,27,3542,13],[4118,28,3542,13,"apply"],[4118,33,3542,13],[4118,40,3542,13,"arguments"],[4118,49,3542,13],[4119,12,3542,13],[4120,10,3542,13],[4120,14,3542,14],[4121,8,3543,8],[4121,9,3543,9],[4121,15,3544,13],[4122,10,3545,12],[4123,10,3546,12],[4123,14,3546,18,"requestWithRecaptchaFields"],[4123,40,3546,44],[4123,49,3546,53,"injectRecaptchaFields"],[4123,70,3546,74],[4123,71,3546,75,"authInstance"],[4123,83,3546,87],[4123,85,3546,89,"request"],[4123,92,3546,96],[4123,94,3546,98,"actionName"],[4123,104,3546,108],[4123,106,3546,110],[4123,111,3546,115],[4124,10,3546,117],[4125,10,3547,12],[4125,14,3547,16],[4125,15,3547,17],[4126,10,3548,12],[4126,11,3548,13],[4127,10,3549,12],[4128,10,3550,12],[4128,17,3550,19,"actionMethod"],[4128,29,3550,31],[4128,30,3550,32,"authInstance"],[4128,42,3550,44],[4128,44,3550,46,"requestWithRecaptchaFields"],[4128,70,3550,72],[4128,71,3550,73],[4129,8,3551,8],[4130,6,3552,4],[4130,7,3552,5],[4130,13,3553,9],[4131,8,3554,8],[4131,15,3554,15,"Promise"],[4131,22,3554,22],[4131,23,3554,23,"reject"],[4131,29,3554,29],[4131,30,3554,30,"recaptchaAuthProvider"],[4131,51,3554,51],[4131,54,3554,54],[4131,83,3554,83],[4131,84,3554,84],[4132,6,3555,4],[4133,4,3556,0],[4133,5,3556,1],[4134,4,3556,1],[4134,11,3556,1,"_handleRecaptchaFlow"],[4134,31,3556,1],[4134,32,3556,1,"apply"],[4134,37,3556,1],[4134,44,3556,1,"arguments"],[4134,53,3556,1],[4135,2,3556,1],[4136,2,3556,1],[4136,11,3557,15,"_initializeRecaptchaConfig"],[4136,37,3557,41,"_initializeRecaptchaConfig"],[4136,38,3557,41,"_x79"],[4136,42,3557,41],[4137,4,3557,41],[4137,11,3557,41,"_initializeRecaptchaConfig2"],[4137,38,3557,41],[4137,39,3557,41,"apply"],[4137,44,3557,41],[4137,51,3557,41,"arguments"],[4137,60,3557,41],[4138,2,3557,41],[4139,2,3576,0],[4140,0,3577,0],[4141,0,3578,0],[4142,0,3579,0],[4143,0,3580,0],[4144,0,3581,0],[4145,0,3582,0],[4146,0,3583,0],[4147,0,3584,0],[4148,0,3585,0],[4149,0,3586,0],[4150,0,3587,0],[4151,0,3588,0],[4152,0,3589,0],[4153,0,3590,0],[4154,0,3591,0],[4155,2,3592,0],[4156,0,3593,0],[4157,0,3594,0],[4158,0,3595,0],[4159,0,3596,0],[4160,0,3597,0],[4161,0,3598,0],[4162,0,3599,0],[4163,0,3600,0],[4164,0,3601,0],[4165,0,3602,0],[4166,0,3603,0],[4167,0,3604,0],[4168,0,3605,0],[4169,0,3606,0],[4170,0,3607,0],[4171,0,3608,0],[4172,0,3609,0],[4173,0,3610,0],[4174,0,3611,0],[4175,0,3612,0],[4176,0,3613,0],[4177,0,3614,0],[4178,0,3615,0],[4179,0,3616,0],[4180,2,3592,0],[4180,11,3592,0,"_initializeRecaptchaConfig2"],[4180,39,3592,0],[4181,4,3592,0,"_initializeRecaptchaConfig2"],[4181,31,3592,0],[4181,34,3592,0,"_asyncToGenerator"],[4181,51,3592,0],[4181,52,3557,0],[4181,63,3557,42,"auth"],[4181,67,3557,46],[4181,69,3557,48],[4182,6,3558,4],[4182,10,3558,10,"authInternal"],[4182,22,3558,22],[4182,25,3558,25,"_castAuth"],[4182,34,3558,34],[4182,35,3558,35,"auth"],[4182,39,3558,39],[4182,40,3558,40],[4183,6,3559,4],[4183,10,3559,10,"response"],[4183,18,3559,18],[4183,27,3559,27,"getRecaptchaConfig"],[4183,45,3559,45],[4183,46,3559,46,"authInternal"],[4183,58,3559,58],[4183,60,3559,60],[4184,8,3560,8,"clientType"],[4184,18,3560,18],[4184,20,3560,20],[4184,37,3560,37],[4184,38,3560,38],[4185,8,3561,8,"version"],[4185,15,3561,15],[4185,17,3561,17],[4185,39,3561,39],[4185,40,3561,40],[4186,6,3562,4],[4186,7,3562,5],[4186,8,3562,6],[4187,6,3563,4],[4187,10,3563,10,"config"],[4187,16,3563,16],[4187,19,3563,19],[4187,23,3563,23,"RecaptchaConfig"],[4187,38,3563,38],[4187,39,3563,39,"response"],[4187,47,3563,47],[4187,48,3563,48],[4188,6,3564,4],[4188,10,3564,8,"authInternal"],[4188,22,3564,20],[4188,23,3564,21,"tenantId"],[4188,31,3564,29],[4188,35,3564,33],[4188,39,3564,37],[4188,41,3564,39],[4189,8,3565,8,"authInternal"],[4189,20,3565,20],[4189,21,3565,21,"_agentRecaptchaConfig"],[4189,42,3565,42],[4189,45,3565,45,"config"],[4189,51,3565,51],[4190,6,3566,4],[4190,7,3566,5],[4190,13,3567,9],[4191,8,3568,8,"authInternal"],[4191,20,3568,20],[4191,21,3568,21,"_tenantRecaptchaConfigs"],[4191,44,3568,44],[4191,45,3568,45,"authInternal"],[4191,57,3568,57],[4191,58,3568,58,"tenantId"],[4191,66,3568,66],[4191,67,3568,67],[4191,70,3568,70,"config"],[4191,76,3568,76],[4192,6,3569,4],[4193,6,3570,4],[4193,10,3570,8,"config"],[4193,16,3570,14],[4193,17,3570,15,"isAnyProviderEnabled"],[4193,37,3570,35],[4193,38,3570,36],[4193,39,3570,37],[4193,41,3570,39],[4194,8,3571,8],[4194,12,3571,14,"verifier"],[4194,20,3571,22],[4194,23,3571,25],[4194,27,3571,29,"RecaptchaEnterpriseVerifier"],[4194,54,3571,56],[4194,55,3571,57,"authInternal"],[4194,67,3571,69],[4194,68,3571,70],[4195,8,3572,8],[4195,13,3572,13,"verifier"],[4195,21,3572,21],[4195,22,3572,22,"verify"],[4195,28,3572,28],[4195,29,3572,29],[4195,30,3572,30],[4196,6,3573,4],[4197,4,3574,0],[4197,5,3574,1],[4198,4,3574,1],[4198,11,3574,1,"_initializeRecaptchaConfig2"],[4198,38,3574,1],[4198,39,3574,1,"apply"],[4198,44,3574,1],[4198,51,3574,1,"arguments"],[4198,60,3574,1],[4199,2,3574,1],[4200,2,3617,0],[4200,11,3617,9,"initializeAuth"],[4200,25,3617,23,"initializeAuth"],[4200,26,3617,24,"app$1"],[4200,31,3617,29],[4200,33,3617,31,"deps"],[4200,37,3617,35],[4200,39,3617,37],[4201,4,3618,4],[4201,8,3618,10,"provider"],[4201,16,3618,18],[4201,19,3618,21,"app"],[4201,22,3618,24],[4201,23,3618,25,"_getProvider"],[4201,35,3618,37],[4201,36,3618,38,"app$1"],[4201,41,3618,43],[4201,43,3618,45],[4201,49,3618,51],[4201,50,3618,52],[4202,4,3619,4],[4202,8,3619,8,"provider"],[4202,16,3619,16],[4202,17,3619,17,"isInitialized"],[4202,30,3619,30],[4202,31,3619,31],[4202,32,3619,32],[4202,34,3619,34],[4203,6,3620,8],[4203,10,3620,14,"auth"],[4203,16,3620,18],[4203,19,3620,21,"provider"],[4203,27,3620,29],[4203,28,3620,30,"getImmediate"],[4203,40,3620,42],[4203,41,3620,43],[4203,42,3620,44],[4204,6,3621,8],[4204,10,3621,14,"initialOptions"],[4204,24,3621,28],[4204,27,3621,31,"provider"],[4204,35,3621,39],[4204,36,3621,40,"getOptions"],[4204,46,3621,50],[4204,47,3621,51],[4204,48,3621,52],[4205,6,3622,8],[4205,10,3622,12,"util"],[4205,14,3622,16],[4205,15,3622,17,"deepEqual"],[4205,24,3622,26],[4205,25,3622,27,"initialOptions"],[4205,39,3622,41],[4205,41,3622,43,"deps"],[4205,45,3622,47],[4205,49,3622,51],[4205,50,3622,52],[4205,51,3622,53],[4205,52,3622,54],[4205,54,3622,56],[4206,8,3623,12],[4206,15,3623,19,"auth"],[4206,21,3623,23],[4207,6,3624,8],[4207,7,3624,9],[4207,13,3625,13],[4208,8,3626,12,"_fail"],[4208,13,3626,17],[4208,14,3626,18,"auth"],[4208,20,3626,22],[4208,22,3626,24],[4208,43,3626,45],[4208,44,3626,46],[4208,83,3626,85],[4208,84,3626,86],[4209,6,3627,8],[4210,4,3628,4],[4211,4,3629,4],[4211,8,3629,10,"auth"],[4211,12,3629,14],[4211,15,3629,17,"provider"],[4211,23,3629,25],[4211,24,3629,26,"initialize"],[4211,34,3629,36],[4211,35,3629,37],[4212,6,3629,39,"options"],[4212,13,3629,46],[4212,15,3629,48,"deps"],[4213,4,3629,53],[4213,5,3629,54],[4213,6,3629,55],[4214,4,3630,4],[4214,11,3630,11,"auth"],[4214,15,3630,15],[4215,2,3631,0],[4216,2,3632,0],[4216,11,3632,9,"_initializeAuthInstance"],[4216,34,3632,32,"_initializeAuthInstance"],[4216,35,3632,33,"auth"],[4216,39,3632,37],[4216,41,3632,39,"deps"],[4216,45,3632,43],[4216,47,3632,45],[4217,4,3633,4],[4217,8,3633,10,"persistence"],[4217,19,3633,21],[4217,22,3633,24,"deps"],[4217,26,3633,28],[4217,28,3633,30,"persistence"],[4217,39,3633,41],[4217,43,3633,45],[4217,45,3633,47],[4218,4,3634,4],[4218,8,3634,10,"hierarchy"],[4218,17,3634,19],[4218,20,3634,22],[4218,21,3634,23,"Array"],[4218,26,3634,28],[4218,27,3634,29,"isArray"],[4218,34,3634,36],[4218,35,3634,37,"persistence"],[4218,46,3634,48],[4218,47,3634,49],[4218,50,3634,52,"persistence"],[4218,61,3634,63],[4218,64,3634,66],[4218,65,3634,67,"persistence"],[4218,76,3634,78],[4218,77,3634,79],[4218,79,3634,81,"map"],[4218,82,3634,84],[4218,83,3634,85,"_getInstance"],[4218,95,3634,97],[4218,96,3634,98],[4219,4,3635,4],[4219,8,3635,8,"deps"],[4219,12,3635,12],[4219,14,3635,14,"errorMap"],[4219,22,3635,22],[4219,24,3635,24],[4220,6,3636,8,"auth"],[4220,10,3636,12],[4220,11,3636,13,"_updateErrorMap"],[4220,26,3636,28],[4220,27,3636,29,"deps"],[4220,31,3636,33],[4220,32,3636,34,"errorMap"],[4220,40,3636,42],[4220,41,3636,43],[4221,4,3637,4],[4222,4,3638,4],[4223,4,3639,4],[4224,4,3640,4],[4225,4,3641,4,"auth"],[4225,8,3641,8],[4225,9,3641,9,"_initializeWithPersistence"],[4225,35,3641,35],[4225,36,3641,36,"hierarchy"],[4225,45,3641,45],[4225,47,3641,47,"deps"],[4225,51,3641,51],[4225,53,3641,53,"popupRedirectResolver"],[4225,74,3641,74],[4225,75,3641,75],[4226,2,3642,0],[4228,2,3644,0],[4229,0,3645,0],[4230,0,3646,0],[4231,0,3647,0],[4232,0,3648,0],[4233,0,3649,0],[4234,0,3650,0],[4235,0,3651,0],[4236,0,3652,0],[4237,0,3653,0],[4238,0,3654,0],[4239,0,3655,0],[4240,0,3656,0],[4241,0,3657,0],[4242,0,3658,0],[4243,0,3659,0],[4244,0,3660,0],[4245,0,3661,0],[4246,0,3662,0],[4247,0,3663,0],[4248,0,3664,0],[4249,0,3665,0],[4250,2,3666,0],[4250,11,3666,9,"connectAuthEmulator"],[4250,30,3666,28,"connectAuthEmulator"],[4250,31,3666,29,"auth"],[4250,35,3666,33],[4250,37,3666,35,"url"],[4250,40,3666,38],[4250,42,3666,40,"options"],[4250,49,3666,47],[4250,51,3666,49],[4251,4,3667,4],[4251,8,3667,10,"authInternal"],[4251,20,3667,22],[4251,23,3667,25,"_castAuth"],[4251,32,3667,34],[4251,33,3667,35,"auth"],[4251,37,3667,39],[4251,38,3667,40],[4252,4,3668,4,"_assert"],[4252,11,3668,11],[4252,12,3668,12],[4252,26,3668,26],[4252,27,3668,27,"test"],[4252,31,3668,31],[4252,32,3668,32,"url"],[4252,35,3668,35],[4252,36,3668,36],[4252,38,3668,38,"authInternal"],[4252,50,3668,50],[4252,52,3668,52],[4252,77,3668,77],[4252,78,3668,78],[4252,121,3668,121],[4252,122,3668,122],[4253,4,3669,4],[4253,8,3669,10,"disableWarnings"],[4253,23,3669,25],[4253,26,3669,28],[4253,27,3669,29],[4253,28,3669,30,"options"],[4253,35,3669,37],[4253,37,3669,39,"disableWarnings"],[4253,52,3669,54],[4254,4,3670,4],[4254,8,3670,10,"protocol"],[4254,16,3670,18],[4254,19,3670,21,"extractProtocol"],[4254,34,3670,36],[4254,35,3670,37,"url"],[4254,38,3670,40],[4254,39,3670,41],[4255,4,3671,4],[4255,8,3671,4,"_extractHostAndPort"],[4255,27,3671,4],[4255,30,3671,27,"extractHostAndPort"],[4255,48,3671,45],[4255,49,3671,46,"url"],[4255,52,3671,49],[4255,53,3671,50],[4256,6,3671,12,"host"],[4256,10,3671,16],[4256,13,3671,16,"_extractHostAndPort"],[4256,32,3671,16],[4256,33,3671,12,"host"],[4256,37,3671,16],[4257,6,3671,18,"port"],[4257,10,3671,22],[4257,13,3671,22,"_extractHostAndPort"],[4257,32,3671,22],[4257,33,3671,18,"port"],[4257,37,3671,22],[4258,4,3672,4],[4258,8,3672,10,"portStr"],[4258,15,3672,17],[4258,18,3672,20,"port"],[4258,22,3672,24],[4258,27,3672,29],[4258,31,3672,33],[4258,34,3672,36],[4258,36,3672,38],[4258,39,3672,41],[4258,43,3672,45,"port"],[4258,47,3672,49],[4258,49,3672,51],[4259,4,3673,4],[4260,4,3674,4],[4260,8,3674,10,"emulator"],[4260,16,3674,18],[4260,19,3674,21],[4261,6,3674,23,"url"],[4261,9,3674,26],[4261,11,3674,28],[4261,14,3674,31,"protocol"],[4261,22,3674,39],[4261,27,3674,44,"host"],[4261,31,3674,48],[4261,34,3674,51,"portStr"],[4261,41,3674,58],[4262,4,3674,62],[4262,5,3674,63],[4263,4,3675,4],[4263,8,3675,10,"emulatorConfig"],[4263,22,3675,24],[4263,25,3675,27,"Object"],[4263,31,3675,33],[4263,32,3675,34,"freeze"],[4263,38,3675,40],[4263,39,3675,41],[4264,6,3676,8,"host"],[4264,10,3676,12],[4265,6,3677,8,"port"],[4265,10,3677,12],[4266,6,3678,8,"protocol"],[4266,14,3678,16],[4266,16,3678,18,"protocol"],[4266,24,3678,26],[4266,25,3678,27,"replace"],[4266,32,3678,34],[4266,33,3678,35],[4266,36,3678,38],[4266,38,3678,40],[4266,40,3678,42],[4266,41,3678,43],[4267,6,3679,8,"options"],[4267,13,3679,15],[4267,15,3679,17,"Object"],[4267,21,3679,23],[4267,22,3679,24,"freeze"],[4267,28,3679,30],[4267,29,3679,31],[4268,8,3679,33,"disableWarnings"],[4269,6,3679,49],[4269,7,3679,50],[4270,4,3680,4],[4270,5,3680,5],[4270,6,3680,6],[4271,4,3681,4],[4272,4,3682,4],[4272,8,3682,8],[4272,9,3682,9,"authInternal"],[4272,21,3682,21],[4272,22,3682,22,"_canInitEmulator"],[4272,38,3682,38],[4272,40,3682,40],[4273,6,3683,8],[4274,6,3684,8],[4275,6,3685,8,"_assert"],[4275,13,3685,15],[4275,14,3685,16,"authInternal"],[4275,26,3685,28],[4275,27,3685,29,"config"],[4275,33,3685,35],[4275,34,3685,36,"emulator"],[4275,42,3685,44],[4275,46,3685,48,"authInternal"],[4275,58,3685,60],[4275,59,3685,61,"emulatorConfig"],[4275,73,3685,75],[4275,75,3685,77,"authInternal"],[4275,87,3685,89],[4275,89,3685,91],[4275,113,3685,115],[4275,114,3685,116],[4275,156,3685,158],[4275,157,3685,159],[4276,6,3686,8],[4277,6,3687,8],[4278,6,3688,8,"_assert"],[4278,13,3688,15],[4278,14,3688,16,"util"],[4278,18,3688,20],[4278,19,3688,21,"deepEqual"],[4278,28,3688,30],[4278,29,3688,31,"emulator"],[4278,37,3688,39],[4278,39,3688,41,"authInternal"],[4278,51,3688,53],[4278,52,3688,54,"config"],[4278,58,3688,60],[4278,59,3688,61,"emulator"],[4278,67,3688,69],[4278,68,3688,70],[4278,72,3689,12,"util"],[4278,76,3689,16],[4278,77,3689,17,"deepEqual"],[4278,86,3689,26],[4278,87,3689,27,"emulatorConfig"],[4278,101,3689,41],[4278,103,3689,43,"authInternal"],[4278,115,3689,55],[4278,116,3689,56,"emulatorConfig"],[4278,130,3689,70],[4278,131,3689,71],[4278,133,3689,73,"authInternal"],[4278,145,3689,85],[4278,147,3689,87],[4278,171,3689,111],[4278,172,3689,112],[4278,214,3689,154],[4278,215,3689,155],[4279,6,3690,8],[4280,6,3691,8],[4281,6,3692,8],[4282,4,3693,4],[4283,4,3694,4,"authInternal"],[4283,16,3694,16],[4283,17,3694,17,"config"],[4283,23,3694,23],[4283,24,3694,24,"emulator"],[4283,32,3694,32],[4283,35,3694,35,"emulator"],[4283,43,3694,43],[4284,4,3695,4,"authInternal"],[4284,16,3695,16],[4284,17,3695,17,"emulatorConfig"],[4284,31,3695,31],[4284,34,3695,34,"emulatorConfig"],[4284,48,3695,48],[4285,4,3696,4,"authInternal"],[4285,16,3696,16],[4285,17,3696,17,"settings"],[4285,25,3696,25],[4285,26,3696,26,"appVerificationDisabledForTesting"],[4285,59,3696,59],[4285,62,3696,62],[4285,66,3696,66],[4286,4,3697,4],[4287,4,3698,4],[4287,8,3698,8,"util"],[4287,12,3698,12],[4287,13,3698,13,"isCloudWorkstation"],[4287,31,3698,31],[4287,32,3698,32,"host"],[4287,36,3698,36],[4287,37,3698,37],[4287,39,3698,39],[4288,6,3699,8],[4288,11,3699,13,"util"],[4288,15,3699,17],[4288,16,3699,18,"pingServer"],[4288,26,3699,28],[4288,27,3699,29],[4288,30,3699,32,"protocol"],[4288,38,3699,40],[4288,43,3699,45,"host"],[4288,47,3699,49],[4288,50,3699,52,"portStr"],[4288,57,3699,59],[4288,59,3699,61],[4288,60,3699,62],[4289,6,3700,8,"util"],[4289,10,3700,12],[4289,11,3700,13,"updateEmulatorBanner"],[4289,31,3700,33],[4289,32,3700,34],[4289,38,3700,40],[4289,40,3700,42],[4289,44,3700,46],[4289,45,3700,47],[4290,4,3701,4],[4290,5,3701,5],[4290,11,3702,9],[4290,15,3702,13],[4290,16,3702,14,"disableWarnings"],[4290,31,3702,29],[4290,33,3702,31],[4291,6,3703,8,"emitEmulatorWarning"],[4291,25,3703,27],[4291,26,3703,28],[4291,27,3703,29],[4292,4,3704,4],[4293,2,3705,0],[4294,2,3706,0],[4294,11,3706,9,"extractProtocol"],[4294,26,3706,24,"extractProtocol"],[4294,27,3706,25,"url"],[4294,30,3706,28],[4294,32,3706,30],[4295,4,3707,4],[4295,8,3707,10,"protocolEnd"],[4295,19,3707,21],[4295,22,3707,24,"url"],[4295,25,3707,27],[4295,26,3707,28,"indexOf"],[4295,33,3707,35],[4295,34,3707,36],[4295,37,3707,39],[4295,38,3707,40],[4296,4,3708,4],[4296,11,3708,11,"protocolEnd"],[4296,22,3708,22],[4296,25,3708,25],[4296,26,3708,26],[4296,29,3708,29],[4296,31,3708,31],[4296,34,3708,34,"url"],[4296,37,3708,37],[4296,38,3708,38,"substr"],[4296,44,3708,44],[4296,45,3708,45],[4296,46,3708,46],[4296,48,3708,48,"protocolEnd"],[4296,59,3708,59],[4296,62,3708,62],[4296,63,3708,63],[4296,64,3708,64],[4297,2,3709,0],[4298,2,3710,0],[4298,11,3710,9,"extractHostAndPort"],[4298,29,3710,27,"extractHostAndPort"],[4298,30,3710,28,"url"],[4298,33,3710,31],[4298,35,3710,33],[4299,4,3711,4],[4299,8,3711,10,"protocol"],[4299,16,3711,18],[4299,19,3711,21,"extractProtocol"],[4299,34,3711,36],[4299,35,3711,37,"url"],[4299,38,3711,40],[4299,39,3711,41],[4300,4,3712,4],[4300,8,3712,10,"authority"],[4300,17,3712,19],[4300,20,3712,22],[4300,38,3712,40],[4300,39,3712,41,"exec"],[4300,43,3712,45],[4300,44,3712,46,"url"],[4300,47,3712,49],[4300,48,3712,50,"substr"],[4300,54,3712,56],[4300,55,3712,57,"protocol"],[4300,63,3712,65],[4300,64,3712,66,"length"],[4300,70,3712,72],[4300,71,3712,73],[4300,72,3712,74],[4300,73,3712,75],[4300,74,3712,76],[4301,4,3713,4],[4301,8,3713,8],[4301,9,3713,9,"authority"],[4301,18,3713,18],[4301,20,3713,20],[4302,6,3714,8],[4302,13,3714,15],[4303,8,3714,17,"host"],[4303,12,3714,21],[4303,14,3714,23],[4303,16,3714,25],[4304,8,3714,27,"port"],[4304,12,3714,31],[4304,14,3714,33],[4305,6,3714,38],[4305,7,3714,39],[4306,4,3715,4],[4307,4,3716,4],[4307,8,3716,10,"hostAndPort"],[4307,19,3716,21],[4307,22,3716,24,"authority"],[4307,31,3716,33],[4307,32,3716,34],[4307,33,3716,35],[4307,34,3716,36],[4307,35,3716,37,"split"],[4307,40,3716,42],[4307,41,3716,43],[4307,44,3716,46],[4307,45,3716,47],[4307,46,3716,48,"pop"],[4307,49,3716,51],[4307,50,3716,52],[4307,51,3716,53],[4307,55,3716,57],[4307,57,3716,59],[4307,58,3716,60],[4307,59,3716,61],[4308,4,3717,4],[4308,8,3717,10,"bracketedIPv6"],[4308,21,3717,23],[4308,24,3717,26],[4308,44,3717,46],[4308,45,3717,47,"exec"],[4308,49,3717,51],[4308,50,3717,52,"hostAndPort"],[4308,61,3717,63],[4308,62,3717,64],[4309,4,3718,4],[4309,8,3718,8,"bracketedIPv6"],[4309,21,3718,21],[4309,23,3718,23],[4310,6,3719,8],[4310,10,3719,14,"host"],[4310,14,3719,18],[4310,17,3719,21,"bracketedIPv6"],[4310,30,3719,34],[4310,31,3719,35],[4310,32,3719,36],[4310,33,3719,37],[4311,6,3720,8],[4311,13,3720,15],[4312,8,3720,17,"host"],[4312,12,3720,21],[4313,8,3720,23,"port"],[4313,12,3720,27],[4313,14,3720,29,"parsePort"],[4313,23,3720,38],[4313,24,3720,39,"hostAndPort"],[4313,35,3720,50],[4313,36,3720,51,"substr"],[4313,42,3720,57],[4313,43,3720,58,"host"],[4313,47,3720,62],[4313,48,3720,63,"length"],[4313,54,3720,69],[4313,57,3720,72],[4313,58,3720,73],[4313,59,3720,74],[4314,6,3720,76],[4314,7,3720,77],[4315,4,3721,4],[4315,5,3721,5],[4315,11,3722,9],[4316,6,3723,8],[4316,10,3723,8,"_hostAndPort$split"],[4316,28,3723,8],[4316,31,3723,29,"hostAndPort"],[4316,42,3723,40],[4316,43,3723,41,"split"],[4316,48,3723,46],[4316,49,3723,47],[4316,52,3723,50],[4316,53,3723,51],[4317,8,3723,51,"_hostAndPort$split2"],[4317,27,3723,51],[4317,30,3723,51,"_slicedToArray"],[4317,44,3723,51],[4317,45,3723,51,"_hostAndPort$split"],[4317,63,3723,51],[4318,8,3723,15,"host"],[4318,13,3723,19],[4318,16,3723,19,"_hostAndPort$split2"],[4318,35,3723,19],[4319,8,3723,21,"port"],[4319,12,3723,25],[4319,15,3723,25,"_hostAndPort$split2"],[4319,34,3723,25],[4320,6,3724,8],[4320,13,3724,15],[4321,8,3724,17,"host"],[4321,12,3724,21],[4321,14,3724,17,"host"],[4321,19,3724,21],[4322,8,3724,23,"port"],[4322,12,3724,27],[4322,14,3724,29,"parsePort"],[4322,23,3724,38],[4322,24,3724,39,"port"],[4322,28,3724,43],[4323,6,3724,45],[4323,7,3724,46],[4324,4,3725,4],[4325,2,3726,0],[4326,2,3727,0],[4326,11,3727,9,"parsePort"],[4326,20,3727,18,"parsePort"],[4326,21,3727,19,"portStr"],[4326,28,3727,26],[4326,30,3727,28],[4327,4,3728,4],[4327,8,3728,8],[4327,9,3728,9,"portStr"],[4327,16,3728,16],[4327,18,3728,18],[4328,6,3729,8],[4328,13,3729,15],[4328,17,3729,19],[4329,4,3730,4],[4330,4,3731,4],[4330,8,3731,10,"port"],[4330,12,3731,14],[4330,15,3731,17,"Number"],[4330,21,3731,23],[4330,22,3731,24,"portStr"],[4330,29,3731,31],[4330,30,3731,32],[4331,4,3732,4],[4331,8,3732,8,"isNaN"],[4331,13,3732,13],[4331,14,3732,14,"port"],[4331,18,3732,18],[4331,19,3732,19],[4331,21,3732,21],[4332,6,3733,8],[4332,13,3733,15],[4332,17,3733,19],[4333,4,3734,4],[4334,4,3735,4],[4334,11,3735,11,"port"],[4334,15,3735,15],[4335,2,3736,0],[4336,2,3737,0],[4336,11,3737,9,"emitEmulatorWarning"],[4336,30,3737,28,"emitEmulatorWarning"],[4336,31,3737,28],[4336,33,3737,31],[4337,4,3738,4],[4337,13,3738,13,"attachBanner"],[4337,25,3738,25,"attachBanner"],[4337,26,3738,25],[4337,28,3738,28],[4338,6,3739,8],[4338,10,3739,14,"el"],[4338,12,3739,16],[4338,15,3739,19,"document"],[4338,23,3739,27],[4338,24,3739,28,"createElement"],[4338,37,3739,41],[4338,38,3739,42],[4338,41,3739,45],[4338,42,3739,46],[4339,6,3740,8],[4339,10,3740,14,"sty"],[4339,13,3740,17],[4339,16,3740,20,"el"],[4339,18,3740,22],[4339,19,3740,23,"style"],[4339,24,3740,28],[4340,6,3741,8,"el"],[4340,8,3741,10],[4340,9,3741,11,"innerText"],[4340,18,3741,20],[4340,21,3742,12],[4340,88,3742,79],[4341,6,3743,8,"sty"],[4341,9,3743,11],[4341,10,3743,12,"position"],[4341,18,3743,20],[4341,21,3743,23],[4341,28,3743,30],[4342,6,3744,8,"sty"],[4342,9,3744,11],[4342,10,3744,12,"width"],[4342,15,3744,17],[4342,18,3744,20],[4342,24,3744,26],[4343,6,3745,8,"sty"],[4343,9,3745,11],[4343,10,3745,12,"backgroundColor"],[4343,25,3745,27],[4343,28,3745,30],[4343,37,3745,39],[4344,6,3746,8,"sty"],[4344,9,3746,11],[4344,10,3746,12,"border"],[4344,16,3746,18],[4344,19,3746,21],[4344,39,3746,41],[4345,6,3747,8,"sty"],[4345,9,3747,11],[4345,10,3747,12,"color"],[4345,15,3747,17],[4345,18,3747,20],[4345,27,3747,29],[4346,6,3748,8,"sty"],[4346,9,3748,11],[4346,10,3748,12,"bottom"],[4346,16,3748,18],[4346,19,3748,21],[4346,24,3748,26],[4347,6,3749,8,"sty"],[4347,9,3749,11],[4347,10,3749,12,"left"],[4347,14,3749,16],[4347,17,3749,19],[4347,22,3749,24],[4348,6,3750,8,"sty"],[4348,9,3750,11],[4348,10,3750,12,"margin"],[4348,16,3750,18],[4348,19,3750,21],[4348,24,3750,26],[4349,6,3751,8,"sty"],[4349,9,3751,11],[4349,10,3751,12,"zIndex"],[4349,16,3751,18],[4349,19,3751,21],[4349,26,3751,28],[4350,6,3752,8,"sty"],[4350,9,3752,11],[4350,10,3752,12,"textAlign"],[4350,19,3752,21],[4350,22,3752,24],[4350,30,3752,32],[4351,6,3753,8,"el"],[4351,8,3753,10],[4351,9,3753,11,"classList"],[4351,18,3753,20],[4351,19,3753,21,"add"],[4351,22,3753,24],[4351,23,3753,25],[4351,50,3753,52],[4351,51,3753,53],[4352,6,3754,8,"document"],[4352,14,3754,16],[4352,15,3754,17,"body"],[4352,19,3754,21],[4352,20,3754,22,"appendChild"],[4352,31,3754,33],[4352,32,3754,34,"el"],[4352,34,3754,36],[4352,35,3754,37],[4353,4,3755,4],[4354,4,3756,4],[4354,8,3756,8],[4354,15,3756,15,"console"],[4354,22,3756,22],[4354,27,3756,27],[4354,38,3756,38],[4354,42,3756,42],[4354,49,3756,49,"console"],[4354,56,3756,56],[4354,57,3756,57,"info"],[4354,61,3756,61],[4354,66,3756,66],[4354,76,3756,76],[4354,78,3756,78],[4355,6,3757,8,"console"],[4355,13,3757,15],[4355,14,3757,16,"info"],[4355,18,3757,20],[4355,19,3757,21],[4355,62,3757,64],[4355,65,3758,12],[4355,126,3758,73],[4355,129,3759,12],[4355,155,3759,38],[4355,156,3759,39],[4356,4,3760,4],[4357,4,3761,4],[4357,8,3761,8],[4357,15,3761,15,"window"],[4357,21,3761,21],[4357,26,3761,26],[4357,37,3761,37],[4357,41,3761,41],[4357,48,3761,48,"document"],[4357,56,3761,56],[4357,61,3761,61],[4357,72,3761,72],[4357,74,3761,74],[4358,6,3762,8],[4358,10,3762,12,"document"],[4358,18,3762,20],[4358,19,3762,21,"readyState"],[4358,29,3762,31],[4358,34,3762,36],[4358,43,3762,45],[4358,45,3762,47],[4359,8,3763,12,"window"],[4359,14,3763,18],[4359,15,3763,19,"addEventListener"],[4359,31,3763,35],[4359,32,3763,36],[4359,50,3763,54],[4359,52,3763,56,"attachBanner"],[4359,64,3763,68],[4359,65,3763,69],[4360,6,3764,8],[4360,7,3764,9],[4360,13,3765,13],[4361,8,3766,12,"attachBanner"],[4361,20,3766,24],[4361,21,3766,25],[4361,22,3766,26],[4362,6,3767,8],[4363,4,3768,4],[4364,2,3769,0],[4366,2,3771,0],[4367,0,3772,0],[4368,0,3773,0],[4369,0,3774,0],[4370,0,3775,0],[4371,0,3776,0],[4372,0,3777,0],[4373,0,3778,0],[4374,0,3779,0],[4375,0,3780,0],[4376,0,3781,0],[4377,0,3782,0],[4378,0,3783,0],[4379,0,3784,0],[4380,0,3785,0],[4381,0,3786,0],[4382,2,3787,0],[4383,0,3788,0],[4384,0,3789,0],[4385,0,3790,0],[4386,0,3791,0],[4387,0,3792,0],[4388,0,3793,0],[4389,0,3794,0],[4390,2,3787,0],[4390,6,3795,6,"AuthCredential"],[4390,20,3795,20],[4391,4,3796,4],[4392,4,3797,4],[4392,13,3797,4,"AuthCredential"],[4393,4,3798,4],[4394,0,3799,0],[4395,0,3800,0],[4396,0,3801,0],[4397,0,3802,0],[4398,0,3803,0],[4399,4,3804,4,"providerId"],[4399,14,3804,14],[4400,4,3805,4],[4401,0,3806,0],[4402,0,3807,0],[4403,0,3808,0],[4404,0,3809,0],[4405,0,3810,0],[4406,0,3811,0],[4407,0,3812,0],[4408,4,3813,4,"signInMethod"],[4408,16,3813,16],[4408,18,3813,18],[4409,6,3813,18,"_classCallCheck"],[4409,21,3813,18],[4409,28,3813,18,"AuthCredential"],[4409,42,3813,18],[4410,6,3814,8],[4410,10,3814,12],[4410,11,3814,13,"providerId"],[4410,21,3814,23],[4410,24,3814,26,"providerId"],[4410,34,3814,36],[4411,6,3815,8],[4411,10,3815,12],[4411,11,3815,13,"signInMethod"],[4411,23,3815,25],[4411,26,3815,28,"signInMethod"],[4411,38,3815,40],[4412,4,3816,4],[4413,4,3817,4],[4414,0,3818,0],[4415,0,3819,0],[4416,0,3820,0],[4417,0,3821,0],[4418,4,3817,4],[4418,11,3817,4,"_createClass"],[4418,23,3817,4],[4418,24,3817,4,"AuthCredential"],[4418,38,3817,4],[4419,6,3817,4,"key"],[4419,9,3817,4],[4420,6,3817,4,"value"],[4420,11,3817,4],[4420,13,3822,4],[4420,22,3822,4,"toJSON"],[4420,28,3822,10,"toJSON"],[4420,29,3822,10],[4420,31,3822,13],[4421,8,3823,8],[4421,15,3823,15,"debugFail"],[4421,24,3823,24],[4421,25,3823,25],[4421,42,3823,42],[4421,43,3823,43],[4422,6,3824,4],[4423,6,3825,4],[4424,4,3825,4],[4425,6,3825,4,"key"],[4425,9,3825,4],[4426,6,3825,4,"value"],[4426,11,3825,4],[4426,13,3826,4],[4426,22,3826,4,"_getIdTokenResponse"],[4426,41,3826,23,"_getIdTokenResponse"],[4426,42,3826,24,"_auth"],[4426,47,3826,29],[4426,49,3826,31],[4427,8,3827,8],[4427,15,3827,15,"debugFail"],[4427,24,3827,24],[4427,25,3827,25],[4427,42,3827,42],[4427,43,3827,43],[4428,6,3828,4],[4429,6,3829,4],[4430,4,3829,4],[4431,6,3829,4,"key"],[4431,9,3829,4],[4432,6,3829,4,"value"],[4432,11,3829,4],[4432,13,3830,4],[4432,22,3830,4,"_linkToIdToken"],[4432,36,3830,18,"_linkToIdToken"],[4432,37,3830,19,"_auth"],[4432,42,3830,24],[4432,44,3830,26,"_idToken"],[4432,52,3830,34],[4432,54,3830,36],[4433,8,3831,8],[4433,15,3831,15,"debugFail"],[4433,24,3831,24],[4433,25,3831,25],[4433,42,3831,42],[4433,43,3831,43],[4434,6,3832,4],[4435,6,3833,4],[4436,4,3833,4],[4437,6,3833,4,"key"],[4437,9,3833,4],[4438,6,3833,4,"value"],[4438,11,3833,4],[4438,13,3834,4],[4438,22,3834,4,"_getReauthenticationResolver"],[4438,50,3834,32,"_getReauthenticationResolver"],[4438,51,3834,33,"_auth"],[4438,56,3834,38],[4438,58,3834,40],[4439,8,3835,8],[4439,15,3835,15,"debugFail"],[4439,24,3835,24],[4439,25,3835,25],[4439,42,3835,42],[4439,43,3835,43],[4440,6,3836,4],[4441,4,3836,5],[4442,2,3836,5],[4443,2,3839,0],[4444,0,3840,0],[4445,0,3841,0],[4446,0,3842,0],[4447,0,3843,0],[4448,0,3844,0],[4449,0,3845,0],[4450,0,3846,0],[4451,0,3847,0],[4452,0,3848,0],[4453,0,3849,0],[4454,0,3850,0],[4455,0,3851,0],[4456,0,3852,0],[4457,0,3853,0],[4458,0,3854,0],[4459,2,3839,0],[4459,11,3855,15,"resetPassword"],[4459,24,3855,28,"resetPassword"],[4459,25,3855,28,"_x80"],[4459,29,3855,28],[4459,31,3855,28,"_x81"],[4459,35,3855,28],[4460,4,3855,28],[4460,11,3855,28,"_resetPassword"],[4460,25,3855,28],[4460,26,3855,28,"apply"],[4460,31,3855,28],[4460,38,3855,28,"arguments"],[4460,47,3855,28],[4461,2,3855,28],[4462,2,3855,28],[4462,11,3855,28,"_resetPassword"],[4462,26,3855,28],[4463,4,3855,28,"_resetPassword"],[4463,18,3855,28],[4463,21,3855,28,"_asyncToGenerator"],[4463,38,3855,28],[4463,39,3855,0],[4463,50,3855,29,"auth"],[4463,54,3855,33],[4463,56,3855,35,"request"],[4463,63,3855,42],[4463,65,3855,44],[4464,6,3856,4],[4464,13,3856,11,"_performApiRequest"],[4464,31,3856,29],[4464,32,3856,30,"auth"],[4464,36,3856,34],[4464,38,3856,36],[4464,44,3856,42],[4464,45,3856,43],[4464,68,3856,66],[4464,96,3856,94],[4464,97,3856,95],[4464,128,3856,126,"_addTidIfNecessary"],[4464,146,3856,144],[4464,147,3856,145,"auth"],[4464,151,3856,149],[4464,153,3856,151,"request"],[4464,160,3856,158],[4464,161,3856,159],[4464,162,3856,160],[4465,4,3857,0],[4465,5,3857,1],[4466,4,3857,1],[4466,11,3857,1,"_resetPassword"],[4466,25,3857,1],[4466,26,3857,1,"apply"],[4466,31,3857,1],[4466,38,3857,1,"arguments"],[4466,47,3857,1],[4467,2,3857,1],[4468,2,3857,1],[4468,11,3858,15,"updateEmailPassword"],[4468,30,3858,34,"updateEmailPassword"],[4468,31,3858,34,"_x82"],[4468,35,3858,34],[4468,37,3858,34,"_x83"],[4468,41,3858,34],[4469,4,3858,34],[4469,11,3858,34,"_updateEmailPassword"],[4469,31,3858,34],[4469,32,3858,34,"apply"],[4469,37,3858,34],[4469,44,3858,34,"arguments"],[4469,53,3858,34],[4470,2,3858,34],[4470,4,3861,0],[4471,2,3862,0],[4472,2,3862,0],[4472,11,3862,0,"_updateEmailPassword"],[4472,32,3862,0],[4473,4,3862,0,"_updateEmailPassword"],[4473,24,3862,0],[4473,27,3862,0,"_asyncToGenerator"],[4473,44,3862,0],[4473,45,3858,0],[4473,56,3858,35,"auth"],[4473,60,3858,39],[4473,62,3858,41,"request"],[4473,69,3858,48],[4473,71,3858,50],[4474,6,3859,4],[4474,13,3859,11,"_performApiRequest"],[4474,31,3859,29],[4474,32,3859,30,"auth"],[4474,36,3859,34],[4474,38,3859,36],[4474,44,3859,42],[4474,45,3859,43],[4474,68,3859,66],[4474,89,3859,87],[4474,90,3859,88],[4474,123,3859,121,"request"],[4474,130,3859,128],[4474,131,3859,129],[4475,4,3860,0],[4475,5,3860,1],[4476,4,3860,1],[4476,11,3860,1,"_updateEmailPassword"],[4476,31,3860,1],[4476,32,3860,1,"apply"],[4476,37,3860,1],[4476,44,3860,1,"arguments"],[4476,53,3860,1],[4477,2,3860,1],[4478,2,3860,1],[4478,11,3863,15,"linkEmailPassword"],[4478,28,3863,32,"linkEmailPassword"],[4478,29,3863,32,"_x84"],[4478,33,3863,32],[4478,35,3863,32,"_x85"],[4478,39,3863,32],[4479,4,3863,32],[4479,11,3863,32,"_linkEmailPassword"],[4479,29,3863,32],[4479,30,3863,32,"apply"],[4479,35,3863,32],[4479,42,3863,32,"arguments"],[4479,51,3863,32],[4480,2,3863,32],[4481,2,3863,32],[4481,11,3863,32,"_linkEmailPassword"],[4481,30,3863,32],[4482,4,3863,32,"_linkEmailPassword"],[4482,22,3863,32],[4482,25,3863,32,"_asyncToGenerator"],[4482,42,3863,32],[4482,43,3863,0],[4482,54,3863,33,"auth"],[4482,58,3863,37],[4482,60,3863,39,"request"],[4482,67,3863,46],[4482,69,3863,48],[4483,6,3864,4],[4483,13,3864,11,"_performApiRequest"],[4483,31,3864,29],[4483,32,3864,30,"auth"],[4483,36,3864,34],[4483,38,3864,36],[4483,44,3864,42],[4483,45,3864,43],[4483,68,3864,66],[4483,89,3864,87],[4483,90,3864,88],[4483,114,3864,112,"request"],[4483,121,3864,119],[4483,122,3864,120],[4484,4,3865,0],[4484,5,3865,1],[4485,4,3865,1],[4485,11,3865,1,"_linkEmailPassword"],[4485,29,3865,1],[4485,30,3865,1,"apply"],[4485,35,3865,1],[4485,42,3865,1,"arguments"],[4485,51,3865,1],[4486,2,3865,1],[4487,2,3865,1],[4487,11,3866,15,"applyActionCode$1"],[4487,28,3866,32,"applyActionCode$1"],[4487,29,3866,32,"_x86"],[4487,33,3866,32],[4487,35,3866,32,"_x87"],[4487,39,3866,32],[4488,4,3866,32],[4488,11,3866,32,"_applyActionCode$"],[4488,28,3866,32],[4488,29,3866,32,"apply"],[4488,34,3866,32],[4488,41,3866,32,"arguments"],[4488,50,3866,32],[4489,2,3866,32],[4490,2,3870,0],[4491,0,3871,0],[4492,0,3872,0],[4493,0,3873,0],[4494,0,3874,0],[4495,0,3875,0],[4496,0,3876,0],[4497,0,3877,0],[4498,0,3878,0],[4499,0,3879,0],[4500,0,3880,0],[4501,0,3881,0],[4502,0,3882,0],[4503,0,3883,0],[4504,0,3884,0],[4505,0,3885,0],[4506,2,3870,0],[4506,11,3870,0,"_applyActionCode$"],[4506,29,3870,0],[4507,4,3870,0,"_applyActionCode$"],[4507,21,3870,0],[4507,24,3870,0,"_asyncToGenerator"],[4507,41,3870,0],[4507,42,3866,0],[4507,53,3866,33,"auth"],[4507,57,3866,37],[4507,59,3866,39,"request"],[4507,66,3866,46],[4507,68,3866,48],[4508,6,3867,4],[4508,13,3867,11,"_performApiRequest"],[4508,31,3867,29],[4508,32,3867,30,"auth"],[4508,36,3867,34],[4508,38,3867,36],[4508,44,3867,42],[4508,45,3867,43],[4508,68,3867,66],[4508,89,3867,87],[4508,90,3867,88],[4508,123,3867,121,"_addTidIfNecessary"],[4508,141,3867,139],[4508,142,3867,140,"auth"],[4508,146,3867,144],[4508,148,3867,146,"request"],[4508,155,3867,153],[4508,156,3867,154],[4508,157,3867,155],[4509,4,3868,0],[4509,5,3868,1],[4510,4,3868,1],[4510,11,3868,1,"_applyActionCode$"],[4510,28,3868,1],[4510,29,3868,1,"apply"],[4510,34,3868,1],[4510,41,3868,1,"arguments"],[4510,50,3868,1],[4511,2,3868,1],[4512,2,3868,1],[4512,11,3886,15,"signInWithPassword"],[4512,29,3886,33,"signInWithPassword"],[4512,30,3886,33,"_x88"],[4512,34,3886,33],[4512,36,3886,33,"_x89"],[4512,40,3886,33],[4513,4,3886,33],[4513,11,3886,33,"_signInWithPassword"],[4513,30,3886,33],[4513,31,3886,33,"apply"],[4513,36,3886,33],[4513,43,3886,33,"arguments"],[4513,52,3886,33],[4514,2,3886,33],[4515,2,3886,33],[4515,11,3886,33,"_signInWithPassword"],[4515,31,3886,33],[4516,4,3886,33,"_signInWithPassword"],[4516,23,3886,33],[4516,26,3886,33,"_asyncToGenerator"],[4516,43,3886,33],[4516,44,3886,0],[4516,55,3886,34,"auth"],[4516,59,3886,38],[4516,61,3886,40,"request"],[4516,68,3886,47],[4516,70,3886,49],[4517,6,3887,4],[4517,13,3887,11,"_performSignInRequest"],[4517,34,3887,32],[4517,35,3887,33,"auth"],[4517,39,3887,37],[4517,41,3887,39],[4517,47,3887,45],[4517,48,3887,46],[4517,71,3887,69],[4517,104,3887,102],[4517,105,3887,103],[4517,143,3887,141,"_addTidIfNecessary"],[4517,161,3887,159],[4517,162,3887,160,"auth"],[4517,166,3887,164],[4517,168,3887,166,"request"],[4517,175,3887,173],[4517,176,3887,174],[4517,177,3887,175],[4518,4,3888,0],[4518,5,3888,1],[4519,4,3888,1],[4519,11,3888,1,"_signInWithPassword"],[4519,30,3888,1],[4519,31,3888,1,"apply"],[4519,36,3888,1],[4519,43,3888,1,"arguments"],[4519,52,3888,1],[4520,2,3888,1],[4521,2,3888,1],[4521,11,3889,15,"sendOobCode"],[4521,22,3889,26,"sendOobCode"],[4521,23,3889,26,"_x90"],[4521,27,3889,26],[4521,29,3889,26,"_x91"],[4521,33,3889,26],[4522,4,3889,26],[4522,11,3889,26,"_sendOobCode"],[4522,23,3889,26],[4522,24,3889,26,"apply"],[4522,29,3889,26],[4522,36,3889,26,"arguments"],[4522,45,3889,26],[4523,2,3889,26],[4524,2,3889,26],[4524,11,3889,26,"_sendOobCode"],[4524,24,3889,26],[4525,4,3889,26,"_sendOobCode"],[4525,16,3889,26],[4525,19,3889,26,"_asyncToGenerator"],[4525,36,3889,26],[4525,37,3889,0],[4525,48,3889,27,"auth"],[4525,52,3889,31],[4525,54,3889,33,"request"],[4525,61,3889,40],[4525,63,3889,42],[4526,6,3890,4],[4526,13,3890,11,"_performApiRequest"],[4526,31,3890,29],[4526,32,3890,30,"auth"],[4526,36,3890,34],[4526,38,3890,36],[4526,44,3890,42],[4526,45,3890,43],[4526,68,3890,66],[4526,94,3890,92],[4526,95,3890,93],[4526,125,3890,123,"_addTidIfNecessary"],[4526,143,3890,141],[4526,144,3890,142,"auth"],[4526,148,3890,146],[4526,150,3890,148,"request"],[4526,157,3890,155],[4526,158,3890,156],[4526,159,3890,157],[4527,4,3891,0],[4527,5,3891,1],[4528,4,3891,1],[4528,11,3891,1,"_sendOobCode"],[4528,23,3891,1],[4528,24,3891,1,"apply"],[4528,29,3891,1],[4528,36,3891,1,"arguments"],[4528,45,3891,1],[4529,2,3891,1],[4530,2,3891,1],[4530,11,3892,15,"sendEmailVerification$1"],[4530,34,3892,38,"sendEmailVerification$1"],[4530,35,3892,38,"_x92"],[4530,39,3892,38],[4530,41,3892,38,"_x93"],[4530,45,3892,38],[4531,4,3892,38],[4531,11,3892,38,"_sendEmailVerification$"],[4531,34,3892,38],[4531,35,3892,38,"apply"],[4531,40,3892,38],[4531,47,3892,38,"arguments"],[4531,56,3892,38],[4532,2,3892,38],[4533,2,3892,38],[4533,11,3892,38,"_sendEmailVerification$"],[4533,35,3892,38],[4534,4,3892,38,"_sendEmailVerification$"],[4534,27,3892,38],[4534,30,3892,38,"_asyncToGenerator"],[4534,47,3892,38],[4534,48,3892,0],[4534,59,3892,39,"auth"],[4534,63,3892,43],[4534,65,3892,45,"request"],[4534,72,3892,52],[4534,74,3892,54],[4535,6,3893,4],[4535,13,3893,11,"sendOobCode"],[4535,24,3893,22],[4535,25,3893,23,"auth"],[4535,29,3893,27],[4535,31,3893,29,"request"],[4535,38,3893,36],[4535,39,3893,37],[4536,4,3894,0],[4536,5,3894,1],[4537,4,3894,1],[4537,11,3894,1,"_sendEmailVerification$"],[4537,34,3894,1],[4537,35,3894,1,"apply"],[4537,40,3894,1],[4537,47,3894,1,"arguments"],[4537,56,3894,1],[4538,2,3894,1],[4539,2,3894,1],[4539,11,3895,15,"sendPasswordResetEmail$1"],[4539,35,3895,39,"sendPasswordResetEmail$1"],[4539,36,3895,39,"_x94"],[4539,40,3895,39],[4539,42,3895,39,"_x95"],[4539,46,3895,39],[4540,4,3895,39],[4540,11,3895,39,"_sendPasswordResetEmail$"],[4540,35,3895,39],[4540,36,3895,39,"apply"],[4540,41,3895,39],[4540,48,3895,39,"arguments"],[4540,57,3895,39],[4541,2,3895,39],[4542,2,3895,39],[4542,11,3895,39,"_sendPasswordResetEmail$"],[4542,36,3895,39],[4543,4,3895,39,"_sendPasswordResetEmail$"],[4543,28,3895,39],[4543,31,3895,39,"_asyncToGenerator"],[4543,48,3895,39],[4543,49,3895,0],[4543,60,3895,40,"auth"],[4543,64,3895,44],[4543,66,3895,46,"request"],[4543,73,3895,53],[4543,75,3895,55],[4544,6,3896,4],[4544,13,3896,11,"sendOobCode"],[4544,24,3896,22],[4544,25,3896,23,"auth"],[4544,29,3896,27],[4544,31,3896,29,"request"],[4544,38,3896,36],[4544,39,3896,37],[4545,4,3897,0],[4545,5,3897,1],[4546,4,3897,1],[4546,11,3897,1,"_sendPasswordResetEmail$"],[4546,35,3897,1],[4546,36,3897,1,"apply"],[4546,41,3897,1],[4546,48,3897,1,"arguments"],[4546,57,3897,1],[4547,2,3897,1],[4548,2,3897,1],[4548,11,3898,15,"sendSignInLinkToEmail$1"],[4548,34,3898,38,"sendSignInLinkToEmail$1"],[4548,35,3898,38,"_x96"],[4548,39,3898,38],[4548,41,3898,38,"_x97"],[4548,45,3898,38],[4549,4,3898,38],[4549,11,3898,38,"_sendSignInLinkToEmail$"],[4549,34,3898,38],[4549,35,3898,38,"apply"],[4549,40,3898,38],[4549,47,3898,38,"arguments"],[4549,56,3898,38],[4550,2,3898,38],[4551,2,3898,38],[4551,11,3898,38,"_sendSignInLinkToEmail$"],[4551,35,3898,38],[4552,4,3898,38,"_sendSignInLinkToEmail$"],[4552,27,3898,38],[4552,30,3898,38,"_asyncToGenerator"],[4552,47,3898,38],[4552,48,3898,0],[4552,59,3898,39,"auth"],[4552,63,3898,43],[4552,65,3898,45,"request"],[4552,72,3898,52],[4552,74,3898,54],[4553,6,3899,4],[4553,13,3899,11,"sendOobCode"],[4553,24,3899,22],[4553,25,3899,23,"auth"],[4553,29,3899,27],[4553,31,3899,29,"request"],[4553,38,3899,36],[4553,39,3899,37],[4554,4,3900,0],[4554,5,3900,1],[4555,4,3900,1],[4555,11,3900,1,"_sendSignInLinkToEmail$"],[4555,34,3900,1],[4555,35,3900,1,"apply"],[4555,40,3900,1],[4555,47,3900,1,"arguments"],[4555,56,3900,1],[4556,2,3900,1],[4557,2,3900,1],[4557,11,3901,15,"verifyAndChangeEmail"],[4557,31,3901,35,"verifyAndChangeEmail"],[4557,32,3901,35,"_x98"],[4557,36,3901,35],[4557,38,3901,35,"_x99"],[4557,42,3901,35],[4558,4,3901,35],[4558,11,3901,35,"_verifyAndChangeEmail"],[4558,32,3901,35],[4558,33,3901,35,"apply"],[4558,38,3901,35],[4558,45,3901,35,"arguments"],[4558,54,3901,35],[4559,2,3901,35],[4560,2,3905,0],[4561,0,3906,0],[4562,0,3907,0],[4563,0,3908,0],[4564,0,3909,0],[4565,0,3910,0],[4566,0,3911,0],[4567,0,3912,0],[4568,0,3913,0],[4569,0,3914,0],[4570,0,3915,0],[4571,0,3916,0],[4572,0,3917,0],[4573,0,3918,0],[4574,0,3919,0],[4575,0,3920,0],[4576,2,3905,0],[4576,11,3905,0,"_verifyAndChangeEmail"],[4576,33,3905,0],[4577,4,3905,0,"_verifyAndChangeEmail"],[4577,25,3905,0],[4577,28,3905,0,"_asyncToGenerator"],[4577,45,3905,0],[4577,46,3901,0],[4577,57,3901,36,"auth"],[4577,61,3901,40],[4577,63,3901,42,"request"],[4577,70,3901,49],[4577,72,3901,51],[4578,6,3902,4],[4578,13,3902,11,"sendOobCode"],[4578,24,3902,22],[4578,25,3902,23,"auth"],[4578,29,3902,27],[4578,31,3902,29,"request"],[4578,38,3902,36],[4578,39,3902,37],[4579,4,3903,0],[4579,5,3903,1],[4580,4,3903,1],[4580,11,3903,1,"_verifyAndChangeEmail"],[4580,32,3903,1],[4580,33,3903,1,"apply"],[4580,38,3903,1],[4580,45,3903,1,"arguments"],[4580,54,3903,1],[4581,2,3903,1],[4582,2,3903,1],[4582,11,3921,15,"signInWithEmailLink$1"],[4582,32,3921,36,"signInWithEmailLink$1"],[4582,33,3921,36,"_x100"],[4582,38,3921,36],[4582,40,3921,36,"_x101"],[4582,45,3921,36],[4583,4,3921,36],[4583,11,3921,36,"_signInWithEmailLink$"],[4583,32,3921,36],[4583,33,3921,36,"apply"],[4583,38,3921,36],[4583,45,3921,36,"arguments"],[4583,54,3921,36],[4584,2,3921,36],[4585,2,3921,36],[4585,11,3921,36,"_signInWithEmailLink$"],[4585,33,3921,36],[4586,4,3921,36,"_signInWithEmailLink$"],[4586,25,3921,36],[4586,28,3921,36,"_asyncToGenerator"],[4586,45,3921,36],[4586,46,3921,0],[4586,57,3921,37,"auth"],[4586,61,3921,41],[4586,63,3921,43,"request"],[4586,70,3921,50],[4586,72,3921,52],[4587,6,3922,4],[4587,13,3922,11,"_performSignInRequest"],[4587,34,3922,32],[4587,35,3922,33,"auth"],[4587,39,3922,37],[4587,41,3922,39],[4587,47,3922,45],[4587,48,3922,46],[4587,71,3922,69],[4587,105,3922,103],[4587,106,3922,104],[4587,146,3922,144,"_addTidIfNecessary"],[4587,164,3922,162],[4587,165,3922,163,"auth"],[4587,169,3922,167],[4587,171,3922,169,"request"],[4587,178,3922,176],[4587,179,3922,177],[4587,180,3922,178],[4588,4,3923,0],[4588,5,3923,1],[4589,4,3923,1],[4589,11,3923,1,"_signInWithEmailLink$"],[4589,32,3923,1],[4589,33,3923,1,"apply"],[4589,38,3923,1],[4589,45,3923,1,"arguments"],[4589,54,3923,1],[4590,2,3923,1],[4591,2,3923,1],[4591,11,3924,15,"signInWithEmailLinkForLinking"],[4591,40,3924,44,"signInWithEmailLinkForLinking"],[4591,41,3924,44,"_x102"],[4591,46,3924,44],[4591,48,3924,44,"_x103"],[4591,53,3924,44],[4592,4,3924,44],[4592,11,3924,44,"_signInWithEmailLinkForLinking"],[4592,41,3924,44],[4592,42,3924,44,"apply"],[4592,47,3924,44],[4592,54,3924,44,"arguments"],[4592,63,3924,44],[4593,2,3924,44],[4594,2,3928,0],[4595,0,3929,0],[4596,0,3930,0],[4597,0,3931,0],[4598,0,3932,0],[4599,0,3933,0],[4600,0,3934,0],[4601,0,3935,0],[4602,0,3936,0],[4603,0,3937,0],[4604,0,3938,0],[4605,0,3939,0],[4606,0,3940,0],[4607,0,3941,0],[4608,0,3942,0],[4609,0,3943,0],[4610,2,3944,0],[4611,0,3945,0],[4612,0,3946,0],[4613,0,3947,0],[4614,0,3948,0],[4615,0,3949,0],[4616,0,3950,0],[4617,0,3951,0],[4618,0,3952,0],[4619,0,3953,0],[4620,2,3944,0],[4620,11,3944,0,"_signInWithEmailLinkForLinking"],[4620,42,3944,0],[4621,4,3944,0,"_signInWithEmailLinkForLinking"],[4621,34,3944,0],[4621,37,3944,0,"_asyncToGenerator"],[4621,54,3944,0],[4621,55,3924,0],[4621,66,3924,45,"auth"],[4621,70,3924,49],[4621,72,3924,51,"request"],[4621,79,3924,58],[4621,81,3924,60],[4622,6,3925,4],[4622,13,3925,11,"_performSignInRequest"],[4622,34,3925,32],[4622,35,3925,33,"auth"],[4622,39,3925,37],[4622,41,3925,39],[4622,47,3925,45],[4622,48,3925,46],[4622,71,3925,69],[4622,105,3925,103],[4622,106,3925,104],[4622,146,3925,144,"_addTidIfNecessary"],[4622,164,3925,162],[4622,165,3925,163,"auth"],[4622,169,3925,167],[4622,171,3925,169,"request"],[4622,178,3925,176],[4622,179,3925,177],[4622,180,3925,178],[4623,4,3926,0],[4623,5,3926,1],[4624,4,3926,1],[4624,11,3926,1,"_signInWithEmailLinkForLinking"],[4624,41,3926,1],[4624,42,3926,1,"apply"],[4624,47,3926,1],[4624,54,3926,1,"arguments"],[4624,63,3926,1],[4625,2,3926,1],[4626,2,3926,1],[4626,6,3954,6,"EmailAuthCredential"],[4626,25,3954,25],[4626,51,3954,25,"_AuthCredential"],[4626,66,3954,25],[4627,4,3955,4],[4628,4,3956,4],[4628,13,3956,4,"EmailAuthCredential"],[4628,33,3957,4],[4629,4,3958,4,"_email"],[4629,10,3958,10],[4629,12,3959,4],[4630,4,3960,4,"_password"],[4630,13,3960,13],[4630,15,3960,15,"signInMethod"],[4630,27,3960,27],[4630,29,3962,22],[4631,6,3962,22],[4631,10,3962,22,"_this6"],[4631,16,3962,22],[4632,6,3962,22],[4632,10,3962,4,"_tenantId"],[4632,19,3962,13],[4632,22,3962,13,"arguments"],[4632,31,3962,13],[4632,32,3962,13,"length"],[4632,38,3962,13],[4632,46,3962,13,"arguments"],[4632,55,3962,13],[4632,63,3962,13,"undefined"],[4632,72,3962,13],[4632,75,3962,13,"arguments"],[4632,84,3962,13],[4632,90,3962,16],[4632,94,3962,20],[4633,6,3962,20,"_classCallCheck"],[4633,21,3962,20],[4633,28,3962,20,"EmailAuthCredential"],[4633,47,3962,20],[4634,6,3963,8,"_this6"],[4634,12,3963,8],[4634,15,3963,8,"_callSuper"],[4634,25,3963,8],[4634,32,3963,8,"EmailAuthCredential"],[4634,51,3963,8],[4634,54,3963,14],[4634,64,3963,24],[4634,65,3963,25],[4634,92,3963,52,"signInMethod"],[4634,104,3963,64],[4635,6,3964,8,"_this6"],[4635,12,3964,8],[4635,13,3964,13,"_email"],[4635,19,3964,19],[4635,22,3964,22,"_email"],[4635,28,3964,28],[4636,6,3965,8,"_this6"],[4636,12,3965,8],[4636,13,3965,13,"_password"],[4636,22,3965,22],[4636,25,3965,25,"_password"],[4636,34,3965,34],[4637,6,3966,8,"_this6"],[4637,12,3966,8],[4637,13,3966,13,"_tenantId"],[4637,22,3966,22],[4637,25,3966,25,"_tenantId"],[4637,34,3966,34],[4638,6,3966,35],[4638,13,3966,35,"_this6"],[4638,19,3966,35],[4639,4,3967,4],[4640,4,3968,4],[4641,4,3968,4,"_inherits"],[4641,13,3968,4],[4641,14,3968,4,"EmailAuthCredential"],[4641,33,3968,4],[4641,35,3968,4,"_AuthCredential"],[4641,50,3968,4],[4642,4,3968,4],[4642,11,3968,4,"_createClass"],[4642,23,3968,4],[4642,24,3968,4,"EmailAuthCredential"],[4642,43,3968,4],[4643,6,3968,4,"key"],[4643,9,3968,4],[4644,6,3968,4,"value"],[4644,11,3968,4],[4644,13,3976,4],[4645,6,3977,4],[4645,15,3977,4,"toJSON"],[4645,21,3977,10,"toJSON"],[4645,22,3977,10],[4645,24,3977,13],[4646,8,3978,8],[4646,15,3978,15],[4647,10,3979,12,"email"],[4647,15,3979,17],[4647,17,3979,19],[4647,21,3979,23],[4647,22,3979,24,"_email"],[4647,28,3979,30],[4648,10,3980,12,"password"],[4648,18,3980,20],[4648,20,3980,22],[4648,24,3980,26],[4648,25,3980,27,"_password"],[4648,34,3980,36],[4649,10,3981,12,"signInMethod"],[4649,22,3981,24],[4649,24,3981,26],[4649,28,3981,30],[4649,29,3981,31,"signInMethod"],[4649,41,3981,43],[4650,10,3982,12,"tenantId"],[4650,18,3982,20],[4650,20,3982,22],[4650,24,3982,26],[4650,25,3982,27,"_tenantId"],[4651,8,3983,8],[4651,9,3983,9],[4652,6,3984,4],[4653,6,3985,4],[4654,0,3986,0],[4655,0,3987,0],[4656,0,3988,0],[4657,0,3989,0],[4658,0,3990,0],[4659,0,3991,0],[4660,0,3992,0],[4661,4,3985,4],[4662,6,3985,4,"key"],[4662,9,3985,4],[4663,6,3985,4,"value"],[4663,11,3985,4],[4663,14,4005,4],[4664,8,4005,4],[4664,12,4005,4,"_getIdTokenResponse2"],[4664,32,4005,4],[4664,35,4005,4,"_asyncToGenerator"],[4664,52,4005,4],[4664,53,4006,4],[4664,64,4006,30,"auth"],[4664,68,4006,34],[4664,70,4006,36],[4665,10,4007,8],[4665,18,4007,16],[4665,22,4007,20],[4665,23,4007,21,"signInMethod"],[4665,35,4007,33],[4666,12,4008,12],[4666,17,4008,17],[4666,27,4008,27],[4666,28,4008,28],[4667,14,4009,16],[4667,18,4009,22,"request"],[4667,25,4009,29],[4667,28,4009,32],[4668,16,4010,20,"returnSecureToken"],[4668,33,4010,37],[4668,35,4010,39],[4668,39,4010,43],[4669,16,4011,20,"email"],[4669,21,4011,25],[4669,23,4011,27],[4669,27,4011,31],[4669,28,4011,32,"_email"],[4669,34,4011,38],[4670,16,4012,20,"password"],[4670,24,4012,28],[4670,26,4012,30],[4670,30,4012,34],[4670,31,4012,35,"_password"],[4670,40,4012,44],[4671,16,4013,20,"clientType"],[4671,26,4013,30],[4671,28,4013,32],[4671,45,4013,49],[4671,46,4013,50],[4672,14,4014,16],[4672,15,4014,17],[4673,14,4015,16],[4673,21,4015,23,"handleRecaptchaFlow"],[4673,40,4015,42],[4673,41,4015,43,"auth"],[4673,45,4015,47],[4673,47,4015,49,"request"],[4673,54,4015,56],[4673,56,4015,58],[4673,76,4015,78],[4673,77,4015,79],[4673,126,4015,128,"signInWithPassword"],[4673,144,4015,146],[4673,146,4015,148],[4673,171,4015,173],[4673,172,4015,174],[4673,223,4015,225],[4673,224,4015,226],[4674,12,4016,12],[4674,17,4016,17],[4674,28,4016,28],[4674,29,4016,29],[4675,14,4017,16],[4675,21,4017,23,"signInWithEmailLink$1"],[4675,42,4017,44],[4675,43,4017,45,"auth"],[4675,47,4017,49],[4675,49,4017,51],[4676,16,4018,20,"email"],[4676,21,4018,25],[4676,23,4018,27],[4676,27,4018,31],[4676,28,4018,32,"_email"],[4676,34,4018,38],[4677,16,4019,20,"oobCode"],[4677,23,4019,27],[4677,25,4019,29],[4677,29,4019,33],[4677,30,4019,34,"_password"],[4678,14,4020,16],[4678,15,4020,17],[4678,16,4020,18],[4679,12,4021,12],[4680,14,4022,16,"_fail"],[4680,19,4022,21],[4680,20,4022,22,"auth"],[4680,24,4022,26],[4680,26,4022,28],[4680,42,4022,44],[4680,43,4022,45],[4680,77,4022,79],[4680,78,4022,80],[4681,10,4023,8],[4682,8,4024,4],[4682,9,4024,5],[4683,8,4024,5],[4683,17,4006,10,"_getIdTokenResponse"],[4683,36,4006,29,"_getIdTokenResponse"],[4683,37,4006,29,"_x104"],[4683,42,4006,29],[4684,10,4006,29],[4684,17,4006,29,"_getIdTokenResponse2"],[4684,37,4006,29],[4684,38,4006,29,"apply"],[4684,43,4006,29],[4684,50,4006,29,"arguments"],[4684,59,4006,29],[4685,8,4006,29],[4686,8,4006,29],[4686,15,4006,10,"_getIdTokenResponse"],[4686,34,4006,29],[4687,6,4006,29],[4687,10,4025,4],[4688,4,4025,4],[4689,6,4025,4,"key"],[4689,9,4025,4],[4690,6,4025,4,"value"],[4690,11,4025,4],[4691,8,4025,4],[4691,12,4025,4,"_linkToIdToken2"],[4691,27,4025,4],[4691,30,4025,4,"_asyncToGenerator"],[4691,47,4025,4],[4691,48,4026,4],[4691,59,4026,25,"auth"],[4691,63,4026,29],[4691,65,4026,31,"idToken"],[4691,72,4026,38],[4691,74,4026,40],[4692,10,4027,8],[4692,18,4027,16],[4692,22,4027,20],[4692,23,4027,21,"signInMethod"],[4692,35,4027,33],[4693,12,4028,12],[4693,17,4028,17],[4693,27,4028,27],[4693,28,4028,28],[4694,14,4029,16],[4694,18,4029,22,"request"],[4694,25,4029,29],[4694,28,4029,32],[4695,16,4030,20,"idToken"],[4695,23,4030,27],[4696,16,4031,20,"returnSecureToken"],[4696,33,4031,37],[4696,35,4031,39],[4696,39,4031,43],[4697,16,4032,20,"email"],[4697,21,4032,25],[4697,23,4032,27],[4697,27,4032,31],[4697,28,4032,32,"_email"],[4697,34,4032,38],[4698,16,4033,20,"password"],[4698,24,4033,28],[4698,26,4033,30],[4698,30,4033,34],[4698,31,4033,35,"_password"],[4698,40,4033,44],[4699,16,4034,20,"clientType"],[4699,26,4034,30],[4699,28,4034,32],[4699,45,4034,49],[4699,46,4034,50],[4700,14,4035,16],[4700,15,4035,17],[4701,14,4036,16],[4701,21,4036,23,"handleRecaptchaFlow"],[4701,40,4036,42],[4701,41,4036,43,"auth"],[4701,45,4036,47],[4701,47,4036,49,"request"],[4701,54,4036,56],[4701,56,4036,58],[4701,72,4036,74],[4701,73,4036,75],[4701,117,4036,119,"linkEmailPassword"],[4701,134,4036,136],[4701,136,4036,138],[4701,161,4036,163],[4701,162,4036,164],[4701,213,4036,215],[4701,214,4036,216],[4702,12,4037,12],[4702,17,4037,17],[4702,28,4037,28],[4702,29,4037,29],[4703,14,4038,16],[4703,21,4038,23,"signInWithEmailLinkForLinking"],[4703,50,4038,52],[4703,51,4038,53,"auth"],[4703,55,4038,57],[4703,57,4038,59],[4704,16,4039,20,"idToken"],[4704,23,4039,27],[4705,16,4040,20,"email"],[4705,21,4040,25],[4705,23,4040,27],[4705,27,4040,31],[4705,28,4040,32,"_email"],[4705,34,4040,38],[4706,16,4041,20,"oobCode"],[4706,23,4041,27],[4706,25,4041,29],[4706,29,4041,33],[4706,30,4041,34,"_password"],[4707,14,4042,16],[4707,15,4042,17],[4707,16,4042,18],[4708,12,4043,12],[4709,14,4044,16,"_fail"],[4709,19,4044,21],[4709,20,4044,22,"auth"],[4709,24,4044,26],[4709,26,4044,28],[4709,42,4044,44],[4709,43,4044,45],[4709,77,4044,79],[4709,78,4044,80],[4710,10,4045,8],[4711,8,4046,4],[4711,9,4046,5],[4712,8,4046,5],[4712,17,4026,10,"_linkToIdToken"],[4712,31,4026,24,"_linkToIdToken"],[4712,32,4026,24,"_x105"],[4712,37,4026,24],[4712,39,4026,24,"_x106"],[4712,44,4026,24],[4713,10,4026,24],[4713,17,4026,24,"_linkToIdToken2"],[4713,32,4026,24],[4713,33,4026,24,"apply"],[4713,38,4026,24],[4713,45,4026,24,"arguments"],[4713,54,4026,24],[4714,8,4026,24],[4715,8,4026,24],[4715,15,4026,10,"_linkToIdToken"],[4715,29,4026,24],[4716,6,4026,24],[4716,10,4047,4],[4717,4,4047,4],[4718,6,4047,4,"key"],[4718,9,4047,4],[4719,6,4047,4,"value"],[4719,11,4047,4],[4719,13,4048,4],[4719,22,4048,4,"_getReauthenticationResolver"],[4719,50,4048,32,"_getReauthenticationResolver"],[4719,51,4048,33,"auth"],[4719,55,4048,37],[4719,57,4048,39],[4720,8,4049,8],[4720,15,4049,15],[4720,19,4049,19],[4720,20,4049,20,"_getIdTokenResponse"],[4720,39,4049,39],[4720,40,4049,40,"auth"],[4720,44,4049,44],[4720,45,4049,45],[4721,6,4050,4],[4722,4,4050,5],[4723,6,4050,5,"key"],[4723,9,4050,5],[4724,6,4050,5,"value"],[4724,11,4050,5],[4724,13,3969,4],[4724,22,3969,11,"_fromEmailAndPassword"],[4724,43,3969,32,"_fromEmailAndPassword"],[4724,44,3969,33,"email"],[4724,49,3969,38],[4724,51,3969,40,"password"],[4724,59,3969,48],[4724,61,3969,50],[4725,8,3970,8],[4725,15,3970,15],[4725,19,3970,19,"EmailAuthCredential"],[4725,38,3970,38],[4725,39,3970,39,"email"],[4725,44,3970,44],[4725,46,3970,46,"password"],[4725,54,3970,54],[4725,56,3970,56],[4725,66,3970,66],[4725,67,3970,67],[4725,100,3970,100],[4725,101,3970,101],[4726,6,3971,4],[4727,6,3972,4],[4728,4,3972,4],[4729,6,3972,4,"key"],[4729,9,3972,4],[4730,6,3972,4,"value"],[4730,11,3972,4],[4730,13,3973,4],[4730,22,3973,11,"_fromEmailAndCode"],[4730,39,3973,28,"_fromEmailAndCode"],[4730,40,3973,29,"email"],[4730,45,3973,34],[4730,47,3973,36,"oobCode"],[4730,54,3973,43],[4730,56,3973,62],[4731,8,3973,62],[4731,12,3973,45,"tenantId"],[4731,20,3973,53],[4731,23,3973,53,"arguments"],[4731,32,3973,53],[4731,33,3973,53,"length"],[4731,39,3973,53],[4731,47,3973,53,"arguments"],[4731,56,3973,53],[4731,64,3973,53,"undefined"],[4731,73,3973,53],[4731,76,3973,53,"arguments"],[4731,85,3973,53],[4731,91,3973,56],[4731,95,3973,60],[4732,8,3974,8],[4732,15,3974,15],[4732,19,3974,19,"EmailAuthCredential"],[4732,38,3974,38],[4732,39,3974,39,"email"],[4732,44,3974,44],[4732,46,3974,46,"oobCode"],[4732,53,3974,53],[4732,55,3974,55],[4732,66,3974,66],[4732,67,3974,67],[4732,98,3974,98,"tenantId"],[4732,106,3974,106],[4732,107,3974,107],[4733,6,3975,4],[4734,4,3975,5],[4735,6,3975,5,"key"],[4735,9,3975,5],[4736,6,3975,5,"value"],[4736,11,3975,5],[4736,13,3993,4],[4736,22,3993,11,"fromJSON"],[4736,30,3993,19,"fromJSON"],[4736,31,3993,20,"json"],[4736,35,3993,24],[4736,37,3993,26],[4737,8,3994,8],[4737,12,3994,14,"obj"],[4737,15,3994,17],[4737,18,3994,20],[4737,25,3994,27,"json"],[4737,29,3994,31],[4737,34,3994,36],[4737,42,3994,44],[4737,45,3994,47,"JSON"],[4737,49,3994,51],[4737,50,3994,52,"parse"],[4737,55,3994,57],[4737,56,3994,58,"json"],[4737,60,3994,62],[4737,61,3994,63],[4737,64,3994,66,"json"],[4737,68,3994,70],[4738,8,3995,8],[4738,12,3995,12,"obj"],[4738,15,3995,15],[4738,17,3995,17,"email"],[4738,22,3995,22],[4738,26,3995,26,"obj"],[4738,29,3995,29],[4738,31,3995,31,"password"],[4738,39,3995,39],[4738,41,3995,41],[4739,10,3996,12],[4739,14,3996,16,"obj"],[4739,17,3996,19],[4739,18,3996,20,"signInMethod"],[4739,30,3996,32],[4739,35,3996,37],[4739,45,3996,47],[4739,46,3996,48],[4739,81,3996,83],[4740,12,3997,16],[4740,19,3997,23],[4740,23,3997,27],[4740,24,3997,28,"_fromEmailAndPassword"],[4740,45,3997,49],[4740,46,3997,50,"obj"],[4740,49,3997,53],[4740,50,3997,54,"email"],[4740,55,3997,59],[4740,57,3997,61,"obj"],[4740,60,3997,64],[4740,61,3997,65,"password"],[4740,69,3997,73],[4740,70,3997,74],[4741,10,3998,12],[4741,11,3998,13],[4741,17,3999,17],[4741,21,3999,21,"obj"],[4741,24,3999,24],[4741,25,3999,25,"signInMethod"],[4741,37,3999,37],[4741,42,3999,42],[4741,53,3999,53],[4741,54,3999,54],[4741,85,3999,85],[4742,12,4000,16],[4742,19,4000,23],[4742,23,4000,27],[4742,24,4000,28,"_fromEmailAndCode"],[4742,41,4000,45],[4742,42,4000,46,"obj"],[4742,45,4000,49],[4742,46,4000,50,"email"],[4742,51,4000,55],[4742,53,4000,57,"obj"],[4742,56,4000,60],[4742,57,4000,61,"password"],[4742,65,4000,69],[4742,67,4000,71,"obj"],[4742,70,4000,74],[4742,71,4000,75,"tenantId"],[4742,79,4000,83],[4742,80,4000,84],[4743,10,4001,12],[4744,8,4002,8],[4745,8,4003,8],[4745,15,4003,15],[4745,19,4003,19],[4746,6,4004,4],[4747,4,4004,5],[4748,2,4004,5],[4748,4,3954,34,"AuthCredential"],[4748,18,3954,48],[4749,2,4053,0],[4750,0,4054,0],[4751,0,4055,0],[4752,0,4056,0],[4753,0,4057,0],[4754,0,4058,0],[4755,0,4059,0],[4756,0,4060,0],[4757,0,4061,0],[4758,0,4062,0],[4759,0,4063,0],[4760,0,4064,0],[4761,0,4065,0],[4762,0,4066,0],[4763,0,4067,0],[4764,0,4068,0],[4765,2,4053,0],[4765,11,4069,15,"signInWithIdp"],[4765,24,4069,28,"signInWithIdp"],[4765,25,4069,28,"_x107"],[4765,30,4069,28],[4765,32,4069,28,"_x108"],[4765,37,4069,28],[4766,4,4069,28],[4766,11,4069,28,"_signInWithIdp"],[4766,25,4069,28],[4766,26,4069,28,"apply"],[4766,31,4069,28],[4766,38,4069,28,"arguments"],[4766,47,4069,28],[4767,2,4069,28],[4768,2,4073,0],[4769,0,4074,0],[4770,0,4075,0],[4771,0,4076,0],[4772,0,4077,0],[4773,0,4078,0],[4774,0,4079,0],[4775,0,4080,0],[4776,0,4081,0],[4777,0,4082,0],[4778,0,4083,0],[4779,0,4084,0],[4780,0,4085,0],[4781,0,4086,0],[4782,0,4087,0],[4783,0,4088,0],[4784,2,4073,0],[4784,11,4073,0,"_signInWithIdp"],[4784,26,4073,0],[4785,4,4073,0,"_signInWithIdp"],[4785,18,4073,0],[4785,21,4073,0,"_asyncToGenerator"],[4785,38,4073,0],[4785,39,4069,0],[4785,50,4069,29,"auth"],[4785,54,4069,33],[4785,56,4069,35,"request"],[4785,63,4069,42],[4785,65,4069,44],[4786,6,4070,4],[4786,13,4070,11,"_performSignInRequest"],[4786,34,4070,32],[4786,35,4070,33,"auth"],[4786,39,4070,37],[4786,41,4070,39],[4786,47,4070,45],[4786,48,4070,46],[4786,71,4070,69],[4786,99,4070,97],[4786,100,4070,98],[4786,133,4070,131,"_addTidIfNecessary"],[4786,151,4070,149],[4786,152,4070,150,"auth"],[4786,156,4070,154],[4786,158,4070,156,"request"],[4786,165,4070,163],[4786,166,4070,164],[4786,167,4070,165],[4787,4,4071,0],[4787,5,4071,1],[4788,4,4071,1],[4788,11,4071,1,"_signInWithIdp"],[4788,25,4071,1],[4788,26,4071,1,"apply"],[4788,31,4071,1],[4788,38,4071,1,"arguments"],[4788,47,4071,1],[4789,2,4071,1],[4790,2,4089,0],[4790,6,4089,6,"IDP_REQUEST_URI$1"],[4790,23,4089,23],[4790,26,4089,26],[4790,44,4089,44],[4791,2,4090,0],[4792,0,4091,0],[4793,0,4092,0],[4794,0,4093,0],[4795,0,4094,0],[4796,0,4095,0],[4797,0,4096,0],[4798,0,4097,0],[4799,2,4090,0],[4799,6,4098,6,"OAuthCredential"],[4799,21,4098,21],[4799,47,4098,21,"_AuthCredential2"],[4799,63,4098,21],[4800,4,4099,4],[4800,13,4099,4,"OAuthCredential"],[4800,29,4099,4],[4800,31,4099,18],[4801,6,4099,18],[4801,10,4099,18,"_this7"],[4801,16,4099,18],[4802,6,4099,18,"_classCallCheck"],[4802,21,4099,18],[4802,28,4099,18,"OAuthCredential"],[4802,43,4099,18],[4803,6,4100,8,"_this7"],[4803,12,4100,8],[4803,15,4100,8,"_callSuper"],[4803,25,4100,8],[4803,32,4100,8,"OAuthCredential"],[4803,47,4100,8],[4803,49,4100,17,"arguments"],[4803,58,4100,26],[4804,6,4101,8,"_this7"],[4804,12,4101,8],[4804,13,4101,13,"pendingToken"],[4804,25,4101,25],[4804,28,4101,28],[4804,32,4101,32],[4805,6,4101,33],[4805,13,4101,33,"_this7"],[4805,19,4101,33],[4806,4,4102,4],[4807,4,4103,4],[4808,4,4103,4,"_inherits"],[4808,13,4103,4],[4808,14,4103,4,"OAuthCredential"],[4808,29,4103,4],[4808,31,4103,4,"_AuthCredential2"],[4808,47,4103,4],[4809,4,4103,4],[4809,11,4103,4,"_createClass"],[4809,23,4103,4],[4809,24,4103,4,"OAuthCredential"],[4809,39,4103,4],[4810,6,4103,4,"key"],[4810,9,4103,4],[4811,6,4103,4,"value"],[4811,11,4103,4],[4811,13,4132,4],[4812,6,4133,4],[4812,15,4133,4,"toJSON"],[4812,21,4133,10,"toJSON"],[4812,22,4133,10],[4812,24,4133,13],[4813,8,4134,8],[4813,15,4134,15],[4814,10,4135,12,"idToken"],[4814,17,4135,19],[4814,19,4135,21],[4814,23,4135,25],[4814,24,4135,26,"idToken"],[4814,31,4135,33],[4815,10,4136,12,"accessToken"],[4815,21,4136,23],[4815,23,4136,25],[4815,27,4136,29],[4815,28,4136,30,"accessToken"],[4815,39,4136,41],[4816,10,4137,12,"secret"],[4816,16,4137,18],[4816,18,4137,20],[4816,22,4137,24],[4816,23,4137,25,"secret"],[4816,29,4137,31],[4817,10,4138,12,"nonce"],[4817,15,4138,17],[4817,17,4138,19],[4817,21,4138,23],[4817,22,4138,24,"nonce"],[4817,27,4138,29],[4818,10,4139,12,"pendingToken"],[4818,22,4139,24],[4818,24,4139,26],[4818,28,4139,30],[4818,29,4139,31,"pendingToken"],[4818,41,4139,43],[4819,10,4140,12,"providerId"],[4819,20,4140,22],[4819,22,4140,24],[4819,26,4140,28],[4819,27,4140,29,"providerId"],[4819,37,4140,39],[4820,10,4141,12,"signInMethod"],[4820,22,4141,24],[4820,24,4141,26],[4820,28,4141,30],[4820,29,4141,31,"signInMethod"],[4821,8,4142,8],[4821,9,4142,9],[4822,6,4143,4],[4823,6,4144,4],[4824,0,4145,0],[4825,0,4146,0],[4826,0,4147,0],[4827,0,4148,0],[4828,0,4149,0],[4829,0,4150,0],[4830,0,4151,0],[4831,0,4152,0],[4832,4,4144,4],[4833,6,4144,4,"key"],[4833,9,4144,4],[4834,6,4144,4,"value"],[4834,11,4144,4],[4834,13,4167,4],[4835,6,4168,4],[4835,15,4168,4,"_getIdTokenResponse"],[4835,34,4168,23,"_getIdTokenResponse"],[4835,35,4168,24,"auth"],[4835,39,4168,28],[4835,41,4168,30],[4836,8,4169,8],[4836,12,4169,14,"request"],[4836,19,4169,21],[4836,22,4169,24],[4836,26,4169,28],[4836,27,4169,29,"buildRequest"],[4836,39,4169,41],[4836,40,4169,42],[4836,41,4169,43],[4837,8,4170,8],[4837,15,4170,15,"signInWithIdp"],[4837,28,4170,28],[4837,29,4170,29,"auth"],[4837,33,4170,33],[4837,35,4170,35,"request"],[4837,42,4170,42],[4837,43,4170,43],[4838,6,4171,4],[4839,6,4172,4],[4840,4,4172,4],[4841,6,4172,4,"key"],[4841,9,4172,4],[4842,6,4172,4,"value"],[4842,11,4172,4],[4842,13,4173,4],[4842,22,4173,4,"_linkToIdToken"],[4842,36,4173,18,"_linkToIdToken"],[4842,37,4173,19,"auth"],[4842,41,4173,23],[4842,43,4173,25,"idToken"],[4842,50,4173,32],[4842,52,4173,34],[4843,8,4174,8],[4843,12,4174,14,"request"],[4843,19,4174,21],[4843,22,4174,24],[4843,26,4174,28],[4843,27,4174,29,"buildRequest"],[4843,39,4174,41],[4843,40,4174,42],[4843,41,4174,43],[4844,8,4175,8,"request"],[4844,15,4175,15],[4844,16,4175,16,"idToken"],[4844,23,4175,23],[4844,26,4175,26,"idToken"],[4844,33,4175,33],[4845,8,4176,8],[4845,15,4176,15,"signInWithIdp"],[4845,28,4176,28],[4845,29,4176,29,"auth"],[4845,33,4176,33],[4845,35,4176,35,"request"],[4845,42,4176,42],[4845,43,4176,43],[4846,6,4177,4],[4847,6,4178,4],[4848,4,4178,4],[4849,6,4178,4,"key"],[4849,9,4178,4],[4850,6,4178,4,"value"],[4850,11,4178,4],[4850,13,4179,4],[4850,22,4179,4,"_getReauthenticationResolver"],[4850,50,4179,32,"_getReauthenticationResolver"],[4850,51,4179,33,"auth"],[4850,55,4179,37],[4850,57,4179,39],[4851,8,4180,8],[4851,12,4180,14,"request"],[4851,19,4180,21],[4851,22,4180,24],[4851,26,4180,28],[4851,27,4180,29,"buildRequest"],[4851,39,4180,41],[4851,40,4180,42],[4851,41,4180,43],[4852,8,4181,8,"request"],[4852,15,4181,15],[4852,16,4181,16,"autoCreate"],[4852,26,4181,26],[4852,29,4181,29],[4852,34,4181,34],[4853,8,4182,8],[4853,15,4182,15,"signInWithIdp"],[4853,28,4182,28],[4853,29,4182,29,"auth"],[4853,33,4182,33],[4853,35,4182,35,"request"],[4853,42,4182,42],[4853,43,4182,43],[4854,6,4183,4],[4855,4,4183,5],[4856,6,4183,5,"key"],[4856,9,4183,5],[4857,6,4183,5,"value"],[4857,11,4183,5],[4857,13,4184,4],[4857,22,4184,4,"buildRequest"],[4857,34,4184,16,"buildRequest"],[4857,35,4184,16],[4857,37,4184,19],[4858,8,4185,8],[4858,12,4185,14,"request"],[4858,19,4185,21],[4858,22,4185,24],[4859,10,4186,12,"requestUri"],[4859,20,4186,22],[4859,22,4186,24,"IDP_REQUEST_URI$1"],[4859,39,4186,41],[4860,10,4187,12,"returnSecureToken"],[4860,27,4187,29],[4860,29,4187,31],[4861,8,4188,8],[4861,9,4188,9],[4862,8,4189,8],[4862,12,4189,12],[4862,16,4189,16],[4862,17,4189,17,"pendingToken"],[4862,29,4189,29],[4862,31,4189,31],[4863,10,4190,12,"request"],[4863,17,4190,19],[4863,18,4190,20,"pendingToken"],[4863,30,4190,32],[4863,33,4190,35],[4863,37,4190,39],[4863,38,4190,40,"pendingToken"],[4863,50,4190,52],[4864,8,4191,8],[4864,9,4191,9],[4864,15,4192,13],[4865,10,4193,12],[4865,14,4193,18,"postBody"],[4865,22,4193,26],[4865,25,4193,29],[4865,26,4193,30],[4865,27,4193,31],[4866,10,4194,12],[4866,14,4194,16],[4866,18,4194,20],[4866,19,4194,21,"idToken"],[4866,26,4194,28],[4866,28,4194,30],[4867,12,4195,16,"postBody"],[4867,20,4195,24],[4867,21,4195,25],[4867,31,4195,35],[4867,32,4195,36],[4867,35,4195,39],[4867,39,4195,43],[4867,40,4195,44,"idToken"],[4867,47,4195,51],[4868,10,4196,12],[4869,10,4197,12],[4869,14,4197,16],[4869,18,4197,20],[4869,19,4197,21,"accessToken"],[4869,30,4197,32],[4869,32,4197,34],[4870,12,4198,16,"postBody"],[4870,20,4198,24],[4870,21,4198,25],[4870,35,4198,39],[4870,36,4198,40],[4870,39,4198,43],[4870,43,4198,47],[4870,44,4198,48,"accessToken"],[4870,55,4198,59],[4871,10,4199,12],[4872,10,4200,12],[4872,14,4200,16],[4872,18,4200,20],[4872,19,4200,21,"secret"],[4872,25,4200,27],[4872,27,4200,29],[4873,12,4201,16,"postBody"],[4873,20,4201,24],[4873,21,4201,25],[4873,41,4201,45],[4873,42,4201,46],[4873,45,4201,49],[4873,49,4201,53],[4873,50,4201,54,"secret"],[4873,56,4201,60],[4874,10,4202,12],[4875,10,4203,12,"postBody"],[4875,18,4203,20],[4875,19,4203,21],[4875,31,4203,33],[4875,32,4203,34],[4875,35,4203,37],[4875,39,4203,41],[4875,40,4203,42,"providerId"],[4875,50,4203,52],[4876,10,4204,12],[4876,14,4204,16],[4876,18,4204,20],[4876,19,4204,21,"nonce"],[4876,24,4204,26],[4876,28,4204,30],[4876,29,4204,31],[4876,33,4204,35],[4876,34,4204,36,"pendingToken"],[4876,46,4204,48],[4876,48,4204,50],[4877,12,4205,16,"postBody"],[4877,20,4205,24],[4877,21,4205,25],[4877,28,4205,32],[4877,29,4205,33],[4877,32,4205,36],[4877,36,4205,40],[4877,37,4205,41,"nonce"],[4877,42,4205,46],[4878,10,4206,12],[4879,10,4207,12,"request"],[4879,17,4207,19],[4879,18,4207,20,"postBody"],[4879,26,4207,28],[4879,29,4207,31,"util"],[4879,33,4207,35],[4879,34,4207,36,"querystring"],[4879,45,4207,47],[4879,46,4207,48,"postBody"],[4879,54,4207,56],[4879,55,4207,57],[4880,8,4208,8],[4881,8,4209,8],[4881,15,4209,15,"request"],[4881,22,4209,22],[4882,6,4210,4],[4883,4,4210,5],[4884,6,4210,5,"key"],[4884,9,4210,5],[4885,6,4210,5,"value"],[4885,11,4210,5],[4885,13,4104,4],[4885,22,4104,11,"_fromParams"],[4885,33,4104,22,"_fromParams"],[4885,34,4104,23,"params"],[4885,40,4104,29],[4885,42,4104,31],[4886,8,4105,8],[4886,12,4105,14,"cred"],[4886,16,4105,18],[4886,19,4105,21],[4886,23,4105,25,"OAuthCredential"],[4886,38,4105,40],[4886,39,4105,41,"params"],[4886,45,4105,47],[4886,46,4105,48,"providerId"],[4886,56,4105,58],[4886,58,4105,60,"params"],[4886,64,4105,66],[4886,65,4105,67,"signInMethod"],[4886,77,4105,79],[4886,78,4105,80],[4887,8,4106,8],[4887,12,4106,12,"params"],[4887,18,4106,18],[4887,19,4106,19,"idToken"],[4887,26,4106,26],[4887,30,4106,30,"params"],[4887,36,4106,36],[4887,37,4106,37,"accessToken"],[4887,48,4106,48],[4887,50,4106,50],[4888,10,4107,12],[4889,10,4108,12],[4889,14,4108,16,"params"],[4889,20,4108,22],[4889,21,4108,23,"idToken"],[4889,28,4108,30],[4889,30,4108,32],[4890,12,4109,16,"cred"],[4890,16,4109,20],[4890,17,4109,21,"idToken"],[4890,24,4109,28],[4890,27,4109,31,"params"],[4890,33,4109,37],[4890,34,4109,38,"idToken"],[4890,41,4109,45],[4891,10,4110,12],[4892,10,4111,12],[4892,14,4111,16,"params"],[4892,20,4111,22],[4892,21,4111,23,"accessToken"],[4892,32,4111,34],[4892,34,4111,36],[4893,12,4112,16,"cred"],[4893,16,4112,20],[4893,17,4112,21,"accessToken"],[4893,28,4112,32],[4893,31,4112,35,"params"],[4893,37,4112,41],[4893,38,4112,42,"accessToken"],[4893,49,4112,53],[4894,10,4113,12],[4895,10,4114,12],[4896,10,4115,12],[4896,14,4115,16,"params"],[4896,20,4115,22],[4896,21,4115,23,"nonce"],[4896,26,4115,28],[4896,30,4115,32],[4896,31,4115,33,"params"],[4896,37,4115,39],[4896,38,4115,40,"pendingToken"],[4896,50,4115,52],[4896,52,4115,54],[4897,12,4116,16,"cred"],[4897,16,4116,20],[4897,17,4116,21,"nonce"],[4897,22,4116,26],[4897,25,4116,29,"params"],[4897,31,4116,35],[4897,32,4116,36,"nonce"],[4897,37,4116,41],[4898,10,4117,12],[4899,10,4118,12],[4899,14,4118,16,"params"],[4899,20,4118,22],[4899,21,4118,23,"pendingToken"],[4899,33,4118,35],[4899,35,4118,37],[4900,12,4119,16,"cred"],[4900,16,4119,20],[4900,17,4119,21,"pendingToken"],[4900,29,4119,33],[4900,32,4119,36,"params"],[4900,38,4119,42],[4900,39,4119,43,"pendingToken"],[4900,51,4119,55],[4901,10,4120,12],[4902,8,4121,8],[4902,9,4121,9],[4902,15,4122,13],[4902,19,4122,17,"params"],[4902,25,4122,23],[4902,26,4122,24,"oauthToken"],[4902,36,4122,34],[4902,40,4122,38,"params"],[4902,46,4122,44],[4902,47,4122,45,"oauthTokenSecret"],[4902,63,4122,61],[4902,65,4122,63],[4903,10,4123,12],[4904,10,4124,12,"cred"],[4904,14,4124,16],[4904,15,4124,17,"accessToken"],[4904,26,4124,28],[4904,29,4124,31,"params"],[4904,35,4124,37],[4904,36,4124,38,"oauthToken"],[4904,46,4124,48],[4905,10,4125,12,"cred"],[4905,14,4125,16],[4905,15,4125,17,"secret"],[4905,21,4125,23],[4905,24,4125,26,"params"],[4905,30,4125,32],[4905,31,4125,33,"oauthTokenSecret"],[4905,47,4125,49],[4906,8,4126,8],[4906,9,4126,9],[4906,15,4127,13],[4907,10,4128,12,"_fail"],[4907,15,4128,17],[4907,16,4128,18],[4907,32,4128,34],[4907,33,4128,35],[4907,67,4128,69],[4907,68,4128,70],[4908,8,4129,8],[4909,8,4130,8],[4909,15,4130,15,"cred"],[4909,19,4130,19],[4910,6,4131,4],[4911,4,4131,5],[4912,6,4131,5,"key"],[4912,9,4131,5],[4913,6,4131,5,"value"],[4913,11,4131,5],[4913,13,4153,4],[4913,22,4153,11,"fromJSON"],[4913,30,4153,19,"fromJSON"],[4913,31,4153,20,"json"],[4913,35,4153,24],[4913,37,4153,26],[4914,8,4154,8],[4914,12,4154,14,"obj"],[4914,15,4154,17],[4914,18,4154,20],[4914,25,4154,27,"json"],[4914,29,4154,31],[4914,34,4154,36],[4914,42,4154,44],[4914,45,4154,47,"JSON"],[4914,49,4154,51],[4914,50,4154,52,"parse"],[4914,55,4154,57],[4914,56,4154,58,"json"],[4914,60,4154,62],[4914,61,4154,63],[4914,64,4154,66,"json"],[4914,68,4154,70],[4915,8,4155,8],[4915,12,4155,16,"providerId"],[4915,22,4155,26],[4915,25,4155,54,"obj"],[4915,28,4155,57],[4915,29,4155,16,"providerId"],[4915,39,4155,26],[4916,10,4155,28,"signInMethod"],[4916,22,4155,40],[4916,25,4155,54,"obj"],[4916,28,4155,57],[4916,29,4155,28,"signInMethod"],[4916,41,4155,40],[4917,10,4155,45,"rest"],[4917,14,4155,49],[4917,17,4155,49,"_objectWithoutProperties"],[4917,41,4155,49],[4917,42,4155,54,"obj"],[4917,45,4155,57],[4917,47,4155,57,"_excluded3"],[4917,57,4155,57],[4918,8,4156,8],[4918,12,4156,12],[4918,13,4156,13,"providerId"],[4918,23,4156,23],[4918,27,4156,27],[4918,28,4156,28,"signInMethod"],[4918,40,4156,40],[4918,42,4156,42],[4919,10,4157,12],[4919,17,4157,19],[4919,21,4157,23],[4920,8,4158,8],[4921,8,4159,8],[4921,12,4159,14,"cred"],[4921,16,4159,18],[4921,19,4159,21],[4921,23,4159,25,"OAuthCredential"],[4921,38,4159,40],[4921,39,4159,41,"providerId"],[4921,49,4159,51],[4921,51,4159,53,"signInMethod"],[4921,63,4159,65],[4921,64,4159,66],[4922,8,4160,8,"cred"],[4922,12,4160,12],[4922,13,4160,13,"idToken"],[4922,20,4160,20],[4922,23,4160,23,"rest"],[4922,27,4160,27],[4922,28,4160,28,"idToken"],[4922,35,4160,35],[4922,39,4160,39,"undefined"],[4922,48,4160,48],[4923,8,4161,8,"cred"],[4923,12,4161,12],[4923,13,4161,13,"accessToken"],[4923,24,4161,24],[4923,27,4161,27,"rest"],[4923,31,4161,31],[4923,32,4161,32,"accessToken"],[4923,43,4161,43],[4923,47,4161,47,"undefined"],[4923,56,4161,56],[4924,8,4162,8,"cred"],[4924,12,4162,12],[4924,13,4162,13,"secret"],[4924,19,4162,19],[4924,22,4162,22,"rest"],[4924,26,4162,26],[4924,27,4162,27,"secret"],[4924,33,4162,33],[4925,8,4163,8,"cred"],[4925,12,4163,12],[4925,13,4163,13,"nonce"],[4925,18,4163,18],[4925,21,4163,21,"rest"],[4925,25,4163,25],[4925,26,4163,26,"nonce"],[4925,31,4163,31],[4926,8,4164,8,"cred"],[4926,12,4164,12],[4926,13,4164,13,"pendingToken"],[4926,25,4164,25],[4926,28,4164,28,"rest"],[4926,32,4164,32],[4926,33,4164,33,"pendingToken"],[4926,45,4164,45],[4926,49,4164,49],[4926,53,4164,53],[4927,8,4165,8],[4927,15,4165,15,"cred"],[4927,19,4165,19],[4928,6,4166,4],[4929,4,4166,5],[4930,2,4166,5],[4930,4,4098,30,"AuthCredential"],[4930,18,4098,44],[4931,2,4213,0],[4932,0,4214,0],[4933,0,4215,0],[4934,0,4216,0],[4935,0,4217,0],[4936,0,4218,0],[4937,0,4219,0],[4938,0,4220,0],[4939,0,4221,0],[4940,0,4222,0],[4941,0,4223,0],[4942,0,4224,0],[4943,0,4225,0],[4944,0,4226,0],[4945,0,4227,0],[4946,0,4228,0],[4947,2,4213,0],[4947,11,4229,15,"sendPhoneVerificationCode"],[4947,36,4229,40,"sendPhoneVerificationCode"],[4947,37,4229,40,"_x109"],[4947,42,4229,40],[4947,44,4229,40,"_x110"],[4947,49,4229,40],[4948,4,4229,40],[4948,11,4229,40,"_sendPhoneVerificationCode"],[4948,37,4229,40],[4948,38,4229,40,"apply"],[4948,43,4229,40],[4948,50,4229,40,"arguments"],[4948,59,4229,40],[4949,2,4229,40],[4950,2,4229,40],[4950,11,4229,40,"_sendPhoneVerificationCode"],[4950,38,4229,40],[4951,4,4229,40,"_sendPhoneVerificationCode"],[4951,30,4229,40],[4951,33,4229,40,"_asyncToGenerator"],[4951,50,4229,40],[4951,51,4229,0],[4951,62,4229,41,"auth"],[4951,66,4229,45],[4951,68,4229,47,"request"],[4951,75,4229,54],[4951,77,4229,56],[4952,6,4230,4],[4952,13,4230,11,"_performApiRequest"],[4952,31,4230,29],[4952,32,4230,30,"auth"],[4952,36,4230,34],[4952,38,4230,36],[4952,44,4230,42],[4952,45,4230,43],[4952,68,4230,66],[4952,103,4230,101],[4952,104,4230,102],[4952,143,4230,141,"_addTidIfNecessary"],[4952,161,4230,159],[4952,162,4230,160,"auth"],[4952,166,4230,164],[4952,168,4230,166,"request"],[4952,175,4230,173],[4952,176,4230,174],[4952,177,4230,175],[4953,4,4231,0],[4953,5,4231,1],[4954,4,4231,1],[4954,11,4231,1,"_sendPhoneVerificationCode"],[4954,37,4231,1],[4954,38,4231,1,"apply"],[4954,43,4231,1],[4954,50,4231,1,"arguments"],[4954,59,4231,1],[4955,2,4231,1],[4956,2,4231,1],[4956,11,4232,15,"signInWithPhoneNumber$1"],[4956,34,4232,38,"signInWithPhoneNumber$1"],[4956,35,4232,38,"_x111"],[4956,40,4232,38],[4956,42,4232,38,"_x112"],[4956,47,4232,38],[4957,4,4232,38],[4957,11,4232,38,"_signInWithPhoneNumber$"],[4957,34,4232,38],[4957,35,4232,38,"apply"],[4957,40,4232,38],[4957,47,4232,38,"arguments"],[4957,56,4232,38],[4958,2,4232,38],[4959,2,4232,38],[4959,11,4232,38,"_signInWithPhoneNumber$"],[4959,35,4232,38],[4960,4,4232,38,"_signInWithPhoneNumber$"],[4960,27,4232,38],[4960,30,4232,38,"_asyncToGenerator"],[4960,47,4232,38],[4960,48,4232,0],[4960,59,4232,39,"auth"],[4960,63,4232,43],[4960,65,4232,45,"request"],[4960,72,4232,52],[4960,74,4232,54],[4961,6,4233,4],[4961,13,4233,11,"_performSignInRequest"],[4961,34,4233,32],[4961,35,4233,33,"auth"],[4961,39,4233,37],[4961,41,4233,39],[4961,47,4233,45],[4961,48,4233,46],[4961,71,4233,69],[4961,107,4233,105],[4961,108,4233,106],[4961,150,4233,148,"_addTidIfNecessary"],[4961,168,4233,166],[4961,169,4233,167,"auth"],[4961,173,4233,171],[4961,175,4233,173,"request"],[4961,182,4233,180],[4961,183,4233,181],[4961,184,4233,182],[4962,4,4234,0],[4962,5,4234,1],[4963,4,4234,1],[4963,11,4234,1,"_signInWithPhoneNumber$"],[4963,34,4234,1],[4963,35,4234,1,"apply"],[4963,40,4234,1],[4963,47,4234,1,"arguments"],[4963,56,4234,1],[4964,2,4234,1],[4965,2,4234,1],[4965,11,4235,15,"linkWithPhoneNumber$1"],[4965,32,4235,36,"linkWithPhoneNumber$1"],[4965,33,4235,36,"_x113"],[4965,38,4235,36],[4965,40,4235,36,"_x114"],[4965,45,4235,36],[4966,4,4235,36],[4966,11,4235,36,"_linkWithPhoneNumber$"],[4966,32,4235,36],[4966,33,4235,36,"apply"],[4966,38,4235,36],[4966,45,4235,36,"arguments"],[4966,54,4235,36],[4967,2,4235,36],[4968,2,4235,36],[4968,11,4235,36,"_linkWithPhoneNumber$"],[4968,33,4235,36],[4969,4,4235,36,"_linkWithPhoneNumber$"],[4969,25,4235,36],[4969,28,4235,36,"_asyncToGenerator"],[4969,45,4235,36],[4969,46,4235,0],[4969,57,4235,37,"auth"],[4969,61,4235,41],[4969,63,4235,43,"request"],[4969,70,4235,50],[4969,72,4235,52],[4970,6,4236,4],[4970,10,4236,10,"response"],[4970,18,4236,18],[4970,27,4236,27,"_performSignInRequest"],[4970,48,4236,48],[4970,49,4236,49,"auth"],[4970,53,4236,53],[4970,55,4236,55],[4970,61,4236,61],[4970,62,4236,62],[4970,85,4236,85],[4970,121,4236,121],[4970,122,4236,122],[4970,164,4236,164,"_addTidIfNecessary"],[4970,182,4236,182],[4970,183,4236,183,"auth"],[4970,187,4236,187],[4970,189,4236,189,"request"],[4970,196,4236,196],[4970,197,4236,197],[4970,198,4236,198],[4971,6,4237,4],[4971,10,4237,8,"response"],[4971,18,4237,16],[4971,19,4237,17,"temporaryProof"],[4971,33,4237,31],[4971,35,4237,33],[4972,8,4238,8],[4972,14,4238,14,"_makeTaggedError"],[4972,30,4238,30],[4972,31,4238,31,"auth"],[4972,35,4238,35],[4972,37,4238,37],[4972,79,4238,79],[4972,80,4238,80],[4972,119,4238,119,"response"],[4972,127,4238,127],[4972,128,4238,128],[4973,6,4239,4],[4974,6,4240,4],[4974,13,4240,11,"response"],[4974,21,4240,19],[4975,4,4241,0],[4975,5,4241,1],[4976,4,4241,1],[4976,11,4241,1,"_linkWithPhoneNumber$"],[4976,32,4241,1],[4976,33,4241,1,"apply"],[4976,38,4241,1],[4976,45,4241,1,"arguments"],[4976,54,4241,1],[4977,2,4241,1],[4978,2,4242,0],[4978,6,4242,6,"VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_"],[4978,49,4242,49],[4978,52,4242,52],[4979,4,4243,4],[4979,5,4243,5],[4979,21,4243,21],[4979,22,4243,22],[4979,57,4243,57],[4979,73,4243,73],[4979,74,4243,74],[4980,2,4244,0],[4980,3,4244,1],[4981,2,4244,2],[4981,11,4245,15,"verifyPhoneNumberForExisting"],[4981,39,4245,43,"verifyPhoneNumberForExisting"],[4981,40,4245,43,"_x115"],[4981,45,4245,43],[4981,47,4245,43,"_x116"],[4981,52,4245,43],[4982,4,4245,43],[4982,11,4245,43,"_verifyPhoneNumberForExisting"],[4982,40,4245,43],[4982,41,4245,43,"apply"],[4982,46,4245,43],[4982,53,4245,43,"arguments"],[4982,62,4245,43],[4983,2,4245,43],[4984,2,4253,0],[4985,0,4254,0],[4986,0,4255,0],[4987,0,4256,0],[4988,0,4257,0],[4989,0,4258,0],[4990,0,4259,0],[4991,0,4260,0],[4992,0,4261,0],[4993,0,4262,0],[4994,0,4263,0],[4995,0,4264,0],[4996,0,4265,0],[4997,0,4266,0],[4998,0,4267,0],[4999,0,4268,0],[5000,2,4269,0],[5001,0,4270,0],[5002,0,4271,0],[5003,0,4272,0],[5004,0,4273,0],[5005,2,4269,0],[5005,11,4269,0,"_verifyPhoneNumberForExisting"],[5005,41,4269,0],[5006,4,4269,0,"_verifyPhoneNumberForExisting"],[5006,33,4269,0],[5006,36,4269,0,"_asyncToGenerator"],[5006,53,4269,0],[5006,54,4245,0],[5006,65,4245,44,"auth"],[5006,69,4245,48],[5006,71,4245,50,"request"],[5006,78,4245,57],[5006,80,4245,59],[5007,6,4246,4],[5007,10,4246,10,"apiRequest"],[5007,20,4246,20],[5007,23,4246,23],[5008,8,4247,8],[5008,11,4247,11,"request"],[5008,18,4247,18],[5009,8,4248,8,"operation"],[5009,17,4248,17],[5009,19,4248,19],[5010,6,4249,4],[5010,7,4249,5],[5011,6,4250,4],[5011,13,4250,11,"_performSignInRequest"],[5011,34,4250,32],[5011,35,4250,33,"auth"],[5011,39,4250,37],[5011,41,4250,39],[5011,47,4250,45],[5011,48,4250,46],[5011,71,4250,69],[5011,107,4250,105],[5011,108,4250,106],[5011,150,4250,148,"_addTidIfNecessary"],[5011,168,4250,166],[5011,169,4250,167,"auth"],[5011,173,4250,171],[5011,175,4250,173,"apiRequest"],[5011,185,4250,183],[5011,186,4250,184],[5011,188,4250,186,"VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_"],[5011,231,4250,229],[5011,232,4250,230],[5012,4,4251,0],[5012,5,4251,1],[5013,4,4251,1],[5013,11,4251,1,"_verifyPhoneNumberForExisting"],[5013,40,4251,1],[5013,41,4251,1,"apply"],[5013,46,4251,1],[5013,53,4251,1,"arguments"],[5013,62,4251,1],[5014,2,4251,1],[5015,2,4251,1],[5015,6,4274,6,"PhoneAuthCredential"],[5015,25,4274,25],[5015,51,4274,25,"_AuthCredential3"],[5015,67,4274,25],[5016,4,4275,4],[5016,13,4275,4,"PhoneAuthCredential"],[5016,33,4275,16,"params"],[5016,39,4275,22],[5016,41,4275,24],[5017,6,4275,24],[5017,10,4275,24,"_this8"],[5017,16,4275,24],[5018,6,4275,24,"_classCallCheck"],[5018,21,4275,24],[5018,28,4275,24,"PhoneAuthCredential"],[5018,47,4275,24],[5019,6,4276,8,"_this8"],[5019,12,4276,8],[5019,15,4276,8,"_callSuper"],[5019,25,4276,8],[5019,32,4276,8,"PhoneAuthCredential"],[5019,51,4276,8],[5019,54,4276,14],[5019,61,4276,21],[5019,62,4276,22],[5019,86,4276,46],[5019,93,4276,53],[5019,94,4276,54],[5020,6,4277,8,"_this8"],[5020,12,4277,8],[5020,13,4277,13,"params"],[5020,19,4277,19],[5020,22,4277,22,"params"],[5020,28,4277,28],[5021,6,4277,29],[5021,13,4277,29,"_this8"],[5021,19,4277,29],[5022,4,4278,4],[5023,4,4279,4],[5024,4,4279,4,"_inherits"],[5024,13,4279,4],[5024,14,4279,4,"PhoneAuthCredential"],[5024,33,4279,4],[5024,35,4279,4,"_AuthCredential3"],[5024,51,4279,4],[5025,4,4279,4],[5025,11,4279,4,"_createClass"],[5025,23,4279,4],[5025,24,4279,4,"PhoneAuthCredential"],[5025,43,4279,4],[5026,6,4279,4,"key"],[5026,9,4279,4],[5027,6,4279,4,"value"],[5027,11,4279,4],[5027,13,4287,4],[5028,6,4288,4],[5028,15,4288,4,"_getIdTokenResponse"],[5028,34,4288,23,"_getIdTokenResponse"],[5028,35,4288,24,"auth"],[5028,39,4288,28],[5028,41,4288,30],[5029,8,4289,8],[5029,15,4289,15,"signInWithPhoneNumber$1"],[5029,38,4289,38],[5029,39,4289,39,"auth"],[5029,43,4289,43],[5029,45,4289,45],[5029,49,4289,49],[5029,50,4289,50,"_makeVerificationRequest"],[5029,74,4289,74],[5029,75,4289,75],[5029,76,4289,76],[5029,77,4289,77],[5030,6,4290,4],[5031,6,4291,4],[5032,4,4291,4],[5033,6,4291,4,"key"],[5033,9,4291,4],[5034,6,4291,4,"value"],[5034,11,4291,4],[5034,13,4292,4],[5034,22,4292,4,"_linkToIdToken"],[5034,36,4292,18,"_linkToIdToken"],[5034,37,4292,19,"auth"],[5034,41,4292,23],[5034,43,4292,25,"idToken"],[5034,50,4292,32],[5034,52,4292,34],[5035,8,4293,8],[5035,15,4293,15,"linkWithPhoneNumber$1"],[5035,36,4293,36],[5035,37,4293,37,"auth"],[5035,41,4293,41],[5035,43,4293,43],[5036,10,4294,12,"idToken"],[5036,17,4294,19],[5037,10,4295,12],[5037,13,4295,15],[5037,17,4295,19],[5037,18,4295,20,"_makeVerificationRequest"],[5037,42,4295,44],[5037,43,4295,45],[5038,8,4296,8],[5038,9,4296,9],[5038,10,4296,10],[5039,6,4297,4],[5040,6,4298,4],[5041,4,4298,4],[5042,6,4298,4,"key"],[5042,9,4298,4],[5043,6,4298,4,"value"],[5043,11,4298,4],[5043,13,4299,4],[5043,22,4299,4,"_getReauthenticationResolver"],[5043,50,4299,32,"_getReauthenticationResolver"],[5043,51,4299,33,"auth"],[5043,55,4299,37],[5043,57,4299,39],[5044,8,4300,8],[5044,15,4300,15,"verifyPhoneNumberForExisting"],[5044,43,4300,43],[5044,44,4300,44,"auth"],[5044,48,4300,48],[5044,50,4300,50],[5044,54,4300,54],[5044,55,4300,55,"_makeVerificationRequest"],[5044,79,4300,79],[5044,80,4300,80],[5044,81,4300,81],[5044,82,4300,82],[5045,6,4301,4],[5046,6,4302,4],[5047,4,4302,4],[5048,6,4302,4,"key"],[5048,9,4302,4],[5049,6,4302,4,"value"],[5049,11,4302,4],[5049,13,4303,4],[5049,22,4303,4,"_makeVerificationRequest"],[5049,46,4303,28,"_makeVerificationRequest"],[5049,47,4303,28],[5049,49,4303,31],[5050,8,4304,8],[5050,12,4304,8,"_this$params2"],[5050,25,4304,8],[5050,28,4304,82],[5050,32,4304,86],[5050,33,4304,87,"params"],[5050,39,4304,93],[5051,10,4304,16,"temporaryProof"],[5051,24,4304,30],[5051,27,4304,30,"_this$params2"],[5051,40,4304,30],[5051,41,4304,16,"temporaryProof"],[5051,55,4304,30],[5052,10,4304,32,"phoneNumber"],[5052,21,4304,43],[5052,24,4304,43,"_this$params2"],[5052,37,4304,43],[5052,38,4304,32,"phoneNumber"],[5052,49,4304,43],[5053,10,4304,45,"verificationId"],[5053,24,4304,59],[5053,27,4304,59,"_this$params2"],[5053,40,4304,59],[5053,41,4304,45,"verificationId"],[5053,55,4304,59],[5054,10,4304,61,"verificationCode"],[5054,26,4304,77],[5054,29,4304,77,"_this$params2"],[5054,42,4304,77],[5054,43,4304,61,"verificationCode"],[5054,59,4304,77],[5055,8,4305,8],[5055,12,4305,12,"temporaryProof"],[5055,26,4305,26],[5055,30,4305,30,"phoneNumber"],[5055,41,4305,41],[5055,43,4305,43],[5056,10,4306,12],[5056,17,4306,19],[5057,12,4306,21,"temporaryProof"],[5057,26,4306,35],[5058,12,4306,37,"phoneNumber"],[5059,10,4306,49],[5059,11,4306,50],[5060,8,4307,8],[5061,8,4308,8],[5061,15,4308,15],[5062,10,4309,12,"sessionInfo"],[5062,21,4309,23],[5062,23,4309,25,"verificationId"],[5062,37,4309,39],[5063,10,4310,12,"code"],[5063,14,4310,16],[5063,16,4310,18,"verificationCode"],[5064,8,4311,8],[5064,9,4311,9],[5065,6,4312,4],[5066,6,4313,4],[5067,4,4313,4],[5068,6,4313,4,"key"],[5068,9,4313,4],[5069,6,4313,4,"value"],[5069,11,4313,4],[5069,13,4314,4],[5069,22,4314,4,"toJSON"],[5069,28,4314,10,"toJSON"],[5069,29,4314,10],[5069,31,4314,13],[5070,8,4315,8],[5070,12,4315,14,"obj"],[5070,15,4315,17],[5070,18,4315,20],[5071,10,4316,12,"providerId"],[5071,20,4316,22],[5071,22,4316,24],[5071,26,4316,28],[5071,27,4316,29,"providerId"],[5072,8,4317,8],[5072,9,4317,9],[5073,8,4318,8],[5073,12,4318,12],[5073,16,4318,16],[5073,17,4318,17,"params"],[5073,23,4318,23],[5073,24,4318,24,"phoneNumber"],[5073,35,4318,35],[5073,37,4318,37],[5074,10,4319,12,"obj"],[5074,13,4319,15],[5074,14,4319,16,"phoneNumber"],[5074,25,4319,27],[5074,28,4319,30],[5074,32,4319,34],[5074,33,4319,35,"params"],[5074,39,4319,41],[5074,40,4319,42,"phoneNumber"],[5074,51,4319,53],[5075,8,4320,8],[5076,8,4321,8],[5076,12,4321,12],[5076,16,4321,16],[5076,17,4321,17,"params"],[5076,23,4321,23],[5076,24,4321,24,"temporaryProof"],[5076,38,4321,38],[5076,40,4321,40],[5077,10,4322,12,"obj"],[5077,13,4322,15],[5077,14,4322,16,"temporaryProof"],[5077,28,4322,30],[5077,31,4322,33],[5077,35,4322,37],[5077,36,4322,38,"params"],[5077,42,4322,44],[5077,43,4322,45,"temporaryProof"],[5077,57,4322,59],[5078,8,4323,8],[5079,8,4324,8],[5079,12,4324,12],[5079,16,4324,16],[5079,17,4324,17,"params"],[5079,23,4324,23],[5079,24,4324,24,"verificationCode"],[5079,40,4324,40],[5079,42,4324,42],[5080,10,4325,12,"obj"],[5080,13,4325,15],[5080,14,4325,16,"verificationCode"],[5080,30,4325,32],[5080,33,4325,35],[5080,37,4325,39],[5080,38,4325,40,"params"],[5080,44,4325,46],[5080,45,4325,47,"verificationCode"],[5080,61,4325,63],[5081,8,4326,8],[5082,8,4327,8],[5082,12,4327,12],[5082,16,4327,16],[5082,17,4327,17,"params"],[5082,23,4327,23],[5082,24,4327,24,"verificationId"],[5082,38,4327,38],[5082,40,4327,40],[5083,10,4328,12,"obj"],[5083,13,4328,15],[5083,14,4328,16,"verificationId"],[5083,28,4328,30],[5083,31,4328,33],[5083,35,4328,37],[5083,36,4328,38,"params"],[5083,42,4328,44],[5083,43,4328,45,"verificationId"],[5083,57,4328,59],[5084,8,4329,8],[5085,8,4330,8],[5085,15,4330,15,"obj"],[5085,18,4330,18],[5086,6,4331,4],[5087,6,4332,4],[5088,4,4332,4],[5089,6,4332,4,"key"],[5089,9,4332,4],[5090,6,4332,4,"value"],[5090,11,4332,4],[5090,13,4280,4],[5090,22,4280,11,"_fromVerification"],[5090,39,4280,28,"_fromVerification"],[5090,40,4280,29,"verificationId"],[5090,54,4280,43],[5090,56,4280,45,"verificationCode"],[5090,72,4280,61],[5090,74,4280,63],[5091,8,4281,8],[5091,15,4281,15],[5091,19,4281,19,"PhoneAuthCredential"],[5091,38,4281,38],[5091,39,4281,39],[5092,10,4281,41,"verificationId"],[5092,24,4281,55],[5093,10,4281,57,"verificationCode"],[5094,8,4281,74],[5094,9,4281,75],[5094,10,4281,76],[5095,6,4282,4],[5096,6,4283,4],[5097,4,4283,4],[5098,6,4283,4,"key"],[5098,9,4283,4],[5099,6,4283,4,"value"],[5099,11,4283,4],[5099,13,4284,4],[5099,22,4284,11,"_fromTokenResponse"],[5099,40,4284,29,"_fromTokenResponse"],[5099,41,4284,30,"phoneNumber"],[5099,52,4284,41],[5099,54,4284,43,"temporaryProof"],[5099,68,4284,57],[5099,70,4284,59],[5100,8,4285,8],[5100,15,4285,15],[5100,19,4285,19,"PhoneAuthCredential"],[5100,38,4285,38],[5100,39,4285,39],[5101,10,4285,41,"phoneNumber"],[5101,21,4285,52],[5102,10,4285,54,"temporaryProof"],[5103,8,4285,69],[5103,9,4285,70],[5103,10,4285,71],[5104,6,4286,4],[5105,4,4286,5],[5106,6,4286,5,"key"],[5106,9,4286,5],[5107,6,4286,5,"value"],[5107,11,4286,5],[5107,13,4333,4],[5107,22,4333,11,"fromJSON"],[5107,30,4333,19,"fromJSON"],[5107,31,4333,20,"json"],[5107,35,4333,24],[5107,37,4333,26],[5108,8,4334,8],[5108,12,4334,12],[5108,19,4334,19,"json"],[5108,23,4334,23],[5108,28,4334,28],[5108,36,4334,36],[5108,38,4334,38],[5109,10,4335,12,"json"],[5109,14,4335,16],[5109,17,4335,19,"JSON"],[5109,21,4335,23],[5109,22,4335,24,"parse"],[5109,27,4335,29],[5109,28,4335,30,"json"],[5109,32,4335,34],[5109,33,4335,35],[5110,8,4336,8],[5111,8,4337,8],[5111,12,4337,8,"_json"],[5111,17,4337,8],[5111,20,4337,82,"json"],[5111,24,4337,86],[5112,10,4337,16,"verificationId"],[5112,24,4337,30],[5112,27,4337,30,"_json"],[5112,32,4337,30],[5112,33,4337,16,"verificationId"],[5112,47,4337,30],[5113,10,4337,32,"verificationCode"],[5113,26,4337,48],[5113,29,4337,48,"_json"],[5113,34,4337,48],[5113,35,4337,32,"verificationCode"],[5113,51,4337,48],[5114,10,4337,50,"phoneNumber"],[5114,21,4337,61],[5114,24,4337,61,"_json"],[5114,29,4337,61],[5114,30,4337,50,"phoneNumber"],[5114,41,4337,61],[5115,10,4337,63,"temporaryProof"],[5115,24,4337,77],[5115,27,4337,77,"_json"],[5115,32,4337,77],[5115,33,4337,63,"temporaryProof"],[5115,47,4337,77],[5116,8,4338,8],[5116,12,4338,12],[5116,13,4338,13,"verificationCode"],[5116,29,4338,29],[5116,33,4339,12],[5116,34,4339,13,"verificationId"],[5116,48,4339,27],[5116,52,4340,12],[5116,53,4340,13,"phoneNumber"],[5116,64,4340,24],[5116,68,4341,12],[5116,69,4341,13,"temporaryProof"],[5116,83,4341,27],[5116,85,4341,29],[5117,10,4342,12],[5117,17,4342,19],[5117,21,4342,23],[5118,8,4343,8],[5119,8,4344,8],[5119,15,4344,15],[5119,19,4344,19,"PhoneAuthCredential"],[5119,38,4344,38],[5119,39,4344,39],[5120,10,4345,12,"verificationId"],[5120,24,4345,26],[5121,10,4346,12,"verificationCode"],[5121,26,4346,28],[5122,10,4347,12,"phoneNumber"],[5122,21,4347,23],[5123,10,4348,12,"temporaryProof"],[5124,8,4349,8],[5124,9,4349,9],[5124,10,4349,10],[5125,6,4350,4],[5126,4,4350,5],[5127,2,4350,5],[5127,4,4274,34,"AuthCredential"],[5127,18,4274,48],[5128,2,4353,0],[5129,0,4354,0],[5130,0,4355,0],[5131,0,4356,0],[5132,0,4357,0],[5133,0,4358,0],[5134,0,4359,0],[5135,0,4360,0],[5136,0,4361,0],[5137,0,4362,0],[5138,0,4363,0],[5139,0,4364,0],[5140,0,4365,0],[5141,0,4366,0],[5142,0,4367,0],[5143,0,4368,0],[5144,2,4369,0],[5145,0,4370,0],[5146,0,4371,0],[5147,0,4372,0],[5148,0,4373,0],[5149,2,4374,0],[5149,11,4374,9,"parseMode"],[5149,20,4374,18,"parseMode"],[5149,21,4374,19,"mode"],[5149,25,4374,23],[5149,27,4374,25],[5150,4,4375,4],[5150,12,4375,12,"mode"],[5150,16,4375,16],[5151,6,4376,8],[5151,11,4376,13],[5151,25,4376,27],[5152,8,4377,12],[5152,15,4377,19],[5152,30,4377,34],[5152,31,4377,35],[5153,6,4378,8],[5153,11,4378,13],[5153,26,4378,28],[5154,8,4379,12],[5154,15,4379,19],[5154,31,4379,35],[5154,32,4379,36],[5155,6,4380,8],[5155,11,4380,13],[5155,19,4380,21],[5156,8,4381,12],[5156,15,4381,19],[5156,29,4381,33],[5156,30,4381,34],[5157,6,4382,8],[5157,11,4382,13],[5157,24,4382,26],[5158,8,4383,12],[5158,15,4383,19],[5158,29,4383,33],[5158,30,4383,34],[5159,6,4384,8],[5159,11,4384,13],[5159,33,4384,35],[5160,8,4385,12],[5160,15,4385,19],[5160,40,4385,44],[5160,41,4385,45],[5161,6,4386,8],[5161,11,4386,13],[5161,39,4386,41],[5162,8,4387,12],[5162,15,4387,19],[5162,46,4387,50],[5162,47,4387,51],[5163,6,4388,8],[5164,8,4389,12],[5164,15,4389,19],[5164,19,4389,23],[5165,4,4390,4],[5166,2,4391,0],[5167,2,4392,0],[5168,0,4393,0],[5169,0,4394,0],[5170,0,4395,0],[5171,0,4396,0],[5172,2,4397,0],[5172,11,4397,9,"parseDeepLink"],[5172,24,4397,22,"parseDeepLink"],[5172,25,4397,23,"url"],[5172,28,4397,26],[5172,30,4397,28],[5173,4,4398,4],[5173,8,4398,10,"link"],[5173,12,4398,14],[5173,15,4398,17,"util"],[5173,19,4398,21],[5173,20,4398,22,"querystringDecode"],[5173,37,4398,39],[5173,38,4398,40,"util"],[5173,42,4398,44],[5173,43,4398,45,"extractQuerystring"],[5173,61,4398,63],[5173,62,4398,64,"url"],[5173,65,4398,67],[5173,66,4398,68],[5173,67,4398,69],[5173,68,4398,70],[5173,74,4398,76],[5173,75,4398,77],[5174,4,4399,4],[5175,4,4400,4],[5175,8,4400,10,"doubleDeepLink"],[5175,22,4400,24],[5175,25,4400,27,"link"],[5175,29,4400,31],[5175,32,4401,10,"util"],[5175,36,4401,14],[5175,37,4401,15,"querystringDecode"],[5175,54,4401,32],[5175,55,4401,33,"util"],[5175,59,4401,37],[5175,60,4401,38,"extractQuerystring"],[5175,78,4401,56],[5175,79,4401,57,"link"],[5175,83,4401,61],[5175,84,4401,62],[5175,85,4401,63],[5175,86,4401,64],[5175,100,4401,78],[5175,101,4401,79],[5175,104,4402,10],[5175,108,4402,14],[5176,4,4403,4],[5177,4,4404,4],[5177,8,4404,10,"iOSDeepLink"],[5177,19,4404,21],[5177,22,4404,24,"util"],[5177,26,4404,28],[5177,27,4404,29,"querystringDecode"],[5177,44,4404,46],[5177,45,4404,47,"util"],[5177,49,4404,51],[5177,50,4404,52,"extractQuerystring"],[5177,68,4404,70],[5177,69,4404,71,"url"],[5177,72,4404,74],[5177,73,4404,75],[5177,74,4404,76],[5177,75,4404,77],[5177,89,4404,91],[5177,90,4404,92],[5178,4,4405,4],[5178,8,4405,10,"iOSDoubleDeepLink"],[5178,25,4405,27],[5178,28,4405,30,"iOSDeepLink"],[5178,39,4405,41],[5178,42,4406,10,"util"],[5178,46,4406,14],[5178,47,4406,15,"querystringDecode"],[5178,64,4406,32],[5178,65,4406,33,"util"],[5178,69,4406,37],[5178,70,4406,38,"extractQuerystring"],[5178,88,4406,56],[5178,89,4406,57,"iOSDeepLink"],[5178,100,4406,68],[5178,101,4406,69],[5178,102,4406,70],[5178,103,4406,71],[5178,109,4406,77],[5178,110,4406,78],[5178,113,4407,10],[5178,117,4407,14],[5179,4,4408,4],[5179,11,4408,11,"iOSDoubleDeepLink"],[5179,28,4408,28],[5179,32,4408,32,"iOSDeepLink"],[5179,43,4408,43],[5179,47,4408,47,"doubleDeepLink"],[5179,61,4408,61],[5179,65,4408,65,"link"],[5179,69,4408,69],[5179,73,4408,73,"url"],[5179,76,4408,76],[5180,2,4409,0],[5181,2,4410,0],[5182,0,4411,0],[5183,0,4412,0],[5184,0,4413,0],[5185,0,4414,0],[5186,0,4415,0],[5187,2,4410,0],[5187,6,4416,6,"ActionCodeURL"],[5187,19,4416,19],[5188,4,4417,4],[5189,0,4418,0],[5190,0,4419,0],[5191,0,4420,0],[5192,0,4421,0],[5193,0,4422,0],[5194,4,4423,4],[5194,13,4423,4,"ActionCodeURL"],[5194,27,4423,16,"actionLink"],[5194,37,4423,26],[5194,39,4423,28],[5195,6,4423,28,"_classCallCheck"],[5195,21,4423,28],[5195,28,4423,28,"ActionCodeURL"],[5195,41,4423,28],[5196,6,4424,8],[5196,10,4424,14,"searchParams"],[5196,22,4424,26],[5196,25,4424,29,"util"],[5196,29,4424,33],[5196,30,4424,34,"querystringDecode"],[5196,47,4424,51],[5196,48,4424,52,"util"],[5196,52,4424,56],[5196,53,4424,57,"extractQuerystring"],[5196,71,4424,75],[5196,72,4424,76,"actionLink"],[5196,82,4424,86],[5196,83,4424,87],[5196,84,4424,88],[5197,6,4425,8],[5197,10,4425,14,"apiKey"],[5197,16,4425,20],[5197,19,4425,23,"searchParams"],[5197,31,4425,35],[5197,32,4425,36],[5197,40,4425,44],[5197,41,4425,45],[5197,66,4425,70],[5197,70,4425,74],[5197,74,4425,78],[5198,6,4426,8],[5198,10,4426,14,"code"],[5198,14,4426,18],[5198,17,4426,21,"searchParams"],[5198,29,4426,33],[5198,30,4426,34],[5198,39,4426,43],[5198,40,4426,44],[5198,62,4426,66],[5198,66,4426,70],[5198,70,4426,74],[5199,6,4427,8],[5199,10,4427,14,"operation"],[5199,19,4427,23],[5199,22,4427,26,"parseMode"],[5199,31,4427,35],[5199,32,4427,36,"searchParams"],[5199,44,4427,48],[5199,45,4427,49],[5199,51,4427,55],[5199,52,4427,56],[5199,74,4427,78],[5199,78,4427,82],[5199,82,4427,86],[5199,83,4427,87],[5200,6,4428,8],[5201,6,4429,8,"_assert"],[5201,13,4429,15],[5201,14,4429,16,"apiKey"],[5201,20,4429,22],[5201,24,4429,26,"code"],[5201,28,4429,30],[5201,32,4429,34,"operation"],[5201,41,4429,43],[5201,43,4429,45],[5201,59,4429,61],[5201,60,4429,62],[5201,94,4429,96],[5201,95,4429,97],[5202,6,4430,8],[5202,10,4430,12],[5202,11,4430,13,"apiKey"],[5202,17,4430,19],[5202,20,4430,22,"apiKey"],[5202,26,4430,28],[5203,6,4431,8],[5203,10,4431,12],[5203,11,4431,13,"operation"],[5203,20,4431,22],[5203,23,4431,25,"operation"],[5203,32,4431,34],[5204,6,4432,8],[5204,10,4432,12],[5204,11,4432,13,"code"],[5204,15,4432,17],[5204,18,4432,20,"code"],[5204,22,4432,24],[5205,6,4433,8],[5205,10,4433,12],[5205,11,4433,13,"continueUrl"],[5205,22,4433,24],[5205,25,4433,27,"searchParams"],[5205,37,4433,39],[5205,38,4433,40],[5205,51,4433,53],[5205,52,4433,54],[5205,82,4433,84],[5205,86,4433,88],[5205,90,4433,92],[5206,6,4434,8],[5206,10,4434,12],[5206,11,4434,13,"languageCode"],[5206,23,4434,25],[5206,26,4434,28,"searchParams"],[5206,38,4434,40],[5206,39,4434,41],[5206,45,4434,47],[5206,46,4434,48],[5206,77,4434,79],[5206,81,4434,83],[5206,85,4434,87],[5207,6,4435,8],[5207,10,4435,12],[5207,11,4435,13,"tenantId"],[5207,19,4435,21],[5207,22,4435,24,"searchParams"],[5207,34,4435,36],[5207,35,4435,37],[5207,45,4435,47],[5207,46,4435,48],[5207,73,4435,75],[5207,77,4435,79],[5207,81,4435,83],[5208,4,4436,4],[5209,4,4437,4],[5210,0,4438,0],[5211,0,4439,0],[5212,0,4440,0],[5213,0,4441,0],[5214,0,4442,0],[5215,0,4443,0],[5216,0,4444,0],[5217,0,4445,0],[5218,4,4437,4],[5218,11,4437,4,"_createClass"],[5218,23,4437,4],[5218,24,4437,4,"ActionCodeURL"],[5218,37,4437,4],[5219,6,4437,4,"key"],[5219,9,4437,4],[5220,6,4437,4,"value"],[5220,11,4437,4],[5220,13,4446,4],[5220,22,4446,11,"parseLink"],[5220,31,4446,20,"parseLink"],[5220,32,4446,21,"link"],[5220,36,4446,25],[5220,38,4446,27],[5221,8,4447,8],[5221,12,4447,14,"actionLink"],[5221,22,4447,24],[5221,25,4447,27,"parseDeepLink"],[5221,38,4447,40],[5221,39,4447,41,"link"],[5221,43,4447,45],[5221,44,4447,46],[5222,8,4448,8],[5222,12,4448,12],[5223,10,4449,12],[5223,17,4449,19],[5223,21,4449,23,"ActionCodeURL"],[5223,34,4449,36],[5223,35,4449,37,"actionLink"],[5223,45,4449,47],[5223,46,4449,48],[5224,8,4450,8],[5224,9,4450,9],[5224,10,4451,8],[5224,16,4451,14],[5225,10,4452,12],[5225,17,4452,19],[5225,21,4452,23],[5226,8,4453,8],[5227,6,4454,4],[5228,4,4454,5],[5229,2,4454,5],[5230,2,4456,0],[5231,0,4457,0],[5232,0,4458,0],[5233,0,4459,0],[5234,0,4460,0],[5235,0,4461,0],[5236,2,4462,0],[5236,11,4462,9,"parseActionCodeURL"],[5236,29,4462,27,"parseActionCodeURL"],[5236,30,4462,28,"link"],[5236,34,4462,32],[5236,36,4462,34],[5237,4,4463,4],[5237,11,4463,11,"ActionCodeURL"],[5237,24,4463,24],[5237,25,4463,25,"parseLink"],[5237,34,4463,34],[5237,35,4463,35,"link"],[5237,39,4463,39],[5237,40,4463,40],[5238,2,4464,0],[5240,2,4466,0],[5241,0,4467,0],[5242,0,4468,0],[5243,0,4469,0],[5244,0,4470,0],[5245,0,4471,0],[5246,0,4472,0],[5247,0,4473,0],[5248,0,4474,0],[5249,0,4475,0],[5250,0,4476,0],[5251,0,4477,0],[5252,0,4478,0],[5253,0,4479,0],[5254,0,4480,0],[5255,0,4481,0],[5256,2,4482,0],[5257,0,4483,0],[5258,0,4484,0],[5259,0,4485,0],[5260,0,4486,0],[5261,2,4482,0],[5261,6,4487,6,"EmailAuthProvider"],[5261,23,4487,23],[5262,4,4488,4],[5262,13,4488,4,"EmailAuthProvider"],[5262,31,4488,4],[5262,33,4488,18],[5263,6,4488,18,"_classCallCheck"],[5263,21,4488,18],[5263,28,4488,18,"EmailAuthProvider"],[5263,45,4488,18],[5264,6,4489,8],[5265,0,4490,0],[5266,0,4491,0],[5267,6,4492,8],[5267,10,4492,12],[5267,11,4492,13,"providerId"],[5267,21,4492,23],[5267,24,4492,26,"EmailAuthProvider"],[5267,41,4492,43],[5267,42,4492,44,"PROVIDER_ID"],[5267,53,4492,55],[5268,4,4493,4],[5269,4,4494,4],[5270,0,4495,0],[5271,0,4496,0],[5272,0,4497,0],[5273,0,4498,0],[5274,0,4499,0],[5275,0,4500,0],[5276,0,4501,0],[5277,0,4502,0],[5278,0,4503,0],[5279,0,4504,0],[5280,0,4505,0],[5281,0,4506,0],[5282,0,4507,0],[5283,0,4508,0],[5284,0,4509,0],[5285,0,4510,0],[5286,0,4511,0],[5287,4,4494,4],[5287,11,4494,4,"_createClass"],[5287,23,4494,4],[5287,24,4494,4,"EmailAuthProvider"],[5287,41,4494,4],[5288,6,4494,4,"key"],[5288,9,4494,4],[5289,6,4494,4,"value"],[5289,11,4494,4],[5289,13,4512,4],[5289,22,4512,11,"credential"],[5289,32,4512,21,"credential"],[5289,33,4512,22,"email"],[5289,38,4512,27],[5289,40,4512,29,"password"],[5289,48,4512,37],[5289,50,4512,39],[5290,8,4513,8],[5290,15,4513,15,"EmailAuthCredential"],[5290,34,4513,34],[5290,35,4513,35,"_fromEmailAndPassword"],[5290,56,4513,56],[5290,57,4513,57,"email"],[5290,62,4513,62],[5290,64,4513,64,"password"],[5290,72,4513,72],[5290,73,4513,73],[5291,6,4514,4],[5292,6,4515,4],[5293,0,4516,0],[5294,0,4517,0],[5295,0,4518,0],[5296,0,4519,0],[5297,0,4520,0],[5298,0,4521,0],[5299,0,4522,0],[5300,0,4523,0],[5301,0,4524,0],[5302,0,4525,0],[5303,0,4526,0],[5304,0,4527,0],[5305,0,4528,0],[5306,0,4529,0],[5307,0,4530,0],[5308,0,4531,0],[5309,0,4532,0],[5310,0,4533,0],[5311,0,4534,0],[5312,0,4535,0],[5313,0,4536,0],[5314,4,4515,4],[5315,6,4515,4,"key"],[5315,9,4515,4],[5316,6,4515,4,"value"],[5316,11,4515,4],[5316,13,4537,4],[5316,22,4537,11,"credentialWithLink"],[5316,40,4537,29,"credentialWithLink"],[5316,41,4537,30,"email"],[5316,46,4537,35],[5316,48,4537,37,"emailLink"],[5316,57,4537,46],[5316,59,4537,48],[5317,8,4538,8],[5317,12,4538,14,"actionCodeUrl"],[5317,25,4538,27],[5317,28,4538,30,"ActionCodeURL"],[5317,41,4538,43],[5317,42,4538,44,"parseLink"],[5317,51,4538,53],[5317,52,4538,54,"emailLink"],[5317,61,4538,63],[5317,62,4538,64],[5318,8,4539,8,"_assert"],[5318,15,4539,15],[5318,16,4539,16,"actionCodeUrl"],[5318,29,4539,29],[5318,31,4539,31],[5318,47,4539,47],[5318,48,4539,48],[5318,82,4539,82],[5318,83,4539,83],[5319,8,4540,8],[5319,15,4540,15,"EmailAuthCredential"],[5319,34,4540,34],[5319,35,4540,35,"_fromEmailAndCode"],[5319,52,4540,52],[5319,53,4540,53,"email"],[5319,58,4540,58],[5319,60,4540,60,"actionCodeUrl"],[5319,73,4540,73],[5319,74,4540,74,"code"],[5319,78,4540,78],[5319,80,4540,80,"actionCodeUrl"],[5319,93,4540,93],[5319,94,4540,94,"tenantId"],[5319,102,4540,102],[5319,103,4540,103],[5320,6,4541,4],[5321,4,4541,5],[5322,2,4541,5],[5323,2,4543,0],[5324,0,4544,0],[5325,0,4545,0],[5326,2,4546,0,"EmailAuthProvider"],[5326,19,4546,17],[5326,20,4546,18,"PROVIDER_ID"],[5326,31,4546,29],[5326,34,4546,32],[5326,44,4546,42],[5326,45,4546,43],[5327,2,4547,0],[5328,0,4548,0],[5329,0,4549,0],[5330,2,4550,0,"EmailAuthProvider"],[5330,19,4550,17],[5330,20,4550,18,"EMAIL_PASSWORD_SIGN_IN_METHOD"],[5330,49,4550,47],[5330,52,4550,50],[5330,62,4550,60],[5330,63,4550,61],[5331,2,4551,0],[5332,0,4552,0],[5333,0,4553,0],[5334,2,4554,0,"EmailAuthProvider"],[5334,19,4554,17],[5334,20,4554,18,"EMAIL_LINK_SIGN_IN_METHOD"],[5334,45,4554,43],[5334,48,4554,46],[5334,59,4554,57],[5334,60,4554,58],[5336,2,4556,0],[5337,0,4557,0],[5338,0,4558,0],[5339,0,4559,0],[5340,0,4560,0],[5341,0,4561,0],[5342,0,4562,0],[5343,0,4563,0],[5344,0,4564,0],[5345,0,4565,0],[5346,0,4566,0],[5347,0,4567,0],[5348,0,4568,0],[5349,0,4569,0],[5350,0,4570,0],[5351,0,4571,0],[5352,2,4572,0],[5353,0,4573,0],[5354,0,4574,0],[5355,0,4575,0],[5356,0,4576,0],[5357,0,4577,0],[5358,0,4578,0],[5359,2,4572,0],[5359,6,4579,6,"FederatedAuthProvider"],[5359,27,4579,27],[5360,4,4580,4],[5361,0,4581,0],[5362,0,4582,0],[5363,0,4583,0],[5364,0,4584,0],[5365,4,4585,4],[5365,13,4585,4,"FederatedAuthProvider"],[5365,35,4585,16,"providerId"],[5365,45,4585,26],[5365,47,4585,28],[5366,6,4585,28,"_classCallCheck"],[5366,21,4585,28],[5366,28,4585,28,"FederatedAuthProvider"],[5366,49,4585,28],[5367,6,4586,8],[5367,10,4586,12],[5367,11,4586,13,"providerId"],[5367,21,4586,23],[5367,24,4586,26,"providerId"],[5367,34,4586,36],[5368,6,4587,8],[5369,6,4588,8],[5369,10,4588,12],[5369,11,4588,13,"defaultLanguageCode"],[5369,30,4588,32],[5369,33,4588,35],[5369,37,4588,39],[5370,6,4589,8],[5371,6,4590,8],[5371,10,4590,12],[5371,11,4590,13,"customParameters"],[5371,27,4590,29],[5371,30,4590,32],[5371,31,4590,33],[5371,32,4590,34],[5372,4,4591,4],[5373,4,4592,4],[5374,0,4593,0],[5375,0,4594,0],[5376,0,4595,0],[5377,0,4596,0],[5378,4,4592,4],[5378,11,4592,4,"_createClass"],[5378,23,4592,4],[5378,24,4592,4,"FederatedAuthProvider"],[5378,45,4592,4],[5379,6,4592,4,"key"],[5379,9,4592,4],[5380,6,4592,4,"value"],[5380,11,4592,4],[5380,13,4597,4],[5380,22,4597,4,"setDefaultLanguage"],[5380,40,4597,22,"setDefaultLanguage"],[5380,41,4597,23,"languageCode"],[5380,53,4597,35],[5380,55,4597,37],[5381,8,4598,8],[5381,12,4598,12],[5381,13,4598,13,"defaultLanguageCode"],[5381,32,4598,32],[5381,35,4598,35,"languageCode"],[5381,47,4598,47],[5382,6,4599,4],[5383,6,4600,4],[5384,0,4601,0],[5385,0,4602,0],[5386,0,4603,0],[5387,0,4604,0],[5388,0,4605,0],[5389,0,4606,0],[5390,0,4607,0],[5391,0,4608,0],[5392,0,4609,0],[5393,4,4600,4],[5394,6,4600,4,"key"],[5394,9,4600,4],[5395,6,4600,4,"value"],[5395,11,4600,4],[5395,13,4610,4],[5395,22,4610,4,"setCustomParameters"],[5395,41,4610,23,"setCustomParameters"],[5395,42,4610,24,"customOAuthParameters"],[5395,63,4610,45],[5395,65,4610,47],[5396,8,4611,8],[5396,12,4611,12],[5396,13,4611,13,"customParameters"],[5396,29,4611,29],[5396,32,4611,32,"customOAuthParameters"],[5396,53,4611,53],[5397,8,4612,8],[5397,15,4612,15],[5397,19,4612,19],[5398,6,4613,4],[5399,6,4614,4],[5400,0,4615,0],[5401,0,4616,0],[5402,4,4614,4],[5403,6,4614,4,"key"],[5403,9,4614,4],[5404,6,4614,4,"value"],[5404,11,4614,4],[5404,13,4617,4],[5404,22,4617,4,"getCustomParameters"],[5404,41,4617,23,"getCustomParameters"],[5404,42,4617,23],[5404,44,4617,26],[5405,8,4618,8],[5405,15,4618,15],[5405,19,4618,19],[5405,20,4618,20,"customParameters"],[5405,36,4618,36],[5406,6,4619,4],[5407,4,4619,5],[5408,2,4619,5],[5409,2,4622,0],[5410,0,4623,0],[5411,0,4624,0],[5412,0,4625,0],[5413,0,4626,0],[5414,0,4627,0],[5415,0,4628,0],[5416,0,4629,0],[5417,0,4630,0],[5418,0,4631,0],[5419,0,4632,0],[5420,0,4633,0],[5421,0,4634,0],[5422,0,4635,0],[5423,0,4636,0],[5424,0,4637,0],[5425,2,4638,0],[5426,0,4639,0],[5427,0,4640,0],[5428,0,4641,0],[5429,0,4642,0],[5430,0,4643,0],[5431,2,4638,0],[5431,6,4644,6,"BaseOAuthProvider"],[5431,23,4644,23],[5431,49,4644,23,"_FederatedAuthProvide"],[5431,70,4644,23],[5432,4,4645,4],[5432,13,4645,4,"BaseOAuthProvider"],[5432,31,4645,4],[5432,33,4645,18],[5433,6,4645,18],[5433,10,4645,18,"_this9"],[5433,16,4645,18],[5434,6,4645,18,"_classCallCheck"],[5434,21,4645,18],[5434,28,4645,18,"BaseOAuthProvider"],[5434,45,4645,18],[5435,6,4646,8,"_this9"],[5435,12,4646,8],[5435,15,4646,8,"_callSuper"],[5435,25,4646,8],[5435,32,4646,8,"BaseOAuthProvider"],[5435,49,4646,8],[5435,51,4646,17,"arguments"],[5435,60,4646,26],[5436,6,4647,8],[5437,6,4648,8,"_this9"],[5437,12,4648,8],[5437,13,4648,13,"scopes"],[5437,19,4648,19],[5437,22,4648,22],[5437,24,4648,24],[5438,6,4648,25],[5438,13,4648,25,"_this9"],[5438,19,4648,25],[5439,4,4649,4],[5440,4,4650,4],[5441,0,4651,0],[5442,0,4652,0],[5443,0,4653,0],[5444,0,4654,0],[5445,4,4650,4,"_inherits"],[5445,13,4650,4],[5445,14,4650,4,"BaseOAuthProvider"],[5445,31,4650,4],[5445,33,4650,4,"_FederatedAuthProvide"],[5445,54,4650,4],[5446,4,4650,4],[5446,11,4650,4,"_createClass"],[5446,23,4650,4],[5446,24,4650,4,"BaseOAuthProvider"],[5446,41,4650,4],[5447,6,4650,4,"key"],[5447,9,4650,4],[5448,6,4650,4,"value"],[5448,11,4650,4],[5448,13,4655,4],[5448,22,4655,4,"addScope"],[5448,30,4655,12,"addScope"],[5448,31,4655,13,"scope"],[5448,36,4655,18],[5448,38,4655,20],[5449,8,4656,8],[5450,8,4657,8],[5450,12,4657,12],[5450,13,4657,13],[5450,17,4657,17],[5450,18,4657,18,"scopes"],[5450,24,4657,24],[5450,25,4657,25,"includes"],[5450,33,4657,33],[5450,34,4657,34,"scope"],[5450,39,4657,39],[5450,40,4657,40],[5450,42,4657,42],[5451,10,4658,12],[5451,14,4658,16],[5451,15,4658,17,"scopes"],[5451,21,4658,23],[5451,22,4658,24,"push"],[5451,26,4658,28],[5451,27,4658,29,"scope"],[5451,32,4658,34],[5451,33,4658,35],[5452,8,4659,8],[5453,8,4660,8],[5453,15,4660,15],[5453,19,4660,19],[5454,6,4661,4],[5455,6,4662,4],[5456,0,4663,0],[5457,0,4664,0],[5458,4,4662,4],[5459,6,4662,4,"key"],[5459,9,4662,4],[5460,6,4662,4,"value"],[5460,11,4662,4],[5460,13,4665,4],[5460,22,4665,4,"getScopes"],[5460,31,4665,13,"getScopes"],[5460,32,4665,13],[5460,34,4665,16],[5461,8,4666,8],[5461,15,4666,15],[5461,16,4666,16],[5461,19,4666,19],[5461,23,4666,23],[5461,24,4666,24,"scopes"],[5461,30,4666,30],[5461,31,4666,31],[5462,6,4667,4],[5463,4,4667,5],[5464,2,4667,5],[5464,4,4644,32,"FederatedAuthProvider"],[5464,25,4644,53],[5465,2,4669,0],[5466,0,4670,0],[5467,0,4671,0],[5468,0,4672,0],[5469,0,4673,0],[5470,0,4674,0],[5471,0,4675,0],[5472,0,4676,0],[5473,0,4677,0],[5474,0,4678,0],[5475,0,4679,0],[5476,0,4680,0],[5477,0,4681,0],[5478,0,4682,0],[5479,0,4683,0],[5480,0,4684,0],[5481,0,4685,0],[5482,0,4686,0],[5483,0,4687,0],[5484,0,4688,0],[5485,0,4689,0],[5486,0,4690,0],[5487,0,4691,0],[5488,0,4692,0],[5489,0,4693,0],[5490,0,4694,0],[5491,0,4695,0],[5492,0,4696,0],[5493,0,4697,0],[5494,0,4698,0],[5495,0,4699,0],[5496,0,4700,0],[5497,0,4701,0],[5498,0,4702,0],[5499,0,4703,0],[5500,0,4704,0],[5501,0,4705,0],[5502,0,4706,0],[5503,0,4707,0],[5504,0,4708,0],[5505,2,4669,0],[5505,6,4709,6,"OAuthProvider"],[5505,19,4709,19],[5505,45,4709,19,"_BaseOAuthProvider"],[5505,63,4709,19],[5506,4,4709,19],[5506,13,4709,19,"OAuthProvider"],[5506,27,4709,19],[5507,6,4709,19,"_classCallCheck"],[5507,21,4709,19],[5507,28,4709,19,"OAuthProvider"],[5507,41,4709,19],[5508,6,4709,19],[5508,13,4709,19,"_callSuper"],[5508,23,4709,19],[5508,30,4709,19,"OAuthProvider"],[5508,43,4709,19],[5508,45,4709,19,"arguments"],[5508,54,4709,19],[5509,4,4709,19],[5510,4,4709,19,"_inherits"],[5510,13,4709,19],[5510,14,4709,19,"OAuthProvider"],[5510,27,4709,19],[5510,29,4709,19,"_BaseOAuthProvider"],[5510,47,4709,19],[5511,4,4709,19],[5511,11,4709,19,"_createClass"],[5511,23,4709,19],[5511,24,4709,19,"OAuthProvider"],[5511,37,4709,19],[5512,6,4709,19,"key"],[5512,9,4709,19],[5513,6,4709,19,"value"],[5513,11,4709,19],[5514,6,4719,4],[5515,0,4720,0],[5516,0,4721,0],[5517,0,4722,0],[5518,0,4723,0],[5519,0,4724,0],[5520,0,4725,0],[5521,0,4726,0],[5522,0,4727,0],[5523,0,4728,0],[5524,0,4729,0],[5525,0,4730,0],[5526,0,4731,0],[5527,0,4732,0],[5528,0,4733,0],[5529,0,4734,0],[5530,0,4735,0],[5531,0,4736,0],[5532,0,4737,0],[5533,0,4738,0],[5534,0,4739,0],[5535,6,4740,4],[5535,15,4740,4,"credential"],[5535,25,4740,14,"credential"],[5535,26,4740,15,"params"],[5535,32,4740,21],[5535,34,4740,23],[5536,8,4741,8],[5536,15,4741,15],[5536,19,4741,19],[5536,20,4741,20,"_credential"],[5536,31,4741,31],[5536,32,4741,32],[5537,10,4741,34],[5537,13,4741,37,"params"],[5537,19,4741,43],[5538,10,4741,45,"nonce"],[5538,15,4741,50],[5538,17,4741,52,"params"],[5538,23,4741,58],[5538,24,4741,59,"rawNonce"],[5539,8,4741,68],[5539,9,4741,69],[5539,10,4741,70],[5540,6,4742,4],[5541,6,4743,4],[5542,4,4743,4],[5543,6,4743,4,"key"],[5543,9,4743,4],[5544,6,4743,4,"value"],[5544,11,4743,4],[5544,13,4744,4],[5544,22,4744,4,"_credential"],[5544,33,4744,15,"_credential"],[5544,34,4744,16,"params"],[5544,40,4744,22],[5544,42,4744,24],[5545,8,4745,8,"_assert"],[5545,15,4745,15],[5545,16,4745,16,"params"],[5545,22,4745,22],[5545,23,4745,23,"idToken"],[5545,30,4745,30],[5545,34,4745,34,"params"],[5545,40,4745,40],[5545,41,4745,41,"accessToken"],[5545,52,4745,52],[5545,54,4745,54],[5545,70,4745,70],[5545,71,4745,71],[5545,105,4745,105],[5545,106,4745,106],[5546,8,4746,8],[5547,8,4747,8],[5547,15,4747,15,"OAuthCredential"],[5547,30,4747,30],[5547,31,4747,31,"_fromParams"],[5547,42,4747,42],[5547,43,4747,43],[5548,10,4748,12],[5548,13,4748,15,"params"],[5548,19,4748,21],[5549,10,4749,12,"providerId"],[5549,20,4749,22],[5549,22,4749,24],[5549,26,4749,28],[5549,27,4749,29,"providerId"],[5549,37,4749,39],[5550,10,4750,12,"signInMethod"],[5550,22,4750,24],[5550,24,4750,26],[5550,28,4750,30],[5550,29,4750,31,"providerId"],[5551,8,4751,8],[5551,9,4751,9],[5551,10,4751,10],[5552,6,4752,4],[5553,6,4753,4],[5554,0,4754,0],[5555,0,4755,0],[5556,0,4756,0],[5557,0,4757,0],[5558,4,4753,4],[5559,6,4753,4,"key"],[5559,9,4753,4],[5560,6,4753,4,"value"],[5560,11,4753,4],[5561,6,4710,4],[5562,0,4711,0],[5563,0,4712,0],[5564,0,4713,0],[5565,6,4714,4],[5565,15,4714,11,"credentialFromJSON"],[5565,33,4714,29,"credentialFromJSON"],[5565,34,4714,30,"json"],[5565,38,4714,34],[5565,40,4714,36],[5566,8,4715,8],[5566,12,4715,14,"obj"],[5566,15,4715,17],[5566,18,4715,20],[5566,25,4715,27,"json"],[5566,29,4715,31],[5566,34,4715,36],[5566,42,4715,44],[5566,45,4715,47,"JSON"],[5566,49,4715,51],[5566,50,4715,52,"parse"],[5566,55,4715,57],[5566,56,4715,58,"json"],[5566,60,4715,62],[5566,61,4715,63],[5566,64,4715,66,"json"],[5566,68,4715,70],[5567,8,4716,8,"_assert"],[5567,15,4716,15],[5567,16,4716,16],[5567,28,4716,28],[5567,32,4716,32,"obj"],[5567,35,4716,35],[5567,39,4716,39],[5567,53,4716,53],[5567,57,4716,57,"obj"],[5567,60,4716,60],[5567,62,4716,62],[5567,78,4716,78],[5567,79,4716,79],[5567,113,4716,113],[5567,114,4716,114],[5568,8,4717,8],[5568,15,4717,15,"OAuthCredential"],[5568,30,4717,30],[5568,31,4717,31,"_fromParams"],[5568,42,4717,42],[5568,43,4717,43,"obj"],[5568,46,4717,46],[5568,47,4717,47],[5569,6,4718,4],[5570,4,4718,5],[5571,6,4718,5,"key"],[5571,9,4718,5],[5572,6,4718,5,"value"],[5572,11,4718,5],[5572,13,4758,4],[5572,22,4758,11,"credentialFromResult"],[5572,42,4758,31,"credentialFromResult"],[5572,43,4758,32,"userCredential"],[5572,57,4758,46],[5572,59,4758,48],[5573,8,4759,8],[5573,15,4759,15,"OAuthProvider"],[5573,28,4759,28],[5573,29,4759,29,"oauthCredentialFromTaggedObject"],[5573,60,4759,60],[5573,61,4759,61,"userCredential"],[5573,75,4759,75],[5573,76,4759,76],[5574,6,4760,4],[5575,6,4761,4],[5576,0,4762,0],[5577,0,4763,0],[5578,0,4764,0],[5579,0,4765,0],[5580,0,4766,0],[5581,4,4761,4],[5582,6,4761,4,"key"],[5582,9,4761,4],[5583,6,4761,4,"value"],[5583,11,4761,4],[5583,13,4767,4],[5583,22,4767,11,"credentialFromError"],[5583,41,4767,30,"credentialFromError"],[5583,42,4767,31,"error"],[5583,47,4767,36],[5583,49,4767,38],[5584,8,4768,8],[5584,15,4768,15,"OAuthProvider"],[5584,28,4768,28],[5584,29,4768,29,"oauthCredentialFromTaggedObject"],[5584,60,4768,60],[5584,61,4768,62,"error"],[5584,66,4768,67],[5584,67,4768,68,"customData"],[5584,77,4768,78],[5584,81,4768,82],[5584,82,4768,83],[5584,83,4768,85],[5584,84,4768,86],[5585,6,4769,4],[5586,4,4769,5],[5587,6,4769,5,"key"],[5587,9,4769,5],[5588,6,4769,5,"value"],[5588,11,4769,5],[5588,13,4770,4],[5588,22,4770,11,"oauthCredentialFromTaggedObject"],[5588,53,4770,42,"oauthCredentialFromTaggedObject"],[5588,54,4770,42,"_ref11"],[5588,60,4770,42],[5588,62,4770,78],[5589,8,4770,78],[5589,12,4770,61,"tokenResponse"],[5589,25,4770,74],[5589,28,4770,74,"_ref11"],[5589,34,4770,74],[5589,35,4770,45,"_tokenResponse"],[5589,49,4770,59],[5590,8,4771,8],[5590,12,4771,12],[5590,13,4771,13,"tokenResponse"],[5590,26,4771,26],[5590,28,4771,28],[5591,10,4772,12],[5591,17,4772,19],[5591,21,4772,23],[5592,8,4773,8],[5593,8,4774,8],[5593,12,4774,16,"oauthIdToken"],[5593,24,4774,28],[5593,27,4774,102,"tokenResponse"],[5593,40,4774,115],[5593,41,4774,16,"oauthIdToken"],[5593,53,4774,28],[5594,10,4774,30,"oauthAccessToken"],[5594,26,4774,46],[5594,29,4774,102,"tokenResponse"],[5594,42,4774,115],[5594,43,4774,30,"oauthAccessToken"],[5594,59,4774,46],[5595,10,4774,48,"oauthTokenSecret"],[5595,26,4774,64],[5595,29,4774,102,"tokenResponse"],[5595,42,4774,115],[5595,43,4774,48,"oauthTokenSecret"],[5595,59,4774,64],[5596,10,4774,66,"pendingToken"],[5596,22,4774,78],[5596,25,4774,102,"tokenResponse"],[5596,38,4774,115],[5596,39,4774,66,"pendingToken"],[5596,51,4774,78],[5597,10,4774,80,"nonce"],[5597,15,4774,85],[5597,18,4774,102,"tokenResponse"],[5597,31,4774,115],[5597,32,4774,80,"nonce"],[5597,37,4774,85],[5598,10,4774,87,"providerId"],[5598,20,4774,97],[5598,23,4774,102,"tokenResponse"],[5598,36,4774,115],[5598,37,4774,87,"providerId"],[5598,47,4774,97],[5599,8,4775,8],[5599,12,4775,12],[5599,13,4775,13,"oauthAccessToken"],[5599,29,4775,29],[5599,33,4776,12],[5599,34,4776,13,"oauthTokenSecret"],[5599,50,4776,29],[5599,54,4777,12],[5599,55,4777,13,"oauthIdToken"],[5599,67,4777,25],[5599,71,4778,12],[5599,72,4778,13,"pendingToken"],[5599,84,4778,25],[5599,86,4778,27],[5600,10,4779,12],[5600,17,4779,19],[5600,21,4779,23],[5601,8,4780,8],[5602,8,4781,8],[5602,12,4781,12],[5602,13,4781,13,"providerId"],[5602,23,4781,23],[5602,25,4781,25],[5603,10,4782,12],[5603,17,4782,19],[5603,21,4782,23],[5604,8,4783,8],[5605,8,4784,8],[5605,12,4784,12],[5606,10,4785,12],[5606,17,4785,19],[5606,21,4785,23,"OAuthProvider"],[5606,34,4785,36],[5606,35,4785,37,"providerId"],[5606,45,4785,47],[5606,46,4785,48],[5606,47,4785,49,"_credential"],[5606,58,4785,60],[5606,59,4785,61],[5607,12,4786,16,"idToken"],[5607,19,4786,23],[5607,21,4786,25,"oauthIdToken"],[5607,33,4786,37],[5608,12,4787,16,"accessToken"],[5608,23,4787,27],[5608,25,4787,29,"oauthAccessToken"],[5608,41,4787,45],[5609,12,4788,16,"nonce"],[5609,17,4788,21],[5610,12,4789,16,"pendingToken"],[5611,10,4790,12],[5611,11,4790,13],[5611,12,4790,14],[5612,8,4791,8],[5612,9,4791,9],[5612,10,4792,8],[5612,17,4792,15,"e"],[5612,18,4792,16],[5612,20,4792,18],[5613,10,4793,12],[5613,17,4793,19],[5613,21,4793,23],[5614,8,4794,8],[5615,6,4795,4],[5616,4,4795,5],[5617,2,4795,5],[5617,4,4709,28,"BaseOAuthProvider"],[5617,21,4709,45],[5618,2,4798,0],[5619,0,4799,0],[5620,0,4800,0],[5621,0,4801,0],[5622,0,4802,0],[5623,0,4803,0],[5624,0,4804,0],[5625,0,4805,0],[5626,0,4806,0],[5627,0,4807,0],[5628,0,4808,0],[5629,0,4809,0],[5630,0,4810,0],[5631,0,4811,0],[5632,0,4812,0],[5633,0,4813,0],[5634,2,4814,0],[5635,0,4815,0],[5636,0,4816,0],[5637,0,4817,0],[5638,0,4818,0],[5639,0,4819,0],[5640,0,4820,0],[5641,0,4821,0],[5642,0,4822,0],[5643,0,4823,0],[5644,0,4824,0],[5645,0,4825,0],[5646,0,4826,0],[5647,0,4827,0],[5648,0,4828,0],[5649,0,4829,0],[5650,0,4830,0],[5651,0,4831,0],[5652,0,4832,0],[5653,0,4833,0],[5654,0,4834,0],[5655,0,4835,0],[5656,0,4836,0],[5657,0,4837,0],[5658,0,4838,0],[5659,0,4839,0],[5660,0,4840,0],[5661,0,4841,0],[5662,0,4842,0],[5663,0,4843,0],[5664,0,4844,0],[5665,0,4845,0],[5666,0,4846,0],[5667,0,4847,0],[5668,0,4848,0],[5669,0,4849,0],[5670,0,4850,0],[5671,0,4851,0],[5672,0,4852,0],[5673,2,4814,0],[5673,6,4853,6,"FacebookAuthProvider"],[5673,26,4853,26],[5673,52,4853,26,"_BaseOAuthProvider2"],[5673,71,4853,26],[5674,4,4854,4],[5674,13,4854,4,"FacebookAuthProvider"],[5674,34,4854,4],[5674,36,4854,18],[5675,6,4854,18,"_classCallCheck"],[5675,21,4854,18],[5675,28,4854,18,"FacebookAuthProvider"],[5675,48,4854,18],[5676,6,4854,18],[5676,13,4854,18,"_callSuper"],[5676,23,4854,18],[5676,30,4854,18,"FacebookAuthProvider"],[5676,50,4854,18],[5676,53,4855,14],[5676,67,4855,28],[5676,68,4855,29],[5677,4,4856,4],[5678,4,4857,4],[5679,0,4858,0],[5680,0,4859,0],[5681,0,4860,0],[5682,0,4861,0],[5683,0,4862,0],[5684,0,4863,0],[5685,0,4864,0],[5686,0,4865,0],[5687,0,4866,0],[5688,0,4867,0],[5689,0,4868,0],[5690,4,4857,4,"_inherits"],[5690,13,4857,4],[5690,14,4857,4,"FacebookAuthProvider"],[5690,34,4857,4],[5690,36,4857,4,"_BaseOAuthProvider2"],[5690,55,4857,4],[5691,4,4857,4],[5691,11,4857,4,"_createClass"],[5691,23,4857,4],[5691,24,4857,4,"FacebookAuthProvider"],[5691,44,4857,4],[5692,6,4857,4,"key"],[5692,9,4857,4],[5693,6,4857,4,"value"],[5693,11,4857,4],[5693,13,4869,4],[5693,22,4869,11,"credential"],[5693,32,4869,21,"credential"],[5693,33,4869,22,"accessToken"],[5693,44,4869,33],[5693,46,4869,35],[5694,8,4870,8],[5694,15,4870,15,"OAuthCredential"],[5694,30,4870,30],[5694,31,4870,31,"_fromParams"],[5694,42,4870,42],[5694,43,4870,43],[5695,10,4871,12,"providerId"],[5695,20,4871,22],[5695,22,4871,24,"FacebookAuthProvider"],[5695,42,4871,44],[5695,43,4871,45,"PROVIDER_ID"],[5695,54,4871,56],[5696,10,4872,12,"signInMethod"],[5696,22,4872,24],[5696,24,4872,26,"FacebookAuthProvider"],[5696,44,4872,46],[5696,45,4872,47,"FACEBOOK_SIGN_IN_METHOD"],[5696,68,4872,70],[5697,10,4873,12,"accessToken"],[5698,8,4874,8],[5698,9,4874,9],[5698,10,4874,10],[5699,6,4875,4],[5700,6,4876,4],[5701,0,4877,0],[5702,0,4878,0],[5703,0,4879,0],[5704,0,4880,0],[5705,4,4876,4],[5706,6,4876,4,"key"],[5706,9,4876,4],[5707,6,4876,4,"value"],[5707,11,4876,4],[5707,13,4881,4],[5707,22,4881,11,"credentialFromResult"],[5707,42,4881,31,"credentialFromResult"],[5707,43,4881,32,"userCredential"],[5707,57,4881,46],[5707,59,4881,48],[5708,8,4882,8],[5708,15,4882,15,"FacebookAuthProvider"],[5708,35,4882,35],[5708,36,4882,36,"credentialFromTaggedObject"],[5708,62,4882,62],[5708,63,4882,63,"userCredential"],[5708,77,4882,77],[5708,78,4882,78],[5709,6,4883,4],[5710,6,4884,4],[5711,0,4885,0],[5712,0,4886,0],[5713,0,4887,0],[5714,0,4888,0],[5715,0,4889,0],[5716,4,4884,4],[5717,6,4884,4,"key"],[5717,9,4884,4],[5718,6,4884,4,"value"],[5718,11,4884,4],[5718,13,4890,4],[5718,22,4890,11,"credentialFromError"],[5718,41,4890,30,"credentialFromError"],[5718,42,4890,31,"error"],[5718,47,4890,36],[5718,49,4890,38],[5719,8,4891,8],[5719,15,4891,15,"FacebookAuthProvider"],[5719,35,4891,35],[5719,36,4891,36,"credentialFromTaggedObject"],[5719,62,4891,62],[5719,63,4891,64,"error"],[5719,68,4891,69],[5719,69,4891,70,"customData"],[5719,79,4891,80],[5719,83,4891,84],[5719,84,4891,85],[5719,85,4891,87],[5719,86,4891,88],[5720,6,4892,4],[5721,4,4892,5],[5722,6,4892,5,"key"],[5722,9,4892,5],[5723,6,4892,5,"value"],[5723,11,4892,5],[5723,13,4893,4],[5723,22,4893,11,"credentialFromTaggedObject"],[5723,48,4893,37,"credentialFromTaggedObject"],[5723,49,4893,37,"_ref12"],[5723,55,4893,37],[5723,57,4893,73],[5724,8,4893,73],[5724,12,4893,56,"tokenResponse"],[5724,25,4893,69],[5724,28,4893,69,"_ref12"],[5724,34,4893,69],[5724,35,4893,40,"_tokenResponse"],[5724,49,4893,54],[5725,8,4894,8],[5725,12,4894,12],[5725,13,4894,13,"tokenResponse"],[5725,26,4894,26],[5725,30,4894,30],[5725,32,4894,32],[5725,50,4894,50],[5725,54,4894,54,"tokenResponse"],[5725,67,4894,67],[5725,68,4894,68],[5725,70,4894,70],[5726,10,4895,12],[5726,17,4895,19],[5726,21,4895,23],[5727,8,4896,8],[5728,8,4897,8],[5728,12,4897,12],[5728,13,4897,13,"tokenResponse"],[5728,26,4897,26],[5728,27,4897,27,"oauthAccessToken"],[5728,43,4897,43],[5728,45,4897,45],[5729,10,4898,12],[5729,17,4898,19],[5729,21,4898,23],[5730,8,4899,8],[5731,8,4900,8],[5731,12,4900,12],[5732,10,4901,12],[5732,17,4901,19,"FacebookAuthProvider"],[5732,37,4901,39],[5732,38,4901,40,"credential"],[5732,48,4901,50],[5732,49,4901,51,"tokenResponse"],[5732,62,4901,64],[5732,63,4901,65,"oauthAccessToken"],[5732,79,4901,81],[5732,80,4901,82],[5733,8,4902,8],[5733,9,4902,9],[5733,10,4903,8],[5733,16,4903,14],[5734,10,4904,12],[5734,17,4904,19],[5734,21,4904,23],[5735,8,4905,8],[5736,6,4906,4],[5737,4,4906,5],[5738,2,4906,5],[5738,4,4853,35,"BaseOAuthProvider"],[5738,21,4853,52],[5739,2,4908,0],[5740,2,4909,0,"FacebookAuthProvider"],[5740,22,4909,20],[5740,23,4909,21,"FACEBOOK_SIGN_IN_METHOD"],[5740,46,4909,44],[5740,49,4909,47],[5740,63,4909,61],[5740,64,4909,62],[5741,2,4910,0],[5742,2,4911,0,"FacebookAuthProvider"],[5742,22,4911,20],[5742,23,4911,21,"PROVIDER_ID"],[5742,34,4911,32],[5742,37,4911,35],[5742,51,4911,49],[5742,52,4911,50],[5744,2,4913,0],[5745,0,4914,0],[5746,0,4915,0],[5747,0,4916,0],[5748,0,4917,0],[5749,0,4918,0],[5750,0,4919,0],[5751,0,4920,0],[5752,0,4921,0],[5753,0,4922,0],[5754,0,4923,0],[5755,0,4924,0],[5756,0,4925,0],[5757,0,4926,0],[5758,0,4927,0],[5759,0,4928,0],[5760,2,4929,0],[5761,0,4930,0],[5762,0,4931,0],[5763,0,4932,0],[5764,0,4933,0],[5765,0,4934,0],[5766,0,4935,0],[5767,0,4936,0],[5768,0,4937,0],[5769,0,4938,0],[5770,0,4939,0],[5771,0,4940,0],[5772,0,4941,0],[5773,0,4942,0],[5774,0,4943,0],[5775,0,4944,0],[5776,0,4945,0],[5777,0,4946,0],[5778,0,4947,0],[5779,0,4948,0],[5780,0,4949,0],[5781,0,4950,0],[5782,0,4951,0],[5783,0,4952,0],[5784,0,4953,0],[5785,0,4954,0],[5786,0,4955,0],[5787,0,4956,0],[5788,0,4957,0],[5789,0,4958,0],[5790,0,4959,0],[5791,0,4960,0],[5792,0,4961,0],[5793,0,4962,0],[5794,0,4963,0],[5795,0,4964,0],[5796,0,4965,0],[5797,0,4966,0],[5798,0,4967,0],[5799,0,4968,0],[5800,0,4969,0],[5801,2,4929,0],[5801,6,4970,6,"GoogleAuthProvider"],[5801,24,4970,24],[5801,50,4970,24,"_BaseOAuthProvider3"],[5801,69,4970,24],[5802,4,4971,4],[5802,13,4971,4,"GoogleAuthProvider"],[5802,32,4971,4],[5802,34,4971,18],[5803,6,4971,18],[5803,10,4971,18,"_this0"],[5803,16,4971,18],[5804,6,4971,18,"_classCallCheck"],[5804,21,4971,18],[5804,28,4971,18,"GoogleAuthProvider"],[5804,46,4971,18],[5805,6,4972,8,"_this0"],[5805,12,4972,8],[5805,15,4972,8,"_callSuper"],[5805,25,4972,8],[5805,32,4972,8,"GoogleAuthProvider"],[5805,50,4972,8],[5805,53,4972,14],[5805,65,4972,26],[5805,66,4972,27],[5806,6,4973,8,"_this0"],[5806,12,4973,8],[5806,13,4973,13,"addScope"],[5806,21,4973,21],[5806,22,4973,22],[5806,31,4973,31],[5806,32,4973,32],[5807,6,4973,33],[5807,13,4973,33,"_this0"],[5807,19,4973,33],[5808,4,4974,4],[5809,4,4975,4],[5810,0,4976,0],[5811,0,4977,0],[5812,0,4978,0],[5813,0,4979,0],[5814,0,4980,0],[5815,0,4981,0],[5816,0,4982,0],[5817,0,4983,0],[5818,0,4984,0],[5819,0,4985,0],[5820,0,4986,0],[5821,0,4987,0],[5822,4,4975,4,"_inherits"],[5822,13,4975,4],[5822,14,4975,4,"GoogleAuthProvider"],[5822,32,4975,4],[5822,34,4975,4,"_BaseOAuthProvider3"],[5822,53,4975,4],[5823,4,4975,4],[5823,11,4975,4,"_createClass"],[5823,23,4975,4],[5823,24,4975,4,"GoogleAuthProvider"],[5823,42,4975,4],[5824,6,4975,4,"key"],[5824,9,4975,4],[5825,6,4975,4,"value"],[5825,11,4975,4],[5825,13,4988,4],[5825,22,4988,11,"credential"],[5825,32,4988,21,"credential"],[5825,33,4988,22,"idToken"],[5825,40,4988,29],[5825,42,4988,31,"accessToken"],[5825,53,4988,42],[5825,55,4988,44],[5826,8,4989,8],[5826,15,4989,15,"OAuthCredential"],[5826,30,4989,30],[5826,31,4989,31,"_fromParams"],[5826,42,4989,42],[5826,43,4989,43],[5827,10,4990,12,"providerId"],[5827,20,4990,22],[5827,22,4990,24,"GoogleAuthProvider"],[5827,40,4990,42],[5827,41,4990,43,"PROVIDER_ID"],[5827,52,4990,54],[5828,10,4991,12,"signInMethod"],[5828,22,4991,24],[5828,24,4991,26,"GoogleAuthProvider"],[5828,42,4991,44],[5828,43,4991,45,"GOOGLE_SIGN_IN_METHOD"],[5828,64,4991,66],[5829,10,4992,12,"idToken"],[5829,17,4992,19],[5830,10,4993,12,"accessToken"],[5831,8,4994,8],[5831,9,4994,9],[5831,10,4994,10],[5832,6,4995,4],[5833,6,4996,4],[5834,0,4997,0],[5835,0,4998,0],[5836,0,4999,0],[5837,0,5000,0],[5838,4,4996,4],[5839,6,4996,4,"key"],[5839,9,4996,4],[5840,6,4996,4,"value"],[5840,11,4996,4],[5840,13,5001,4],[5840,22,5001,11,"credentialFromResult"],[5840,42,5001,31,"credentialFromResult"],[5840,43,5001,32,"userCredential"],[5840,57,5001,46],[5840,59,5001,48],[5841,8,5002,8],[5841,15,5002,15,"GoogleAuthProvider"],[5841,33,5002,33],[5841,34,5002,34,"credentialFromTaggedObject"],[5841,60,5002,60],[5841,61,5002,61,"userCredential"],[5841,75,5002,75],[5841,76,5002,76],[5842,6,5003,4],[5843,6,5004,4],[5844,0,5005,0],[5845,0,5006,0],[5846,0,5007,0],[5847,0,5008,0],[5848,0,5009,0],[5849,4,5004,4],[5850,6,5004,4,"key"],[5850,9,5004,4],[5851,6,5004,4,"value"],[5851,11,5004,4],[5851,13,5010,4],[5851,22,5010,11,"credentialFromError"],[5851,41,5010,30,"credentialFromError"],[5851,42,5010,31,"error"],[5851,47,5010,36],[5851,49,5010,38],[5852,8,5011,8],[5852,15,5011,15,"GoogleAuthProvider"],[5852,33,5011,33],[5852,34,5011,34,"credentialFromTaggedObject"],[5852,60,5011,60],[5852,61,5011,62,"error"],[5852,66,5011,67],[5852,67,5011,68,"customData"],[5852,77,5011,78],[5852,81,5011,82],[5852,82,5011,83],[5852,83,5011,85],[5852,84,5011,86],[5853,6,5012,4],[5854,4,5012,5],[5855,6,5012,5,"key"],[5855,9,5012,5],[5856,6,5012,5,"value"],[5856,11,5012,5],[5856,13,5013,4],[5856,22,5013,11,"credentialFromTaggedObject"],[5856,48,5013,37,"credentialFromTaggedObject"],[5856,49,5013,37,"_ref13"],[5856,55,5013,37],[5856,57,5013,73],[5857,8,5013,73],[5857,12,5013,56,"tokenResponse"],[5857,25,5013,69],[5857,28,5013,69,"_ref13"],[5857,34,5013,69],[5857,35,5013,40,"_tokenResponse"],[5857,49,5013,54],[5858,8,5014,8],[5858,12,5014,12],[5858,13,5014,13,"tokenResponse"],[5858,26,5014,26],[5858,28,5014,28],[5859,10,5015,12],[5859,17,5015,19],[5859,21,5015,23],[5860,8,5016,8],[5861,8,5017,8],[5861,12,5017,16,"oauthIdToken"],[5861,24,5017,28],[5861,27,5017,51,"tokenResponse"],[5861,40,5017,64],[5861,41,5017,16,"oauthIdToken"],[5861,53,5017,28],[5862,10,5017,30,"oauthAccessToken"],[5862,26,5017,46],[5862,29,5017,51,"tokenResponse"],[5862,42,5017,64],[5862,43,5017,30,"oauthAccessToken"],[5862,59,5017,46],[5863,8,5018,8],[5863,12,5018,12],[5863,13,5018,13,"oauthIdToken"],[5863,25,5018,25],[5863,29,5018,29],[5863,30,5018,30,"oauthAccessToken"],[5863,46,5018,46],[5863,48,5018,48],[5864,10,5019,12],[5865,10,5020,12],[5865,17,5020,19],[5865,21,5020,23],[5866,8,5021,8],[5867,8,5022,8],[5867,12,5022,12],[5868,10,5023,12],[5868,17,5023,19,"GoogleAuthProvider"],[5868,35,5023,37],[5868,36,5023,38,"credential"],[5868,46,5023,48],[5868,47,5023,49,"oauthIdToken"],[5868,59,5023,61],[5868,61,5023,63,"oauthAccessToken"],[5868,77,5023,79],[5868,78,5023,80],[5869,8,5024,8],[5869,9,5024,9],[5869,10,5025,8],[5869,16,5025,14],[5870,10,5026,12],[5870,17,5026,19],[5870,21,5026,23],[5871,8,5027,8],[5872,6,5028,4],[5873,4,5028,5],[5874,2,5028,5],[5874,4,4970,33,"BaseOAuthProvider"],[5874,21,4970,50],[5875,2,5030,0],[5876,2,5031,0,"GoogleAuthProvider"],[5876,20,5031,18],[5876,21,5031,19,"GOOGLE_SIGN_IN_METHOD"],[5876,42,5031,40],[5876,45,5031,43],[5876,57,5031,55],[5876,58,5031,56],[5877,2,5032,0],[5878,2,5033,0,"GoogleAuthProvider"],[5878,20,5033,18],[5878,21,5033,19,"PROVIDER_ID"],[5878,32,5033,30],[5878,35,5033,33],[5878,47,5033,45],[5878,48,5033,46],[5880,2,5035,0],[5881,0,5036,0],[5882,0,5037,0],[5883,0,5038,0],[5884,0,5039,0],[5885,0,5040,0],[5886,0,5041,0],[5887,0,5042,0],[5888,0,5043,0],[5889,0,5044,0],[5890,0,5045,0],[5891,0,5046,0],[5892,0,5047,0],[5893,0,5048,0],[5894,0,5049,0],[5895,0,5050,0],[5896,2,5051,0],[5897,0,5052,0],[5898,0,5053,0],[5899,0,5054,0],[5900,0,5055,0],[5901,0,5056,0],[5902,0,5057,0],[5903,0,5058,0],[5904,0,5059,0],[5905,0,5060,0],[5906,0,5061,0],[5907,0,5062,0],[5908,0,5063,0],[5909,0,5064,0],[5910,0,5065,0],[5911,0,5066,0],[5912,0,5067,0],[5913,0,5068,0],[5914,0,5069,0],[5915,0,5070,0],[5916,0,5071,0],[5917,0,5072,0],[5918,0,5073,0],[5919,0,5074,0],[5920,0,5075,0],[5921,0,5076,0],[5922,0,5077,0],[5923,0,5078,0],[5924,0,5079,0],[5925,0,5080,0],[5926,0,5081,0],[5927,0,5082,0],[5928,0,5083,0],[5929,0,5084,0],[5930,0,5085,0],[5931,0,5086,0],[5932,0,5087,0],[5933,0,5088,0],[5934,0,5089,0],[5935,0,5090,0],[5936,0,5091,0],[5937,0,5092,0],[5938,2,5051,0],[5938,6,5093,6,"GithubAuthProvider"],[5938,24,5093,24],[5938,50,5093,24,"_BaseOAuthProvider4"],[5938,69,5093,24],[5939,4,5094,4],[5939,13,5094,4,"GithubAuthProvider"],[5939,32,5094,4],[5939,34,5094,18],[5940,6,5094,18,"_classCallCheck"],[5940,21,5094,18],[5940,28,5094,18,"GithubAuthProvider"],[5940,46,5094,18],[5941,6,5094,18],[5941,13,5094,18,"_callSuper"],[5941,23,5094,18],[5941,30,5094,18,"GithubAuthProvider"],[5941,48,5094,18],[5941,51,5095,14],[5941,63,5095,26],[5941,64,5095,27],[5942,4,5096,4],[5943,4,5097,4],[5944,0,5098,0],[5945,0,5099,0],[5946,0,5100,0],[5947,0,5101,0],[5948,4,5097,4,"_inherits"],[5948,13,5097,4],[5948,14,5097,4,"GithubAuthProvider"],[5948,32,5097,4],[5948,34,5097,4,"_BaseOAuthProvider4"],[5948,53,5097,4],[5949,4,5097,4],[5949,11,5097,4,"_createClass"],[5949,23,5097,4],[5949,24,5097,4,"GithubAuthProvider"],[5949,42,5097,4],[5950,6,5097,4,"key"],[5950,9,5097,4],[5951,6,5097,4,"value"],[5951,11,5097,4],[5951,13,5102,4],[5951,22,5102,11,"credential"],[5951,32,5102,21,"credential"],[5951,33,5102,22,"accessToken"],[5951,44,5102,33],[5951,46,5102,35],[5952,8,5103,8],[5952,15,5103,15,"OAuthCredential"],[5952,30,5103,30],[5952,31,5103,31,"_fromParams"],[5952,42,5103,42],[5952,43,5103,43],[5953,10,5104,12,"providerId"],[5953,20,5104,22],[5953,22,5104,24,"GithubAuthProvider"],[5953,40,5104,42],[5953,41,5104,43,"PROVIDER_ID"],[5953,52,5104,54],[5954,10,5105,12,"signInMethod"],[5954,22,5105,24],[5954,24,5105,26,"GithubAuthProvider"],[5954,42,5105,44],[5954,43,5105,45,"GITHUB_SIGN_IN_METHOD"],[5954,64,5105,66],[5955,10,5106,12,"accessToken"],[5956,8,5107,8],[5956,9,5107,9],[5956,10,5107,10],[5957,6,5108,4],[5958,6,5109,4],[5959,0,5110,0],[5960,0,5111,0],[5961,0,5112,0],[5962,0,5113,0],[5963,4,5109,4],[5964,6,5109,4,"key"],[5964,9,5109,4],[5965,6,5109,4,"value"],[5965,11,5109,4],[5965,13,5114,4],[5965,22,5114,11,"credentialFromResult"],[5965,42,5114,31,"credentialFromResult"],[5965,43,5114,32,"userCredential"],[5965,57,5114,46],[5965,59,5114,48],[5966,8,5115,8],[5966,15,5115,15,"GithubAuthProvider"],[5966,33,5115,33],[5966,34,5115,34,"credentialFromTaggedObject"],[5966,60,5115,60],[5966,61,5115,61,"userCredential"],[5966,75,5115,75],[5966,76,5115,76],[5967,6,5116,4],[5968,6,5117,4],[5969,0,5118,0],[5970,0,5119,0],[5971,0,5120,0],[5972,0,5121,0],[5973,0,5122,0],[5974,4,5117,4],[5975,6,5117,4,"key"],[5975,9,5117,4],[5976,6,5117,4,"value"],[5976,11,5117,4],[5976,13,5123,4],[5976,22,5123,11,"credentialFromError"],[5976,41,5123,30,"credentialFromError"],[5976,42,5123,31,"error"],[5976,47,5123,36],[5976,49,5123,38],[5977,8,5124,8],[5977,15,5124,15,"GithubAuthProvider"],[5977,33,5124,33],[5977,34,5124,34,"credentialFromTaggedObject"],[5977,60,5124,60],[5977,61,5124,62,"error"],[5977,66,5124,67],[5977,67,5124,68,"customData"],[5977,77,5124,78],[5977,81,5124,82],[5977,82,5124,83],[5977,83,5124,85],[5977,84,5124,86],[5978,6,5125,4],[5979,4,5125,5],[5980,6,5125,5,"key"],[5980,9,5125,5],[5981,6,5125,5,"value"],[5981,11,5125,5],[5981,13,5126,4],[5981,22,5126,11,"credentialFromTaggedObject"],[5981,48,5126,37,"credentialFromTaggedObject"],[5981,49,5126,37,"_ref14"],[5981,55,5126,37],[5981,57,5126,73],[5982,8,5126,73],[5982,12,5126,56,"tokenResponse"],[5982,25,5126,69],[5982,28,5126,69,"_ref14"],[5982,34,5126,69],[5982,35,5126,40,"_tokenResponse"],[5982,49,5126,54],[5983,8,5127,8],[5983,12,5127,12],[5983,13,5127,13,"tokenResponse"],[5983,26,5127,26],[5983,30,5127,30],[5983,32,5127,32],[5983,50,5127,50],[5983,54,5127,54,"tokenResponse"],[5983,67,5127,67],[5983,68,5127,68],[5983,70,5127,70],[5984,10,5128,12],[5984,17,5128,19],[5984,21,5128,23],[5985,8,5129,8],[5986,8,5130,8],[5986,12,5130,12],[5986,13,5130,13,"tokenResponse"],[5986,26,5130,26],[5986,27,5130,27,"oauthAccessToken"],[5986,43,5130,43],[5986,45,5130,45],[5987,10,5131,12],[5987,17,5131,19],[5987,21,5131,23],[5988,8,5132,8],[5989,8,5133,8],[5989,12,5133,12],[5990,10,5134,12],[5990,17,5134,19,"GithubAuthProvider"],[5990,35,5134,37],[5990,36,5134,38,"credential"],[5990,46,5134,48],[5990,47,5134,49,"tokenResponse"],[5990,60,5134,62],[5990,61,5134,63,"oauthAccessToken"],[5990,77,5134,79],[5990,78,5134,80],[5991,8,5135,8],[5991,9,5135,9],[5991,10,5136,8],[5991,16,5136,14],[5992,10,5137,12],[5992,17,5137,19],[5992,21,5137,23],[5993,8,5138,8],[5994,6,5139,4],[5995,4,5139,5],[5996,2,5139,5],[5996,4,5093,33,"BaseOAuthProvider"],[5996,21,5093,50],[5997,2,5141,0],[5998,2,5142,0,"GithubAuthProvider"],[5998,20,5142,18],[5998,21,5142,19,"GITHUB_SIGN_IN_METHOD"],[5998,42,5142,40],[5998,45,5142,43],[5998,57,5142,55],[5998,58,5142,56],[5999,2,5143,0],[6000,2,5144,0,"GithubAuthProvider"],[6000,20,5144,18],[6000,21,5144,19,"PROVIDER_ID"],[6000,32,5144,30],[6000,35,5144,33],[6000,47,5144,45],[6000,48,5144,46],[6002,2,5146,0],[6003,0,5147,0],[6004,0,5148,0],[6005,0,5149,0],[6006,0,5150,0],[6007,0,5151,0],[6008,0,5152,0],[6009,0,5153,0],[6010,0,5154,0],[6011,0,5155,0],[6012,0,5156,0],[6013,0,5157,0],[6014,0,5158,0],[6015,0,5159,0],[6016,0,5160,0],[6017,0,5161,0],[6018,2,5162,0],[6018,6,5162,6,"IDP_REQUEST_URI"],[6018,21,5162,21],[6018,24,5162,24],[6018,42,5162,42],[6019,2,5163,0],[6020,0,5164,0],[6021,0,5165,0],[6022,2,5163,0],[6022,6,5166,6,"SAMLAuthCredential"],[6022,24,5166,24],[6022,50,5166,24,"_AuthCredential4"],[6022,66,5166,24],[6023,4,5167,4],[6024,4,5168,4],[6024,13,5168,4,"SAMLAuthCredential"],[6024,32,5168,16,"providerId"],[6024,42,5168,26],[6024,44,5168,28,"pendingToken"],[6024,56,5168,40],[6024,58,5168,42],[6025,6,5168,42],[6025,10,5168,42,"_this1"],[6025,16,5168,42],[6026,6,5168,42,"_classCallCheck"],[6026,21,5168,42],[6026,28,5168,42,"SAMLAuthCredential"],[6026,46,5168,42],[6027,6,5169,8,"_this1"],[6027,12,5169,8],[6027,15,5169,8,"_callSuper"],[6027,25,5169,8],[6027,32,5169,8,"SAMLAuthCredential"],[6027,50,5169,8],[6027,53,5169,14,"providerId"],[6027,63,5169,24],[6027,65,5169,26,"providerId"],[6027,75,5169,36],[6028,6,5170,8,"_this1"],[6028,12,5170,8],[6028,13,5170,13,"pendingToken"],[6028,25,5170,25],[6028,28,5170,28,"pendingToken"],[6028,40,5170,40],[6029,6,5170,41],[6029,13,5170,41,"_this1"],[6029,19,5170,41],[6030,4,5171,4],[6031,4,5172,4],[6032,4,5172,4,"_inherits"],[6032,13,5172,4],[6032,14,5172,4,"SAMLAuthCredential"],[6032,32,5172,4],[6032,34,5172,4,"_AuthCredential4"],[6032,50,5172,4],[6033,4,5172,4],[6033,11,5172,4,"_createClass"],[6033,23,5172,4],[6033,24,5172,4,"SAMLAuthCredential"],[6033,42,5172,4],[6034,6,5172,4,"key"],[6034,9,5172,4],[6035,6,5172,4,"value"],[6035,11,5172,4],[6035,13,5173,4],[6035,22,5173,4,"_getIdTokenResponse"],[6035,41,5173,23,"_getIdTokenResponse"],[6035,42,5173,24,"auth"],[6035,46,5173,28],[6035,48,5173,30],[6036,8,5174,8],[6036,12,5174,14,"request"],[6036,19,5174,21],[6036,22,5174,24],[6036,26,5174,28],[6036,27,5174,29,"buildRequest"],[6036,39,5174,41],[6036,40,5174,42],[6036,41,5174,43],[6037,8,5175,8],[6037,15,5175,15,"signInWithIdp"],[6037,28,5175,28],[6037,29,5175,29,"auth"],[6037,33,5175,33],[6037,35,5175,35,"request"],[6037,42,5175,42],[6037,43,5175,43],[6038,6,5176,4],[6039,6,5177,4],[6040,4,5177,4],[6041,6,5177,4,"key"],[6041,9,5177,4],[6042,6,5177,4,"value"],[6042,11,5177,4],[6042,13,5178,4],[6042,22,5178,4,"_linkToIdToken"],[6042,36,5178,18,"_linkToIdToken"],[6042,37,5178,19,"auth"],[6042,41,5178,23],[6042,43,5178,25,"idToken"],[6042,50,5178,32],[6042,52,5178,34],[6043,8,5179,8],[6043,12,5179,14,"request"],[6043,19,5179,21],[6043,22,5179,24],[6043,26,5179,28],[6043,27,5179,29,"buildRequest"],[6043,39,5179,41],[6043,40,5179,42],[6043,41,5179,43],[6044,8,5180,8,"request"],[6044,15,5180,15],[6044,16,5180,16,"idToken"],[6044,23,5180,23],[6044,26,5180,26,"idToken"],[6044,33,5180,33],[6045,8,5181,8],[6045,15,5181,15,"signInWithIdp"],[6045,28,5181,28],[6045,29,5181,29,"auth"],[6045,33,5181,33],[6045,35,5181,35,"request"],[6045,42,5181,42],[6045,43,5181,43],[6046,6,5182,4],[6047,6,5183,4],[6048,4,5183,4],[6049,6,5183,4,"key"],[6049,9,5183,4],[6050,6,5183,4,"value"],[6050,11,5183,4],[6050,13,5184,4],[6050,22,5184,4,"_getReauthenticationResolver"],[6050,50,5184,32,"_getReauthenticationResolver"],[6050,51,5184,33,"auth"],[6050,55,5184,37],[6050,57,5184,39],[6051,8,5185,8],[6051,12,5185,14,"request"],[6051,19,5185,21],[6051,22,5185,24],[6051,26,5185,28],[6051,27,5185,29,"buildRequest"],[6051,39,5185,41],[6051,40,5185,42],[6051,41,5185,43],[6052,8,5186,8,"request"],[6052,15,5186,15],[6052,16,5186,16,"autoCreate"],[6052,26,5186,26],[6052,29,5186,29],[6052,34,5186,34],[6053,8,5187,8],[6053,15,5187,15,"signInWithIdp"],[6053,28,5187,28],[6053,29,5187,29,"auth"],[6053,33,5187,33],[6053,35,5187,35,"request"],[6053,42,5187,42],[6053,43,5187,43],[6054,6,5188,4],[6055,6,5189,4],[6056,4,5189,4],[6057,6,5189,4,"key"],[6057,9,5189,4],[6058,6,5189,4,"value"],[6058,11,5189,4],[6058,13,5190,4],[6058,22,5190,4,"toJSON"],[6058,28,5190,10,"toJSON"],[6058,29,5190,10],[6058,31,5190,13],[6059,8,5191,8],[6059,15,5191,15],[6060,10,5192,12,"signInMethod"],[6060,22,5192,24],[6060,24,5192,26],[6060,28,5192,30],[6060,29,5192,31,"signInMethod"],[6060,41,5192,43],[6061,10,5193,12,"providerId"],[6061,20,5193,22],[6061,22,5193,24],[6061,26,5193,28],[6061,27,5193,29,"providerId"],[6061,37,5193,39],[6062,10,5194,12,"pendingToken"],[6062,22,5194,24],[6062,24,5194,26],[6062,28,5194,30],[6062,29,5194,31,"pendingToken"],[6063,8,5195,8],[6063,9,5195,9],[6064,6,5196,4],[6065,6,5197,4],[6066,0,5198,0],[6067,0,5199,0],[6068,0,5200,0],[6069,0,5201,0],[6070,0,5202,0],[6071,0,5203,0],[6072,0,5204,0],[6073,0,5205,0],[6074,4,5197,4],[6075,6,5197,4,"key"],[6075,9,5197,4],[6076,6,5197,4,"value"],[6076,11,5197,4],[6076,13,5225,4],[6076,22,5225,4,"buildRequest"],[6076,34,5225,16,"buildRequest"],[6076,35,5225,16],[6076,37,5225,19],[6077,8,5226,8],[6077,15,5226,15],[6078,10,5227,12,"requestUri"],[6078,20,5227,22],[6078,22,5227,24,"IDP_REQUEST_URI"],[6078,37,5227,39],[6079,10,5228,12,"returnSecureToken"],[6079,27,5228,29],[6079,29,5228,31],[6079,33,5228,35],[6080,10,5229,12,"pendingToken"],[6080,22,5229,24],[6080,24,5229,26],[6080,28,5229,30],[6080,29,5229,31,"pendingToken"],[6081,8,5230,8],[6081,9,5230,9],[6082,6,5231,4],[6083,4,5231,5],[6084,6,5231,5,"key"],[6084,9,5231,5],[6085,6,5231,5,"value"],[6085,11,5231,5],[6085,13,5206,4],[6085,22,5206,11,"fromJSON"],[6085,30,5206,19,"fromJSON"],[6085,31,5206,20,"json"],[6085,35,5206,24],[6085,37,5206,26],[6086,8,5207,8],[6086,12,5207,14,"obj"],[6086,15,5207,17],[6086,18,5207,20],[6086,25,5207,27,"json"],[6086,29,5207,31],[6086,34,5207,36],[6086,42,5207,44],[6086,45,5207,47,"JSON"],[6086,49,5207,51],[6086,50,5207,52,"parse"],[6086,55,5207,57],[6086,56,5207,58,"json"],[6086,60,5207,62],[6086,61,5207,63],[6086,64,5207,66,"json"],[6086,68,5207,70],[6087,8,5208,8],[6087,12,5208,16,"providerId"],[6087,22,5208,26],[6087,25,5208,59,"obj"],[6087,28,5208,62],[6087,29,5208,16,"providerId"],[6087,39,5208,26],[6088,10,5208,28,"signInMethod"],[6088,22,5208,40],[6088,25,5208,59,"obj"],[6088,28,5208,62],[6088,29,5208,28,"signInMethod"],[6088,41,5208,40],[6089,10,5208,42,"pendingToken"],[6089,22,5208,54],[6089,25,5208,59,"obj"],[6089,28,5208,62],[6089,29,5208,42,"pendingToken"],[6089,41,5208,54],[6090,8,5209,8],[6090,12,5209,12],[6090,13,5209,13,"providerId"],[6090,23,5209,23],[6090,27,5210,12],[6090,28,5210,13,"signInMethod"],[6090,40,5210,25],[6090,44,5211,12],[6090,45,5211,13,"pendingToken"],[6090,57,5211,25],[6090,61,5212,12,"providerId"],[6090,71,5212,22],[6090,76,5212,27,"signInMethod"],[6090,88,5212,39],[6090,90,5212,41],[6091,10,5213,12],[6091,17,5213,19],[6091,21,5213,23],[6092,8,5214,8],[6093,8,5215,8],[6093,15,5215,15],[6093,19,5215,19,"SAMLAuthCredential"],[6093,37,5215,37],[6093,38,5215,38,"providerId"],[6093,48,5215,48],[6093,50,5215,50,"pendingToken"],[6093,62,5215,62],[6093,63,5215,63],[6094,6,5216,4],[6095,6,5217,4],[6096,0,5218,0],[6097,0,5219,0],[6098,0,5220,0],[6099,0,5221,0],[6100,4,5217,4],[6101,6,5217,4,"key"],[6101,9,5217,4],[6102,6,5217,4,"value"],[6102,11,5217,4],[6102,13,5222,4],[6102,22,5222,11,"_create"],[6102,29,5222,18,"_create"],[6102,30,5222,19,"providerId"],[6102,40,5222,29],[6102,42,5222,31,"pendingToken"],[6102,54,5222,43],[6102,56,5222,45],[6103,8,5223,8],[6103,15,5223,15],[6103,19,5223,19,"SAMLAuthCredential"],[6103,37,5223,37],[6103,38,5223,38,"providerId"],[6103,48,5223,48],[6103,50,5223,50,"pendingToken"],[6103,62,5223,62],[6103,63,5223,63],[6104,6,5224,4],[6105,4,5224,5],[6106,2,5224,5],[6106,4,5166,33,"AuthCredential"],[6106,18,5166,47],[6107,2,5234,0],[6108,0,5235,0],[6109,0,5236,0],[6110,0,5237,0],[6111,0,5238,0],[6112,0,5239,0],[6113,0,5240,0],[6114,0,5241,0],[6115,0,5242,0],[6116,0,5243,0],[6117,0,5244,0],[6118,0,5245,0],[6119,0,5246,0],[6120,0,5247,0],[6121,0,5248,0],[6122,0,5249,0],[6123,2,5250,0],[6123,6,5250,6,"SAML_PROVIDER_PREFIX"],[6123,26,5250,26],[6123,29,5250,29],[6123,36,5250,36],[6124,2,5251,0],[6125,0,5252,0],[6126,0,5253,0],[6127,0,5254,0],[6128,0,5255,0],[6129,2,5251,0],[6129,6,5256,6,"SAMLAuthProvider"],[6129,22,5256,22],[6129,48,5256,22,"_FederatedAuthProvide2"],[6129,70,5256,22],[6130,4,5257,4],[6131,0,5258,0],[6132,0,5259,0],[6133,0,5260,0],[6134,4,5261,4],[6134,13,5261,4,"SAMLAuthProvider"],[6134,30,5261,16,"providerId"],[6134,40,5261,26],[6134,42,5261,28],[6135,6,5261,28,"_classCallCheck"],[6135,21,5261,28],[6135,28,5261,28,"SAMLAuthProvider"],[6135,44,5261,28],[6136,6,5262,8,"_assert"],[6136,13,5262,15],[6136,14,5262,16,"providerId"],[6136,24,5262,26],[6136,25,5262,27,"startsWith"],[6136,35,5262,37],[6136,36,5262,38,"SAML_PROVIDER_PREFIX"],[6136,56,5262,58],[6136,57,5262,59],[6136,59,5262,61],[6136,75,5262,77],[6136,76,5262,78],[6136,110,5262,112],[6136,111,5262,113],[6137,6,5262,114],[6137,13,5262,114,"_callSuper"],[6137,23,5262,114],[6137,30,5262,114,"SAMLAuthProvider"],[6137,46,5262,114],[6137,49,5263,14,"providerId"],[6137,59,5263,24],[6138,4,5264,4],[6139,4,5265,4],[6140,0,5266,0],[6141,0,5267,0],[6142,0,5268,0],[6143,0,5269,0],[6144,0,5270,0],[6145,0,5271,0],[6146,0,5272,0],[6147,0,5273,0],[6148,0,5274,0],[6149,0,5275,0],[6150,0,5276,0],[6151,0,5277,0],[6152,0,5278,0],[6153,0,5279,0],[6154,0,5280,0],[6155,4,5265,4,"_inherits"],[6155,13,5265,4],[6155,14,5265,4,"SAMLAuthProvider"],[6155,30,5265,4],[6155,32,5265,4,"_FederatedAuthProvide2"],[6155,54,5265,4],[6156,4,5265,4],[6156,11,5265,4,"_createClass"],[6156,23,5265,4],[6156,24,5265,4,"SAMLAuthProvider"],[6156,40,5265,4],[6157,6,5265,4,"key"],[6157,9,5265,4],[6158,6,5265,4,"value"],[6158,11,5265,4],[6158,13,5281,4],[6158,22,5281,11,"credentialFromResult"],[6158,42,5281,31,"credentialFromResult"],[6158,43,5281,32,"userCredential"],[6158,57,5281,46],[6158,59,5281,48],[6159,8,5282,8],[6159,15,5282,15,"SAMLAuthProvider"],[6159,31,5282,31],[6159,32,5282,32,"samlCredentialFromTaggedObject"],[6159,62,5282,62],[6159,63,5282,63,"userCredential"],[6159,77,5282,77],[6159,78,5282,78],[6160,6,5283,4],[6161,6,5284,4],[6162,0,5285,0],[6163,0,5286,0],[6164,0,5287,0],[6165,0,5288,0],[6166,0,5289,0],[6167,4,5284,4],[6168,6,5284,4,"key"],[6168,9,5284,4],[6169,6,5284,4,"value"],[6169,11,5284,4],[6169,13,5290,4],[6169,22,5290,11,"credentialFromError"],[6169,41,5290,30,"credentialFromError"],[6169,42,5290,31,"error"],[6169,47,5290,36],[6169,49,5290,38],[6170,8,5291,8],[6170,15,5291,15,"SAMLAuthProvider"],[6170,31,5291,31],[6170,32,5291,32,"samlCredentialFromTaggedObject"],[6170,62,5291,62],[6170,63,5291,64,"error"],[6170,68,5291,69],[6170,69,5291,70,"customData"],[6170,79,5291,80],[6170,83,5291,84],[6170,84,5291,85],[6170,85,5291,87],[6170,86,5291,88],[6171,6,5292,4],[6172,6,5293,4],[6173,0,5294,0],[6174,0,5295,0],[6175,0,5296,0],[6176,4,5293,4],[6177,6,5293,4,"key"],[6177,9,5293,4],[6178,6,5293,4,"value"],[6178,11,5293,4],[6178,13,5297,4],[6178,22,5297,11,"credentialFromJSON"],[6178,40,5297,29,"credentialFromJSON"],[6178,41,5297,30,"json"],[6178,45,5297,34],[6178,47,5297,36],[6179,8,5298,8],[6179,12,5298,14,"credential"],[6179,22,5298,24],[6179,25,5298,27,"SAMLAuthCredential"],[6179,43,5298,45],[6179,44,5298,46,"fromJSON"],[6179,52,5298,54],[6179,53,5298,55,"json"],[6179,57,5298,59],[6179,58,5298,60],[6180,8,5299,8,"_assert"],[6180,15,5299,15],[6180,16,5299,16,"credential"],[6180,26,5299,26],[6180,28,5299,28],[6180,44,5299,44],[6180,45,5299,45],[6180,79,5299,79],[6180,80,5299,80],[6181,8,5300,8],[6181,15,5300,15,"credential"],[6181,25,5300,25],[6182,6,5301,4],[6183,4,5301,5],[6184,6,5301,5,"key"],[6184,9,5301,5],[6185,6,5301,5,"value"],[6185,11,5301,5],[6185,13,5302,4],[6185,22,5302,11,"samlCredentialFromTaggedObject"],[6185,52,5302,41,"samlCredentialFromTaggedObject"],[6185,53,5302,41,"_ref15"],[6185,59,5302,41],[6185,61,5302,77],[6186,8,5302,77],[6186,12,5302,60,"tokenResponse"],[6186,25,5302,73],[6186,28,5302,73,"_ref15"],[6186,34,5302,73],[6186,35,5302,44,"_tokenResponse"],[6186,49,5302,58],[6187,8,5303,8],[6187,12,5303,12],[6187,13,5303,13,"tokenResponse"],[6187,26,5303,26],[6187,28,5303,28],[6188,10,5304,12],[6188,17,5304,19],[6188,21,5304,23],[6189,8,5305,8],[6190,8,5306,8],[6190,12,5306,16,"pendingToken"],[6190,24,5306,28],[6190,27,5306,45,"tokenResponse"],[6190,40,5306,58],[6190,41,5306,16,"pendingToken"],[6190,53,5306,28],[6191,10,5306,30,"providerId"],[6191,20,5306,40],[6191,23,5306,45,"tokenResponse"],[6191,36,5306,58],[6191,37,5306,30,"providerId"],[6191,47,5306,40],[6192,8,5307,8],[6192,12,5307,12],[6192,13,5307,13,"pendingToken"],[6192,25,5307,25],[6192,29,5307,29],[6192,30,5307,30,"providerId"],[6192,40,5307,40],[6192,42,5307,42],[6193,10,5308,12],[6193,17,5308,19],[6193,21,5308,23],[6194,8,5309,8],[6195,8,5310,8],[6195,12,5310,12],[6196,10,5311,12],[6196,17,5311,19,"SAMLAuthCredential"],[6196,35,5311,37],[6196,36,5311,38,"_create"],[6196,43,5311,45],[6196,44,5311,46,"providerId"],[6196,54,5311,56],[6196,56,5311,58,"pendingToken"],[6196,68,5311,70],[6196,69,5311,71],[6197,8,5312,8],[6197,9,5312,9],[6197,10,5313,8],[6197,17,5313,15,"e"],[6197,18,5313,16],[6197,20,5313,18],[6198,10,5314,12],[6198,17,5314,19],[6198,21,5314,23],[6199,8,5315,8],[6200,6,5316,4],[6201,4,5316,5],[6202,2,5316,5],[6202,4,5256,31,"FederatedAuthProvider"],[6202,25,5256,52],[6203,2,5319,0],[6204,0,5320,0],[6205,0,5321,0],[6206,0,5322,0],[6207,0,5323,0],[6208,0,5324,0],[6209,0,5325,0],[6210,0,5326,0],[6211,0,5327,0],[6212,0,5328,0],[6213,0,5329,0],[6214,0,5330,0],[6215,0,5331,0],[6216,0,5332,0],[6217,0,5333,0],[6218,0,5334,0],[6219,2,5335,0],[6220,0,5336,0],[6221,0,5337,0],[6222,0,5338,0],[6223,0,5339,0],[6224,0,5340,0],[6225,0,5341,0],[6226,0,5342,0],[6227,0,5343,0],[6228,0,5344,0],[6229,0,5345,0],[6230,0,5346,0],[6231,0,5347,0],[6232,0,5348,0],[6233,0,5349,0],[6234,0,5350,0],[6235,0,5351,0],[6236,0,5352,0],[6237,0,5353,0],[6238,0,5354,0],[6239,0,5355,0],[6240,0,5356,0],[6241,0,5357,0],[6242,0,5358,0],[6243,0,5359,0],[6244,0,5360,0],[6245,0,5361,0],[6246,0,5362,0],[6247,0,5363,0],[6248,0,5364,0],[6249,0,5365,0],[6250,0,5366,0],[6251,0,5367,0],[6252,0,5368,0],[6253,0,5369,0],[6254,0,5370,0],[6255,0,5371,0],[6256,0,5372,0],[6257,0,5373,0],[6258,2,5335,0],[6258,6,5374,6,"TwitterAuthProvider"],[6258,25,5374,25],[6258,51,5374,25,"_BaseOAuthProvider5"],[6258,70,5374,25],[6259,4,5375,4],[6259,13,5375,4,"TwitterAuthProvider"],[6259,33,5375,4],[6259,35,5375,18],[6260,6,5375,18,"_classCallCheck"],[6260,21,5375,18],[6260,28,5375,18,"TwitterAuthProvider"],[6260,47,5375,18],[6261,6,5375,18],[6261,13,5375,18,"_callSuper"],[6261,23,5375,18],[6261,30,5375,18,"TwitterAuthProvider"],[6261,49,5375,18],[6261,52,5376,14],[6261,65,5376,27],[6261,66,5376,28],[6262,4,5377,4],[6263,4,5378,4],[6264,0,5379,0],[6265,0,5380,0],[6266,0,5381,0],[6267,0,5382,0],[6268,0,5383,0],[6269,4,5378,4,"_inherits"],[6269,13,5378,4],[6269,14,5378,4,"TwitterAuthProvider"],[6269,33,5378,4],[6269,35,5378,4,"_BaseOAuthProvider5"],[6269,54,5378,4],[6270,4,5378,4],[6270,11,5378,4,"_createClass"],[6270,23,5378,4],[6270,24,5378,4,"TwitterAuthProvider"],[6270,43,5378,4],[6271,6,5378,4,"key"],[6271,9,5378,4],[6272,6,5378,4,"value"],[6272,11,5378,4],[6272,13,5384,4],[6272,22,5384,11,"credential"],[6272,32,5384,21,"credential"],[6272,33,5384,22,"token"],[6272,38,5384,27],[6272,40,5384,29,"secret"],[6272,46,5384,35],[6272,48,5384,37],[6273,8,5385,8],[6273,15,5385,15,"OAuthCredential"],[6273,30,5385,30],[6273,31,5385,31,"_fromParams"],[6273,42,5385,42],[6273,43,5385,43],[6274,10,5386,12,"providerId"],[6274,20,5386,22],[6274,22,5386,24,"TwitterAuthProvider"],[6274,41,5386,43],[6274,42,5386,44,"PROVIDER_ID"],[6274,53,5386,55],[6275,10,5387,12,"signInMethod"],[6275,22,5387,24],[6275,24,5387,26,"TwitterAuthProvider"],[6275,43,5387,45],[6275,44,5387,46,"TWITTER_SIGN_IN_METHOD"],[6275,66,5387,68],[6276,10,5388,12,"oauthToken"],[6276,20,5388,22],[6276,22,5388,24,"token"],[6276,27,5388,29],[6277,10,5389,12,"oauthTokenSecret"],[6277,26,5389,28],[6277,28,5389,30,"secret"],[6278,8,5390,8],[6278,9,5390,9],[6278,10,5390,10],[6279,6,5391,4],[6280,6,5392,4],[6281,0,5393,0],[6282,0,5394,0],[6283,0,5395,0],[6284,0,5396,0],[6285,4,5392,4],[6286,6,5392,4,"key"],[6286,9,5392,4],[6287,6,5392,4,"value"],[6287,11,5392,4],[6287,13,5397,4],[6287,22,5397,11,"credentialFromResult"],[6287,42,5397,31,"credentialFromResult"],[6287,43,5397,32,"userCredential"],[6287,57,5397,46],[6287,59,5397,48],[6288,8,5398,8],[6288,15,5398,15,"TwitterAuthProvider"],[6288,34,5398,34],[6288,35,5398,35,"credentialFromTaggedObject"],[6288,61,5398,61],[6288,62,5398,62,"userCredential"],[6288,76,5398,76],[6288,77,5398,77],[6289,6,5399,4],[6290,6,5400,4],[6291,0,5401,0],[6292,0,5402,0],[6293,0,5403,0],[6294,0,5404,0],[6295,0,5405,0],[6296,4,5400,4],[6297,6,5400,4,"key"],[6297,9,5400,4],[6298,6,5400,4,"value"],[6298,11,5400,4],[6298,13,5406,4],[6298,22,5406,11,"credentialFromError"],[6298,41,5406,30,"credentialFromError"],[6298,42,5406,31,"error"],[6298,47,5406,36],[6298,49,5406,38],[6299,8,5407,8],[6299,15,5407,15,"TwitterAuthProvider"],[6299,34,5407,34],[6299,35,5407,35,"credentialFromTaggedObject"],[6299,61,5407,61],[6299,62,5407,63,"error"],[6299,67,5407,68],[6299,68,5407,69,"customData"],[6299,78,5407,79],[6299,82,5407,83],[6299,83,5407,84],[6299,84,5407,86],[6299,85,5407,87],[6300,6,5408,4],[6301,4,5408,5],[6302,6,5408,5,"key"],[6302,9,5408,5],[6303,6,5408,5,"value"],[6303,11,5408,5],[6303,13,5409,4],[6303,22,5409,11,"credentialFromTaggedObject"],[6303,48,5409,37,"credentialFromTaggedObject"],[6303,49,5409,37,"_ref16"],[6303,55,5409,37],[6303,57,5409,73],[6304,8,5409,73],[6304,12,5409,56,"tokenResponse"],[6304,25,5409,69],[6304,28,5409,69,"_ref16"],[6304,34,5409,69],[6304,35,5409,40,"_tokenResponse"],[6304,49,5409,54],[6305,8,5410,8],[6305,12,5410,12],[6305,13,5410,13,"tokenResponse"],[6305,26,5410,26],[6305,28,5410,28],[6306,10,5411,12],[6306,17,5411,19],[6306,21,5411,23],[6307,8,5412,8],[6308,8,5413,8],[6308,12,5413,16,"oauthAccessToken"],[6308,28,5413,32],[6308,31,5413,55,"tokenResponse"],[6308,44,5413,68],[6308,45,5413,16,"oauthAccessToken"],[6308,61,5413,32],[6309,10,5413,34,"oauthTokenSecret"],[6309,26,5413,50],[6309,29,5413,55,"tokenResponse"],[6309,42,5413,68],[6309,43,5413,34,"oauthTokenSecret"],[6309,59,5413,50],[6310,8,5414,8],[6310,12,5414,12],[6310,13,5414,13,"oauthAccessToken"],[6310,29,5414,29],[6310,33,5414,33],[6310,34,5414,34,"oauthTokenSecret"],[6310,50,5414,50],[6310,52,5414,52],[6311,10,5415,12],[6311,17,5415,19],[6311,21,5415,23],[6312,8,5416,8],[6313,8,5417,8],[6313,12,5417,12],[6314,10,5418,12],[6314,17,5418,19,"TwitterAuthProvider"],[6314,36,5418,38],[6314,37,5418,39,"credential"],[6314,47,5418,49],[6314,48,5418,50,"oauthAccessToken"],[6314,64,5418,66],[6314,66,5418,68,"oauthTokenSecret"],[6314,82,5418,84],[6314,83,5418,85],[6315,8,5419,8],[6315,9,5419,9],[6315,10,5420,8],[6315,16,5420,14],[6316,10,5421,12],[6316,17,5421,19],[6316,21,5421,23],[6317,8,5422,8],[6318,6,5423,4],[6319,4,5423,5],[6320,2,5423,5],[6320,4,5374,34,"BaseOAuthProvider"],[6320,21,5374,51],[6321,2,5425,0],[6322,2,5426,0,"TwitterAuthProvider"],[6322,21,5426,19],[6322,22,5426,20,"TWITTER_SIGN_IN_METHOD"],[6322,44,5426,42],[6322,47,5426,45],[6322,60,5426,58],[6322,61,5426,59],[6323,2,5427,0],[6324,2,5428,0,"TwitterAuthProvider"],[6324,21,5428,19],[6324,22,5428,20,"PROVIDER_ID"],[6324,33,5428,31],[6324,36,5428,34],[6324,49,5428,47],[6324,50,5428,48],[6326,2,5430,0],[6327,0,5431,0],[6328,0,5432,0],[6329,0,5433,0],[6330,0,5434,0],[6331,0,5435,0],[6332,0,5436,0],[6333,0,5437,0],[6334,0,5438,0],[6335,0,5439,0],[6336,0,5440,0],[6337,0,5441,0],[6338,0,5442,0],[6339,0,5443,0],[6340,0,5444,0],[6341,0,5445,0],[6342,2,5430,0],[6342,11,5446,15,"signUp"],[6342,17,5446,21,"signUp"],[6342,18,5446,21,"_x117"],[6342,23,5446,21],[6342,25,5446,21,"_x118"],[6342,30,5446,21],[6343,4,5446,21],[6343,11,5446,21,"_signUp"],[6343,18,5446,21],[6343,19,5446,21,"apply"],[6343,24,5446,21],[6343,31,5446,21,"arguments"],[6343,40,5446,21],[6344,2,5446,21],[6345,2,5450,0],[6346,0,5451,0],[6347,0,5452,0],[6348,0,5453,0],[6349,0,5454,0],[6350,0,5455,0],[6351,0,5456,0],[6352,0,5457,0],[6353,0,5458,0],[6354,0,5459,0],[6355,0,5460,0],[6356,0,5461,0],[6357,0,5462,0],[6358,0,5463,0],[6359,0,5464,0],[6360,0,5465,0],[6361,2,5450,0],[6361,11,5450,0,"_signUp"],[6361,19,5450,0],[6362,4,5450,0,"_signUp"],[6362,11,5450,0],[6362,14,5450,0,"_asyncToGenerator"],[6362,31,5450,0],[6362,32,5446,0],[6362,43,5446,22,"auth"],[6362,47,5446,26],[6362,49,5446,28,"request"],[6362,56,5446,35],[6362,58,5446,37],[6363,6,5447,4],[6363,13,5447,11,"_performSignInRequest"],[6363,34,5447,32],[6363,35,5447,33,"auth"],[6363,39,5447,37],[6363,41,5447,39],[6363,47,5447,45],[6363,48,5447,46],[6363,71,5447,69],[6363,92,5447,90],[6363,93,5447,91],[6363,117,5447,115,"_addTidIfNecessary"],[6363,135,5447,133],[6363,136,5447,134,"auth"],[6363,140,5447,138],[6363,142,5447,140,"request"],[6363,149,5447,147],[6363,150,5447,148],[6363,151,5447,149],[6364,4,5448,0],[6364,5,5448,1],[6365,4,5448,1],[6365,11,5448,1,"_signUp"],[6365,18,5448,1],[6365,19,5448,1,"apply"],[6365,24,5448,1],[6365,31,5448,1,"arguments"],[6365,40,5448,1],[6366,2,5448,1],[6367,2,5448,1],[6367,6,5466,6,"UserCredentialImpl"],[6367,24,5466,24],[6368,4,5467,4],[6368,13,5467,4,"UserCredentialImpl"],[6368,32,5467,16,"params"],[6368,38,5467,22],[6368,40,5467,24],[6369,6,5467,24,"_classCallCheck"],[6369,21,5467,24],[6369,28,5467,24,"UserCredentialImpl"],[6369,46,5467,24],[6370,6,5468,8],[6370,10,5468,12],[6370,11,5468,13,"user"],[6370,15,5468,17],[6370,18,5468,20,"params"],[6370,24,5468,26],[6370,25,5468,27,"user"],[6370,29,5468,31],[6371,6,5469,8],[6371,10,5469,12],[6371,11,5469,13,"providerId"],[6371,21,5469,23],[6371,24,5469,26,"params"],[6371,30,5469,32],[6371,31,5469,33,"providerId"],[6371,41,5469,43],[6372,6,5470,8],[6372,10,5470,12],[6372,11,5470,13,"_tokenResponse"],[6372,25,5470,27],[6372,28,5470,30,"params"],[6372,34,5470,36],[6372,35,5470,37,"_tokenResponse"],[6372,49,5470,51],[6373,6,5471,8],[6373,10,5471,12],[6373,11,5471,13,"operationType"],[6373,24,5471,26],[6373,27,5471,29,"params"],[6373,33,5471,35],[6373,34,5471,36,"operationType"],[6373,47,5471,49],[6374,4,5472,4],[6375,4,5472,5],[6375,11,5472,5,"_createClass"],[6375,23,5472,5],[6375,24,5472,5,"UserCredentialImpl"],[6375,42,5472,5],[6376,6,5472,5,"key"],[6376,9,5472,5],[6377,6,5472,5,"value"],[6377,11,5472,5],[6378,8,5472,5],[6378,12,5472,5,"_fromIdTokenResponse3"],[6378,33,5472,5],[6378,36,5472,5,"_asyncToGenerator"],[6378,53,5472,5],[6378,54,5473,4],[6378,65,5473,38,"auth"],[6378,69,5473,42],[6378,71,5473,44,"operationType"],[6378,84,5473,57],[6378,86,5473,59,"idTokenResponse"],[6378,101,5473,74],[6378,103,5473,97],[6379,10,5473,97],[6379,14,5473,76,"isAnonymous"],[6379,25,5473,87],[6379,28,5473,87,"arguments"],[6379,37,5473,87],[6379,38,5473,87,"length"],[6379,44,5473,87],[6379,52,5473,87,"arguments"],[6379,61,5473,87],[6379,69,5473,87,"undefined"],[6379,78,5473,87],[6379,81,5473,87,"arguments"],[6379,90,5473,87],[6379,96,5473,90],[6379,101,5473,95],[6380,10,5474,8],[6380,14,5474,14,"user"],[6380,18,5474,18],[6380,27,5474,27,"UserImpl"],[6380,35,5474,35],[6380,36,5474,36,"_fromIdTokenResponse"],[6380,56,5474,56],[6380,57,5474,57,"auth"],[6380,61,5474,61],[6380,63,5474,63,"idTokenResponse"],[6380,78,5474,78],[6380,80,5474,80,"isAnonymous"],[6380,91,5474,91],[6380,92,5474,92],[6381,10,5475,8],[6381,14,5475,14,"providerId"],[6381,24,5475,24],[6381,27,5475,27,"providerIdForResponse"],[6381,48,5475,48],[6381,49,5475,49,"idTokenResponse"],[6381,64,5475,64],[6381,65,5475,65],[6382,10,5476,8],[6382,14,5476,14,"userCred"],[6382,22,5476,22],[6382,25,5476,25],[6382,29,5476,29,"UserCredentialImpl"],[6382,47,5476,47],[6382,48,5476,48],[6383,12,5477,12,"user"],[6383,16,5477,16],[6384,12,5478,12,"providerId"],[6384,22,5478,22],[6385,12,5479,12,"_tokenResponse"],[6385,26,5479,26],[6385,28,5479,28,"idTokenResponse"],[6385,43,5479,43],[6386,12,5480,12,"operationType"],[6387,10,5481,8],[6387,11,5481,9],[6387,12,5481,10],[6388,10,5482,8],[6388,17,5482,15,"userCred"],[6388,25,5482,23],[6389,8,5483,4],[6389,9,5483,5],[6390,8,5483,5],[6390,17,5473,17,"_fromIdTokenResponse"],[6390,37,5473,37,"_fromIdTokenResponse"],[6390,38,5473,37,"_x119"],[6390,43,5473,37],[6390,45,5473,37,"_x120"],[6390,50,5473,37],[6390,52,5473,37,"_x121"],[6390,57,5473,37],[6391,10,5473,37],[6391,17,5473,37,"_fromIdTokenResponse3"],[6391,38,5473,37],[6391,39,5473,37,"apply"],[6391,44,5473,37],[6391,51,5473,37,"arguments"],[6391,60,5473,37],[6392,8,5473,37],[6393,8,5473,37],[6393,15,5473,17,"_fromIdTokenResponse"],[6393,35,5473,37],[6394,6,5473,37],[6395,4,5473,37],[6396,6,5473,37,"key"],[6396,9,5473,37],[6397,6,5473,37,"value"],[6397,11,5473,37],[6398,8,5473,37],[6398,12,5473,37,"_forOperation2"],[6398,26,5473,37],[6398,29,5473,37,"_asyncToGenerator"],[6398,46,5473,37],[6398,47,5484,4],[6398,58,5484,31,"user"],[6398,62,5484,35],[6398,64,5484,37,"operationType"],[6398,77,5484,50],[6398,79,5484,52,"response"],[6398,87,5484,60],[6398,89,5484,62],[6399,10,5485,8],[6399,16,5485,14,"user"],[6399,20,5485,18],[6399,21,5485,19,"_updateTokensIfNecessary"],[6399,45,5485,43],[6399,46,5485,44,"response"],[6399,54,5485,52],[6399,56,5485,54],[6399,68,5485,67],[6399,72,5485,71],[6399,73,5485,72],[6400,10,5486,8],[6400,14,5486,14,"providerId"],[6400,24,5486,24],[6400,27,5486,27,"providerIdForResponse"],[6400,48,5486,48],[6400,49,5486,49,"response"],[6400,57,5486,57],[6400,58,5486,58],[6401,10,5487,8],[6401,17,5487,15],[6401,21,5487,19,"UserCredentialImpl"],[6401,39,5487,37],[6401,40,5487,38],[6402,12,5488,12,"user"],[6402,16,5488,16],[6403,12,5489,12,"providerId"],[6403,22,5489,22],[6404,12,5490,12,"_tokenResponse"],[6404,26,5490,26],[6404,28,5490,28,"response"],[6404,36,5490,36],[6405,12,5491,12,"operationType"],[6406,10,5492,8],[6406,11,5492,9],[6406,12,5492,10],[6407,8,5493,4],[6407,9,5493,5],[6408,8,5493,5],[6408,17,5484,17,"_forOperation"],[6408,30,5484,30,"_forOperation"],[6408,31,5484,30,"_x122"],[6408,36,5484,30],[6408,38,5484,30,"_x123"],[6408,43,5484,30],[6408,45,5484,30,"_x124"],[6408,50,5484,30],[6409,10,5484,30],[6409,17,5484,30,"_forOperation2"],[6409,31,5484,30],[6409,32,5484,30,"apply"],[6409,37,5484,30],[6409,44,5484,30,"arguments"],[6409,53,5484,30],[6410,8,5484,30],[6411,8,5484,30],[6411,15,5484,17,"_forOperation"],[6411,28,5484,30],[6412,6,5484,30],[6413,4,5484,30],[6414,2,5484,30],[6415,2,5495,0],[6415,11,5495,9,"providerIdForResponse"],[6415,32,5495,30,"providerIdForResponse"],[6415,33,5495,31,"response"],[6415,41,5495,39],[6415,43,5495,41],[6416,4,5496,4],[6416,8,5496,8,"response"],[6416,16,5496,16],[6416,17,5496,17,"providerId"],[6416,27,5496,27],[6416,29,5496,29],[6417,6,5497,8],[6417,13,5497,15,"response"],[6417,21,5497,23],[6417,22,5497,24,"providerId"],[6417,32,5497,34],[6418,4,5498,4],[6419,4,5499,4],[6419,8,5499,8],[6419,21,5499,21],[6419,25,5499,25,"response"],[6419,33,5499,33],[6419,35,5499,35],[6420,6,5500,8],[6420,13,5500,15],[6420,20,5500,22],[6420,21,5500,23],[6421,4,5501,4],[6422,4,5502,4],[6422,11,5502,11],[6422,15,5502,15],[6423,2,5503,0],[6425,2,5505,0],[6426,0,5506,0],[6427,0,5507,0],[6428,0,5508,0],[6429,0,5509,0],[6430,0,5510,0],[6431,0,5511,0],[6432,0,5512,0],[6433,0,5513,0],[6434,0,5514,0],[6435,0,5515,0],[6436,0,5516,0],[6437,0,5517,0],[6438,0,5518,0],[6439,0,5519,0],[6440,0,5520,0],[6441,2,5521,0],[6442,0,5522,0],[6443,0,5523,0],[6444,0,5524,0],[6445,0,5525,0],[6446,0,5526,0],[6447,0,5527,0],[6448,0,5528,0],[6449,0,5529,0],[6450,0,5530,0],[6451,0,5531,0],[6452,0,5532,0],[6453,0,5533,0],[6454,0,5534,0],[6455,2,5521,0],[6455,11,5535,15,"signInAnonymously"],[6455,28,5535,32,"signInAnonymously"],[6455,29,5535,32,"_x125"],[6455,34,5535,32],[6456,4,5535,32],[6456,11,5535,32,"_signInAnonymously"],[6456,29,5535,32],[6456,30,5535,32,"apply"],[6456,35,5535,32],[6456,42,5535,32,"arguments"],[6456,51,5535,32],[6457,2,5535,32],[6458,2,5557,0],[6459,0,5558,0],[6460,0,5559,0],[6461,0,5560,0],[6462,0,5561,0],[6463,0,5562,0],[6464,0,5563,0],[6465,0,5564,0],[6466,0,5565,0],[6467,0,5566,0],[6468,0,5567,0],[6469,0,5568,0],[6470,0,5569,0],[6471,0,5570,0],[6472,0,5571,0],[6473,0,5572,0],[6474,2,5557,0],[6474,11,5557,0,"_signInAnonymously"],[6474,30,5557,0],[6475,4,5557,0,"_signInAnonymously"],[6475,22,5557,0],[6475,25,5557,0,"_asyncToGenerator"],[6475,42,5557,0],[6475,43,5535,0],[6475,54,5535,33,"auth"],[6475,58,5535,37],[6475,60,5535,39],[6476,6,5536,4],[6476,10,5536,8,"app"],[6476,13,5536,11],[6476,14,5536,12,"_isFirebaseServerApp"],[6476,34,5536,32],[6476,35,5536,33,"auth"],[6476,39,5536,37],[6476,40,5536,38,"app"],[6476,43,5536,41],[6476,44,5536,42],[6476,46,5536,44],[6477,8,5537,8],[6477,15,5537,15,"Promise"],[6477,22,5537,22],[6477,23,5537,23,"reject"],[6477,29,5537,29],[6477,30,5537,30,"_serverAppCurrentUserOperationNotSupportedError"],[6477,77,5537,77],[6477,78,5537,78,"auth"],[6477,82,5537,82],[6477,83,5537,83],[6477,84,5537,84],[6478,6,5538,4],[6479,6,5539,4],[6479,10,5539,10,"authInternal"],[6479,22,5539,22],[6479,25,5539,25,"_castAuth"],[6479,34,5539,34],[6479,35,5539,35,"auth"],[6479,39,5539,39],[6479,40,5539,40],[6480,6,5540,4],[6480,12,5540,10,"authInternal"],[6480,24,5540,22],[6480,25,5540,23,"_initializationPromise"],[6480,47,5540,45],[6481,6,5541,4],[6481,10,5541,8,"authInternal"],[6481,22,5541,20],[6481,23,5541,21,"currentUser"],[6481,34,5541,32],[6481,36,5541,34,"isAnonymous"],[6481,47,5541,45],[6481,49,5541,47],[6482,8,5542,8],[6483,8,5543,8],[6483,15,5543,15],[6483,19,5543,19,"UserCredentialImpl"],[6483,37,5543,37],[6483,38,5543,38],[6484,10,5544,12,"user"],[6484,14,5544,16],[6484,16,5544,18,"authInternal"],[6484,28,5544,30],[6484,29,5544,31,"currentUser"],[6484,40,5544,42],[6485,10,5545,12,"providerId"],[6485,20,5545,22],[6485,22,5545,24],[6485,26,5545,28],[6486,10,5546,12,"operationType"],[6486,23,5546,25],[6486,25,5546,27],[6486,33,5546,35],[6486,34,5546,36],[6487,8,5547,8],[6487,9,5547,9],[6487,10,5547,10],[6488,6,5548,4],[6489,6,5549,4],[6489,10,5549,10,"response"],[6489,18,5549,18],[6489,27,5549,27,"signUp"],[6489,33,5549,33],[6489,34,5549,34,"authInternal"],[6489,46,5549,46],[6489,48,5549,48],[6490,8,5550,8,"returnSecureToken"],[6490,25,5550,25],[6490,27,5550,27],[6491,6,5551,4],[6491,7,5551,5],[6491,8,5551,6],[6492,6,5552,4],[6492,10,5552,10,"userCredential"],[6492,24,5552,24],[6492,33,5552,33,"UserCredentialImpl"],[6492,51,5552,51],[6492,52,5552,52,"_fromIdTokenResponse"],[6492,72,5552,72],[6492,73,5552,73,"authInternal"],[6492,85,5552,85],[6492,87,5552,87],[6492,95,5552,95],[6492,96,5552,96],[6492,125,5552,125,"response"],[6492,133,5552,133],[6492,135,5552,135],[6492,139,5552,139],[6492,140,5552,140],[6493,6,5553,4],[6493,12,5553,10,"authInternal"],[6493,24,5553,22],[6493,25,5553,23,"_updateCurrentUser"],[6493,43,5553,41],[6493,44,5553,42,"userCredential"],[6493,58,5553,56],[6493,59,5553,57,"user"],[6493,63,5553,61],[6493,64,5553,62],[6494,6,5554,4],[6494,13,5554,11,"userCredential"],[6494,27,5554,25],[6495,4,5555,0],[6495,5,5555,1],[6496,4,5555,1],[6496,11,5555,1,"_signInAnonymously"],[6496,29,5555,1],[6496,30,5555,1,"apply"],[6496,35,5555,1],[6496,42,5555,1,"arguments"],[6496,51,5555,1],[6497,2,5555,1],[6498,2,5555,1],[6498,6,5573,6,"MultiFactorError"],[6498,22,5573,22],[6498,48,5573,22,"_util$FirebaseError"],[6498,67,5573,22],[6499,4,5574,4],[6499,13,5574,4,"MultiFactorError"],[6499,30,5574,16,"auth"],[6499,34,5574,20],[6499,36,5574,22,"error"],[6499,41,5574,27],[6499,43,5574,29,"operationType"],[6499,56,5574,42],[6499,58,5574,44,"user"],[6499,62,5574,48],[6499,64,5574,50],[6500,6,5574,50],[6500,10,5574,50,"_this10"],[6500,17,5574,50],[6501,6,5574,50,"_classCallCheck"],[6501,21,5574,50],[6501,28,5574,50,"MultiFactorError"],[6501,44,5574,50],[6502,6,5575,8,"_this10"],[6502,13,5575,8],[6502,16,5575,8,"_callSuper"],[6502,26,5575,8],[6502,33,5575,8,"MultiFactorError"],[6502,49,5575,8],[6502,52,5575,14,"error"],[6502,57,5575,19],[6502,58,5575,20,"code"],[6502,62,5575,24],[6502,64,5575,26,"error"],[6502,69,5575,31],[6502,70,5575,32,"message"],[6502,77,5575,39],[6503,6,5576,8,"_this10"],[6503,13,5576,8],[6503,14,5576,13,"operationType"],[6503,27,5576,26],[6503,30,5576,29,"operationType"],[6503,43,5576,42],[6504,6,5577,8,"_this10"],[6504,13,5577,8],[6504,14,5577,13,"user"],[6504,18,5577,17],[6504,21,5577,20,"user"],[6504,25,5577,24],[6505,6,5578,8],[6506,6,5579,8,"Object"],[6506,12,5579,14],[6506,13,5579,15,"setPrototypeOf"],[6506,27,5579,29],[6506,28,5579,29,"_this10"],[6506,35,5579,29],[6506,37,5579,36,"MultiFactorError"],[6506,53,5579,52],[6506,54,5579,53,"prototype"],[6506,63,5579,62],[6506,64,5579,63],[6507,6,5580,8,"_this10"],[6507,13,5580,8],[6507,14,5580,13,"customData"],[6507,24,5580,23],[6507,27,5580,26],[6508,8,5581,12,"appName"],[6508,15,5581,19],[6508,17,5581,21,"auth"],[6508,21,5581,25],[6508,22,5581,26,"name"],[6508,26,5581,30],[6509,8,5582,12,"tenantId"],[6509,16,5582,20],[6509,18,5582,22,"auth"],[6509,22,5582,26],[6509,23,5582,27,"tenantId"],[6509,31,5582,35],[6509,35,5582,39,"undefined"],[6509,44,5582,48],[6510,8,5583,12,"_serverResponse"],[6510,23,5583,27],[6510,25,5583,29,"error"],[6510,30,5583,34],[6510,31,5583,35,"customData"],[6510,41,5583,45],[6510,42,5583,46,"_serverResponse"],[6510,57,5583,61],[6511,8,5584,12,"operationType"],[6512,6,5585,8],[6512,7,5585,9],[6513,6,5585,10],[6513,13,5585,10,"_this10"],[6513,20,5585,10],[6514,4,5586,4],[6515,4,5586,5,"_inherits"],[6515,13,5586,5],[6515,14,5586,5,"MultiFactorError"],[6515,30,5586,5],[6515,32,5586,5,"_util$FirebaseError"],[6515,51,5586,5],[6516,4,5586,5],[6516,11,5586,5,"_createClass"],[6516,23,5586,5],[6516,24,5586,5,"MultiFactorError"],[6516,40,5586,5],[6517,6,5586,5,"key"],[6517,9,5586,5],[6518,6,5586,5,"value"],[6518,11,5586,5],[6518,13,5587,4],[6518,22,5587,11,"_fromErrorAndOperation"],[6518,44,5587,33,"_fromErrorAndOperation"],[6518,45,5587,34,"auth"],[6518,49,5587,38],[6518,51,5587,40,"error"],[6518,56,5587,45],[6518,58,5587,47,"operationType"],[6518,71,5587,60],[6518,73,5587,62,"user"],[6518,77,5587,66],[6518,79,5587,68],[6519,8,5588,8],[6519,15,5588,15],[6519,19,5588,19,"MultiFactorError"],[6519,35,5588,35],[6519,36,5588,36,"auth"],[6519,40,5588,40],[6519,42,5588,42,"error"],[6519,47,5588,47],[6519,49,5588,49,"operationType"],[6519,62,5588,62],[6519,64,5588,64,"user"],[6519,68,5588,68],[6519,69,5588,69],[6520,6,5589,4],[6521,4,5589,5],[6522,2,5589,5],[6522,4,5573,31,"util"],[6522,8,5573,35],[6522,9,5573,36,"FirebaseError"],[6522,22,5573,49],[6523,2,5591,0],[6523,11,5591,9,"_processCredentialSavingMfaContextIfNecessary"],[6523,56,5591,54,"_processCredentialSavingMfaContextIfNecessary"],[6523,57,5591,55,"auth"],[6523,61,5591,59],[6523,63,5591,61,"operationType"],[6523,76,5591,74],[6523,78,5591,76,"credential"],[6523,88,5591,86],[6523,90,5591,88,"user"],[6523,94,5591,92],[6523,96,5591,94],[6524,4,5592,4],[6524,8,5592,10,"idTokenProvider"],[6524,23,5592,25],[6524,26,5592,28,"operationType"],[6524,39,5592,41],[6524,44,5592,46],[6524,60,5592,62],[6524,61,5592,63],[6524,98,5593,10,"credential"],[6524,108,5593,20],[6524,109,5593,21,"_getReauthenticationResolver"],[6524,137,5593,49],[6524,138,5593,50,"auth"],[6524,142,5593,54],[6524,143,5593,55],[6524,146,5594,10,"credential"],[6524,156,5594,20],[6524,157,5594,21,"_getIdTokenResponse"],[6524,176,5594,40],[6524,177,5594,41,"auth"],[6524,181,5594,45],[6524,182,5594,46],[6525,4,5595,4],[6525,11,5595,11,"idTokenProvider"],[6525,26,5595,26],[6525,27,5595,27,"catch"],[6525,32,5595,32],[6525,33,5595,33,"error"],[6525,38,5595,38],[6525,42,5595,42],[6526,6,5596,8],[6526,10,5596,12,"error"],[6526,15,5596,17],[6526,16,5596,18,"code"],[6526,20,5596,22],[6526,25,5596,27],[6526,33,5596,35],[6526,61,5596,63],[6526,62,5596,64],[6526,96,5596,98],[6526,98,5596,100],[6527,8,5597,12],[6527,14,5597,18,"MultiFactorError"],[6527,30,5597,34],[6527,31,5597,35,"_fromErrorAndOperation"],[6527,53,5597,57],[6527,54,5597,58,"auth"],[6527,58,5597,62],[6527,60,5597,64,"error"],[6527,65,5597,69],[6527,67,5597,71,"operationType"],[6527,80,5597,84],[6527,82,5597,86,"user"],[6527,86,5597,90],[6527,87,5597,91],[6528,6,5598,8],[6529,6,5599,8],[6529,12,5599,14,"error"],[6529,17,5599,19],[6530,4,5600,4],[6530,5,5600,5],[6530,6,5600,6],[6531,2,5601,0],[6533,2,5603,0],[6534,0,5604,0],[6535,0,5605,0],[6536,0,5606,0],[6537,0,5607,0],[6538,0,5608,0],[6539,0,5609,0],[6540,0,5610,0],[6541,0,5611,0],[6542,0,5612,0],[6543,0,5613,0],[6544,0,5614,0],[6545,0,5615,0],[6546,0,5616,0],[6547,0,5617,0],[6548,0,5618,0],[6549,2,5619,0],[6550,0,5620,0],[6551,0,5621,0],[6552,2,5622,0],[6552,11,5622,9,"providerDataAsNames"],[6552,30,5622,28,"providerDataAsNames"],[6552,31,5622,29,"providerData"],[6552,43,5622,41],[6552,45,5622,43],[6553,4,5623,4],[6553,11,5623,11],[6553,15,5623,15,"Set"],[6553,18,5623,18],[6553,19,5623,19,"providerData"],[6553,31,5623,31],[6553,32,5624,9,"map"],[6553,35,5624,12],[6553,36,5624,13,"_ref17"],[6553,42,5624,13],[6554,6,5624,13],[6554,10,5624,16,"providerId"],[6554,20,5624,26],[6554,23,5624,26,"_ref17"],[6554,29,5624,26],[6554,30,5624,16,"providerId"],[6554,40,5624,26],[6555,6,5624,26],[6555,13,5624,33,"providerId"],[6555,23,5624,43],[6556,4,5624,43],[6556,6,5624,44],[6556,7,5625,9,"filter"],[6556,13,5625,15],[6556,14,5625,16,"pid"],[6556,17,5625,19],[6556,21,5625,23],[6556,22,5625,24],[6556,23,5625,25,"pid"],[6556,26,5625,28],[6556,27,5625,29],[6556,28,5625,30],[6557,2,5626,0],[6559,2,5628,0],[6560,0,5629,0],[6561,0,5630,0],[6562,0,5631,0],[6563,0,5632,0],[6564,0,5633,0],[6565,0,5634,0],[6566,0,5635,0],[6567,0,5636,0],[6568,0,5637,0],[6569,0,5638,0],[6570,0,5639,0],[6571,0,5640,0],[6572,0,5641,0],[6573,0,5642,0],[6574,0,5643,0],[6575,2,5644,0],[6576,0,5645,0],[6577,0,5646,0],[6578,0,5647,0],[6579,0,5648,0],[6580,0,5649,0],[6581,0,5650,0],[6582,0,5651,0],[6583,2,5644,0],[6583,11,5652,15,"unlink"],[6583,17,5652,21,"unlink"],[6583,18,5652,21,"_x126"],[6583,23,5652,21],[6583,25,5652,21,"_x127"],[6583,30,5652,21],[6584,4,5652,21],[6584,11,5652,21,"_unlink"],[6584,18,5652,21],[6584,19,5652,21,"apply"],[6584,24,5652,21],[6584,31,5652,21,"arguments"],[6584,40,5652,21],[6585,2,5652,21],[6586,2,5652,21],[6586,11,5652,21,"_unlink"],[6586,19,5652,21],[6587,4,5652,21,"_unlink"],[6587,11,5652,21],[6587,14,5652,21,"_asyncToGenerator"],[6587,31,5652,21],[6587,32,5652,0],[6587,43,5652,22,"user"],[6587,47,5652,26],[6587,49,5652,28,"providerId"],[6587,59,5652,38],[6587,61,5652,40],[6588,6,5653,4],[6588,10,5653,10,"userInternal"],[6588,22,5653,22],[6588,25,5653,25,"util"],[6588,29,5653,29],[6588,30,5653,30,"getModularInstance"],[6588,48,5653,48],[6588,49,5653,49,"user"],[6588,53,5653,53],[6588,54,5653,54],[6589,6,5654,4],[6589,12,5654,10,"_assertLinkedStatus"],[6589,31,5654,29],[6589,32,5654,30],[6589,36,5654,34],[6589,38,5654,36,"userInternal"],[6589,50,5654,48],[6589,52,5654,50,"providerId"],[6589,62,5654,60],[6589,63,5654,61],[6590,6,5655,4],[6590,10,5655,4,"_yield$deleteLinkedAc"],[6590,31,5655,4],[6590,40,5655,39,"deleteLinkedAccounts"],[6590,60,5655,59],[6590,61,5655,60,"userInternal"],[6590,73,5655,72],[6590,74,5655,73,"auth"],[6590,78,5655,77],[6590,80,5655,79],[6591,10,5656,8,"idToken"],[6591,17,5656,15],[6591,25,5656,23,"userInternal"],[6591,37,5656,35],[6591,38,5656,36,"getIdToken"],[6591,48,5656,46],[6591,49,5656,47],[6591,50,5656,48],[6592,10,5657,8,"deleteProvider"],[6592,24,5657,22],[6592,26,5657,24],[6592,27,5657,25,"providerId"],[6592,37,5657,35],[6593,8,5658,4],[6593,9,5658,5],[6593,10,5658,6],[6594,8,5655,12,"providerUserInfo"],[6594,24,5655,28],[6594,27,5655,28,"_yield$deleteLinkedAc"],[6594,48,5655,28],[6594,49,5655,12,"providerUserInfo"],[6594,65,5655,28],[6595,6,5659,4],[6595,10,5659,10,"providersLeft"],[6595,23,5659,23],[6595,26,5659,26,"providerDataAsNames"],[6595,45,5659,45],[6595,46,5659,46,"providerUserInfo"],[6595,62,5659,62],[6595,66,5659,66],[6595,68,5659,68],[6595,69,5659,69],[6596,6,5660,4,"userInternal"],[6596,18,5660,16],[6596,19,5660,17,"providerData"],[6596,31,5660,29],[6596,34,5660,32,"userInternal"],[6596,46,5660,44],[6596,47,5660,45,"providerData"],[6596,59,5660,57],[6596,60,5660,58,"filter"],[6596,66,5660,64],[6596,67,5660,65,"pd"],[6596,69,5660,67],[6596,73,5660,71,"providersLeft"],[6596,86,5660,84],[6596,87,5660,85,"has"],[6596,90,5660,88],[6596,91,5660,89,"pd"],[6596,93,5660,91],[6596,94,5660,92,"providerId"],[6596,104,5660,102],[6596,105,5660,103],[6596,106,5660,104],[6597,6,5661,4],[6597,10,5661,8],[6597,11,5661,9,"providersLeft"],[6597,24,5661,22],[6597,25,5661,23,"has"],[6597,28,5661,26],[6597,29,5661,27],[6597,36,5661,34],[6597,37,5661,35],[6597,59,5661,57],[6597,60,5661,58],[6597,62,5661,60],[6598,8,5662,8,"userInternal"],[6598,20,5662,20],[6598,21,5662,21,"phoneNumber"],[6598,32,5662,32],[6598,35,5662,35],[6598,39,5662,39],[6599,6,5663,4],[6600,6,5664,4],[6600,12,5664,10,"userInternal"],[6600,24,5664,22],[6600,25,5664,23,"auth"],[6600,29,5664,27],[6600,30,5664,28,"_persistUserIfCurrent"],[6600,51,5664,49],[6600,52,5664,50,"userInternal"],[6600,64,5664,62],[6600,65,5664,63],[6601,6,5665,4],[6601,13,5665,11,"userInternal"],[6601,25,5665,23],[6602,4,5666,0],[6602,5,5666,1],[6603,4,5666,1],[6603,11,5666,1,"_unlink"],[6603,18,5666,1],[6603,19,5666,1,"apply"],[6603,24,5666,1],[6603,31,5666,1,"arguments"],[6603,40,5666,1],[6604,2,5666,1],[6605,2,5666,1],[6605,11,5667,15,"_link"],[6605,16,5667,20,"_link"],[6605,17,5667,20,"_x128"],[6605,22,5667,20],[6605,24,5667,20,"_x129"],[6605,29,5667,20],[6606,4,5667,20],[6606,11,5667,20,"_link2"],[6606,17,5667,20],[6606,18,5667,20,"apply"],[6606,23,5667,20],[6606,30,5667,20,"arguments"],[6606,39,5667,20],[6607,2,5667,20],[6608,2,5667,20],[6608,11,5667,20,"_link2"],[6608,18,5667,20],[6609,4,5667,20,"_link2"],[6609,10,5667,20],[6609,13,5667,20,"_asyncToGenerator"],[6609,30,5667,20],[6609,31,5667,0],[6609,42,5667,21,"user"],[6609,46,5667,25],[6609,48,5667,27,"credential"],[6609,58,5667,37],[6609,60,5667,64],[6610,6,5667,64],[6610,10,5667,39,"bypassAuthState"],[6610,25,5667,54],[6610,28,5667,54,"arguments"],[6610,37,5667,54],[6610,38,5667,54,"length"],[6610,44,5667,54],[6610,52,5667,54,"arguments"],[6610,61,5667,54],[6610,69,5667,54,"undefined"],[6610,78,5667,54],[6610,81,5667,54,"arguments"],[6610,90,5667,54],[6610,96,5667,57],[6610,101,5667,62],[6611,6,5668,4],[6611,10,5668,10,"response"],[6611,18,5668,18],[6611,27,5668,27,"_logoutIfInvalidated"],[6611,47,5668,47],[6611,48,5668,48,"user"],[6611,52,5668,52],[6611,54,5668,54,"credential"],[6611,64,5668,64],[6611,65,5668,65,"_linkToIdToken"],[6611,79,5668,79],[6611,80,5668,80,"user"],[6611,84,5668,84],[6611,85,5668,85,"auth"],[6611,89,5668,89],[6611,97,5668,97,"user"],[6611,101,5668,101],[6611,102,5668,102,"getIdToken"],[6611,112,5668,112],[6611,113,5668,113],[6611,114,5668,114],[6611,115,5668,115],[6611,117,5668,117,"bypassAuthState"],[6611,132,5668,132],[6611,133,5668,133],[6612,6,5669,4],[6612,13,5669,11,"UserCredentialImpl"],[6612,31,5669,29],[6612,32,5669,30,"_forOperation"],[6612,45,5669,43],[6612,46,5669,44,"user"],[6612,50,5669,48],[6612,52,5669,50],[6612,58,5669,56],[6612,59,5669,57],[6612,85,5669,83,"response"],[6612,93,5669,91],[6612,94,5669,92],[6613,4,5670,0],[6613,5,5670,1],[6614,4,5670,1],[6614,11,5670,1,"_link2"],[6614,17,5670,1],[6614,18,5670,1,"apply"],[6614,23,5670,1],[6614,30,5670,1,"arguments"],[6614,39,5670,1],[6615,2,5670,1],[6616,2,5670,1],[6616,11,5671,15,"_assertLinkedStatus"],[6616,30,5671,34,"_assertLinkedStatus"],[6616,31,5671,34,"_x130"],[6616,36,5671,34],[6616,38,5671,34,"_x131"],[6616,43,5671,34],[6616,45,5671,34,"_x132"],[6616,50,5671,34],[6617,4,5671,34],[6617,11,5671,34,"_assertLinkedStatus2"],[6617,31,5671,34],[6617,32,5671,34,"apply"],[6617,37,5671,34],[6617,44,5671,34,"arguments"],[6617,53,5671,34],[6618,2,5671,34],[6619,2,5680,0],[6620,0,5681,0],[6621,0,5682,0],[6622,0,5683,0],[6623,0,5684,0],[6624,0,5685,0],[6625,0,5686,0],[6626,0,5687,0],[6627,0,5688,0],[6628,0,5689,0],[6629,0,5690,0],[6630,0,5691,0],[6631,0,5692,0],[6632,0,5693,0],[6633,0,5694,0],[6634,0,5695,0],[6635,2,5680,0],[6635,11,5680,0,"_assertLinkedStatus2"],[6635,32,5680,0],[6636,4,5680,0,"_assertLinkedStatus2"],[6636,24,5680,0],[6636,27,5680,0,"_asyncToGenerator"],[6636,44,5680,0],[6636,45,5671,0],[6636,56,5671,35,"expected"],[6636,64,5671,43],[6636,66,5671,45,"user"],[6636,70,5671,49],[6636,72,5671,51,"provider"],[6636,80,5671,59],[6636,82,5671,61],[6637,6,5672,4],[6637,12,5672,10,"_reloadWithoutSaving"],[6637,32,5672,30],[6637,33,5672,31,"user"],[6637,37,5672,35],[6637,38,5672,36],[6638,6,5673,4],[6638,10,5673,10,"providerIds"],[6638,21,5673,21],[6638,24,5673,24,"providerDataAsNames"],[6638,43,5673,43],[6638,44,5673,44,"user"],[6638,48,5673,48],[6638,49,5673,49,"providerData"],[6638,61,5673,61],[6638,62,5673,62],[6639,6,5674,4],[6639,10,5674,10,"code"],[6639,14,5674,14],[6639,17,5674,17,"expected"],[6639,25,5674,25],[6639,30,5674,30],[6639,35,5674,35],[6639,38,5675,10],[6639,63,5675,35],[6639,64,5675,36],[6639,110,5676,10],[6639,128,5676,28],[6639,129,5676,29],[6640,6,5677,4,"_assert"],[6640,13,5677,11],[6640,14,5677,12,"providerIds"],[6640,25,5677,23],[6640,26,5677,24,"has"],[6640,29,5677,27],[6640,30,5677,28,"provider"],[6640,38,5677,36],[6640,39,5677,37],[6640,44,5677,42,"expected"],[6640,52,5677,50],[6640,54,5677,52,"user"],[6640,58,5677,56],[6640,59,5677,57,"auth"],[6640,63,5677,61],[6640,65,5677,63,"code"],[6640,69,5677,67],[6640,70,5677,68],[6641,4,5678,0],[6641,5,5678,1],[6642,4,5678,1],[6642,11,5678,1,"_assertLinkedStatus2"],[6642,31,5678,1],[6642,32,5678,1,"apply"],[6642,37,5678,1],[6642,44,5678,1,"arguments"],[6642,53,5678,1],[6643,2,5678,1],[6644,2,5678,1],[6644,11,5696,15,"_reauthenticate"],[6644,26,5696,30,"_reauthenticate"],[6644,27,5696,30,"_x133"],[6644,32,5696,30],[6644,34,5696,30,"_x134"],[6644,39,5696,30],[6645,4,5696,30],[6645,11,5696,30,"_reauthenticate2"],[6645,27,5696,30],[6645,28,5696,30,"apply"],[6645,33,5696,30],[6645,40,5696,30,"arguments"],[6645,49,5696,30],[6646,2,5696,30],[6647,2,5720,0],[6648,0,5721,0],[6649,0,5722,0],[6650,0,5723,0],[6651,0,5724,0],[6652,0,5725,0],[6653,0,5726,0],[6654,0,5727,0],[6655,0,5728,0],[6656,0,5729,0],[6657,0,5730,0],[6658,0,5731,0],[6659,0,5732,0],[6660,0,5733,0],[6661,0,5734,0],[6662,0,5735,0],[6663,2,5720,0],[6663,11,5720,0,"_reauthenticate2"],[6663,28,5720,0],[6664,4,5720,0,"_reauthenticate2"],[6664,20,5720,0],[6664,23,5720,0,"_asyncToGenerator"],[6664,40,5720,0],[6664,41,5696,0],[6664,52,5696,31,"user"],[6664,56,5696,35],[6664,58,5696,37,"credential"],[6664,68,5696,47],[6664,70,5696,74],[6665,6,5696,74],[6665,10,5696,49,"bypassAuthState"],[6665,25,5696,64],[6665,28,5696,64,"arguments"],[6665,37,5696,64],[6665,38,5696,64,"length"],[6665,44,5696,64],[6665,52,5696,64,"arguments"],[6665,61,5696,64],[6665,69,5696,64,"undefined"],[6665,78,5696,64],[6665,81,5696,64,"arguments"],[6665,90,5696,64],[6665,96,5696,67],[6665,101,5696,72],[6666,6,5697,4],[6666,10,5697,12,"auth"],[6666,14,5697,16],[6666,17,5697,21,"user"],[6666,21,5697,25],[6666,22,5697,12,"auth"],[6666,26,5697,16],[6667,6,5698,4],[6667,10,5698,8,"app"],[6667,13,5698,11],[6667,14,5698,12,"_isFirebaseServerApp"],[6667,34,5698,32],[6667,35,5698,33,"auth"],[6667,39,5698,37],[6667,40,5698,38,"app"],[6667,43,5698,41],[6667,44,5698,42],[6667,46,5698,44],[6668,8,5699,8],[6668,15,5699,15,"Promise"],[6668,22,5699,22],[6668,23,5699,23,"reject"],[6668,29,5699,29],[6668,30,5699,30,"_serverAppCurrentUserOperationNotSupportedError"],[6668,77,5699,77],[6668,78,5699,78,"auth"],[6668,82,5699,82],[6668,83,5699,83],[6668,84,5699,84],[6669,6,5700,4],[6670,6,5701,4],[6670,10,5701,10,"operationType"],[6670,23,5701,23],[6670,26,5701,26],[6670,42,5701,42],[6670,43,5701,43],[6671,6,5702,4],[6671,10,5702,8],[6672,8,5703,8],[6672,12,5703,14,"response"],[6672,20,5703,22],[6672,29,5703,31,"_logoutIfInvalidated"],[6672,49,5703,51],[6672,50,5703,52,"user"],[6672,54,5703,56],[6672,56,5703,58,"_processCredentialSavingMfaContextIfNecessary"],[6672,101,5703,103],[6672,102,5703,104,"auth"],[6672,106,5703,108],[6672,108,5703,110,"operationType"],[6672,121,5703,123],[6672,123,5703,125,"credential"],[6672,133,5703,135],[6672,135,5703,137,"user"],[6672,139,5703,141],[6672,140,5703,142],[6672,142,5703,144,"bypassAuthState"],[6672,157,5703,159],[6672,158,5703,160],[6673,8,5704,8,"_assert"],[6673,15,5704,15],[6673,16,5704,16,"response"],[6673,24,5704,24],[6673,25,5704,25,"idToken"],[6673,32,5704,32],[6673,34,5704,34,"auth"],[6673,38,5704,38],[6673,40,5704,40],[6673,56,5704,56],[6673,57,5704,57],[6673,91,5704,91],[6673,92,5704,92],[6674,8,5705,8],[6674,12,5705,14,"parsed"],[6674,18,5705,20],[6674,21,5705,23,"_parseToken"],[6674,32,5705,34],[6674,33,5705,35,"response"],[6674,41,5705,43],[6674,42,5705,44,"idToken"],[6674,49,5705,51],[6674,50,5705,52],[6675,8,5706,8,"_assert"],[6675,15,5706,15],[6675,16,5706,16,"parsed"],[6675,22,5706,22],[6675,24,5706,24,"auth"],[6675,28,5706,28],[6675,30,5706,30],[6675,46,5706,46],[6675,47,5706,47],[6675,81,5706,81],[6675,82,5706,82],[6676,8,5707,8],[6676,12,5707,21,"localId"],[6676,19,5707,28],[6676,22,5707,33,"parsed"],[6676,28,5707,39],[6676,29,5707,16,"sub"],[6676,32,5707,19],[6677,8,5708,8,"_assert"],[6677,15,5708,15],[6677,16,5708,16,"user"],[6677,20,5708,20],[6677,21,5708,21,"uid"],[6677,24,5708,24],[6677,29,5708,29,"localId"],[6677,36,5708,36],[6677,38,5708,38,"auth"],[6677,42,5708,42],[6677,44,5708,44],[6677,59,5708,59],[6677,60,5708,60],[6677,93,5708,93],[6677,94,5708,94],[6678,8,5709,8],[6678,15,5709,15,"UserCredentialImpl"],[6678,33,5709,33],[6678,34,5709,34,"_forOperation"],[6678,47,5709,47],[6678,48,5709,48,"user"],[6678,52,5709,52],[6678,54,5709,54,"operationType"],[6678,67,5709,67],[6678,69,5709,69,"response"],[6678,77,5709,77],[6678,78,5709,78],[6679,6,5710,4],[6679,7,5710,5],[6679,8,5711,4],[6679,15,5711,11,"e"],[6679,16,5711,12],[6679,18,5711,14],[6680,8,5712,8],[6681,8,5713,8],[6681,12,5713,12,"e"],[6681,13,5713,13],[6681,15,5713,15,"code"],[6681,19,5713,19],[6681,24,5713,24],[6681,32,5713,32],[6681,48,5713,48],[6681,49,5713,49],[6681,83,5713,83],[6681,85,5713,85],[6682,10,5714,12,"_fail"],[6682,15,5714,17],[6682,16,5714,18,"auth"],[6682,20,5714,22],[6682,22,5714,24],[6682,37,5714,39],[6682,38,5714,40],[6682,71,5714,73],[6682,72,5714,74],[6683,8,5715,8],[6684,8,5716,8],[6684,14,5716,14,"e"],[6684,15,5716,15],[6685,6,5717,4],[6686,4,5718,0],[6686,5,5718,1],[6687,4,5718,1],[6687,11,5718,1,"_reauthenticate2"],[6687,27,5718,1],[6687,28,5718,1,"apply"],[6687,33,5718,1],[6687,40,5718,1,"arguments"],[6687,49,5718,1],[6688,2,5718,1],[6689,2,5718,1],[6689,11,5736,15,"_signInWithCredential"],[6689,32,5736,36,"_signInWithCredential"],[6689,33,5736,36,"_x135"],[6689,38,5736,36],[6689,40,5736,36,"_x136"],[6689,45,5736,36],[6690,4,5736,36],[6690,11,5736,36,"_signInWithCredential2"],[6690,33,5736,36],[6690,34,5736,36,"apply"],[6690,39,5736,36],[6690,46,5736,36,"arguments"],[6690,55,5736,36],[6691,2,5736,36],[6692,2,5748,0],[6693,0,5749,0],[6694,0,5750,0],[6695,0,5751,0],[6696,0,5752,0],[6697,0,5753,0],[6698,0,5754,0],[6699,0,5755,0],[6700,0,5756,0],[6701,0,5757,0],[6702,0,5758,0],[6703,0,5759,0],[6704,0,5760,0],[6705,0,5761,0],[6706,2,5748,0],[6706,11,5748,0,"_signInWithCredential2"],[6706,34,5748,0],[6707,4,5748,0,"_signInWithCredential2"],[6707,26,5748,0],[6707,29,5748,0,"_asyncToGenerator"],[6707,46,5748,0],[6707,47,5736,0],[6707,58,5736,37,"auth"],[6707,62,5736,41],[6707,64,5736,43,"credential"],[6707,74,5736,53],[6707,76,5736,80],[6708,6,5736,80],[6708,10,5736,55,"bypassAuthState"],[6708,25,5736,70],[6708,28,5736,70,"arguments"],[6708,37,5736,70],[6708,38,5736,70,"length"],[6708,44,5736,70],[6708,52,5736,70,"arguments"],[6708,61,5736,70],[6708,69,5736,70,"undefined"],[6708,78,5736,70],[6708,81,5736,70,"arguments"],[6708,90,5736,70],[6708,96,5736,73],[6708,101,5736,78],[6709,6,5737,4],[6709,10,5737,8,"app"],[6709,13,5737,11],[6709,14,5737,12,"_isFirebaseServerApp"],[6709,34,5737,32],[6709,35,5737,33,"auth"],[6709,39,5737,37],[6709,40,5737,38,"app"],[6709,43,5737,41],[6709,44,5737,42],[6709,46,5737,44],[6710,8,5738,8],[6710,15,5738,15,"Promise"],[6710,22,5738,22],[6710,23,5738,23,"reject"],[6710,29,5738,29],[6710,30,5738,30,"_serverAppCurrentUserOperationNotSupportedError"],[6710,77,5738,77],[6710,78,5738,78,"auth"],[6710,82,5738,82],[6710,83,5738,83],[6710,84,5738,84],[6711,6,5739,4],[6712,6,5740,4],[6712,10,5740,10,"operationType"],[6712,23,5740,23],[6712,26,5740,26],[6712,34,5740,34],[6712,35,5740,35],[6713,6,5741,4],[6713,10,5741,10,"response"],[6713,18,5741,18],[6713,27,5741,27,"_processCredentialSavingMfaContextIfNecessary"],[6713,72,5741,72],[6713,73,5741,73,"auth"],[6713,77,5741,77],[6713,79,5741,79,"operationType"],[6713,92,5741,92],[6713,94,5741,94,"credential"],[6713,104,5741,104],[6713,105,5741,105],[6714,6,5742,4],[6714,10,5742,10,"userCredential"],[6714,24,5742,24],[6714,33,5742,33,"UserCredentialImpl"],[6714,51,5742,51],[6714,52,5742,52,"_fromIdTokenResponse"],[6714,72,5742,72],[6714,73,5742,73,"auth"],[6714,77,5742,77],[6714,79,5742,79,"operationType"],[6714,92,5742,92],[6714,94,5742,94,"response"],[6714,102,5742,102],[6714,103,5742,103],[6715,6,5743,4],[6715,10,5743,8],[6715,11,5743,9,"bypassAuthState"],[6715,26,5743,24],[6715,28,5743,26],[6716,8,5744,8],[6716,14,5744,14,"auth"],[6716,18,5744,18],[6716,19,5744,19,"_updateCurrentUser"],[6716,37,5744,37],[6716,38,5744,38,"userCredential"],[6716,52,5744,52],[6716,53,5744,53,"user"],[6716,57,5744,57],[6716,58,5744,58],[6717,6,5745,4],[6718,6,5746,4],[6718,13,5746,11,"userCredential"],[6718,27,5746,25],[6719,4,5747,0],[6719,5,5747,1],[6720,4,5747,1],[6720,11,5747,1,"_signInWithCredential2"],[6720,33,5747,1],[6720,34,5747,1,"apply"],[6720,39,5747,1],[6720,46,5747,1,"arguments"],[6720,55,5747,1],[6721,2,5747,1],[6722,2,5747,1],[6722,11,5762,15,"signInWithCredential"],[6722,31,5762,35,"signInWithCredential"],[6722,32,5762,35,"_x137"],[6722,37,5762,35],[6722,39,5762,35,"_x138"],[6722,44,5762,35],[6723,4,5762,35],[6723,11,5762,35,"_signInWithCredential3"],[6723,33,5762,35],[6723,34,5762,35,"apply"],[6723,39,5762,35],[6723,46,5762,35,"arguments"],[6723,55,5762,35],[6724,2,5762,35],[6725,2,5765,0],[6726,0,5766,0],[6727,0,5767,0],[6728,0,5768,0],[6729,0,5769,0],[6730,0,5770,0],[6731,0,5771,0],[6732,0,5772,0],[6733,0,5773,0],[6734,0,5774,0],[6735,0,5775,0],[6736,2,5765,0],[6736,11,5765,0,"_signInWithCredential3"],[6736,34,5765,0],[6737,4,5765,0,"_signInWithCredential3"],[6737,26,5765,0],[6737,29,5765,0,"_asyncToGenerator"],[6737,46,5765,0],[6737,47,5762,0],[6737,58,5762,36,"auth"],[6737,62,5762,40],[6737,64,5762,42,"credential"],[6737,74,5762,52],[6737,76,5762,54],[6738,6,5763,4],[6738,13,5763,11,"_signInWithCredential"],[6738,34,5763,32],[6738,35,5763,33,"_castAuth"],[6738,44,5763,42],[6738,45,5763,43,"auth"],[6738,49,5763,47],[6738,50,5763,48],[6738,52,5763,50,"credential"],[6738,62,5763,60],[6738,63,5763,61],[6739,4,5764,0],[6739,5,5764,1],[6740,4,5764,1],[6740,11,5764,1,"_signInWithCredential3"],[6740,33,5764,1],[6740,34,5764,1,"apply"],[6740,39,5764,1],[6740,46,5764,1,"arguments"],[6740,55,5764,1],[6741,2,5764,1],[6742,2,5764,1],[6742,11,5776,15,"linkWithCredential"],[6742,29,5776,33,"linkWithCredential"],[6742,30,5776,33,"_x139"],[6742,35,5776,33],[6742,37,5776,33,"_x140"],[6742,42,5776,33],[6743,4,5776,33],[6743,11,5776,33,"_linkWithCredential"],[6743,30,5776,33],[6743,31,5776,33,"apply"],[6743,36,5776,33],[6743,43,5776,33,"arguments"],[6743,52,5776,33],[6744,2,5776,33],[6745,2,5781,0],[6746,0,5782,0],[6747,0,5783,0],[6748,0,5784,0],[6749,0,5785,0],[6750,0,5786,0],[6751,0,5787,0],[6752,0,5788,0],[6753,0,5789,0],[6754,0,5790,0],[6755,0,5791,0],[6756,0,5792,0],[6757,0,5793,0],[6758,0,5794,0],[6759,0,5795,0],[6760,0,5796,0],[6761,2,5781,0],[6761,11,5781,0,"_linkWithCredential"],[6761,31,5781,0],[6762,4,5781,0,"_linkWithCredential"],[6762,23,5781,0],[6762,26,5781,0,"_asyncToGenerator"],[6762,43,5781,0],[6762,44,5776,0],[6762,55,5776,34,"user"],[6762,59,5776,38],[6762,61,5776,40,"credential"],[6762,71,5776,50],[6762,73,5776,52],[6763,6,5777,4],[6763,10,5777,10,"userInternal"],[6763,22,5777,22],[6763,25,5777,25,"util"],[6763,29,5777,29],[6763,30,5777,30,"getModularInstance"],[6763,48,5777,48],[6763,49,5777,49,"user"],[6763,53,5777,53],[6763,54,5777,54],[6764,6,5778,4],[6764,12,5778,10,"_assertLinkedStatus"],[6764,31,5778,29],[6764,32,5778,30],[6764,37,5778,35],[6764,39,5778,37,"userInternal"],[6764,51,5778,49],[6764,53,5778,51,"credential"],[6764,63,5778,61],[6764,64,5778,62,"providerId"],[6764,74,5778,72],[6764,75,5778,73],[6765,6,5779,4],[6765,13,5779,11,"_link"],[6765,18,5779,16],[6765,19,5779,17,"userInternal"],[6765,31,5779,29],[6765,33,5779,31,"credential"],[6765,43,5779,41],[6765,44,5779,42],[6766,4,5780,0],[6766,5,5780,1],[6767,4,5780,1],[6767,11,5780,1,"_linkWithCredential"],[6767,30,5780,1],[6767,31,5780,1,"apply"],[6767,36,5780,1],[6767,43,5780,1,"arguments"],[6767,52,5780,1],[6768,2,5780,1],[6769,2,5780,1],[6769,11,5797,15,"reauthenticateWithCredential"],[6769,39,5797,43,"reauthenticateWithCredential"],[6769,40,5797,43,"_x141"],[6769,45,5797,43],[6769,47,5797,43,"_x142"],[6769,52,5797,43],[6770,4,5797,43],[6770,11,5797,43,"_reauthenticateWithCredential"],[6770,40,5797,43],[6770,41,5797,43,"apply"],[6770,46,5797,43],[6770,53,5797,43,"arguments"],[6770,62,5797,43],[6771,2,5797,43],[6772,2,5801,0],[6773,0,5802,0],[6774,0,5803,0],[6775,0,5804,0],[6776,0,5805,0],[6777,0,5806,0],[6778,0,5807,0],[6779,0,5808,0],[6780,0,5809,0],[6781,0,5810,0],[6782,0,5811,0],[6783,0,5812,0],[6784,0,5813,0],[6785,0,5814,0],[6786,0,5815,0],[6787,0,5816,0],[6788,2,5801,0],[6788,11,5801,0,"_reauthenticateWithCredential"],[6788,41,5801,0],[6789,4,5801,0,"_reauthenticateWithCredential"],[6789,33,5801,0],[6789,36,5801,0,"_asyncToGenerator"],[6789,53,5801,0],[6789,54,5797,0],[6789,65,5797,44,"user"],[6789,69,5797,48],[6789,71,5797,50,"credential"],[6789,81,5797,60],[6789,83,5797,62],[6790,6,5798,4],[6790,13,5798,11,"_reauthenticate"],[6790,28,5798,26],[6790,29,5798,27,"util"],[6790,33,5798,31],[6790,34,5798,32,"getModularInstance"],[6790,52,5798,50],[6790,53,5798,51,"user"],[6790,57,5798,55],[6790,58,5798,56],[6790,60,5798,58,"credential"],[6790,70,5798,68],[6790,71,5798,69],[6791,4,5799,0],[6791,5,5799,1],[6792,4,5799,1],[6792,11,5799,1,"_reauthenticateWithCredential"],[6792,40,5799,1],[6792,41,5799,1,"apply"],[6792,46,5799,1],[6792,53,5799,1,"arguments"],[6792,62,5799,1],[6793,2,5799,1],[6794,2,5799,1],[6794,11,5817,15,"signInWithCustomToken$1"],[6794,34,5817,38,"signInWithCustomToken$1"],[6794,35,5817,38,"_x143"],[6794,40,5817,38],[6794,42,5817,38,"_x144"],[6794,47,5817,38],[6795,4,5817,38],[6795,11,5817,38,"_signInWithCustomToken$"],[6795,34,5817,38],[6795,35,5817,38,"apply"],[6795,40,5817,38],[6795,47,5817,38,"arguments"],[6795,56,5817,38],[6796,2,5817,38],[6797,2,5821,0],[6798,0,5822,0],[6799,0,5823,0],[6800,0,5824,0],[6801,0,5825,0],[6802,0,5826,0],[6803,0,5827,0],[6804,0,5828,0],[6805,0,5829,0],[6806,0,5830,0],[6807,0,5831,0],[6808,0,5832,0],[6809,0,5833,0],[6810,0,5834,0],[6811,0,5835,0],[6812,0,5836,0],[6813,2,5837,0],[6814,0,5838,0],[6815,0,5839,0],[6816,0,5840,0],[6817,0,5841,0],[6818,0,5842,0],[6819,0,5843,0],[6820,0,5844,0],[6821,0,5845,0],[6822,0,5846,0],[6823,0,5847,0],[6824,0,5848,0],[6825,0,5849,0],[6826,0,5850,0],[6827,0,5851,0],[6828,0,5852,0],[6829,0,5853,0],[6830,0,5854,0],[6831,0,5855,0],[6832,2,5837,0],[6832,11,5837,0,"_signInWithCustomToken$"],[6832,35,5837,0],[6833,4,5837,0,"_signInWithCustomToken$"],[6833,27,5837,0],[6833,30,5837,0,"_asyncToGenerator"],[6833,47,5837,0],[6833,48,5817,0],[6833,59,5817,39,"auth"],[6833,63,5817,43],[6833,65,5817,45,"request"],[6833,72,5817,52],[6833,74,5817,54],[6834,6,5818,4],[6834,13,5818,11,"_performSignInRequest"],[6834,34,5818,32],[6834,35,5818,33,"auth"],[6834,39,5818,37],[6834,41,5818,39],[6834,47,5818,45],[6834,48,5818,46],[6834,71,5818,69],[6834,107,5818,105],[6834,108,5818,106],[6834,150,5818,148,"_addTidIfNecessary"],[6834,168,5818,166],[6834,169,5818,167,"auth"],[6834,173,5818,171],[6834,175,5818,173,"request"],[6834,182,5818,180],[6834,183,5818,181],[6834,184,5818,182],[6835,4,5819,0],[6835,5,5819,1],[6836,4,5819,1],[6836,11,5819,1,"_signInWithCustomToken$"],[6836,34,5819,1],[6836,35,5819,1,"apply"],[6836,40,5819,1],[6836,47,5819,1,"arguments"],[6836,56,5819,1],[6837,2,5819,1],[6838,2,5819,1],[6838,11,5856,15,"signInWithCustomToken"],[6838,32,5856,36,"signInWithCustomToken"],[6838,33,5856,36,"_x145"],[6838,38,5856,36],[6838,40,5856,36,"_x146"],[6838,45,5856,36],[6839,4,5856,36],[6839,11,5856,36,"_signInWithCustomToken"],[6839,33,5856,36],[6839,34,5856,36,"apply"],[6839,39,5856,36],[6839,46,5856,36,"arguments"],[6839,55,5856,36],[6840,2,5856,36],[6841,2,5870,0],[6842,0,5871,0],[6843,0,5872,0],[6844,0,5873,0],[6845,0,5874,0],[6846,0,5875,0],[6847,0,5876,0],[6848,0,5877,0],[6849,0,5878,0],[6850,0,5879,0],[6851,0,5880,0],[6852,0,5881,0],[6853,0,5882,0],[6854,0,5883,0],[6855,0,5884,0],[6856,0,5885,0],[6857,2,5870,0],[6857,11,5870,0,"_signInWithCustomToken"],[6857,34,5870,0],[6858,4,5870,0,"_signInWithCustomToken"],[6858,26,5870,0],[6858,29,5870,0,"_asyncToGenerator"],[6858,46,5870,0],[6858,47,5856,0],[6858,58,5856,37,"auth"],[6858,62,5856,41],[6858,64,5856,43,"customToken"],[6858,75,5856,54],[6858,77,5856,56],[6859,6,5857,4],[6859,10,5857,8,"app"],[6859,13,5857,11],[6859,14,5857,12,"_isFirebaseServerApp"],[6859,34,5857,32],[6859,35,5857,33,"auth"],[6859,39,5857,37],[6859,40,5857,38,"app"],[6859,43,5857,41],[6859,44,5857,42],[6859,46,5857,44],[6860,8,5858,8],[6860,15,5858,15,"Promise"],[6860,22,5858,22],[6860,23,5858,23,"reject"],[6860,29,5858,29],[6860,30,5858,30,"_serverAppCurrentUserOperationNotSupportedError"],[6860,77,5858,77],[6860,78,5858,78,"auth"],[6860,82,5858,82],[6860,83,5858,83],[6860,84,5858,84],[6861,6,5859,4],[6862,6,5860,4],[6862,10,5860,10,"authInternal"],[6862,22,5860,22],[6862,25,5860,25,"_castAuth"],[6862,34,5860,34],[6862,35,5860,35,"auth"],[6862,39,5860,39],[6862,40,5860,40],[6863,6,5861,4],[6863,10,5861,10,"response"],[6863,18,5861,18],[6863,27,5861,27,"signInWithCustomToken$1"],[6863,50,5861,50],[6863,51,5861,51,"authInternal"],[6863,63,5861,63],[6863,65,5861,65],[6864,8,5862,8,"token"],[6864,13,5862,13],[6864,15,5862,15,"customToken"],[6864,26,5862,26],[6865,8,5863,8,"returnSecureToken"],[6865,25,5863,25],[6865,27,5863,27],[6866,6,5864,4],[6866,7,5864,5],[6866,8,5864,6],[6867,6,5865,4],[6867,10,5865,10,"cred"],[6867,14,5865,14],[6867,23,5865,23,"UserCredentialImpl"],[6867,41,5865,41],[6867,42,5865,42,"_fromIdTokenResponse"],[6867,62,5865,62],[6867,63,5865,63,"authInternal"],[6867,75,5865,75],[6867,77,5865,77],[6867,85,5865,85],[6867,86,5865,86],[6867,115,5865,115,"response"],[6867,123,5865,123],[6867,124,5865,124],[6868,6,5866,4],[6868,12,5866,10,"authInternal"],[6868,24,5866,22],[6868,25,5866,23,"_updateCurrentUser"],[6868,43,5866,41],[6868,44,5866,42,"cred"],[6868,48,5866,46],[6868,49,5866,47,"user"],[6868,53,5866,51],[6868,54,5866,52],[6869,6,5867,4],[6869,13,5867,11,"cred"],[6869,17,5867,15],[6870,4,5868,0],[6870,5,5868,1],[6871,4,5868,1],[6871,11,5868,1,"_signInWithCustomToken"],[6871,33,5868,1],[6871,34,5868,1,"apply"],[6871,39,5868,1],[6871,46,5868,1,"arguments"],[6871,55,5868,1],[6872,2,5868,1],[6873,2,5868,1],[6873,6,5886,6,"MultiFactorInfoImpl"],[6873,25,5886,25],[6874,4,5887,4],[6874,13,5887,4,"MultiFactorInfoImpl"],[6874,33,5887,16,"factorId"],[6874,41,5887,24],[6874,43,5887,26,"response"],[6874,51,5887,34],[6874,53,5887,36],[6875,6,5887,36,"_classCallCheck"],[6875,21,5887,36],[6875,28,5887,36,"MultiFactorInfoImpl"],[6875,47,5887,36],[6876,6,5888,8],[6876,10,5888,12],[6876,11,5888,13,"factorId"],[6876,19,5888,21],[6876,22,5888,24,"factorId"],[6876,30,5888,32],[6877,6,5889,8],[6877,10,5889,12],[6877,11,5889,13,"uid"],[6877,14,5889,16],[6877,17,5889,19,"response"],[6877,25,5889,27],[6877,26,5889,28,"mfaEnrollmentId"],[6877,41,5889,43],[6878,6,5890,8],[6878,10,5890,12],[6878,11,5890,13,"enrollmentTime"],[6878,25,5890,27],[6878,28,5890,30],[6878,32,5890,34,"Date"],[6878,36,5890,38],[6878,37,5890,39,"response"],[6878,45,5890,47],[6878,46,5890,48,"enrolledAt"],[6878,56,5890,58],[6878,57,5890,59],[6878,58,5890,60,"toUTCString"],[6878,69,5890,71],[6878,70,5890,72],[6878,71,5890,73],[6879,6,5891,8],[6879,10,5891,12],[6879,11,5891,13,"displayName"],[6879,22,5891,24],[6879,25,5891,27,"response"],[6879,33,5891,35],[6879,34,5891,36,"displayName"],[6879,45,5891,47],[6880,4,5892,4],[6881,4,5892,5],[6881,11,5892,5,"_createClass"],[6881,23,5892,5],[6881,24,5892,5,"MultiFactorInfoImpl"],[6881,43,5892,5],[6882,6,5892,5,"key"],[6882,9,5892,5],[6883,6,5892,5,"value"],[6883,11,5892,5],[6883,13,5893,4],[6883,22,5893,11,"_fromServerResponse"],[6883,41,5893,30,"_fromServerResponse"],[6883,42,5893,31,"auth"],[6883,46,5893,35],[6883,48,5893,37,"enrollment"],[6883,58,5893,47],[6883,60,5893,49],[6884,8,5894,8],[6884,12,5894,12],[6884,23,5894,23],[6884,27,5894,27,"enrollment"],[6884,37,5894,37],[6884,39,5894,39],[6885,10,5895,12],[6885,17,5895,19,"PhoneMultiFactorInfoImpl"],[6885,41,5895,43],[6885,42,5895,44,"_fromServerResponse"],[6885,61,5895,63],[6885,62,5895,64,"auth"],[6885,66,5895,68],[6885,68,5895,70,"enrollment"],[6885,78,5895,80],[6885,79,5895,81],[6886,8,5896,8],[6886,9,5896,9],[6886,15,5897,13],[6886,19,5897,17],[6886,29,5897,27],[6886,33,5897,31,"enrollment"],[6886,43,5897,41],[6886,45,5897,43],[6887,10,5898,12],[6887,17,5898,19,"TotpMultiFactorInfoImpl"],[6887,40,5898,42],[6887,41,5898,43,"_fromServerResponse"],[6887,60,5898,62],[6887,61,5898,63,"auth"],[6887,65,5898,67],[6887,67,5898,69,"enrollment"],[6887,77,5898,79],[6887,78,5898,80],[6888,8,5899,8],[6889,8,5900,8],[6889,15,5900,15,"_fail"],[6889,20,5900,20],[6889,21,5900,21,"auth"],[6889,25,5900,25],[6889,27,5900,27],[6889,43,5900,43],[6889,44,5900,44],[6889,78,5900,78],[6889,79,5900,79],[6890,6,5901,4],[6891,4,5901,5],[6892,2,5901,5],[6893,2,5901,5],[6893,6,5903,6,"PhoneMultiFactorInfoImpl"],[6893,30,5903,30],[6893,56,5903,30,"_MultiFactorInfoImpl"],[6893,76,5903,30],[6894,4,5904,4],[6894,13,5904,4,"PhoneMultiFactorInfoImpl"],[6894,38,5904,16,"response"],[6894,46,5904,24],[6894,48,5904,26],[6895,6,5904,26],[6895,10,5904,26,"_this11"],[6895,17,5904,26],[6896,6,5904,26,"_classCallCheck"],[6896,21,5904,26],[6896,28,5904,26,"PhoneMultiFactorInfoImpl"],[6896,52,5904,26],[6897,6,5905,8,"_this11"],[6897,13,5905,8],[6897,16,5905,8,"_callSuper"],[6897,26,5905,8],[6897,33,5905,8,"PhoneMultiFactorInfoImpl"],[6897,57,5905,8],[6897,60,5905,14],[6897,67,5905,21],[6897,68,5905,22],[6897,90,5905,44,"response"],[6897,98,5905,52],[6898,6,5906,8,"_this11"],[6898,13,5906,8],[6898,14,5906,13,"phoneNumber"],[6898,25,5906,24],[6898,28,5906,27,"response"],[6898,36,5906,35],[6898,37,5906,36,"phoneInfo"],[6898,46,5906,45],[6899,6,5906,46],[6899,13,5906,46,"_this11"],[6899,20,5906,46],[6900,4,5907,4],[6901,4,5907,5,"_inherits"],[6901,13,5907,5],[6901,14,5907,5,"PhoneMultiFactorInfoImpl"],[6901,38,5907,5],[6901,40,5907,5,"_MultiFactorInfoImpl"],[6901,60,5907,5],[6902,4,5907,5],[6902,11,5907,5,"_createClass"],[6902,23,5907,5],[6902,24,5907,5,"PhoneMultiFactorInfoImpl"],[6902,48,5907,5],[6903,6,5907,5,"key"],[6903,9,5907,5],[6904,6,5907,5,"value"],[6904,11,5907,5],[6904,13,5908,4],[6904,22,5908,11,"_fromServerResponse"],[6904,41,5908,30,"_fromServerResponse"],[6904,42,5908,31,"_auth"],[6904,47,5908,36],[6904,49,5908,38,"enrollment"],[6904,59,5908,48],[6904,61,5908,50],[6905,8,5909,8],[6905,15,5909,15],[6905,19,5909,19,"PhoneMultiFactorInfoImpl"],[6905,43,5909,43],[6905,44,5909,44,"enrollment"],[6905,54,5909,54],[6905,55,5909,55],[6906,6,5910,4],[6907,4,5910,5],[6908,2,5910,5],[6908,4,5903,39,"MultiFactorInfoImpl"],[6908,23,5903,58],[6909,2,5903,58],[6909,6,5912,6,"TotpMultiFactorInfoImpl"],[6909,29,5912,29],[6909,55,5912,29,"_MultiFactorInfoImpl2"],[6909,76,5912,29],[6910,4,5913,4],[6910,13,5913,4,"TotpMultiFactorInfoImpl"],[6910,37,5913,16,"response"],[6910,45,5913,24],[6910,47,5913,26],[6911,6,5913,26,"_classCallCheck"],[6911,21,5913,26],[6911,28,5913,26,"TotpMultiFactorInfoImpl"],[6911,51,5913,26],[6912,6,5913,26],[6912,13,5913,26,"_callSuper"],[6912,23,5913,26],[6912,30,5913,26,"TotpMultiFactorInfoImpl"],[6912,53,5913,26],[6912,56,5914,14],[6912,62,5914,20],[6912,63,5914,21],[6912,84,5914,42,"response"],[6912,92,5914,50],[6913,4,5915,4],[6914,4,5915,5,"_inherits"],[6914,13,5915,5],[6914,14,5915,5,"TotpMultiFactorInfoImpl"],[6914,37,5915,5],[6914,39,5915,5,"_MultiFactorInfoImpl2"],[6914,60,5915,5],[6915,4,5915,5],[6915,11,5915,5,"_createClass"],[6915,23,5915,5],[6915,24,5915,5,"TotpMultiFactorInfoImpl"],[6915,47,5915,5],[6916,6,5915,5,"key"],[6916,9,5915,5],[6917,6,5915,5,"value"],[6917,11,5915,5],[6917,13,5916,4],[6917,22,5916,11,"_fromServerResponse"],[6917,41,5916,30,"_fromServerResponse"],[6917,42,5916,31,"_auth"],[6917,47,5916,36],[6917,49,5916,38,"enrollment"],[6917,59,5916,48],[6917,61,5916,50],[6918,8,5917,8],[6918,15,5917,15],[6918,19,5917,19,"TotpMultiFactorInfoImpl"],[6918,42,5917,42],[6918,43,5917,43,"enrollment"],[6918,53,5917,53],[6918,54,5917,54],[6919,6,5918,4],[6920,4,5918,5],[6921,2,5918,5],[6921,4,5912,38,"MultiFactorInfoImpl"],[6921,23,5912,57],[6922,2,5921,0],[6923,0,5922,0],[6924,0,5923,0],[6925,0,5924,0],[6926,0,5925,0],[6927,0,5926,0],[6928,0,5927,0],[6929,0,5928,0],[6930,0,5929,0],[6931,0,5930,0],[6932,0,5931,0],[6933,0,5932,0],[6934,0,5933,0],[6935,0,5934,0],[6936,0,5935,0],[6937,0,5936,0],[6938,2,5937,0],[6938,11,5937,9,"_setActionCodeSettingsOnRequest"],[6938,42,5937,40,"_setActionCodeSettingsOnRequest"],[6938,43,5937,41,"auth"],[6938,47,5937,45],[6938,49,5937,47,"request"],[6938,56,5937,54],[6938,58,5937,56,"actionCodeSettings"],[6938,76,5937,74],[6938,78,5937,76],[6939,4,5938,4,"_assert"],[6939,11,5938,11],[6939,12,5938,12,"actionCodeSettings"],[6939,30,5938,30],[6939,31,5938,31,"url"],[6939,34,5938,34],[6939,36,5938,36,"length"],[6939,42,5938,42],[6939,45,5938,45],[6939,46,5938,46],[6939,48,5938,48,"auth"],[6939,52,5938,52],[6939,54,5938,54],[6939,76,5938,76],[6939,77,5938,77],[6939,117,5938,117],[6939,118,5938,118],[6940,4,5939,4,"_assert"],[6940,11,5939,11],[6940,12,5939,12],[6940,19,5939,19,"actionCodeSettings"],[6940,37,5939,37],[6940,38,5939,38,"dynamicLinkDomain"],[6940,55,5939,55],[6940,60,5939,60],[6940,71,5939,71],[6940,75,5940,8,"actionCodeSettings"],[6940,93,5940,26],[6940,94,5940,27,"dynamicLinkDomain"],[6940,111,5940,44],[6940,112,5940,45,"length"],[6940,118,5940,51],[6940,121,5940,54],[6940,122,5940,55],[6940,124,5940,57,"auth"],[6940,128,5940,61],[6940,130,5940,63],[6940,159,5940,92],[6940,160,5940,93],[6940,207,5940,140],[6940,208,5940,141],[6941,4,5941,4,"_assert"],[6941,11,5941,11],[6941,12,5941,12],[6941,19,5941,19,"actionCodeSettings"],[6941,37,5941,37],[6941,38,5941,38,"linkDomain"],[6941,48,5941,48],[6941,53,5941,53],[6941,64,5941,64],[6941,68,5942,8,"actionCodeSettings"],[6941,86,5942,26],[6941,87,5942,27,"linkDomain"],[6941,97,5942,37],[6941,98,5942,38,"length"],[6941,104,5942,44],[6941,107,5942,47],[6941,108,5942,48],[6941,110,5942,50,"auth"],[6941,114,5942,54],[6941,116,5942,56],[6941,145,5942,85],[6941,146,5942,86],[6941,193,5942,133],[6941,194,5942,134],[6942,4,5943,4,"request"],[6942,11,5943,11],[6942,12,5943,12,"continueUrl"],[6942,23,5943,23],[6942,26,5943,26,"actionCodeSettings"],[6942,44,5943,44],[6942,45,5943,45,"url"],[6942,48,5943,48],[6943,4,5944,4,"request"],[6943,11,5944,11],[6943,12,5944,12,"dynamicLinkDomain"],[6943,29,5944,29],[6943,32,5944,32,"actionCodeSettings"],[6943,50,5944,50],[6943,51,5944,51,"dynamicLinkDomain"],[6943,68,5944,68],[6944,4,5945,4,"request"],[6944,11,5945,11],[6944,12,5945,12,"linkDomain"],[6944,22,5945,22],[6944,25,5945,25,"actionCodeSettings"],[6944,43,5945,43],[6944,44,5945,44,"linkDomain"],[6944,54,5945,54],[6945,4,5946,4,"request"],[6945,11,5946,11],[6945,12,5946,12,"canHandleCodeInApp"],[6945,30,5946,30],[6945,33,5946,33,"actionCodeSettings"],[6945,51,5946,51],[6945,52,5946,52,"handleCodeInApp"],[6945,67,5946,67],[6946,4,5947,4],[6946,8,5947,8,"actionCodeSettings"],[6946,26,5947,26],[6946,27,5947,27,"iOS"],[6946,30,5947,30],[6946,32,5947,32],[6947,6,5948,8,"_assert"],[6947,13,5948,15],[6947,14,5948,16,"actionCodeSettings"],[6947,32,5948,34],[6947,33,5948,35,"iOS"],[6947,36,5948,38],[6947,37,5948,39,"bundleId"],[6947,45,5948,47],[6947,46,5948,48,"length"],[6947,52,5948,54],[6947,55,5948,57],[6947,56,5948,58],[6947,58,5948,60,"auth"],[6947,62,5948,64],[6947,64,5948,66],[6947,87,5948,89],[6947,88,5948,90],[6947,129,5948,131],[6947,130,5948,132],[6948,6,5949,8,"request"],[6948,13,5949,15],[6948,14,5949,16,"iOSBundleId"],[6948,25,5949,27],[6948,28,5949,30,"actionCodeSettings"],[6948,46,5949,48],[6948,47,5949,49,"iOS"],[6948,50,5949,52],[6948,51,5949,53,"bundleId"],[6948,59,5949,61],[6949,4,5950,4],[6950,4,5951,4],[6950,8,5951,8,"actionCodeSettings"],[6950,26,5951,26],[6950,27,5951,27,"android"],[6950,34,5951,34],[6950,36,5951,36],[6951,6,5952,8,"_assert"],[6951,13,5952,15],[6951,14,5952,16,"actionCodeSettings"],[6951,32,5952,34],[6951,33,5952,35,"android"],[6951,40,5952,42],[6951,41,5952,43,"packageName"],[6951,52,5952,54],[6951,53,5952,55,"length"],[6951,59,5952,61],[6951,62,5952,64],[6951,63,5952,65],[6951,65,5952,67,"auth"],[6951,69,5952,71],[6951,71,5952,73],[6951,97,5952,99],[6951,98,5952,100],[6951,146,5952,148],[6951,147,5952,149],[6952,6,5953,8,"request"],[6952,13,5953,15],[6952,14,5953,16,"androidInstallApp"],[6952,31,5953,33],[6952,34,5953,36,"actionCodeSettings"],[6952,52,5953,54],[6952,53,5953,55,"android"],[6952,60,5953,62],[6952,61,5953,63,"installApp"],[6952,71,5953,73],[6953,6,5954,8,"request"],[6953,13,5954,15],[6953,14,5954,16,"androidMinimumVersionCode"],[6953,39,5954,41],[6953,42,5955,12,"actionCodeSettings"],[6953,60,5955,30],[6953,61,5955,31,"android"],[6953,68,5955,38],[6953,69,5955,39,"minimumVersion"],[6953,83,5955,53],[6954,6,5956,8,"request"],[6954,13,5956,15],[6954,14,5956,16,"androidPackageName"],[6954,32,5956,34],[6954,35,5956,37,"actionCodeSettings"],[6954,53,5956,55],[6954,54,5956,56,"android"],[6954,61,5956,63],[6954,62,5956,64,"packageName"],[6954,73,5956,75],[6955,4,5957,4],[6956,2,5958,0],[6958,2,5960,0],[6959,0,5961,0],[6960,0,5962,0],[6961,0,5963,0],[6962,0,5964,0],[6963,0,5965,0],[6964,0,5966,0],[6965,0,5967,0],[6966,0,5968,0],[6967,0,5969,0],[6968,0,5970,0],[6969,0,5971,0],[6970,0,5972,0],[6971,0,5973,0],[6972,0,5974,0],[6973,0,5975,0],[6974,2,5976,0],[6975,0,5977,0],[6976,0,5978,0],[6977,0,5979,0],[6978,0,5980,0],[6979,0,5981,0],[6980,0,5982,0],[6981,0,5983,0],[6982,0,5984,0],[6983,0,5985,0],[6984,0,5986,0],[6985,0,5987,0],[6986,0,5988,0],[6987,2,5976,0],[6987,11,5989,15,"recachePasswordPolicy"],[6987,32,5989,36,"recachePasswordPolicy"],[6987,33,5989,36,"_x147"],[6987,38,5989,36],[6988,4,5989,36],[6988,11,5989,36,"_recachePasswordPolicy"],[6988,33,5989,36],[6988,34,5989,36,"apply"],[6988,39,5989,36],[6988,46,5989,36,"arguments"],[6988,55,5989,36],[6989,2,5989,36],[6990,2,5995,0],[6991,0,5996,0],[6992,0,5997,0],[6993,0,5998,0],[6994,0,5999,0],[6995,0,6000,0],[6996,0,6001,0],[6997,0,6002,0],[6998,0,6003,0],[6999,0,6004,0],[7000,0,6005,0],[7001,0,6006,0],[7002,0,6007,0],[7003,0,6008,0],[7004,0,6009,0],[7005,0,6010,0],[7006,0,6011,0],[7007,0,6012,0],[7008,0,6013,0],[7009,0,6014,0],[7010,0,6015,0],[7011,0,6016,0],[7012,0,6017,0],[7013,0,6018,0],[7014,0,6019,0],[7015,0,6020,0],[7016,0,6021,0],[7017,0,6022,0],[7018,0,6023,0],[7019,0,6024,0],[7020,0,6025,0],[7021,0,6026,0],[7022,0,6027,0],[7023,0,6028,0],[7024,0,6029,0],[7025,2,5995,0],[7025,11,5995,0,"_recachePasswordPolicy"],[7025,34,5995,0],[7026,4,5995,0,"_recachePasswordPolicy"],[7026,26,5995,0],[7026,29,5995,0,"_asyncToGenerator"],[7026,46,5995,0],[7026,47,5989,0],[7026,58,5989,37,"auth"],[7026,62,5989,41],[7026,64,5989,43],[7027,6,5990,4],[7027,10,5990,10,"authInternal"],[7027,22,5990,22],[7027,25,5990,25,"_castAuth"],[7027,34,5990,34],[7027,35,5990,35,"auth"],[7027,39,5990,39],[7027,40,5990,40],[7028,6,5991,4],[7028,10,5991,8,"authInternal"],[7028,22,5991,20],[7028,23,5991,21,"_getPasswordPolicyInternal"],[7028,49,5991,47],[7028,50,5991,48],[7028,51,5991,49],[7028,53,5991,51],[7029,8,5992,8],[7029,14,5992,14,"authInternal"],[7029,26,5992,26],[7029,27,5992,27,"_updatePasswordPolicy"],[7029,48,5992,48],[7029,49,5992,49],[7029,50,5992,50],[7030,6,5993,4],[7031,4,5994,0],[7031,5,5994,1],[7032,4,5994,1],[7032,11,5994,1,"_recachePasswordPolicy"],[7032,33,5994,1],[7032,34,5994,1,"apply"],[7032,39,5994,1],[7032,46,5994,1,"arguments"],[7032,55,5994,1],[7033,2,5994,1],[7034,2,5994,1],[7034,11,6030,15,"sendPasswordResetEmail"],[7034,33,6030,37,"sendPasswordResetEmail"],[7034,34,6030,37,"_x148"],[7034,39,6030,37],[7034,41,6030,37,"_x149"],[7034,46,6030,37],[7034,48,6030,37,"_x150"],[7034,53,6030,37],[7035,4,6030,37],[7035,11,6030,37,"_sendPasswordResetEmail"],[7035,34,6030,37],[7035,35,6030,37,"apply"],[7035,40,6030,37],[7035,47,6030,37,"arguments"],[7035,56,6030,37],[7036,2,6030,37],[7037,2,6042,0],[7038,0,6043,0],[7039,0,6044,0],[7040,0,6045,0],[7041,0,6046,0],[7042,0,6047,0],[7043,0,6048,0],[7044,0,6049,0],[7045,0,6050,0],[7046,2,6042,0],[7046,11,6042,0,"_sendPasswordResetEmail"],[7046,35,6042,0],[7047,4,6042,0,"_sendPasswordResetEmail"],[7047,27,6042,0],[7047,30,6042,0,"_asyncToGenerator"],[7047,47,6042,0],[7047,48,6030,0],[7047,59,6030,38,"auth"],[7047,63,6030,42],[7047,65,6030,44,"email"],[7047,70,6030,49],[7047,72,6030,51,"actionCodeSettings"],[7047,90,6030,69],[7047,92,6030,71],[7048,6,6031,4],[7048,10,6031,10,"authInternal"],[7048,22,6031,22],[7048,25,6031,25,"_castAuth"],[7048,34,6031,34],[7048,35,6031,35,"auth"],[7048,39,6031,39],[7048,40,6031,40],[7049,6,6032,4],[7049,10,6032,10,"request"],[7049,17,6032,17],[7049,20,6032,20],[7050,8,6033,8,"requestType"],[7050,19,6033,19],[7050,21,6033,21],[7050,37,6033,37],[7050,38,6033,38],[7051,8,6034,8,"email"],[7051,13,6034,13],[7052,8,6035,8,"clientType"],[7052,18,6035,18],[7052,20,6035,20],[7052,37,6035,37],[7052,38,6035,38],[7053,6,6036,4],[7053,7,6036,5],[7054,6,6037,4],[7054,10,6037,8,"actionCodeSettings"],[7054,28,6037,26],[7054,30,6037,28],[7055,8,6038,8,"_setActionCodeSettingsOnRequest"],[7055,39,6038,39],[7055,40,6038,40,"authInternal"],[7055,52,6038,52],[7055,54,6038,54,"request"],[7055,61,6038,61],[7055,63,6038,63,"actionCodeSettings"],[7055,81,6038,81],[7055,82,6038,82],[7056,6,6039,4],[7057,6,6040,4],[7057,12,6040,10,"handleRecaptchaFlow"],[7057,31,6040,29],[7057,32,6040,30,"authInternal"],[7057,44,6040,42],[7057,46,6040,44,"request"],[7057,53,6040,51],[7057,55,6040,53],[7057,67,6040,65],[7057,68,6040,66],[7057,108,6040,106,"sendPasswordResetEmail$1"],[7057,132,6040,130],[7057,134,6040,132],[7057,159,6040,157],[7057,160,6040,158],[7057,211,6040,209],[7057,212,6040,210],[7058,4,6041,0],[7058,5,6041,1],[7059,4,6041,1],[7059,11,6041,1,"_sendPasswordResetEmail"],[7059,34,6041,1],[7059,35,6041,1,"apply"],[7059,40,6041,1],[7059,47,6041,1,"arguments"],[7059,56,6041,1],[7060,2,6041,1],[7061,2,6041,1],[7061,11,6051,15,"confirmPasswordReset"],[7061,31,6051,35,"confirmPasswordReset"],[7061,32,6051,35,"_x151"],[7061,37,6051,35],[7061,39,6051,35,"_x152"],[7061,44,6051,35],[7061,46,6051,35,"_x153"],[7061,51,6051,35],[7062,4,6051,35],[7062,11,6051,35,"_confirmPasswordReset"],[7062,32,6051,35],[7062,33,6051,35,"apply"],[7062,38,6051,35],[7062,45,6051,35,"arguments"],[7062,54,6051,35],[7063,2,6051,35],[7064,2,6065,0],[7065,0,6066,0],[7066,0,6067,0],[7067,0,6068,0],[7068,0,6069,0],[7069,0,6070,0],[7070,0,6071,0],[7071,0,6072,0],[7072,2,6065,0],[7072,11,6065,0,"_confirmPasswordReset"],[7072,33,6065,0],[7073,4,6065,0,"_confirmPasswordReset"],[7073,25,6065,0],[7073,28,6065,0,"_asyncToGenerator"],[7073,45,6065,0],[7073,46,6051,0],[7073,57,6051,36,"auth"],[7073,61,6051,40],[7073,63,6051,42,"oobCode"],[7073,70,6051,49],[7073,72,6051,51,"newPassword"],[7073,83,6051,62],[7073,85,6051,64],[7074,6,6052,4],[7074,12,6052,10,"resetPassword"],[7074,25,6052,23],[7074,26,6052,24,"util"],[7074,30,6052,28],[7074,31,6052,29,"getModularInstance"],[7074,49,6052,47],[7074,50,6052,48,"auth"],[7074,54,6052,52],[7074,55,6052,53],[7074,57,6052,55],[7075,8,6053,8,"oobCode"],[7075,15,6053,15],[7076,8,6054,8,"newPassword"],[7077,6,6055,4],[7077,7,6055,5],[7077,8,6055,6],[7077,9,6056,9,"catch"],[7077,14,6056,14],[7078,8,6056,14],[7078,12,6056,14,"_ref28"],[7078,18,6056,14],[7078,21,6056,14,"_asyncToGenerator"],[7078,38,6056,14],[7078,39,6056,15],[7078,50,6056,22,"error"],[7078,55,6056,27],[7078,57,6056,32],[7079,10,6057,8],[7079,14,6057,12,"error"],[7079,19,6057,17],[7079,20,6057,18,"code"],[7079,24,6057,22],[7079,29,6058,12],[7079,37,6058,20],[7079,74,6058,57],[7079,75,6058,58],[7079,132,6058,115],[7079,134,6058,117],[7080,12,6059,12],[7080,17,6059,17,"recachePasswordPolicy"],[7080,38,6059,38],[7080,39,6059,39,"auth"],[7080,43,6059,43],[7080,44,6059,44],[7081,10,6060,8],[7082,10,6061,8],[7082,16,6061,14,"error"],[7082,21,6061,19],[7083,8,6062,4],[7083,9,6062,5],[7084,8,6062,5],[7084,25,6062,5,"_x221"],[7084,30,6062,5],[7085,10,6062,5],[7085,17,6062,5,"_ref28"],[7085,23,6062,5],[7085,24,6062,5,"apply"],[7085,29,6062,5],[7085,36,6062,5,"arguments"],[7085,45,6062,5],[7086,8,6062,5],[7087,6,6062,5],[7087,10,6062,6],[7088,6,6063,4],[7089,4,6064,0],[7089,5,6064,1],[7090,4,6064,1],[7090,11,6064,1,"_confirmPasswordReset"],[7090,32,6064,1],[7090,33,6064,1,"apply"],[7090,38,6064,1],[7090,45,6064,1,"arguments"],[7090,54,6064,1],[7091,2,6064,1],[7092,2,6064,1],[7092,11,6073,15,"applyActionCode"],[7092,26,6073,30,"applyActionCode"],[7092,27,6073,30,"_x154"],[7092,32,6073,30],[7092,34,6073,30,"_x155"],[7092,39,6073,30],[7093,4,6073,30],[7093,11,6073,30,"_applyActionCode"],[7093,27,6073,30],[7093,28,6073,30,"apply"],[7093,33,6073,30],[7093,40,6073,30,"arguments"],[7093,49,6073,30],[7094,2,6073,30],[7095,2,6076,0],[7096,0,6077,0],[7097,0,6078,0],[7098,0,6079,0],[7099,0,6080,0],[7100,0,6081,0],[7101,0,6082,0],[7102,0,6083,0],[7103,0,6084,0],[7104,0,6085,0],[7105,2,6076,0],[7105,11,6076,0,"_applyActionCode"],[7105,28,6076,0],[7106,4,6076,0,"_applyActionCode"],[7106,20,6076,0],[7106,23,6076,0,"_asyncToGenerator"],[7106,40,6076,0],[7106,41,6073,0],[7106,52,6073,31,"auth"],[7106,56,6073,35],[7106,58,6073,37,"oobCode"],[7106,65,6073,44],[7106,67,6073,46],[7107,6,6074,4],[7107,12,6074,10,"applyActionCode$1"],[7107,29,6074,27],[7107,30,6074,28,"util"],[7107,34,6074,32],[7107,35,6074,33,"getModularInstance"],[7107,53,6074,51],[7107,54,6074,52,"auth"],[7107,58,6074,56],[7107,59,6074,57],[7107,61,6074,59],[7108,8,6074,61,"oobCode"],[7109,6,6074,69],[7109,7,6074,70],[7109,8,6074,71],[7110,4,6075,0],[7110,5,6075,1],[7111,4,6075,1],[7111,11,6075,1,"_applyActionCode"],[7111,27,6075,1],[7111,28,6075,1,"apply"],[7111,33,6075,1],[7111,40,6075,1,"arguments"],[7111,49,6075,1],[7112,2,6075,1],[7113,2,6075,1],[7113,11,6086,15,"checkActionCode"],[7113,26,6086,30,"checkActionCode"],[7113,27,6086,30,"_x156"],[7113,32,6086,30],[7113,34,6086,30,"_x157"],[7113,39,6086,30],[7114,4,6086,30],[7114,11,6086,30,"_checkActionCode"],[7114,27,6086,30],[7114,28,6086,30,"apply"],[7114,33,6086,30],[7114,40,6086,30,"arguments"],[7114,49,6086,30],[7115,2,6086,30],[7116,2,6127,0],[7117,0,6128,0],[7118,0,6129,0],[7119,0,6130,0],[7120,0,6131,0],[7121,0,6132,0],[7122,0,6133,0],[7123,0,6134,0],[7124,0,6135,0],[7125,0,6136,0],[7126,2,6127,0],[7126,11,6127,0,"_checkActionCode"],[7126,28,6127,0],[7127,4,6127,0,"_checkActionCode"],[7127,20,6127,0],[7127,23,6127,0,"_asyncToGenerator"],[7127,40,6127,0],[7127,41,6086,0],[7127,52,6086,31,"auth"],[7127,56,6086,35],[7127,58,6086,37,"oobCode"],[7127,65,6086,44],[7127,67,6086,46],[7128,6,6087,4],[7128,10,6087,10,"authModular"],[7128,21,6087,21],[7128,24,6087,24,"util"],[7128,28,6087,28],[7128,29,6087,29,"getModularInstance"],[7128,47,6087,47],[7128,48,6087,48,"auth"],[7128,52,6087,52],[7128,53,6087,53],[7129,6,6088,4],[7129,10,6088,10,"response"],[7129,18,6088,18],[7129,27,6088,27,"resetPassword"],[7129,40,6088,40],[7129,41,6088,41,"authModular"],[7129,52,6088,52],[7129,54,6088,54],[7130,8,6088,56,"oobCode"],[7131,6,6088,64],[7131,7,6088,65],[7131,8,6088,66],[7132,6,6089,4],[7133,6,6090,4],[7134,6,6091,4],[7135,6,6092,4],[7136,6,6093,4],[7137,6,6094,4],[7138,6,6095,4],[7138,10,6095,10,"operation"],[7138,19,6095,19],[7138,22,6095,22,"response"],[7138,30,6095,30],[7138,31,6095,31,"requestType"],[7138,42,6095,42],[7139,6,6096,4,"_assert"],[7139,13,6096,11],[7139,14,6096,12,"operation"],[7139,23,6096,21],[7139,25,6096,23,"authModular"],[7139,36,6096,34],[7139,38,6096,36],[7139,54,6096,52],[7139,55,6096,53],[7139,89,6096,87],[7139,90,6096,88],[7140,6,6097,4],[7140,14,6097,12,"operation"],[7140,23,6097,21],[7141,8,6098,8],[7141,13,6098,13],[7141,27,6098,27],[7141,28,6098,28],[7142,10,6099,12],[7143,8,6100,8],[7143,13,6100,13],[7143,38,6100,38],[7143,39,6100,39],[7144,10,6101,12,"_assert"],[7144,17,6101,19],[7144,18,6101,20,"response"],[7144,26,6101,28],[7144,27,6101,29,"newEmail"],[7144,35,6101,37],[7144,37,6101,39,"authModular"],[7144,48,6101,50],[7144,50,6101,52],[7144,66,6101,68],[7144,67,6101,69],[7144,101,6101,103],[7144,102,6101,104],[7145,10,6102,12],[7146,8,6103,8],[7146,13,6103,13],[7146,44,6103,44],[7146,45,6103,45],[7147,10,6104,12,"_assert"],[7147,17,6104,19],[7147,18,6104,20,"response"],[7147,26,6104,28],[7147,27,6104,29,"mfaInfo"],[7147,34,6104,36],[7147,36,6104,38,"authModular"],[7147,47,6104,49],[7147,49,6104,51],[7147,65,6104,67],[7147,66,6104,68],[7147,100,6104,102],[7147,101,6104,103],[7148,8,6105,8],[7149,8,6106,8],[7150,10,6107,12,"_assert"],[7150,17,6107,19],[7150,18,6107,20,"response"],[7150,26,6107,28],[7150,27,6107,29,"email"],[7150,32,6107,34],[7150,34,6107,36,"authModular"],[7150,45,6107,47],[7150,47,6107,49],[7150,63,6107,65],[7150,64,6107,66],[7150,98,6107,100],[7150,99,6107,101],[7151,6,6108,4],[7152,6,6109,4],[7153,6,6110,4],[7153,10,6110,8,"multiFactorInfo"],[7153,25,6110,23],[7153,28,6110,26],[7153,32,6110,30],[7154,6,6111,4],[7154,10,6111,8,"response"],[7154,18,6111,16],[7154,19,6111,17,"mfaInfo"],[7154,26,6111,24],[7154,28,6111,26],[7155,8,6112,8,"multiFactorInfo"],[7155,23,6112,23],[7155,26,6112,26,"MultiFactorInfoImpl"],[7155,45,6112,45],[7155,46,6112,46,"_fromServerResponse"],[7155,65,6112,65],[7155,66,6112,66,"_castAuth"],[7155,75,6112,75],[7155,76,6112,76,"authModular"],[7155,87,6112,87],[7155,88,6112,88],[7155,90,6112,90,"response"],[7155,98,6112,98],[7155,99,6112,99,"mfaInfo"],[7155,106,6112,106],[7155,107,6112,107],[7156,6,6113,4],[7157,6,6114,4],[7157,13,6114,11],[7158,8,6115,8,"data"],[7158,12,6115,12],[7158,14,6115,14],[7159,10,6116,12,"email"],[7159,15,6116,17],[7159,17,6116,19],[7159,18,6116,20,"response"],[7159,26,6116,28],[7159,27,6116,29,"requestType"],[7159,38,6116,40],[7159,43,6116,45],[7159,68,6116,70],[7159,69,6116,71],[7159,121,6117,18,"response"],[7159,129,6117,26],[7159,130,6117,27,"newEmail"],[7159,138,6117,35],[7159,141,6118,18,"response"],[7159,149,6118,26],[7159,150,6118,27,"email"],[7159,155,6118,32],[7159,160,6118,37],[7159,164,6118,41],[7160,10,6119,12,"previousEmail"],[7160,23,6119,25],[7160,25,6119,27],[7160,26,6119,28,"response"],[7160,34,6119,36],[7160,35,6119,37,"requestType"],[7160,46,6119,48],[7160,51,6119,53],[7160,76,6119,78],[7160,77,6119,79],[7160,129,6120,18,"response"],[7160,137,6120,26],[7160,138,6120,27,"email"],[7160,143,6120,32],[7160,146,6121,18,"response"],[7160,154,6121,26],[7160,155,6121,27,"newEmail"],[7160,163,6121,35],[7160,168,6121,40],[7160,172,6121,44],[7161,10,6122,12,"multiFactorInfo"],[7162,8,6123,8],[7162,9,6123,9],[7163,8,6124,8,"operation"],[7164,6,6125,4],[7164,7,6125,5],[7165,4,6126,0],[7165,5,6126,1],[7166,4,6126,1],[7166,11,6126,1,"_checkActionCode"],[7166,27,6126,1],[7166,28,6126,1,"apply"],[7166,33,6126,1],[7166,40,6126,1,"arguments"],[7166,49,6126,1],[7167,2,6126,1],[7168,2,6126,1],[7168,11,6137,15,"verifyPasswordResetCode"],[7168,34,6137,38,"verifyPasswordResetCode"],[7168,35,6137,38,"_x158"],[7168,40,6137,38],[7168,42,6137,38,"_x159"],[7168,47,6137,38],[7169,4,6137,38],[7169,11,6137,38,"_verifyPasswordResetCode"],[7169,35,6137,38],[7169,36,6137,38,"apply"],[7169,41,6137,38],[7169,48,6137,38,"arguments"],[7169,57,6137,38],[7170,2,6137,38],[7171,2,6142,0],[7172,0,6143,0],[7173,0,6144,0],[7174,0,6145,0],[7175,0,6146,0],[7176,0,6147,0],[7177,0,6148,0],[7178,0,6149,0],[7179,0,6150,0],[7180,0,6151,0],[7181,0,6152,0],[7182,0,6153,0],[7183,0,6154,0],[7184,0,6155,0],[7185,0,6156,0],[7186,0,6157,0],[7187,0,6158,0],[7188,0,6159,0],[7189,0,6160,0],[7190,0,6161,0],[7191,2,6142,0],[7191,11,6142,0,"_verifyPasswordResetCode"],[7191,36,6142,0],[7192,4,6142,0,"_verifyPasswordResetCode"],[7192,28,6142,0],[7192,31,6142,0,"_asyncToGenerator"],[7192,48,6142,0],[7192,49,6137,0],[7192,60,6137,39,"auth"],[7192,64,6137,43],[7192,66,6137,45,"code"],[7192,70,6137,49],[7192,72,6137,51],[7193,6,6138,4],[7193,10,6138,4,"_yield$checkActionCod"],[7193,31,6138,4],[7193,40,6138,27,"checkActionCode"],[7193,55,6138,42],[7193,56,6138,43,"util"],[7193,60,6138,47],[7193,61,6138,48,"getModularInstance"],[7193,79,6138,66],[7193,80,6138,67,"auth"],[7193,84,6138,71],[7193,85,6138,72],[7193,87,6138,74,"code"],[7193,91,6138,78],[7193,92,6138,79],[7194,8,6138,12,"data"],[7194,12,6138,16],[7194,15,6138,16,"_yield$checkActionCod"],[7194,36,6138,16],[7194,37,6138,12,"data"],[7194,41,6138,16],[7195,6,6139,4],[7196,6,6140,4],[7196,13,6140,11,"data"],[7196,17,6140,15],[7196,18,6140,16,"email"],[7196,23,6140,21],[7197,4,6141,0],[7197,5,6141,1],[7198,4,6141,1],[7198,11,6141,1,"_verifyPasswordResetCode"],[7198,35,6141,1],[7198,36,6141,1,"apply"],[7198,41,6141,1],[7198,48,6141,1,"arguments"],[7198,57,6141,1],[7199,2,6141,1],[7200,2,6141,1],[7200,11,6162,15,"createUserWithEmailAndPassword"],[7200,41,6162,45,"createUserWithEmailAndPassword"],[7200,42,6162,45,"_x160"],[7200,47,6162,45],[7200,49,6162,45,"_x161"],[7200,54,6162,45],[7200,56,6162,45,"_x162"],[7200,61,6162,45],[7201,4,6162,45],[7201,11,6162,45,"_createUserWithEmailAndPassword"],[7201,42,6162,45],[7201,43,6162,45,"apply"],[7201,48,6162,45],[7201,55,6162,45,"arguments"],[7201,64,6162,45],[7202,2,6162,45],[7203,2,6184,0],[7204,0,6185,0],[7205,0,6186,0],[7206,0,6187,0],[7207,0,6188,0],[7208,0,6189,0],[7209,0,6190,0],[7210,0,6191,0],[7211,0,6192,0],[7212,0,6193,0],[7213,0,6194,0],[7214,0,6195,0],[7215,0,6196,0],[7216,0,6197,0],[7217,0,6198,0],[7218,0,6199,0],[7219,0,6200,0],[7220,0,6201,0],[7221,0,6202,0],[7222,0,6203,0],[7223,0,6204,0],[7224,0,6205,0],[7225,0,6206,0],[7226,2,6184,0],[7226,11,6184,0,"_createUserWithEmailAndPassword"],[7226,43,6184,0],[7227,4,6184,0,"_createUserWithEmailAndPassword"],[7227,35,6184,0],[7227,38,6184,0,"_asyncToGenerator"],[7227,55,6184,0],[7227,56,6162,0],[7227,67,6162,46,"auth"],[7227,71,6162,50],[7227,73,6162,52,"email"],[7227,78,6162,57],[7227,80,6162,59,"password"],[7227,88,6162,67],[7227,90,6162,69],[7228,6,6163,4],[7228,10,6163,8,"app"],[7228,13,6163,11],[7228,14,6163,12,"_isFirebaseServerApp"],[7228,34,6163,32],[7228,35,6163,33,"auth"],[7228,39,6163,37],[7228,40,6163,38,"app"],[7228,43,6163,41],[7228,44,6163,42],[7228,46,6163,44],[7229,8,6164,8],[7229,15,6164,15,"Promise"],[7229,22,6164,22],[7229,23,6164,23,"reject"],[7229,29,6164,29],[7229,30,6164,30,"_serverAppCurrentUserOperationNotSupportedError"],[7229,77,6164,77],[7229,78,6164,78,"auth"],[7229,82,6164,82],[7229,83,6164,83],[7229,84,6164,84],[7230,6,6165,4],[7231,6,6166,4],[7231,10,6166,10,"authInternal"],[7231,22,6166,22],[7231,25,6166,25,"_castAuth"],[7231,34,6166,34],[7231,35,6166,35,"auth"],[7231,39,6166,39],[7231,40,6166,40],[7232,6,6167,4],[7232,10,6167,10,"request"],[7232,17,6167,17],[7232,20,6167,20],[7233,8,6168,8,"returnSecureToken"],[7233,25,6168,25],[7233,27,6168,27],[7233,31,6168,31],[7234,8,6169,8,"email"],[7234,13,6169,13],[7235,8,6170,8,"password"],[7235,16,6170,16],[7236,8,6171,8,"clientType"],[7236,18,6171,18],[7236,20,6171,20],[7236,37,6171,37],[7236,38,6171,38],[7237,6,6172,4],[7237,7,6172,5],[7238,6,6173,4],[7238,10,6173,10,"signUpResponse"],[7238,24,6173,24],[7238,27,6173,27,"handleRecaptchaFlow"],[7238,46,6173,46],[7238,47,6173,47,"authInternal"],[7238,59,6173,59],[7238,61,6173,61,"request"],[7238,68,6173,68],[7238,70,6173,70],[7238,86,6173,86],[7238,87,6173,87],[7238,131,6173,131,"signUp"],[7238,137,6173,137],[7238,139,6173,139],[7238,164,6173,164],[7238,165,6173,165],[7238,216,6173,216],[7238,217,6173,217],[7239,6,6174,4],[7239,10,6174,10,"response"],[7239,18,6174,18],[7239,27,6174,27,"signUpResponse"],[7239,41,6174,41],[7239,42,6174,42,"catch"],[7239,47,6174,47],[7239,48,6174,48,"error"],[7239,53,6174,53],[7239,57,6174,57],[7240,8,6175,8],[7240,12,6175,12,"error"],[7240,17,6175,17],[7240,18,6175,18,"code"],[7240,22,6175,22],[7240,27,6175,27],[7240,35,6175,35],[7240,72,6175,72],[7240,73,6175,73],[7240,130,6175,130],[7240,132,6175,132],[7241,10,6176,12],[7241,15,6176,17,"recachePasswordPolicy"],[7241,36,6176,38],[7241,37,6176,39,"auth"],[7241,41,6176,43],[7241,42,6176,44],[7242,8,6177,8],[7243,8,6178,8],[7243,14,6178,14,"error"],[7243,19,6178,19],[7244,6,6179,4],[7244,7,6179,5],[7244,8,6179,6],[7245,6,6180,4],[7245,10,6180,10,"userCredential"],[7245,24,6180,24],[7245,33,6180,33,"UserCredentialImpl"],[7245,51,6180,51],[7245,52,6180,52,"_fromIdTokenResponse"],[7245,72,6180,72],[7245,73,6180,73,"authInternal"],[7245,85,6180,85],[7245,87,6180,87],[7245,95,6180,95],[7245,96,6180,96],[7245,125,6180,125,"response"],[7245,133,6180,133],[7245,134,6180,134],[7246,6,6181,4],[7246,12,6181,10,"authInternal"],[7246,24,6181,22],[7246,25,6181,23,"_updateCurrentUser"],[7246,43,6181,41],[7246,44,6181,42,"userCredential"],[7246,58,6181,56],[7246,59,6181,57,"user"],[7246,63,6181,61],[7246,64,6181,62],[7247,6,6182,4],[7247,13,6182,11,"userCredential"],[7247,27,6182,25],[7248,4,6183,0],[7248,5,6183,1],[7249,4,6183,1],[7249,11,6183,1,"_createUserWithEmailAndPassword"],[7249,42,6183,1],[7249,43,6183,1,"apply"],[7249,48,6183,1],[7249,55,6183,1,"arguments"],[7249,64,6183,1],[7250,2,6183,1],[7251,2,6207,0],[7251,11,6207,9,"signInWithEmailAndPassword"],[7251,37,6207,35,"signInWithEmailAndPassword"],[7251,38,6207,36,"auth"],[7251,42,6207,40],[7251,44,6207,42,"email"],[7251,49,6207,47],[7251,51,6207,49,"password"],[7251,59,6207,57],[7251,61,6207,59],[7252,4,6208,4],[7252,8,6208,8,"app"],[7252,11,6208,11],[7252,12,6208,12,"_isFirebaseServerApp"],[7252,32,6208,32],[7252,33,6208,33,"auth"],[7252,37,6208,37],[7252,38,6208,38,"app"],[7252,41,6208,41],[7252,42,6208,42],[7252,44,6208,44],[7253,6,6209,8],[7253,13,6209,15,"Promise"],[7253,20,6209,22],[7253,21,6209,23,"reject"],[7253,27,6209,29],[7253,28,6209,30,"_serverAppCurrentUserOperationNotSupportedError"],[7253,75,6209,77],[7253,76,6209,78,"auth"],[7253,80,6209,82],[7253,81,6209,83],[7253,82,6209,84],[7254,4,6210,4],[7255,4,6211,4],[7255,11,6211,11,"signInWithCredential"],[7255,31,6211,31],[7255,32,6211,32,"util"],[7255,36,6211,36],[7255,37,6211,37,"getModularInstance"],[7255,55,6211,55],[7255,56,6211,56,"auth"],[7255,60,6211,60],[7255,61,6211,61],[7255,63,6211,63,"EmailAuthProvider"],[7255,80,6211,80],[7255,81,6211,81,"credential"],[7255,91,6211,91],[7255,92,6211,92,"email"],[7255,97,6211,97],[7255,99,6211,99,"password"],[7255,107,6211,107],[7255,108,6211,108],[7255,109,6211,109],[7255,110,6211,110,"catch"],[7255,115,6211,115],[7256,6,6211,115],[7256,10,6211,115,"_ref18"],[7256,16,6211,115],[7256,19,6211,115,"_asyncToGenerator"],[7256,36,6211,115],[7256,37,6211,116],[7256,48,6211,123,"error"],[7256,53,6211,128],[7256,55,6211,133],[7257,8,6212,8],[7257,12,6212,12,"error"],[7257,17,6212,17],[7257,18,6212,18,"code"],[7257,22,6212,22],[7257,27,6212,27],[7257,35,6212,35],[7257,72,6212,72],[7257,73,6212,73],[7257,130,6212,130],[7257,132,6212,132],[7258,10,6213,12],[7258,15,6213,17,"recachePasswordPolicy"],[7258,36,6213,38],[7258,37,6213,39,"auth"],[7258,41,6213,43],[7258,42,6213,44],[7259,8,6214,8],[7260,8,6215,8],[7260,14,6215,14,"error"],[7260,19,6215,19],[7261,6,6216,4],[7261,7,6216,5],[7262,6,6216,5],[7262,23,6216,5,"_x163"],[7262,28,6216,5],[7263,8,6216,5],[7263,15,6216,5,"_ref18"],[7263,21,6216,5],[7263,22,6216,5,"apply"],[7263,27,6216,5],[7263,34,6216,5,"arguments"],[7263,43,6216,5],[7264,6,6216,5],[7265,4,6216,5],[7265,8,6216,6],[7266,2,6217,0],[7268,2,6219,0],[7269,0,6220,0],[7270,0,6221,0],[7271,0,6222,0],[7272,0,6223,0],[7273,0,6224,0],[7274,0,6225,0],[7275,0,6226,0],[7276,0,6227,0],[7277,0,6228,0],[7278,0,6229,0],[7279,0,6230,0],[7280,0,6231,0],[7281,0,6232,0],[7282,0,6233,0],[7283,0,6234,0],[7284,2,6235,0],[7285,0,6236,0],[7286,0,6237,0],[7287,0,6238,0],[7288,0,6239,0],[7289,0,6240,0],[7290,0,6241,0],[7291,0,6242,0],[7292,0,6243,0],[7293,0,6244,0],[7294,0,6245,0],[7295,0,6246,0],[7296,0,6247,0],[7297,0,6248,0],[7298,0,6249,0],[7299,0,6250,0],[7300,0,6251,0],[7301,0,6252,0],[7302,0,6253,0],[7303,0,6254,0],[7304,0,6255,0],[7305,0,6256,0],[7306,0,6257,0],[7307,0,6258,0],[7308,0,6259,0],[7309,0,6260,0],[7310,0,6261,0],[7311,0,6262,0],[7312,0,6263,0],[7313,0,6264,0],[7314,0,6265,0],[7315,0,6266,0],[7316,0,6267,0],[7317,0,6268,0],[7318,0,6269,0],[7319,0,6270,0],[7320,0,6271,0],[7321,0,6272,0],[7322,2,6235,0],[7322,11,6273,15,"sendSignInLinkToEmail"],[7322,32,6273,36,"sendSignInLinkToEmail"],[7322,33,6273,36,"_x164"],[7322,38,6273,36],[7322,40,6273,36,"_x165"],[7322,45,6273,36],[7322,47,6273,36,"_x166"],[7322,52,6273,36],[7323,4,6273,36],[7323,11,6273,36,"_sendSignInLinkToEmail"],[7323,33,6273,36],[7323,34,6273,36,"apply"],[7323,39,6273,36],[7323,46,6273,36,"arguments"],[7323,55,6273,36],[7324,2,6273,36],[7325,2,6289,0],[7326,0,6290,0],[7327,0,6291,0],[7328,0,6292,0],[7329,0,6293,0],[7330,0,6294,0],[7331,0,6295,0],[7332,0,6296,0],[7333,2,6289,0],[7333,11,6289,0,"_sendSignInLinkToEmail"],[7333,34,6289,0],[7334,4,6289,0,"_sendSignInLinkToEmail"],[7334,26,6289,0],[7334,29,6289,0,"_asyncToGenerator"],[7334,46,6289,0],[7334,47,6273,0],[7334,58,6273,37,"auth"],[7334,62,6273,41],[7334,64,6273,43,"email"],[7334,69,6273,48],[7334,71,6273,50,"actionCodeSettings"],[7334,89,6273,68],[7334,91,6273,70],[7335,6,6274,4],[7335,10,6274,10,"authInternal"],[7335,22,6274,22],[7335,25,6274,25,"_castAuth"],[7335,34,6274,34],[7335,35,6274,35,"auth"],[7335,39,6274,39],[7335,40,6274,40],[7336,6,6275,4],[7336,10,6275,10,"request"],[7336,17,6275,17],[7336,20,6275,20],[7337,8,6276,8,"requestType"],[7337,19,6276,19],[7337,21,6276,21],[7337,35,6276,35],[7337,36,6276,36],[7338,8,6277,8,"email"],[7338,13,6277,13],[7339,8,6278,8,"clientType"],[7339,18,6278,18],[7339,20,6278,20],[7339,37,6278,37],[7339,38,6278,38],[7340,6,6279,4],[7340,7,6279,5],[7341,6,6280,4],[7341,15,6280,13,"setActionCodeSettings"],[7341,36,6280,34,"setActionCodeSettings"],[7341,37,6280,35,"request"],[7341,44,6280,42],[7341,46,6280,44,"actionCodeSettings"],[7341,64,6280,62],[7341,66,6280,64],[7342,8,6281,8,"_assert"],[7342,15,6281,15],[7342,16,6281,16,"actionCodeSettings"],[7342,34,6281,34],[7342,35,6281,35,"handleCodeInApp"],[7342,50,6281,50],[7342,52,6281,52,"authInternal"],[7342,64,6281,64],[7342,66,6281,66],[7342,82,6281,82],[7342,83,6281,83],[7342,117,6281,117],[7342,118,6281,118],[7343,8,6282,8],[7343,12,6282,12,"actionCodeSettings"],[7343,30,6282,30],[7343,32,6282,32],[7344,10,6283,12,"_setActionCodeSettingsOnRequest"],[7344,41,6283,43],[7344,42,6283,44,"authInternal"],[7344,54,6283,56],[7344,56,6283,58,"request"],[7344,63,6283,65],[7344,65,6283,67,"actionCodeSettings"],[7344,83,6283,85],[7344,84,6283,86],[7345,8,6284,8],[7346,6,6285,4],[7347,6,6286,4,"setActionCodeSettings"],[7347,27,6286,25],[7347,28,6286,26,"request"],[7347,35,6286,33],[7347,37,6286,35,"actionCodeSettings"],[7347,55,6286,53],[7347,56,6286,54],[7348,6,6287,4],[7348,12,6287,10,"handleRecaptchaFlow"],[7348,31,6287,29],[7348,32,6287,30,"authInternal"],[7348,44,6287,42],[7348,46,6287,44,"request"],[7348,53,6287,51],[7348,55,6287,53],[7348,67,6287,65],[7348,68,6287,66],[7348,108,6287,106,"sendSignInLinkToEmail$1"],[7348,131,6287,129],[7348,133,6287,131],[7348,158,6287,156],[7348,159,6287,157],[7348,210,6287,208],[7348,211,6287,209],[7349,4,6288,0],[7349,5,6288,1],[7350,4,6288,1],[7350,11,6288,1,"_sendSignInLinkToEmail"],[7350,33,6288,1],[7350,34,6288,1,"apply"],[7350,39,6288,1],[7350,46,6288,1,"arguments"],[7350,55,6288,1],[7351,2,6288,1],[7352,2,6297,0],[7352,11,6297,9,"isSignInWithEmailLink"],[7352,32,6297,30,"isSignInWithEmailLink"],[7352,33,6297,31,"auth"],[7352,37,6297,35],[7352,39,6297,37,"emailLink"],[7352,48,6297,46],[7352,50,6297,48],[7353,4,6298,4],[7353,8,6298,10,"actionCodeUrl"],[7353,21,6298,23],[7353,24,6298,26,"ActionCodeURL"],[7353,37,6298,39],[7353,38,6298,40,"parseLink"],[7353,47,6298,49],[7353,48,6298,50,"emailLink"],[7353,57,6298,59],[7353,58,6298,60],[7354,4,6299,4],[7354,11,6299,11,"actionCodeUrl"],[7354,24,6299,24],[7354,26,6299,26,"operation"],[7354,35,6299,35],[7354,40,6299,40],[7354,54,6299,54],[7354,55,6299,55],[7355,2,6300,0],[7356,2,6301,0],[7357,0,6302,0],[7358,0,6303,0],[7359,0,6304,0],[7360,0,6305,0],[7361,0,6306,0],[7362,0,6307,0],[7363,0,6308,0],[7364,0,6309,0],[7365,0,6310,0],[7366,0,6311,0],[7367,0,6312,0],[7368,0,6313,0],[7369,0,6314,0],[7370,0,6315,0],[7371,0,6316,0],[7372,0,6317,0],[7373,0,6318,0],[7374,0,6319,0],[7375,0,6320,0],[7376,0,6321,0],[7377,0,6322,0],[7378,0,6323,0],[7379,0,6324,0],[7380,0,6325,0],[7381,0,6326,0],[7382,0,6327,0],[7383,0,6328,0],[7384,0,6329,0],[7385,0,6330,0],[7386,0,6331,0],[7387,0,6332,0],[7388,0,6333,0],[7389,0,6334,0],[7390,0,6335,0],[7391,0,6336,0],[7392,0,6337,0],[7393,0,6338,0],[7394,0,6339,0],[7395,0,6340,0],[7396,0,6341,0],[7397,2,6301,0],[7397,11,6342,15,"signInWithEmailLink"],[7397,30,6342,34,"signInWithEmailLink"],[7397,31,6342,34,"_x167"],[7397,36,6342,34],[7397,38,6342,34,"_x168"],[7397,43,6342,34],[7397,45,6342,34,"_x169"],[7397,50,6342,34],[7398,4,6342,34],[7398,11,6342,34,"_signInWithEmailLink"],[7398,31,6342,34],[7398,32,6342,34,"apply"],[7398,37,6342,34],[7398,44,6342,34,"arguments"],[7398,53,6342,34],[7399,2,6342,34],[7400,2,6354,0],[7401,0,6355,0],[7402,0,6356,0],[7403,0,6357,0],[7404,0,6358,0],[7405,0,6359,0],[7406,0,6360,0],[7407,0,6361,0],[7408,0,6362,0],[7409,0,6363,0],[7410,0,6364,0],[7411,0,6365,0],[7412,0,6366,0],[7413,0,6367,0],[7414,0,6368,0],[7415,0,6369,0],[7416,2,6354,0],[7416,11,6354,0,"_signInWithEmailLink"],[7416,32,6354,0],[7417,4,6354,0,"_signInWithEmailLink"],[7417,24,6354,0],[7417,27,6354,0,"_asyncToGenerator"],[7417,44,6354,0],[7417,45,6342,0],[7417,56,6342,35,"auth"],[7417,60,6342,39],[7417,62,6342,41,"email"],[7417,67,6342,46],[7417,69,6342,48,"emailLink"],[7417,78,6342,57],[7417,80,6342,59],[7418,6,6343,4],[7418,10,6343,8,"app"],[7418,13,6343,11],[7418,14,6343,12,"_isFirebaseServerApp"],[7418,34,6343,32],[7418,35,6343,33,"auth"],[7418,39,6343,37],[7418,40,6343,38,"app"],[7418,43,6343,41],[7418,44,6343,42],[7418,46,6343,44],[7419,8,6344,8],[7419,15,6344,15,"Promise"],[7419,22,6344,22],[7419,23,6344,23,"reject"],[7419,29,6344,29],[7419,30,6344,30,"_serverAppCurrentUserOperationNotSupportedError"],[7419,77,6344,77],[7419,78,6344,78,"auth"],[7419,82,6344,82],[7419,83,6344,83],[7419,84,6344,84],[7420,6,6345,4],[7421,6,6346,4],[7421,10,6346,10,"authModular"],[7421,21,6346,21],[7421,24,6346,24,"util"],[7421,28,6346,28],[7421,29,6346,29,"getModularInstance"],[7421,47,6346,47],[7421,48,6346,48,"auth"],[7421,52,6346,52],[7421,53,6346,53],[7422,6,6347,4],[7422,10,6347,10,"credential"],[7422,20,6347,20],[7422,23,6347,23,"EmailAuthProvider"],[7422,40,6347,40],[7422,41,6347,41,"credentialWithLink"],[7422,59,6347,59],[7422,60,6347,60,"email"],[7422,65,6347,65],[7422,67,6347,67,"emailLink"],[7422,76,6347,76],[7422,80,6347,80,"_getCurrentUrl"],[7422,94,6347,94],[7422,95,6347,95],[7422,96,6347,96],[7422,97,6347,97],[7423,6,6348,4],[7424,6,6349,4],[7425,6,6350,4,"_assert"],[7425,13,6350,11],[7425,14,6350,12,"credential"],[7425,24,6350,22],[7425,25,6350,23,"_tenantId"],[7425,34,6350,32],[7425,40,6350,38,"authModular"],[7425,51,6350,49],[7425,52,6350,50,"tenantId"],[7425,60,6350,58],[7425,64,6350,62],[7425,68,6350,66],[7425,69,6350,67],[7425,71,6350,69,"authModular"],[7425,82,6350,80],[7425,84,6350,82],[7425,104,6350,102],[7425,105,6350,103],[7425,143,6350,141],[7425,144,6350,142],[7426,6,6351,4],[7426,13,6351,11,"signInWithCredential"],[7426,33,6351,31],[7426,34,6351,32,"authModular"],[7426,45,6351,43],[7426,47,6351,45,"credential"],[7426,57,6351,55],[7426,58,6351,56],[7427,4,6352,0],[7427,5,6352,1],[7428,4,6352,1],[7428,11,6352,1,"_signInWithEmailLink"],[7428,31,6352,1],[7428,32,6352,1,"apply"],[7428,37,6352,1],[7428,44,6352,1,"arguments"],[7428,53,6352,1],[7429,2,6352,1],[7430,2,6352,1],[7430,11,6370,15,"createAuthUri"],[7430,24,6370,28,"createAuthUri"],[7430,25,6370,28,"_x170"],[7430,30,6370,28],[7430,32,6370,28,"_x171"],[7430,37,6370,28],[7431,4,6370,28],[7431,11,6370,28,"_createAuthUri"],[7431,25,6370,28],[7431,26,6370,28,"apply"],[7431,31,6370,28],[7431,38,6370,28,"arguments"],[7431,47,6370,28],[7432,2,6370,28],[7433,2,6374,0],[7434,0,6375,0],[7435,0,6376,0],[7436,0,6377,0],[7437,0,6378,0],[7438,0,6379,0],[7439,0,6380,0],[7440,0,6381,0],[7441,0,6382,0],[7442,0,6383,0],[7443,0,6384,0],[7444,0,6385,0],[7445,0,6386,0],[7446,0,6387,0],[7447,0,6388,0],[7448,0,6389,0],[7449,2,6390,0],[7450,0,6391,0],[7451,0,6392,0],[7452,0,6393,0],[7453,0,6394,0],[7454,0,6395,0],[7455,0,6396,0],[7456,0,6397,0],[7457,0,6398,0],[7458,0,6399,0],[7459,0,6400,0],[7460,0,6401,0],[7461,0,6402,0],[7462,0,6403,0],[7463,0,6404,0],[7464,0,6405,0],[7465,0,6406,0],[7466,0,6407,0],[7467,0,6408,0],[7468,0,6409,0],[7469,2,6390,0],[7469,11,6390,0,"_createAuthUri"],[7469,26,6390,0],[7470,4,6390,0,"_createAuthUri"],[7470,18,6390,0],[7470,21,6390,0,"_asyncToGenerator"],[7470,38,6390,0],[7470,39,6370,0],[7470,50,6370,29,"auth"],[7470,54,6370,33],[7470,56,6370,35,"request"],[7470,63,6370,42],[7470,65,6370,44],[7471,6,6371,4],[7471,13,6371,11,"_performApiRequest"],[7471,31,6371,29],[7471,32,6371,30,"auth"],[7471,36,6371,34],[7471,38,6371,36],[7471,44,6371,42],[7471,45,6371,43],[7471,68,6371,66],[7471,96,6371,94],[7471,97,6371,95],[7471,129,6371,127,"_addTidIfNecessary"],[7471,147,6371,145],[7471,148,6371,146,"auth"],[7471,152,6371,150],[7471,154,6371,152,"request"],[7471,161,6371,159],[7471,162,6371,160],[7471,163,6371,161],[7472,4,6372,0],[7472,5,6372,1],[7473,4,6372,1],[7473,11,6372,1,"_createAuthUri"],[7473,25,6372,1],[7473,26,6372,1,"apply"],[7473,31,6372,1],[7473,38,6372,1,"arguments"],[7473,47,6372,1],[7474,2,6372,1],[7475,2,6372,1],[7475,11,6410,15,"fetchSignInMethodsForEmail"],[7475,37,6410,41,"fetchSignInMethodsForEmail"],[7475,38,6410,41,"_x172"],[7475,43,6410,41],[7475,45,6410,41,"_x173"],[7475,50,6410,41],[7476,4,6410,41],[7476,11,6410,41,"_fetchSignInMethodsForEmail"],[7476,38,6410,41],[7476,39,6410,41,"apply"],[7476,44,6410,41],[7476,51,6410,41,"arguments"],[7476,60,6410,41],[7477,2,6410,41],[7478,2,6422,0],[7479,0,6423,0],[7480,0,6424,0],[7481,0,6425,0],[7482,0,6426,0],[7483,0,6427,0],[7484,0,6428,0],[7485,0,6429,0],[7486,0,6430,0],[7487,0,6431,0],[7488,0,6432,0],[7489,0,6433,0],[7490,0,6434,0],[7491,0,6435,0],[7492,0,6436,0],[7493,0,6437,0],[7494,0,6438,0],[7495,0,6439,0],[7496,0,6440,0],[7497,0,6441,0],[7498,0,6442,0],[7499,0,6443,0],[7500,0,6444,0],[7501,0,6445,0],[7502,0,6446,0],[7503,0,6447,0],[7504,0,6448,0],[7505,0,6449,0],[7506,0,6450,0],[7507,0,6451,0],[7508,2,6422,0],[7508,11,6422,0,"_fetchSignInMethodsForEmail"],[7508,39,6422,0],[7509,4,6422,0,"_fetchSignInMethodsForEmail"],[7509,31,6422,0],[7509,34,6422,0,"_asyncToGenerator"],[7509,51,6422,0],[7509,52,6410,0],[7509,63,6410,42,"auth"],[7509,67,6410,46],[7509,69,6410,48,"email"],[7509,74,6410,53],[7509,76,6410,55],[7510,6,6411,4],[7511,6,6412,4],[7512,6,6413,4],[7513,6,6414,4],[7513,10,6414,10,"continueUri"],[7513,21,6414,21],[7513,24,6414,24,"_isHttpOrHttps"],[7513,38,6414,38],[7513,39,6414,39],[7513,40,6414,40],[7513,43,6414,43,"_getCurrentUrl"],[7513,57,6414,57],[7513,58,6414,58],[7513,59,6414,59],[7513,62,6414,62],[7513,80,6414,80],[7514,6,6415,4],[7514,10,6415,10,"request"],[7514,17,6415,17],[7514,20,6415,20],[7515,8,6416,8,"identifier"],[7515,18,6416,18],[7515,20,6416,20,"email"],[7515,25,6416,25],[7516,8,6417,8,"continueUri"],[7517,6,6418,4],[7517,7,6418,5],[7518,6,6419,4],[7518,10,6419,4,"_yield$createAuthUri"],[7518,30,6419,4],[7518,39,6419,36,"createAuthUri"],[7518,52,6419,49],[7518,53,6419,50,"util"],[7518,57,6419,54],[7518,58,6419,55,"getModularInstance"],[7518,76,6419,73],[7518,77,6419,74,"auth"],[7518,81,6419,78],[7518,82,6419,79],[7518,84,6419,81,"request"],[7518,91,6419,88],[7518,92,6419,89],[7519,8,6419,12,"signinMethods"],[7519,21,6419,25],[7519,24,6419,25,"_yield$createAuthUri"],[7519,44,6419,25],[7519,45,6419,12,"signinMethods"],[7519,58,6419,25],[7520,6,6420,4],[7520,13,6420,11,"signinMethods"],[7520,26,6420,24],[7520,30,6420,28],[7520,32,6420,30],[7521,4,6421,0],[7521,5,6421,1],[7522,4,6421,1],[7522,11,6421,1,"_fetchSignInMethodsForEmail"],[7522,38,6421,1],[7522,39,6421,1,"apply"],[7522,44,6421,1],[7522,51,6421,1,"arguments"],[7522,60,6421,1],[7523,2,6421,1],[7524,2,6421,1],[7524,11,6452,15,"sendEmailVerification"],[7524,32,6452,36,"sendEmailVerification"],[7524,33,6452,36,"_x174"],[7524,38,6452,36],[7524,40,6452,36,"_x175"],[7524,45,6452,36],[7525,4,6452,36],[7525,11,6452,36,"_sendEmailVerification"],[7525,33,6452,36],[7525,34,6452,36,"apply"],[7525,39,6452,36],[7525,46,6452,36,"arguments"],[7525,55,6452,36],[7526,2,6452,36],[7527,2,6467,0],[7528,0,6468,0],[7529,0,6469,0],[7530,0,6470,0],[7531,0,6471,0],[7532,0,6472,0],[7533,0,6473,0],[7534,0,6474,0],[7535,0,6475,0],[7536,0,6476,0],[7537,0,6477,0],[7538,0,6478,0],[7539,0,6479,0],[7540,0,6480,0],[7541,0,6481,0],[7542,0,6482,0],[7543,0,6483,0],[7544,0,6484,0],[7545,0,6485,0],[7546,0,6486,0],[7547,0,6487,0],[7548,0,6488,0],[7549,0,6489,0],[7550,0,6490,0],[7551,0,6491,0],[7552,0,6492,0],[7553,0,6493,0],[7554,0,6494,0],[7555,0,6495,0],[7556,0,6496,0],[7557,0,6497,0],[7558,0,6498,0],[7559,0,6499,0],[7560,0,6500,0],[7561,2,6467,0],[7561,11,6467,0,"_sendEmailVerification"],[7561,34,6467,0],[7562,4,6467,0,"_sendEmailVerification"],[7562,26,6467,0],[7562,29,6467,0,"_asyncToGenerator"],[7562,46,6467,0],[7562,47,6452,0],[7562,58,6452,37,"user"],[7562,62,6452,41],[7562,64,6452,43,"actionCodeSettings"],[7562,82,6452,61],[7562,84,6452,63],[7563,6,6453,4],[7563,10,6453,10,"userInternal"],[7563,22,6453,22],[7563,25,6453,25,"util"],[7563,29,6453,29],[7563,30,6453,30,"getModularInstance"],[7563,48,6453,48],[7563,49,6453,49,"user"],[7563,53,6453,53],[7563,54,6453,54],[7564,6,6454,4],[7564,10,6454,10,"idToken"],[7564,17,6454,17],[7564,26,6454,26,"user"],[7564,30,6454,30],[7564,31,6454,31,"getIdToken"],[7564,41,6454,41],[7564,42,6454,42],[7564,43,6454,43],[7565,6,6455,4],[7565,10,6455,10,"request"],[7565,17,6455,17],[7565,20,6455,20],[7566,8,6456,8,"requestType"],[7566,19,6456,19],[7566,21,6456,21],[7566,35,6456,35],[7566,36,6456,36],[7567,8,6457,8,"idToken"],[7568,6,6458,4],[7568,7,6458,5],[7569,6,6459,4],[7569,10,6459,8,"actionCodeSettings"],[7569,28,6459,26],[7569,30,6459,28],[7570,8,6460,8,"_setActionCodeSettingsOnRequest"],[7570,39,6460,39],[7570,40,6460,40,"userInternal"],[7570,52,6460,52],[7570,53,6460,53,"auth"],[7570,57,6460,57],[7570,59,6460,59,"request"],[7570,66,6460,66],[7570,68,6460,68,"actionCodeSettings"],[7570,86,6460,86],[7570,87,6460,87],[7571,6,6461,4],[7572,6,6462,4],[7572,10,6462,4,"_yield$sendEmailVerif"],[7572,31,6462,4],[7572,40,6462,28,"sendEmailVerification$1"],[7572,63,6462,51],[7572,64,6462,52,"userInternal"],[7572,76,6462,64],[7572,77,6462,65,"auth"],[7572,81,6462,69],[7572,83,6462,71,"request"],[7572,90,6462,78],[7572,91,6462,79],[7573,8,6462,12,"email"],[7573,13,6462,17],[7573,16,6462,17,"_yield$sendEmailVerif"],[7573,37,6462,17],[7573,38,6462,12,"email"],[7573,43,6462,17],[7574,6,6463,4],[7574,10,6463,8,"email"],[7574,15,6463,13],[7574,20,6463,18,"user"],[7574,24,6463,22],[7574,25,6463,23,"email"],[7574,30,6463,28],[7574,32,6463,30],[7575,8,6464,8],[7575,14,6464,14,"user"],[7575,18,6464,18],[7575,19,6464,19,"reload"],[7575,25,6464,25],[7575,26,6464,26],[7575,27,6464,27],[7576,6,6465,4],[7577,4,6466,0],[7577,5,6466,1],[7578,4,6466,1],[7578,11,6466,1,"_sendEmailVerification"],[7578,33,6466,1],[7578,34,6466,1,"apply"],[7578,39,6466,1],[7578,46,6466,1,"arguments"],[7578,55,6466,1],[7579,2,6466,1],[7580,2,6466,1],[7580,11,6501,15,"verifyBeforeUpdateEmail"],[7580,34,6501,38,"verifyBeforeUpdateEmail"],[7580,35,6501,38,"_x176"],[7580,40,6501,38],[7580,42,6501,38,"_x177"],[7580,47,6501,38],[7580,49,6501,38,"_x178"],[7580,54,6501,38],[7581,4,6501,38],[7581,11,6501,38,"_verifyBeforeUpdateEmail"],[7581,35,6501,38],[7581,36,6501,38,"apply"],[7581,41,6501,38],[7581,48,6501,38,"arguments"],[7581,57,6501,38],[7582,2,6501,38],[7583,2,6520,0],[7584,0,6521,0],[7585,0,6522,0],[7586,0,6523,0],[7587,0,6524,0],[7588,0,6525,0],[7589,0,6526,0],[7590,0,6527,0],[7591,0,6528,0],[7592,0,6529,0],[7593,0,6530,0],[7594,0,6531,0],[7595,0,6532,0],[7596,0,6533,0],[7597,0,6534,0],[7598,0,6535,0],[7599,2,6520,0],[7599,11,6520,0,"_verifyBeforeUpdateEmail"],[7599,36,6520,0],[7600,4,6520,0,"_verifyBeforeUpdateEmail"],[7600,28,6520,0],[7600,31,6520,0,"_asyncToGenerator"],[7600,48,6520,0],[7600,49,6501,0],[7600,60,6501,39,"user"],[7600,64,6501,43],[7600,66,6501,45,"newEmail"],[7600,74,6501,53],[7600,76,6501,55,"actionCodeSettings"],[7600,94,6501,73],[7600,96,6501,75],[7601,6,6502,4],[7601,10,6502,10,"userInternal"],[7601,22,6502,22],[7601,25,6502,25,"util"],[7601,29,6502,29],[7601,30,6502,30,"getModularInstance"],[7601,48,6502,48],[7601,49,6502,49,"user"],[7601,53,6502,53],[7601,54,6502,54],[7602,6,6503,4],[7602,10,6503,10,"idToken"],[7602,17,6503,17],[7602,26,6503,26,"user"],[7602,30,6503,30],[7602,31,6503,31,"getIdToken"],[7602,41,6503,41],[7602,42,6503,42],[7602,43,6503,43],[7603,6,6504,4],[7603,10,6504,10,"request"],[7603,17,6504,17],[7603,20,6504,20],[7604,8,6505,8,"requestType"],[7604,19,6505,19],[7604,21,6505,21],[7604,46,6505,46],[7604,47,6505,47],[7605,8,6506,8,"idToken"],[7605,15,6506,15],[7606,8,6507,8,"newEmail"],[7607,6,6508,4],[7607,7,6508,5],[7608,6,6509,4],[7608,10,6509,8,"actionCodeSettings"],[7608,28,6509,26],[7608,30,6509,28],[7609,8,6510,8,"_setActionCodeSettingsOnRequest"],[7609,39,6510,39],[7609,40,6510,40,"userInternal"],[7609,52,6510,52],[7609,53,6510,53,"auth"],[7609,57,6510,57],[7609,59,6510,59,"request"],[7609,66,6510,66],[7609,68,6510,68,"actionCodeSettings"],[7609,86,6510,86],[7609,87,6510,87],[7610,6,6511,4],[7611,6,6512,4],[7611,10,6512,4,"_yield$verifyAndChang"],[7611,31,6512,4],[7611,40,6512,28,"verifyAndChangeEmail"],[7611,60,6512,48],[7611,61,6512,49,"userInternal"],[7611,73,6512,61],[7611,74,6512,62,"auth"],[7611,78,6512,66],[7611,80,6512,68,"request"],[7611,87,6512,75],[7611,88,6512,76],[7612,8,6512,12,"email"],[7612,13,6512,17],[7612,16,6512,17,"_yield$verifyAndChang"],[7612,37,6512,17],[7612,38,6512,12,"email"],[7612,43,6512,17],[7613,6,6513,4],[7613,10,6513,8,"email"],[7613,15,6513,13],[7613,20,6513,18,"user"],[7613,24,6513,22],[7613,25,6513,23,"email"],[7613,30,6513,28],[7613,32,6513,30],[7614,8,6514,8],[7615,8,6515,8],[7616,8,6516,8],[7616,14,6516,14,"user"],[7616,18,6516,18],[7616,19,6516,19,"reload"],[7616,25,6516,25],[7616,26,6516,26],[7616,27,6516,27],[7617,6,6517,4],[7618,4,6518,0],[7618,5,6518,1],[7619,4,6518,1],[7619,11,6518,1,"_verifyBeforeUpdateEmail"],[7619,35,6518,1],[7619,36,6518,1,"apply"],[7619,41,6518,1],[7619,48,6518,1,"arguments"],[7619,57,6518,1],[7620,2,6518,1],[7621,2,6518,1],[7621,11,6536,15,"updateProfile$1"],[7621,26,6536,30,"updateProfile$1"],[7621,27,6536,30,"_x179"],[7621,32,6536,30],[7621,34,6536,30,"_x180"],[7621,39,6536,30],[7622,4,6536,30],[7622,11,6536,30,"_updateProfile$"],[7622,26,6536,30],[7622,27,6536,30,"apply"],[7622,32,6536,30],[7622,39,6536,30,"arguments"],[7622,48,6536,30],[7623,2,6536,30],[7624,2,6540,0],[7625,0,6541,0],[7626,0,6542,0],[7627,0,6543,0],[7628,0,6544,0],[7629,0,6545,0],[7630,0,6546,0],[7631,0,6547,0],[7632,0,6548,0],[7633,0,6549,0],[7634,0,6550,0],[7635,0,6551,0],[7636,0,6552,0],[7637,0,6553,0],[7638,0,6554,0],[7639,0,6555,0],[7640,2,6556,0],[7641,0,6557,0],[7642,0,6558,0],[7643,0,6559,0],[7644,0,6560,0],[7645,0,6561,0],[7646,0,6562,0],[7647,0,6563,0],[7648,2,6556,0],[7648,11,6556,0,"_updateProfile$"],[7648,27,6556,0],[7649,4,6556,0,"_updateProfile$"],[7649,19,6556,0],[7649,22,6556,0,"_asyncToGenerator"],[7649,39,6556,0],[7649,40,6536,0],[7649,51,6536,31,"auth"],[7649,55,6536,35],[7649,57,6536,37,"request"],[7649,64,6536,44],[7649,66,6536,46],[7650,6,6537,4],[7650,13,6537,11,"_performApiRequest"],[7650,31,6537,29],[7650,32,6537,30,"auth"],[7650,36,6537,34],[7650,38,6537,36],[7650,44,6537,42],[7650,45,6537,43],[7650,68,6537,66],[7650,89,6537,87],[7650,90,6537,88],[7650,123,6537,121,"request"],[7650,130,6537,128],[7650,131,6537,129],[7651,4,6538,0],[7651,5,6538,1],[7652,4,6538,1],[7652,11,6538,1,"_updateProfile$"],[7652,26,6538,1],[7652,27,6538,1,"apply"],[7652,32,6538,1],[7652,39,6538,1,"arguments"],[7652,48,6538,1],[7653,2,6538,1],[7654,2,6538,1],[7654,11,6564,15,"updateProfile"],[7654,24,6564,28,"updateProfile"],[7654,25,6564,28,"_x181"],[7654,30,6564,28],[7654,32,6564,28,"_x182"],[7654,37,6564,28],[7655,4,6564,28],[7655,11,6564,28,"_updateProfile"],[7655,25,6564,28],[7655,26,6564,28,"apply"],[7655,31,6564,28],[7655,38,6564,28,"arguments"],[7655,47,6564,28],[7656,2,6564,28],[7657,2,6587,0],[7658,0,6588,0],[7659,0,6589,0],[7660,0,6590,0],[7661,0,6591,0],[7662,0,6592,0],[7663,0,6593,0],[7664,0,6594,0],[7665,0,6595,0],[7666,0,6596,0],[7667,0,6597,0],[7668,0,6598,0],[7669,0,6599,0],[7670,0,6600,0],[7671,0,6601,0],[7672,0,6602,0],[7673,0,6603,0],[7674,0,6604,0],[7675,0,6605,0],[7676,0,6606,0],[7677,0,6607,0],[7678,0,6608,0],[7679,0,6609,0],[7680,0,6610,0],[7681,2,6587,0],[7681,11,6587,0,"_updateProfile"],[7681,26,6587,0],[7682,4,6587,0,"_updateProfile"],[7682,18,6587,0],[7682,21,6587,0,"_asyncToGenerator"],[7682,38,6587,0],[7682,39,6564,0],[7682,50,6564,29,"user"],[7682,54,6564,33],[7682,56,6564,33,"_ref19"],[7682,62,6564,33],[7682,64,6564,72],[7683,6,6564,72],[7683,10,6564,37,"displayName"],[7683,21,6564,48],[7683,24,6564,48,"_ref19"],[7683,30,6564,48],[7683,31,6564,37,"displayName"],[7683,42,6564,48],[7684,8,6564,60,"photoUrl"],[7684,16,6564,68],[7684,19,6564,68,"_ref19"],[7684,25,6564,68],[7684,26,6564,50,"photoURL"],[7684,34,6564,58],[7685,6,6565,4],[7685,10,6565,8,"displayName"],[7685,21,6565,19],[7685,26,6565,24,"undefined"],[7685,35,6565,33],[7685,39,6565,37,"photoUrl"],[7685,47,6565,45],[7685,52,6565,50,"undefined"],[7685,61,6565,59],[7685,63,6565,61],[7686,8,6566,8],[7687,6,6567,4],[7688,6,6568,4],[7688,10,6568,10,"userInternal"],[7688,22,6568,22],[7688,25,6568,25,"util"],[7688,29,6568,29],[7688,30,6568,30,"getModularInstance"],[7688,48,6568,48],[7688,49,6568,49,"user"],[7688,53,6568,53],[7688,54,6568,54],[7689,6,6569,4],[7689,10,6569,10,"idToken"],[7689,17,6569,17],[7689,26,6569,26,"userInternal"],[7689,38,6569,38],[7689,39,6569,39,"getIdToken"],[7689,49,6569,49],[7689,50,6569,50],[7689,51,6569,51],[7690,6,6570,4],[7690,10,6570,10,"profileRequest"],[7690,24,6570,24],[7690,27,6570,27],[7691,8,6571,8,"idToken"],[7691,15,6571,15],[7692,8,6572,8,"displayName"],[7692,19,6572,19],[7693,8,6573,8,"photoUrl"],[7693,16,6573,16],[7694,8,6574,8,"returnSecureToken"],[7694,25,6574,25],[7694,27,6574,27],[7695,6,6575,4],[7695,7,6575,5],[7696,6,6576,4],[7696,10,6576,10,"response"],[7696,18,6576,18],[7696,27,6576,27,"_logoutIfInvalidated"],[7696,47,6576,47],[7696,48,6576,48,"userInternal"],[7696,60,6576,60],[7696,62,6576,62,"updateProfile$1"],[7696,77,6576,77],[7696,78,6576,78,"userInternal"],[7696,90,6576,90],[7696,91,6576,91,"auth"],[7696,95,6576,95],[7696,97,6576,97,"profileRequest"],[7696,111,6576,111],[7696,112,6576,112],[7696,113,6576,113],[7697,6,6577,4,"userInternal"],[7697,18,6577,16],[7697,19,6577,17,"displayName"],[7697,30,6577,28],[7697,33,6577,31,"response"],[7697,41,6577,39],[7697,42,6577,40,"displayName"],[7697,53,6577,51],[7697,57,6577,55],[7697,61,6577,59],[7698,6,6578,4,"userInternal"],[7698,18,6578,16],[7698,19,6578,17,"photoURL"],[7698,27,6578,25],[7698,30,6578,28,"response"],[7698,38,6578,36],[7698,39,6578,37,"photoUrl"],[7698,47,6578,45],[7698,51,6578,49],[7698,55,6578,53],[7699,6,6579,4],[7700,6,6580,4],[7700,10,6580,10,"passwordProvider"],[7700,26,6580,26],[7700,29,6580,29,"userInternal"],[7700,41,6580,41],[7700,42,6580,42,"providerData"],[7700,54,6580,54],[7700,55,6580,55,"find"],[7700,59,6580,59],[7700,60,6580,60,"_ref29"],[7700,66,6580,60],[7701,8,6580,60],[7701,12,6580,63,"providerId"],[7701,22,6580,73],[7701,25,6580,73,"_ref29"],[7701,31,6580,73],[7701,32,6580,63,"providerId"],[7701,42,6580,73],[7702,8,6580,73],[7702,15,6580,80,"providerId"],[7702,25,6580,90],[7702,30,6580,95],[7702,40,6580,105],[7703,6,6580,105],[7703,8,6580,106],[7703,33,6580,131],[7703,34,6580,132],[7704,6,6581,4],[7704,10,6581,8,"passwordProvider"],[7704,26,6581,24],[7704,28,6581,26],[7705,8,6582,8,"passwordProvider"],[7705,24,6582,24],[7705,25,6582,25,"displayName"],[7705,36,6582,36],[7705,39,6582,39,"userInternal"],[7705,51,6582,51],[7705,52,6582,52,"displayName"],[7705,63,6582,63],[7706,8,6583,8,"passwordProvider"],[7706,24,6583,24],[7706,25,6583,25,"photoURL"],[7706,33,6583,33],[7706,36,6583,36,"userInternal"],[7706,48,6583,48],[7706,49,6583,49,"photoURL"],[7706,57,6583,57],[7707,6,6584,4],[7708,6,6585,4],[7708,12,6585,10,"userInternal"],[7708,24,6585,22],[7708,25,6585,23,"_updateTokensIfNecessary"],[7708,49,6585,47],[7708,50,6585,48,"response"],[7708,58,6585,56],[7708,59,6585,57],[7709,4,6586,0],[7709,5,6586,1],[7710,4,6586,1],[7710,11,6586,1,"_updateProfile"],[7710,25,6586,1],[7710,26,6586,1,"apply"],[7710,31,6586,1],[7710,38,6586,1,"arguments"],[7710,47,6586,1],[7711,2,6586,1],[7712,2,6611,0],[7712,11,6611,9,"updateEmail"],[7712,22,6611,20,"updateEmail"],[7712,23,6611,21,"user"],[7712,27,6611,25],[7712,29,6611,27,"newEmail"],[7712,37,6611,35],[7712,39,6611,37],[7713,4,6612,4],[7713,8,6612,10,"userInternal"],[7713,20,6612,22],[7713,23,6612,25,"util"],[7713,27,6612,29],[7713,28,6612,30,"getModularInstance"],[7713,46,6612,48],[7713,47,6612,49,"user"],[7713,51,6612,53],[7713,52,6612,54],[7714,4,6613,4],[7714,8,6613,8,"app"],[7714,11,6613,11],[7714,12,6613,12,"_isFirebaseServerApp"],[7714,32,6613,32],[7714,33,6613,33,"userInternal"],[7714,45,6613,45],[7714,46,6613,46,"auth"],[7714,50,6613,50],[7714,51,6613,51,"app"],[7714,54,6613,54],[7714,55,6613,55],[7714,57,6613,57],[7715,6,6614,8],[7715,13,6614,15,"Promise"],[7715,20,6614,22],[7715,21,6614,23,"reject"],[7715,27,6614,29],[7715,28,6614,30,"_serverAppCurrentUserOperationNotSupportedError"],[7715,75,6614,77],[7715,76,6614,78,"userInternal"],[7715,88,6614,90],[7715,89,6614,91,"auth"],[7715,93,6614,95],[7715,94,6614,96],[7715,95,6614,97],[7716,4,6615,4],[7717,4,6616,4],[7717,11,6616,11,"updateEmailOrPassword"],[7717,32,6616,32],[7717,33,6616,33,"userInternal"],[7717,45,6616,45],[7717,47,6616,47,"newEmail"],[7717,55,6616,55],[7717,57,6616,57],[7717,61,6616,61],[7717,62,6616,62],[7718,2,6617,0],[7719,2,6618,0],[7720,0,6619,0],[7721,0,6620,0],[7722,0,6621,0],[7723,0,6622,0],[7724,0,6623,0],[7725,0,6624,0],[7726,0,6625,0],[7727,0,6626,0],[7728,0,6627,0],[7729,0,6628,0],[7730,0,6629,0],[7731,0,6630,0],[7732,2,6631,0],[7732,11,6631,9,"updatePassword"],[7732,25,6631,23,"updatePassword"],[7732,26,6631,24,"user"],[7732,30,6631,28],[7732,32,6631,30,"newPassword"],[7732,43,6631,41],[7732,45,6631,43],[7733,4,6632,4],[7733,11,6632,11,"updateEmailOrPassword"],[7733,32,6632,32],[7733,33,6632,33,"util"],[7733,37,6632,37],[7733,38,6632,38,"getModularInstance"],[7733,56,6632,56],[7733,57,6632,57,"user"],[7733,61,6632,61],[7733,62,6632,62],[7733,64,6632,64],[7733,68,6632,68],[7733,70,6632,70,"newPassword"],[7733,81,6632,81],[7733,82,6632,82],[7734,2,6633,0],[7735,2,6633,1],[7735,11,6634,15,"updateEmailOrPassword"],[7735,32,6634,36,"updateEmailOrPassword"],[7735,33,6634,36,"_x183"],[7735,38,6634,36],[7735,40,6634,36,"_x184"],[7735,45,6634,36],[7735,47,6634,36,"_x185"],[7735,52,6634,36],[7736,4,6634,36],[7736,11,6634,36,"_updateEmailOrPassword"],[7736,33,6634,36],[7736,34,6634,36,"apply"],[7736,39,6634,36],[7736,46,6634,36,"arguments"],[7736,55,6634,36],[7737,2,6634,36],[7738,2,6651,0],[7739,0,6652,0],[7740,0,6653,0],[7741,0,6654,0],[7742,0,6655,0],[7743,0,6656,0],[7744,0,6657,0],[7745,0,6658,0],[7746,0,6659,0],[7747,0,6660,0],[7748,0,6661,0],[7749,0,6662,0],[7750,0,6663,0],[7751,0,6664,0],[7752,0,6665,0],[7753,0,6666,0],[7754,2,6667,0],[7755,0,6668,0],[7756,0,6669,0],[7757,0,6670,0],[7758,2,6667,0],[7758,11,6667,0,"_updateEmailOrPassword"],[7758,34,6667,0],[7759,4,6667,0,"_updateEmailOrPassword"],[7759,26,6667,0],[7759,29,6667,0,"_asyncToGenerator"],[7759,46,6667,0],[7759,47,6634,0],[7759,58,6634,37,"user"],[7759,62,6634,41],[7759,64,6634,43,"email"],[7759,69,6634,48],[7759,71,6634,50,"password"],[7759,79,6634,58],[7759,81,6634,60],[7760,6,6635,4],[7760,10,6635,12,"auth"],[7760,14,6635,16],[7760,17,6635,21,"user"],[7760,21,6635,25],[7760,22,6635,12,"auth"],[7760,26,6635,16],[7761,6,6636,4],[7761,10,6636,10,"idToken"],[7761,17,6636,17],[7761,26,6636,26,"user"],[7761,30,6636,30],[7761,31,6636,31,"getIdToken"],[7761,41,6636,41],[7761,42,6636,42],[7761,43,6636,43],[7762,6,6637,4],[7762,10,6637,10,"request"],[7762,17,6637,17],[7762,20,6637,20],[7763,8,6638,8,"idToken"],[7763,15,6638,15],[7764,8,6639,8,"returnSecureToken"],[7764,25,6639,25],[7764,27,6639,27],[7765,6,6640,4],[7765,7,6640,5],[7766,6,6641,4],[7766,10,6641,8,"email"],[7766,15,6641,13],[7766,17,6641,15],[7767,8,6642,8,"request"],[7767,15,6642,15],[7767,16,6642,16,"email"],[7767,21,6642,21],[7767,24,6642,24,"email"],[7767,29,6642,29],[7768,6,6643,4],[7769,6,6644,4],[7769,10,6644,8,"password"],[7769,18,6644,16],[7769,20,6644,18],[7770,8,6645,8,"request"],[7770,15,6645,15],[7770,16,6645,16,"password"],[7770,24,6645,24],[7770,27,6645,27,"password"],[7770,35,6645,35],[7771,6,6646,4],[7772,6,6647,4],[7772,10,6647,10,"response"],[7772,18,6647,18],[7772,27,6647,27,"_logoutIfInvalidated"],[7772,47,6647,47],[7772,48,6647,48,"user"],[7772,52,6647,52],[7772,54,6647,54,"updateEmailPassword"],[7772,73,6647,73],[7772,74,6647,74,"auth"],[7772,78,6647,78],[7772,80,6647,80,"request"],[7772,87,6647,87],[7772,88,6647,88],[7772,89,6647,89],[7773,6,6648,4],[7773,12,6648,10,"user"],[7773,16,6648,14],[7773,17,6648,15,"_updateTokensIfNecessary"],[7773,41,6648,39],[7773,42,6648,40,"response"],[7773,50,6648,48],[7773,52,6648,50],[7773,64,6648,63],[7773,68,6648,67],[7773,69,6648,68],[7774,4,6649,0],[7774,5,6649,1],[7775,4,6649,1],[7775,11,6649,1,"_updateEmailOrPassword"],[7775,33,6649,1],[7775,34,6649,1,"apply"],[7775,39,6649,1],[7775,46,6649,1,"arguments"],[7775,55,6649,1],[7776,2,6649,1],[7777,2,6671,0],[7777,11,6671,9,"_fromIdTokenResponse"],[7777,31,6671,29,"_fromIdTokenResponse"],[7777,32,6671,30,"idTokenResponse"],[7777,47,6671,45],[7777,49,6671,47],[7778,4,6672,4],[7778,8,6672,8],[7778,9,6672,9,"idTokenResponse"],[7778,24,6672,24],[7778,26,6672,26],[7779,6,6673,8],[7779,13,6673,15],[7779,17,6673,19],[7780,4,6674,4],[7781,4,6675,4],[7781,8,6675,12,"providerId"],[7781,18,6675,22],[7781,21,6675,27,"idTokenResponse"],[7781,36,6675,42],[7781,37,6675,12,"providerId"],[7781,47,6675,22],[7782,4,6676,4],[7782,8,6676,10,"profile"],[7782,15,6676,17],[7782,18,6676,20,"idTokenResponse"],[7782,33,6676,35],[7782,34,6676,36,"rawUserInfo"],[7782,45,6676,47],[7782,48,6677,10,"JSON"],[7782,52,6677,14],[7782,53,6677,15,"parse"],[7782,58,6677,20],[7782,59,6677,21,"idTokenResponse"],[7782,74,6677,36],[7782,75,6677,37,"rawUserInfo"],[7782,86,6677,48],[7782,87,6677,49],[7782,90,6678,10],[7782,91,6678,11],[7782,92,6678,12],[7783,4,6679,4],[7783,8,6679,10,"isNewUser"],[7783,17,6679,19],[7783,20,6679,22,"idTokenResponse"],[7783,35,6679,37],[7783,36,6679,38,"isNewUser"],[7783,45,6679,47],[7783,49,6680,8,"idTokenResponse"],[7783,64,6680,23],[7783,65,6680,24,"kind"],[7783,69,6680,28],[7783,74,6680,33],[7783,113,6680,72],[7783,114,6680,73],[7784,4,6681,4],[7784,8,6681,8],[7784,9,6681,9,"providerId"],[7784,19,6681,19],[7784,23,6681,23,"idTokenResponse"],[7784,38,6681,38],[7784,40,6681,40,"idToken"],[7784,47,6681,47],[7784,49,6681,49],[7785,6,6682,8],[7785,10,6682,14,"signInProvider"],[7785,24,6682,28],[7785,27,6682,31,"_parseToken"],[7785,38,6682,42],[7785,39,6682,43,"idTokenResponse"],[7785,54,6682,58],[7785,55,6682,59,"idToken"],[7785,62,6682,66],[7785,63,6682,67],[7785,65,6682,69,"firebase"],[7785,73,6682,77],[7785,76,6682,80],[7785,94,6682,98],[7785,95,6682,99],[7786,6,6683,8],[7786,10,6683,12,"signInProvider"],[7786,24,6683,26],[7786,26,6683,28],[7787,8,6684,12],[7787,12,6684,18,"filteredProviderId"],[7787,30,6684,36],[7787,33,6684,39,"signInProvider"],[7787,47,6684,53],[7787,52,6684,58],[7787,63,6684,69],[7787,64,6684,70],[7787,94,6685,16,"signInProvider"],[7787,108,6685,30],[7787,113,6685,35],[7787,121,6685,43],[7787,122,6685,44],[7787,148,6686,18,"signInProvider"],[7787,162,6686,32],[7787,165,6687,18],[7787,169,6687,22],[7788,8,6688,12],[7789,8,6689,12],[7789,15,6689,19],[7789,19,6689,23,"GenericAdditionalUserInfo"],[7789,44,6689,48],[7789,45,6689,49,"isNewUser"],[7789,54,6689,58],[7789,56,6689,60,"filteredProviderId"],[7789,74,6689,78],[7789,75,6689,79],[7790,6,6690,8],[7791,4,6691,4],[7792,4,6692,4],[7792,8,6692,8],[7792,9,6692,9,"providerId"],[7792,19,6692,19],[7792,21,6692,21],[7793,6,6693,8],[7793,13,6693,15],[7793,17,6693,19],[7794,4,6694,4],[7795,4,6695,4],[7795,12,6695,12,"providerId"],[7795,22,6695,22],[7796,6,6696,8],[7796,11,6696,13],[7796,25,6696,27],[7796,26,6696,28],[7797,8,6697,12],[7797,15,6697,19],[7797,19,6697,23,"FacebookAdditionalUserInfo"],[7797,45,6697,49],[7797,46,6697,50,"isNewUser"],[7797,55,6697,59],[7797,57,6697,61,"profile"],[7797,64,6697,68],[7797,65,6697,69],[7798,6,6698,8],[7798,11,6698,13],[7798,23,6698,25],[7798,24,6698,26],[7799,8,6699,12],[7799,15,6699,19],[7799,19,6699,23,"GithubAdditionalUserInfo"],[7799,43,6699,47],[7799,44,6699,48,"isNewUser"],[7799,53,6699,57],[7799,55,6699,59,"profile"],[7799,62,6699,66],[7799,63,6699,67],[7800,6,6700,8],[7800,11,6700,13],[7800,23,6700,25],[7800,24,6700,26],[7801,8,6701,12],[7801,15,6701,19],[7801,19,6701,23,"GoogleAdditionalUserInfo"],[7801,43,6701,47],[7801,44,6701,48,"isNewUser"],[7801,53,6701,57],[7801,55,6701,59,"profile"],[7801,62,6701,66],[7801,63,6701,67],[7802,6,6702,8],[7802,11,6702,13],[7802,24,6702,26],[7802,25,6702,27],[7803,8,6703,12],[7803,15,6703,19],[7803,19,6703,23,"TwitterAdditionalUserInfo"],[7803,44,6703,48],[7803,45,6703,49,"isNewUser"],[7803,54,6703,58],[7803,56,6703,60,"profile"],[7803,63,6703,67],[7803,65,6703,69,"idTokenResponse"],[7803,80,6703,84],[7803,81,6703,85,"screenName"],[7803,91,6703,95],[7803,95,6703,99],[7803,99,6703,103],[7803,100,6703,104],[7804,6,6704,8],[7804,11,6704,13],[7804,19,6704,21],[7804,20,6704,22],[7805,6,6705,8],[7805,11,6705,13],[7805,22,6705,24],[7805,23,6705,25],[7806,8,6706,12],[7806,15,6706,19],[7806,19,6706,23,"GenericAdditionalUserInfo"],[7806,44,6706,48],[7806,45,6706,49,"isNewUser"],[7806,54,6706,58],[7806,56,6706,60],[7806,60,6706,64],[7806,61,6706,65],[7807,6,6707,8],[7808,8,6708,12],[7808,15,6708,19],[7808,19,6708,23,"GenericAdditionalUserInfo"],[7808,44,6708,48],[7808,45,6708,49,"isNewUser"],[7808,54,6708,58],[7808,56,6708,60,"providerId"],[7808,66,6708,70],[7808,68,6708,72,"profile"],[7808,75,6708,79],[7808,76,6708,80],[7809,4,6709,4],[7810,2,6710,0],[7811,2,6710,1],[7811,6,6711,6,"GenericAdditionalUserInfo"],[7811,31,6711,31],[7811,47,6711,31,"_createClass"],[7811,59,6711,31],[7811,60,6712,4],[7811,69,6712,4,"GenericAdditionalUserInfo"],[7811,95,6712,16,"isNewUser"],[7811,104,6712,25],[7811,106,6712,27,"providerId"],[7811,116,6712,37],[7811,118,6712,53],[7812,4,6712,53],[7812,8,6712,39,"profile"],[7812,15,6712,46],[7812,18,6712,46,"arguments"],[7812,27,6712,46],[7812,28,6712,46,"length"],[7812,34,6712,46],[7812,42,6712,46,"arguments"],[7812,51,6712,46],[7812,59,6712,46,"undefined"],[7812,68,6712,46],[7812,71,6712,46,"arguments"],[7812,80,6712,46],[7812,86,6712,49],[7812,87,6712,50],[7812,88,6712,51],[7813,4,6712,51,"_classCallCheck"],[7813,19,6712,51],[7813,26,6712,51,"GenericAdditionalUserInfo"],[7813,51,6712,51],[7814,4,6713,8],[7814,8,6713,12],[7814,9,6713,13,"isNewUser"],[7814,18,6713,22],[7814,21,6713,25,"isNewUser"],[7814,30,6713,34],[7815,4,6714,8],[7815,8,6714,12],[7815,9,6714,13,"providerId"],[7815,19,6714,23],[7815,22,6714,26,"providerId"],[7815,32,6714,36],[7816,4,6715,8],[7816,8,6715,12],[7816,9,6715,13,"profile"],[7816,16,6715,20],[7816,19,6715,23,"profile"],[7816,26,6715,30],[7817,2,6716,4],[7817,3,6716,5],[7818,2,6716,5],[7818,6,6718,6,"FederatedAdditionalUserInfoWithUsername"],[7818,45,6718,45],[7818,71,6718,45,"_GenericAdditionalUse"],[7818,92,6718,45],[7819,4,6719,4],[7819,13,6719,4,"FederatedAdditionalUserInfoWithUsername"],[7819,53,6719,16,"isNewUser"],[7819,62,6719,25],[7819,64,6719,27,"providerId"],[7819,74,6719,37],[7819,76,6719,39,"profile"],[7819,83,6719,46],[7819,85,6719,48,"username"],[7819,93,6719,56],[7819,95,6719,58],[7820,6,6719,58],[7820,10,6719,58,"_this12"],[7820,17,6719,58],[7821,6,6719,58,"_classCallCheck"],[7821,21,6719,58],[7821,28,6719,58,"FederatedAdditionalUserInfoWithUsername"],[7821,67,6719,58],[7822,6,6720,8,"_this12"],[7822,13,6720,8],[7822,16,6720,8,"_callSuper"],[7822,26,6720,8],[7822,33,6720,8,"FederatedAdditionalUserInfoWithUsername"],[7822,72,6720,8],[7822,75,6720,14,"isNewUser"],[7822,84,6720,23],[7822,86,6720,25,"providerId"],[7822,96,6720,35],[7822,98,6720,37,"profile"],[7822,105,6720,44],[7823,6,6721,8,"_this12"],[7823,13,6721,8],[7823,14,6721,13,"username"],[7823,22,6721,21],[7823,25,6721,24,"username"],[7823,33,6721,32],[7824,6,6721,33],[7824,13,6721,33,"_this12"],[7824,20,6721,33],[7825,4,6722,4],[7826,4,6722,5,"_inherits"],[7826,13,6722,5],[7826,14,6722,5,"FederatedAdditionalUserInfoWithUsername"],[7826,53,6722,5],[7826,55,6722,5,"_GenericAdditionalUse"],[7826,76,6722,5],[7827,4,6722,5],[7827,11,6722,5,"_createClass"],[7827,23,6722,5],[7827,24,6722,5,"FederatedAdditionalUserInfoWithUsername"],[7827,63,6722,5],[7828,2,6722,5],[7828,4,6718,54,"GenericAdditionalUserInfo"],[7828,29,6718,79],[7829,2,6718,79],[7829,6,6724,6,"FacebookAdditionalUserInfo"],[7829,32,6724,32],[7829,58,6724,32,"_GenericAdditionalUse2"],[7829,80,6724,32],[7830,4,6725,4],[7830,13,6725,4,"FacebookAdditionalUserInfo"],[7830,40,6725,16,"isNewUser"],[7830,49,6725,25],[7830,51,6725,27,"profile"],[7830,58,6725,34],[7830,60,6725,36],[7831,6,6725,36,"_classCallCheck"],[7831,21,6725,36],[7831,28,6725,36,"FacebookAdditionalUserInfo"],[7831,54,6725,36],[7832,6,6725,36],[7832,13,6725,36,"_callSuper"],[7832,23,6725,36],[7832,30,6725,36,"FacebookAdditionalUserInfo"],[7832,56,6725,36],[7832,59,6726,14,"isNewUser"],[7832,68,6726,23],[7832,70,6726,25],[7832,84,6726,39],[7832,85,6726,40],[7832,112,6726,67,"profile"],[7832,119,6726,74],[7833,4,6727,4],[7834,4,6727,5,"_inherits"],[7834,13,6727,5],[7834,14,6727,5,"FacebookAdditionalUserInfo"],[7834,40,6727,5],[7834,42,6727,5,"_GenericAdditionalUse2"],[7834,64,6727,5],[7835,4,6727,5],[7835,11,6727,5,"_createClass"],[7835,23,6727,5],[7835,24,6727,5,"FacebookAdditionalUserInfo"],[7835,50,6727,5],[7836,2,6727,5],[7836,4,6724,41,"GenericAdditionalUserInfo"],[7836,29,6724,66],[7837,2,6724,66],[7837,6,6729,6,"GithubAdditionalUserInfo"],[7837,30,6729,30],[7837,56,6729,30,"_FederatedAdditionalU"],[7837,77,6729,30],[7838,4,6730,4],[7838,13,6730,4,"GithubAdditionalUserInfo"],[7838,38,6730,16,"isNewUser"],[7838,47,6730,25],[7838,49,6730,27,"profile"],[7838,56,6730,34],[7838,58,6730,36],[7839,6,6730,36,"_classCallCheck"],[7839,21,6730,36],[7839,28,6730,36,"GithubAdditionalUserInfo"],[7839,52,6730,36],[7840,6,6730,36],[7840,13,6730,36,"_callSuper"],[7840,23,6730,36],[7840,30,6730,36,"GithubAdditionalUserInfo"],[7840,54,6730,36],[7840,57,6731,14,"isNewUser"],[7840,66,6731,23],[7840,68,6731,25],[7840,80,6731,37],[7840,81,6731,38],[7840,106,6731,63,"profile"],[7840,113,6731,70],[7840,115,6731,72],[7840,122,6731,79,"profile"],[7840,129,6731,86],[7840,131,6731,88,"login"],[7840,136,6731,93],[7840,141,6731,98],[7840,149,6731,106],[7840,152,6731,109,"profile"],[7840,159,6731,116],[7840,161,6731,118,"login"],[7840,166,6731,123],[7840,169,6731,126],[7840,173,6731,130],[7841,4,6732,4],[7842,4,6732,5,"_inherits"],[7842,13,6732,5],[7842,14,6732,5,"GithubAdditionalUserInfo"],[7842,38,6732,5],[7842,40,6732,5,"_FederatedAdditionalU"],[7842,61,6732,5],[7843,4,6732,5],[7843,11,6732,5,"_createClass"],[7843,23,6732,5],[7843,24,6732,5,"GithubAdditionalUserInfo"],[7843,48,6732,5],[7844,2,6732,5],[7844,4,6729,39,"FederatedAdditionalUserInfoWithUsername"],[7844,43,6729,78],[7845,2,6729,78],[7845,6,6734,6,"GoogleAdditionalUserInfo"],[7845,30,6734,30],[7845,56,6734,30,"_GenericAdditionalUse3"],[7845,78,6734,30],[7846,4,6735,4],[7846,13,6735,4,"GoogleAdditionalUserInfo"],[7846,38,6735,16,"isNewUser"],[7846,47,6735,25],[7846,49,6735,27,"profile"],[7846,56,6735,34],[7846,58,6735,36],[7847,6,6735,36,"_classCallCheck"],[7847,21,6735,36],[7847,28,6735,36,"GoogleAdditionalUserInfo"],[7847,52,6735,36],[7848,6,6735,36],[7848,13,6735,36,"_callSuper"],[7848,23,6735,36],[7848,30,6735,36,"GoogleAdditionalUserInfo"],[7848,54,6735,36],[7848,57,6736,14,"isNewUser"],[7848,66,6736,23],[7848,68,6736,25],[7848,80,6736,37],[7848,81,6736,38],[7848,106,6736,63,"profile"],[7848,113,6736,70],[7849,4,6737,4],[7850,4,6737,5,"_inherits"],[7850,13,6737,5],[7850,14,6737,5,"GoogleAdditionalUserInfo"],[7850,38,6737,5],[7850,40,6737,5,"_GenericAdditionalUse3"],[7850,62,6737,5],[7851,4,6737,5],[7851,11,6737,5,"_createClass"],[7851,23,6737,5],[7851,24,6737,5,"GoogleAdditionalUserInfo"],[7851,48,6737,5],[7852,2,6737,5],[7852,4,6734,39,"GenericAdditionalUserInfo"],[7852,29,6734,64],[7853,2,6734,64],[7853,6,6739,6,"TwitterAdditionalUserInfo"],[7853,31,6739,31],[7853,57,6739,31,"_FederatedAdditionalU2"],[7853,79,6739,31],[7854,4,6740,4],[7854,13,6740,4,"TwitterAdditionalUserInfo"],[7854,39,6740,16,"isNewUser"],[7854,48,6740,25],[7854,50,6740,27,"profile"],[7854,57,6740,34],[7854,59,6740,36,"screenName"],[7854,69,6740,46],[7854,71,6740,48],[7855,6,6740,48,"_classCallCheck"],[7855,21,6740,48],[7855,28,6740,48,"TwitterAdditionalUserInfo"],[7855,53,6740,48],[7856,6,6740,48],[7856,13,6740,48,"_callSuper"],[7856,23,6740,48],[7856,30,6740,48,"TwitterAdditionalUserInfo"],[7856,55,6740,48],[7856,58,6741,14,"isNewUser"],[7856,67,6741,23],[7856,69,6741,25],[7856,82,6741,38],[7856,83,6741,39],[7856,109,6741,65,"profile"],[7856,116,6741,72],[7856,118,6741,74,"screenName"],[7856,128,6741,84],[7857,4,6742,4],[7858,4,6742,5,"_inherits"],[7858,13,6742,5],[7858,14,6742,5,"TwitterAdditionalUserInfo"],[7858,39,6742,5],[7858,41,6742,5,"_FederatedAdditionalU2"],[7858,63,6742,5],[7859,4,6742,5],[7859,11,6742,5,"_createClass"],[7859,23,6742,5],[7859,24,6742,5,"TwitterAdditionalUserInfo"],[7859,49,6742,5],[7860,2,6742,5],[7860,4,6739,40,"FederatedAdditionalUserInfoWithUsername"],[7860,43,6739,79],[7861,2,6744,0],[7862,0,6745,0],[7863,0,6746,0],[7864,0,6747,0],[7865,0,6748,0],[7866,0,6749,0],[7867,0,6750,0],[7868,2,6751,0],[7868,11,6751,9,"getAdditionalUserInfo"],[7868,32,6751,30,"getAdditionalUserInfo"],[7868,33,6751,31,"userCredential"],[7868,47,6751,45],[7868,49,6751,47],[7869,4,6752,4],[7869,8,6752,12,"user"],[7869,12,6752,16],[7869,15,6752,37,"userCredential"],[7869,29,6752,51],[7869,30,6752,12,"user"],[7869,34,6752,16],[7870,6,6752,18,"_tokenResponse"],[7870,20,6752,32],[7870,23,6752,37,"userCredential"],[7870,37,6752,51],[7870,38,6752,18,"_tokenResponse"],[7870,52,6752,32],[7871,4,6753,4],[7871,8,6753,8,"user"],[7871,12,6753,12],[7871,13,6753,13,"isAnonymous"],[7871,24,6753,24],[7871,28,6753,28],[7871,29,6753,29,"_tokenResponse"],[7871,43,6753,43],[7871,45,6753,45],[7872,6,6754,8],[7873,6,6755,8],[7874,6,6756,8],[7874,13,6756,15],[7875,8,6757,12,"providerId"],[7875,18,6757,22],[7875,20,6757,24],[7875,24,6757,28],[7876,8,6758,12,"isNewUser"],[7876,17,6758,21],[7876,19,6758,23],[7876,24,6758,28],[7877,8,6759,12,"profile"],[7877,15,6759,19],[7877,17,6759,21],[7878,6,6760,8],[7878,7,6760,9],[7879,4,6761,4],[7880,4,6762,4],[7880,11,6762,11,"_fromIdTokenResponse"],[7880,31,6762,31],[7880,32,6762,32,"_tokenResponse"],[7880,46,6762,46],[7880,47,6762,47],[7881,2,6763,0],[7883,2,6765,0],[7884,0,6766,0],[7885,0,6767,0],[7886,0,6768,0],[7887,0,6769,0],[7888,0,6770,0],[7889,0,6771,0],[7890,0,6772,0],[7891,0,6773,0],[7892,0,6774,0],[7893,0,6775,0],[7894,0,6776,0],[7895,0,6777,0],[7896,0,6778,0],[7897,0,6779,0],[7898,0,6780,0],[7899,2,6781,0],[7900,2,6782,0],[7901,0,6783,0],[7902,0,6784,0],[7903,0,6785,0],[7904,0,6786,0],[7905,0,6787,0],[7906,0,6788,0],[7907,0,6789,0],[7908,0,6790,0],[7909,0,6791,0],[7910,0,6792,0],[7911,0,6793,0],[7912,0,6794,0],[7913,0,6795,0],[7914,0,6796,0],[7915,0,6797,0],[7916,0,6798,0],[7917,0,6799,0],[7918,0,6800,0],[7919,0,6801,0],[7920,0,6802,0],[7921,0,6803,0],[7922,0,6804,0],[7923,0,6805,0],[7924,2,6806,0],[7924,11,6806,9,"setPersistence"],[7924,25,6806,23,"setPersistence"],[7924,26,6806,24,"auth"],[7924,30,6806,28],[7924,32,6806,30,"persistence"],[7924,43,6806,41],[7924,45,6806,43],[7925,4,6807,4],[7925,11,6807,11,"util"],[7925,15,6807,15],[7925,16,6807,16,"getModularInstance"],[7925,34,6807,34],[7925,35,6807,35,"auth"],[7925,39,6807,39],[7925,40,6807,40],[7925,41,6807,41,"setPersistence"],[7925,55,6807,55],[7925,56,6807,56,"persistence"],[7925,67,6807,67],[7925,68,6807,68],[7926,2,6808,0],[7927,2,6809,0],[7928,0,6810,0],[7929,0,6811,0],[7930,0,6812,0],[7931,0,6813,0],[7932,0,6814,0],[7933,0,6815,0],[7934,0,6816,0],[7935,0,6817,0],[7936,0,6818,0],[7937,0,6819,0],[7938,0,6820,0],[7939,0,6821,0],[7940,0,6822,0],[7941,0,6823,0],[7942,0,6824,0],[7943,0,6825,0],[7944,0,6826,0],[7945,0,6827,0],[7946,0,6828,0],[7947,0,6829,0],[7948,0,6830,0],[7949,0,6831,0],[7950,0,6832,0],[7951,0,6833,0],[7952,0,6834,0],[7953,0,6835,0],[7954,2,6836,0],[7954,11,6836,9,"initializeRecaptchaConfig"],[7954,36,6836,34,"initializeRecaptchaConfig"],[7954,37,6836,35,"auth"],[7954,41,6836,39],[7954,43,6836,41],[7955,4,6837,4],[7955,11,6837,11,"_initializeRecaptchaConfig"],[7955,37,6837,37],[7955,38,6837,38,"auth"],[7955,42,6837,42],[7955,43,6837,43],[7956,2,6838,0],[7957,2,6839,0],[7958,0,6840,0],[7959,0,6841,0],[7960,0,6842,0],[7961,0,6843,0],[7962,0,6844,0],[7963,0,6845,0],[7964,0,6846,0],[7965,0,6847,0],[7966,0,6848,0],[7967,0,6849,0],[7968,0,6850,0],[7969,0,6851,0],[7970,0,6852,0],[7971,0,6853,0],[7972,0,6854,0],[7973,0,6855,0],[7974,0,6856,0],[7975,0,6857,0],[7976,0,6858,0],[7977,0,6859,0],[7978,0,6860,0],[7979,0,6861,0],[7980,2,6839,0],[7980,11,6862,15,"validatePassword"],[7980,27,6862,31,"validatePassword"],[7980,28,6862,31,"_x186"],[7980,33,6862,31],[7980,35,6862,31,"_x187"],[7980,40,6862,31],[7981,4,6862,31],[7981,11,6862,31,"_validatePassword2"],[7981,29,6862,31],[7981,30,6862,31,"apply"],[7981,35,6862,31],[7981,42,6862,31,"arguments"],[7981,51,6862,31],[7982,2,6862,31],[7983,2,6866,0],[7984,0,6867,0],[7985,0,6868,0],[7986,0,6869,0],[7987,0,6870,0],[7988,0,6871,0],[7989,0,6872,0],[7990,0,6873,0],[7991,0,6874,0],[7992,0,6875,0],[7993,0,6876,0],[7994,0,6877,0],[7995,0,6878,0],[7996,0,6879,0],[7997,0,6880,0],[7998,0,6881,0],[7999,2,6866,0],[7999,11,6866,0,"_validatePassword2"],[7999,30,6866,0],[8000,4,6866,0,"_validatePassword2"],[8000,22,6866,0],[8000,25,6866,0,"_asyncToGenerator"],[8000,42,6866,0],[8000,43,6862,0],[8000,54,6862,32,"auth"],[8000,58,6862,36],[8000,60,6862,38,"password"],[8000,68,6862,46],[8000,70,6862,48],[8001,6,6863,4],[8001,10,6863,10,"authInternal"],[8001,22,6863,22],[8001,25,6863,25,"_castAuth"],[8001,34,6863,34],[8001,35,6863,35,"auth"],[8001,39,6863,39],[8001,40,6863,40],[8002,6,6864,4],[8002,13,6864,11,"authInternal"],[8002,25,6864,23],[8002,26,6864,24,"validatePassword"],[8002,42,6864,40],[8002,43,6864,41,"password"],[8002,51,6864,49],[8002,52,6864,50],[8003,4,6865,0],[8003,5,6865,1],[8004,4,6865,1],[8004,11,6865,1,"_validatePassword2"],[8004,29,6865,1],[8004,30,6865,1,"apply"],[8004,35,6865,1],[8004,42,6865,1,"arguments"],[8004,51,6865,1],[8005,2,6865,1],[8006,2,6882,0],[8006,11,6882,9,"onIdTokenChanged"],[8006,27,6882,25,"onIdTokenChanged"],[8006,28,6882,26,"auth"],[8006,32,6882,30],[8006,34,6882,32,"nextOrObserver"],[8006,48,6882,46],[8006,50,6882,48,"error"],[8006,55,6882,53],[8006,57,6882,55,"completed"],[8006,66,6882,64],[8006,68,6882,66],[8007,4,6883,4],[8007,11,6883,11,"util"],[8007,15,6883,15],[8007,16,6883,16,"getModularInstance"],[8007,34,6883,34],[8007,35,6883,35,"auth"],[8007,39,6883,39],[8007,40,6883,40],[8007,41,6883,41,"onIdTokenChanged"],[8007,57,6883,57],[8007,58,6883,58,"nextOrObserver"],[8007,72,6883,72],[8007,74,6883,74,"error"],[8007,79,6883,79],[8007,81,6883,81,"completed"],[8007,90,6883,90],[8007,91,6883,91],[8008,2,6884,0],[8009,2,6885,0],[8010,0,6886,0],[8011,0,6887,0],[8012,0,6888,0],[8013,0,6889,0],[8014,0,6890,0],[8015,0,6891,0],[8016,0,6892,0],[8017,0,6893,0],[8018,0,6894,0],[8019,2,6895,0],[8019,11,6895,9,"beforeAuthStateChanged"],[8019,33,6895,31,"beforeAuthStateChanged"],[8019,34,6895,32,"auth"],[8019,38,6895,36],[8019,40,6895,38,"callback"],[8019,48,6895,46],[8019,50,6895,48,"onAbort"],[8019,57,6895,55],[8019,59,6895,57],[8020,4,6896,4],[8020,11,6896,11,"util"],[8020,15,6896,15],[8020,16,6896,16,"getModularInstance"],[8020,34,6896,34],[8020,35,6896,35,"auth"],[8020,39,6896,39],[8020,40,6896,40],[8020,41,6896,41,"beforeAuthStateChanged"],[8020,63,6896,63],[8020,64,6896,64,"callback"],[8020,72,6896,72],[8020,74,6896,74,"onAbort"],[8020,81,6896,81],[8020,82,6896,82],[8021,2,6897,0],[8022,2,6898,0],[8023,0,6899,0],[8024,0,6900,0],[8025,0,6901,0],[8026,0,6902,0],[8027,0,6903,0],[8028,0,6904,0],[8029,0,6905,0],[8030,0,6906,0],[8031,0,6907,0],[8032,0,6908,0],[8033,0,6909,0],[8034,0,6910,0],[8035,0,6911,0],[8036,0,6912,0],[8037,2,6913,0],[8037,11,6913,9,"onAuthStateChanged"],[8037,29,6913,27,"onAuthStateChanged"],[8037,30,6913,28,"auth"],[8037,34,6913,32],[8037,36,6913,34,"nextOrObserver"],[8037,50,6913,48],[8037,52,6913,50,"error"],[8037,57,6913,55],[8037,59,6913,57,"completed"],[8037,68,6913,66],[8037,70,6913,68],[8038,4,6914,4],[8038,11,6914,11,"util"],[8038,15,6914,15],[8038,16,6914,16,"getModularInstance"],[8038,34,6914,34],[8038,35,6914,35,"auth"],[8038,39,6914,39],[8038,40,6914,40],[8038,41,6914,41,"onAuthStateChanged"],[8038,59,6914,59],[8038,60,6914,60,"nextOrObserver"],[8038,74,6914,74],[8038,76,6914,76,"error"],[8038,81,6914,81],[8038,83,6914,83,"completed"],[8038,92,6914,92],[8038,93,6914,93],[8039,2,6915,0],[8040,2,6916,0],[8041,0,6917,0],[8042,0,6918,0],[8043,0,6919,0],[8044,0,6920,0],[8045,0,6921,0],[8046,0,6922,0],[8047,2,6923,0],[8047,11,6923,9,"useDeviceLanguage"],[8047,28,6923,26,"useDeviceLanguage"],[8047,29,6923,27,"auth"],[8047,33,6923,31],[8047,35,6923,33],[8048,4,6924,4,"util"],[8048,8,6924,8],[8048,9,6924,9,"getModularInstance"],[8048,27,6924,27],[8048,28,6924,28,"auth"],[8048,32,6924,32],[8048,33,6924,33],[8048,34,6924,34,"useDeviceLanguage"],[8048,51,6924,51],[8048,52,6924,52],[8048,53,6924,53],[8049,2,6925,0],[8050,2,6926,0],[8051,0,6927,0],[8052,0,6928,0],[8053,0,6929,0],[8054,0,6930,0],[8055,0,6931,0],[8056,0,6932,0],[8057,0,6933,0],[8058,0,6934,0],[8059,0,6935,0],[8060,0,6936,0],[8061,0,6937,0],[8062,0,6938,0],[8063,0,6939,0],[8064,0,6940,0],[8065,0,6941,0],[8066,0,6942,0],[8067,0,6943,0],[8068,0,6944,0],[8069,0,6945,0],[8070,0,6946,0],[8071,2,6947,0],[8071,11,6947,9,"updateCurrentUser"],[8071,28,6947,26,"updateCurrentUser"],[8071,29,6947,27,"auth"],[8071,33,6947,31],[8071,35,6947,33,"user"],[8071,39,6947,37],[8071,41,6947,39],[8072,4,6948,4],[8072,11,6948,11,"util"],[8072,15,6948,15],[8072,16,6948,16,"getModularInstance"],[8072,34,6948,34],[8072,35,6948,35,"auth"],[8072,39,6948,39],[8072,40,6948,40],[8072,41,6948,41,"updateCurrentUser"],[8072,58,6948,58],[8072,59,6948,59,"user"],[8072,63,6948,63],[8072,64,6948,64],[8073,2,6949,0],[8074,2,6950,0],[8075,0,6951,0],[8076,0,6952,0],[8077,0,6953,0],[8078,0,6954,0],[8079,0,6955,0],[8080,0,6956,0],[8081,0,6957,0],[8082,0,6958,0],[8083,0,6959,0],[8084,0,6960,0],[8085,2,6961,0],[8085,11,6961,9,"signOut"],[8085,18,6961,16,"signOut"],[8085,19,6961,17,"auth"],[8085,23,6961,21],[8085,25,6961,23],[8086,4,6962,4],[8086,11,6962,11,"util"],[8086,15,6962,15],[8086,16,6962,16,"getModularInstance"],[8086,34,6962,34],[8086,35,6962,35,"auth"],[8086,39,6962,39],[8086,40,6962,40],[8086,41,6962,41,"signOut"],[8086,48,6962,48],[8086,49,6962,49],[8086,50,6962,50],[8087,2,6963,0],[8088,2,6964,0],[8089,0,6965,0],[8090,0,6966,0],[8091,0,6967,0],[8092,0,6968,0],[8093,0,6969,0],[8094,0,6970,0],[8095,0,6971,0],[8096,2,6972,0],[8096,11,6972,9,"revokeAccessToken"],[8096,28,6972,26,"revokeAccessToken"],[8096,29,6972,27,"auth"],[8096,33,6972,31],[8096,35,6972,33,"token"],[8096,40,6972,38],[8096,42,6972,40],[8097,4,6973,4],[8097,8,6973,10,"authInternal"],[8097,20,6973,22],[8097,23,6973,25,"_castAuth"],[8097,32,6973,34],[8097,33,6973,35,"auth"],[8097,37,6973,39],[8097,38,6973,40],[8098,4,6974,4],[8098,11,6974,11,"authInternal"],[8098,23,6974,23],[8098,24,6974,24,"revokeAccessToken"],[8098,41,6974,41],[8098,42,6974,42,"token"],[8098,47,6974,47],[8098,48,6974,48],[8099,2,6975,0],[8100,2,6976,0],[8101,0,6977,0],[8102,0,6978,0],[8103,0,6979,0],[8104,0,6980,0],[8105,0,6981,0],[8106,0,6982,0],[8107,0,6983,0],[8108,0,6984,0],[8109,0,6985,0],[8110,0,6986,0],[8111,0,6987,0],[8112,2,6976,0],[8112,11,6988,15,"deleteUser"],[8112,21,6988,25,"deleteUser"],[8112,22,6988,25,"_x188"],[8112,27,6988,25],[8113,4,6988,25],[8113,11,6988,25,"_deleteUser"],[8113,22,6988,25],[8113,23,6988,25,"apply"],[8113,28,6988,25],[8113,35,6988,25,"arguments"],[8113,44,6988,25],[8114,2,6988,25],[8115,2,6992,0],[8116,0,6993,0],[8117,0,6994,0],[8118,0,6995,0],[8119,0,6996,0],[8120,0,6997,0],[8121,0,6998,0],[8122,0,6999,0],[8123,0,7000,0],[8124,0,7001,0],[8125,0,7002,0],[8126,0,7003,0],[8127,0,7004,0],[8128,0,7005,0],[8129,0,7006,0],[8130,0,7007,0],[8131,2,6992,0],[8131,11,6992,0,"_deleteUser"],[8131,23,6992,0],[8132,4,6992,0,"_deleteUser"],[8132,15,6992,0],[8132,18,6992,0,"_asyncToGenerator"],[8132,35,6992,0],[8132,36,6988,0],[8132,47,6988,26,"user"],[8132,51,6988,30],[8132,53,6988,32],[8133,6,6989,4],[8133,13,6989,11,"util"],[8133,17,6989,15],[8133,18,6989,16,"getModularInstance"],[8133,36,6989,34],[8133,37,6989,35,"user"],[8133,41,6989,39],[8133,42,6989,40],[8133,43,6989,41,"delete"],[8133,49,6989,47],[8133,50,6989,48],[8133,51,6989,49],[8134,4,6990,0],[8134,5,6990,1],[8135,4,6990,1],[8135,11,6990,1,"_deleteUser"],[8135,22,6990,1],[8135,23,6990,1,"apply"],[8135,28,6990,1],[8135,35,6990,1,"arguments"],[8135,44,6990,1],[8136,2,6990,1],[8137,2,6990,1],[8137,6,7008,6,"MultiFactorSessionImpl"],[8137,28,7008,28],[8138,4,7009,4],[8138,13,7009,4,"MultiFactorSessionImpl"],[8138,36,7009,16,"type"],[8138,40,7009,20],[8138,42,7009,22,"credential"],[8138,52,7009,32],[8138,54,7009,34,"user"],[8138,58,7009,38],[8138,60,7009,40],[8139,6,7009,40,"_classCallCheck"],[8139,21,7009,40],[8139,28,7009,40,"MultiFactorSessionImpl"],[8139,50,7009,40],[8140,6,7010,8],[8140,10,7010,12],[8140,11,7010,13,"type"],[8140,15,7010,17],[8140,18,7010,20,"type"],[8140,22,7010,24],[8141,6,7011,8],[8141,10,7011,12],[8141,11,7011,13,"credential"],[8141,21,7011,23],[8141,24,7011,26,"credential"],[8141,34,7011,36],[8142,6,7012,8],[8142,10,7012,12],[8142,11,7012,13,"user"],[8142,15,7012,17],[8142,18,7012,20,"user"],[8142,22,7012,24],[8143,4,7013,4],[8144,4,7013,5],[8144,11,7013,5,"_createClass"],[8144,23,7013,5],[8144,24,7013,5,"MultiFactorSessionImpl"],[8144,46,7013,5],[8145,6,7013,5,"key"],[8145,9,7013,5],[8146,6,7013,5,"value"],[8146,11,7013,5],[8146,13,7020,4],[8146,22,7020,4,"toJSON"],[8146,28,7020,10,"toJSON"],[8146,29,7020,10],[8146,31,7020,13],[8147,8,7021,8],[8147,12,7021,14,"key"],[8147,15,7021,17],[8147,18,7021,20],[8147,22,7021,24],[8147,23,7021,25,"type"],[8147,27,7021,29],[8147,32,7021,34],[8147,40,7021,42],[8147,41,7021,43],[8147,79,7022,14],[8147,88,7022,23],[8147,91,7023,14],[8147,110,7023,33],[8148,8,7024,8],[8148,15,7024,15],[8149,10,7025,12,"multiFactorSession"],[8149,28,7025,30],[8149,30,7025,32],[8150,12,7026,16],[8150,13,7026,17,"key"],[8150,16,7026,20],[8150,19,7026,23],[8150,23,7026,27],[8150,24,7026,28,"credential"],[8151,10,7027,12],[8152,8,7028,8],[8152,9,7028,9],[8153,6,7029,4],[8154,4,7029,5],[8155,6,7029,5,"key"],[8155,9,7029,5],[8156,6,7029,5,"value"],[8156,11,7029,5],[8156,13,7014,4],[8156,22,7014,11,"_fromIdtoken"],[8156,34,7014,23,"_fromIdtoken"],[8156,35,7014,24,"idToken"],[8156,42,7014,31],[8156,44,7014,33,"user"],[8156,48,7014,37],[8156,50,7014,39],[8157,8,7015,8],[8157,15,7015,15],[8157,19,7015,19,"MultiFactorSessionImpl"],[8157,41,7015,41],[8157,42,7015,42],[8157,50,7015,50],[8157,51,7015,51],[8157,88,7015,88,"idToken"],[8157,95,7015,95],[8157,97,7015,97,"user"],[8157,101,7015,101],[8157,102,7015,102],[8158,6,7016,4],[8159,4,7016,5],[8160,6,7016,5,"key"],[8160,9,7016,5],[8161,6,7016,5,"value"],[8161,11,7016,5],[8161,13,7017,4],[8161,22,7017,11,"_fromMfaPendingCredential"],[8161,47,7017,36,"_fromMfaPendingCredential"],[8161,48,7017,37,"mfaPendingCredential"],[8161,68,7017,57],[8161,70,7017,59],[8162,8,7018,8],[8162,15,7018,15],[8162,19,7018,19,"MultiFactorSessionImpl"],[8162,41,7018,41],[8162,42,7018,42],[8162,50,7018,50],[8162,51,7018,51],[8162,89,7018,89,"mfaPendingCredential"],[8162,109,7018,109],[8162,110,7018,110],[8163,6,7019,4],[8164,4,7019,5],[8165,6,7019,5,"key"],[8165,9,7019,5],[8166,6,7019,5,"value"],[8166,11,7019,5],[8166,13,7030,4],[8166,22,7030,11,"fromJSON"],[8166,30,7030,19,"fromJSON"],[8166,31,7030,20,"obj"],[8166,34,7030,23],[8166,36,7030,25],[8167,8,7031,8],[8167,12,7031,12,"obj"],[8167,15,7031,15],[8167,17,7031,17,"multiFactorSession"],[8167,35,7031,35],[8167,37,7031,37],[8168,10,7032,12],[8168,14,7032,16,"obj"],[8168,17,7032,19],[8168,18,7032,20,"multiFactorSession"],[8168,36,7032,38],[8168,38,7032,40,"pendingCredential"],[8168,55,7032,57],[8168,57,7032,59],[8169,12,7033,16],[8169,19,7033,23,"MultiFactorSessionImpl"],[8169,41,7033,45],[8169,42,7033,46,"_fromMfaPendingCredential"],[8169,67,7033,71],[8169,68,7033,72,"obj"],[8169,71,7033,75],[8169,72,7033,76,"multiFactorSession"],[8169,90,7033,94],[8169,91,7033,95,"pendingCredential"],[8169,108,7033,112],[8169,109,7033,113],[8170,10,7034,12],[8170,11,7034,13],[8170,17,7035,17],[8170,21,7035,21,"obj"],[8170,24,7035,24],[8170,25,7035,25,"multiFactorSession"],[8170,43,7035,43],[8170,45,7035,45,"idToken"],[8170,52,7035,52],[8170,54,7035,54],[8171,12,7036,16],[8171,19,7036,23,"MultiFactorSessionImpl"],[8171,41,7036,45],[8171,42,7036,46,"_fromIdtoken"],[8171,54,7036,58],[8171,55,7036,59,"obj"],[8171,58,7036,62],[8171,59,7036,63,"multiFactorSession"],[8171,77,7036,81],[8171,78,7036,82,"idToken"],[8171,85,7036,89],[8171,86,7036,90],[8172,10,7037,12],[8173,8,7038,8],[8174,8,7039,8],[8174,15,7039,15],[8174,19,7039,19],[8175,6,7040,4],[8176,4,7040,5],[8177,2,7040,5],[8178,2,7043,0],[8179,0,7044,0],[8180,0,7045,0],[8181,0,7046,0],[8182,0,7047,0],[8183,0,7048,0],[8184,0,7049,0],[8185,0,7050,0],[8186,0,7051,0],[8187,0,7052,0],[8188,0,7053,0],[8189,0,7054,0],[8190,0,7055,0],[8191,0,7056,0],[8192,0,7057,0],[8193,0,7058,0],[8194,2,7043,0],[8194,6,7059,6,"MultiFactorResolverImpl"],[8194,29,7059,29],[8195,4,7060,4],[8195,13,7060,4,"MultiFactorResolverImpl"],[8195,37,7060,16,"session"],[8195,44,7060,23],[8195,46,7060,25,"hints"],[8195,51,7060,30],[8195,53,7060,32,"signInResolver"],[8195,67,7060,46],[8195,69,7060,48],[8196,6,7060,48,"_classCallCheck"],[8196,21,7060,48],[8196,28,7060,48,"MultiFactorResolverImpl"],[8196,51,7060,48],[8197,6,7061,8],[8197,10,7061,12],[8197,11,7061,13,"session"],[8197,18,7061,20],[8197,21,7061,23,"session"],[8197,28,7061,30],[8198,6,7062,8],[8198,10,7062,12],[8198,11,7062,13,"hints"],[8198,16,7062,18],[8198,19,7062,21,"hints"],[8198,24,7062,26],[8199,6,7063,8],[8199,10,7063,12],[8199,11,7063,13,"signInResolver"],[8199,25,7063,27],[8199,28,7063,30,"signInResolver"],[8199,42,7063,44],[8200,4,7064,4],[8201,4,7065,4],[8202,4,7065,4],[8202,11,7065,4,"_createClass"],[8202,23,7065,4],[8202,24,7065,4,"MultiFactorResolverImpl"],[8202,47,7065,4],[8203,6,7065,4,"key"],[8203,9,7065,4],[8204,6,7065,4,"value"],[8204,11,7065,4],[8205,8,7065,4],[8205,12,7065,4,"_resolveSignIn"],[8205,26,7065,4],[8205,29,7065,4,"_asyncToGenerator"],[8205,46,7065,4],[8205,47,7097,4],[8205,58,7097,24,"assertionExtern"],[8205,73,7097,39],[8205,75,7097,41],[8206,10,7098,8],[8206,14,7098,14,"assertion"],[8206,23,7098,23],[8206,26,7098,26,"assertionExtern"],[8206,41,7098,41],[8207,10,7099,8],[8207,17,7099,15],[8207,21,7099,19],[8207,22,7099,20,"signInResolver"],[8207,36,7099,34],[8207,37,7099,35,"assertion"],[8207,46,7099,44],[8207,47,7099,45],[8208,8,7100,4],[8208,9,7100,5],[8209,8,7100,5],[8209,17,7097,10,"resolveSignIn"],[8209,30,7097,23,"resolveSignIn"],[8209,31,7097,23,"_x189"],[8209,36,7097,23],[8210,10,7097,23],[8210,17,7097,23,"_resolveSignIn"],[8210,31,7097,23],[8210,32,7097,23,"apply"],[8210,37,7097,23],[8210,44,7097,23,"arguments"],[8210,53,7097,23],[8211,8,7097,23],[8212,8,7097,23],[8212,15,7097,10,"resolveSignIn"],[8212,28,7097,23],[8213,6,7097,23],[8214,4,7097,23],[8215,6,7097,23,"key"],[8215,9,7097,23],[8216,6,7097,23,"value"],[8216,11,7097,23],[8216,13,7066,4],[8216,22,7066,11,"_fromError"],[8216,32,7066,21,"_fromError"],[8216,33,7066,22,"authExtern"],[8216,43,7066,32],[8216,45,7066,34,"error"],[8216,50,7066,39],[8216,52,7066,41],[8217,8,7067,8],[8217,12,7067,14,"auth"],[8217,16,7067,18],[8217,19,7067,21,"_castAuth"],[8217,28,7067,30],[8217,29,7067,31,"authExtern"],[8217,39,7067,41],[8217,40,7067,42],[8218,8,7068,8],[8218,12,7068,14,"serverResponse"],[8218,26,7068,28],[8218,29,7068,31,"error"],[8218,34,7068,36],[8218,35,7068,37,"customData"],[8218,45,7068,47],[8218,46,7068,48,"_serverResponse"],[8218,61,7068,63],[8219,8,7069,8],[8219,12,7069,14,"hints"],[8219,17,7069,19],[8219,20,7069,22],[8219,21,7069,23,"serverResponse"],[8219,35,7069,37],[8219,36,7069,38,"mfaInfo"],[8219,43,7069,45],[8219,47,7069,49],[8219,49,7069,51],[8219,51,7069,53,"map"],[8219,54,7069,56],[8219,55,7069,57,"enrollment"],[8219,65,7069,67],[8219,69,7069,71,"MultiFactorInfoImpl"],[8219,88,7069,90],[8219,89,7069,91,"_fromServerResponse"],[8219,108,7069,110],[8219,109,7069,111,"auth"],[8219,113,7069,115],[8219,115,7069,117,"enrollment"],[8219,125,7069,127],[8219,126,7069,128],[8219,127,7069,129],[8220,8,7070,8,"_assert"],[8220,15,7070,15],[8220,16,7070,16,"serverResponse"],[8220,30,7070,30],[8220,31,7070,31,"mfaPendingCredential"],[8220,51,7070,51],[8220,53,7070,53,"auth"],[8220,57,7070,57],[8220,59,7070,59],[8220,75,7070,75],[8220,76,7070,76],[8220,110,7070,110],[8220,111,7070,111],[8221,8,7071,8],[8221,12,7071,14,"session"],[8221,19,7071,21],[8221,22,7071,24,"MultiFactorSessionImpl"],[8221,44,7071,46],[8221,45,7071,47,"_fromMfaPendingCredential"],[8221,70,7071,72],[8221,71,7071,73,"serverResponse"],[8221,85,7071,87],[8221,86,7071,88,"mfaPendingCredential"],[8221,106,7071,108],[8221,107,7071,109],[8222,8,7072,8],[8222,15,7072,15],[8222,19,7072,19,"MultiFactorResolverImpl"],[8222,42,7072,42],[8222,43,7072,43,"session"],[8222,50,7072,50],[8222,52,7072,52,"hints"],[8222,57,7072,57],[8223,10,7072,57],[8223,14,7072,57,"_ref20"],[8223,20,7072,57],[8223,23,7072,57,"_asyncToGenerator"],[8223,40,7072,57],[8223,41,7072,59],[8223,52,7072,66,"assertion"],[8223,61,7072,75],[8223,63,7072,80],[8224,12,7073,12],[8224,16,7073,18,"mfaResponse"],[8224,27,7073,29],[8224,36,7073,38,"assertion"],[8224,45,7073,47],[8224,46,7073,48,"_process"],[8224,54,7073,56],[8224,55,7073,57,"auth"],[8224,59,7073,61],[8224,61,7073,63,"session"],[8224,68,7073,70],[8224,69,7073,71],[8225,12,7074,12],[8226,12,7075,12],[8226,19,7075,19,"serverResponse"],[8226,33,7075,33],[8226,34,7075,34,"mfaInfo"],[8226,41,7075,41],[8227,12,7076,12],[8227,19,7076,19,"serverResponse"],[8227,33,7076,33],[8227,34,7076,34,"mfaPendingCredential"],[8227,54,7076,54],[8228,12,7077,12],[8229,12,7078,12],[8229,16,7078,18,"idTokenResponse"],[8229,31,7078,33],[8229,34,7078,36],[8230,14,7079,16],[8230,17,7079,19,"serverResponse"],[8230,31,7079,33],[8231,14,7080,16,"idToken"],[8231,21,7080,23],[8231,23,7080,25,"mfaResponse"],[8231,34,7080,36],[8231,35,7080,37,"idToken"],[8231,42,7080,44],[8232,14,7081,16,"refreshToken"],[8232,26,7081,28],[8232,28,7081,30,"mfaResponse"],[8232,39,7081,41],[8232,40,7081,42,"refreshToken"],[8233,12,7082,12],[8233,13,7082,13],[8234,12,7083,12],[8235,12,7084,12],[8235,20,7084,20,"error"],[8235,25,7084,25],[8235,26,7084,26,"operationType"],[8235,39,7084,39],[8236,14,7085,16],[8236,19,7085,21],[8236,27,7085,29],[8236,28,7085,30],[8237,16,7086,20],[8237,20,7086,26,"userCredential"],[8237,34,7086,40],[8237,43,7086,49,"UserCredentialImpl"],[8237,61,7086,67],[8237,62,7086,68,"_fromIdTokenResponse"],[8237,82,7086,88],[8237,83,7086,89,"auth"],[8237,87,7086,93],[8237,89,7086,95,"error"],[8237,94,7086,100],[8237,95,7086,101,"operationType"],[8237,108,7086,114],[8237,110,7086,116,"idTokenResponse"],[8237,125,7086,131],[8237,126,7086,132],[8238,16,7087,20],[8238,22,7087,26,"auth"],[8238,26,7087,30],[8238,27,7087,31,"_updateCurrentUser"],[8238,45,7087,49],[8238,46,7087,50,"userCredential"],[8238,60,7087,64],[8238,61,7087,65,"user"],[8238,65,7087,69],[8238,66,7087,70],[8239,16,7088,20],[8239,23,7088,27,"userCredential"],[8239,37,7088,41],[8240,14,7089,16],[8240,19,7089,21],[8240,35,7089,37],[8240,36,7089,38],[8241,16,7090,20,"_assert"],[8241,23,7090,27],[8241,24,7090,28,"error"],[8241,29,7090,33],[8241,30,7090,34,"user"],[8241,34,7090,38],[8241,36,7090,40,"auth"],[8241,40,7090,44],[8241,42,7090,46],[8241,58,7090,62],[8241,59,7090,63],[8241,93,7090,97],[8241,94,7090,98],[8242,16,7091,20],[8242,23,7091,27,"UserCredentialImpl"],[8242,41,7091,45],[8242,42,7091,46,"_forOperation"],[8242,55,7091,59],[8242,56,7091,60,"error"],[8242,61,7091,65],[8242,62,7091,66,"user"],[8242,66,7091,70],[8242,68,7091,72,"error"],[8242,73,7091,77],[8242,74,7091,78,"operationType"],[8242,87,7091,91],[8242,89,7091,93,"idTokenResponse"],[8242,104,7091,108],[8242,105,7091,109],[8243,14,7092,16],[8244,16,7093,20,"_fail"],[8244,21,7093,25],[8244,22,7093,26,"auth"],[8244,26,7093,30],[8244,28,7093,32],[8244,44,7093,48],[8244,45,7093,49],[8244,79,7093,83],[8244,80,7093,84],[8245,12,7094,12],[8246,10,7095,8],[8246,11,7095,9],[8247,10,7095,9],[8247,27,7095,9,"_x190"],[8247,32,7095,9],[8248,12,7095,9],[8248,19,7095,9,"_ref20"],[8248,25,7095,9],[8248,26,7095,9,"apply"],[8248,31,7095,9],[8248,38,7095,9,"arguments"],[8248,47,7095,9],[8249,10,7095,9],[8250,8,7095,9],[8250,12,7095,10],[8251,6,7096,4],[8252,4,7096,5],[8253,2,7096,5],[8254,2,7102,0],[8255,0,7103,0],[8256,0,7104,0],[8257,0,7105,0],[8258,0,7106,0],[8259,0,7107,0],[8260,0,7108,0],[8261,0,7109,0],[8262,0,7110,0],[8263,0,7111,0],[8264,2,7112,0],[8264,11,7112,9,"getMultiFactorResolver"],[8264,33,7112,31,"getMultiFactorResolver"],[8264,34,7112,32,"auth"],[8264,38,7112,36],[8264,40,7112,38,"error"],[8264,45,7112,43],[8264,47,7112,45],[8265,4,7113,4],[8265,8,7113,10,"authModular"],[8265,19,7113,21],[8265,22,7113,24,"util"],[8265,26,7113,28],[8265,27,7113,29,"getModularInstance"],[8265,45,7113,47],[8265,46,7113,48,"auth"],[8265,50,7113,52],[8265,51,7113,53],[8266,4,7114,4],[8266,8,7114,10,"errorInternal"],[8266,21,7114,23],[8266,24,7114,26,"error"],[8266,29,7114,31],[8267,4,7115,4,"_assert"],[8267,11,7115,11],[8267,12,7115,12,"error"],[8267,17,7115,17],[8267,18,7115,18,"customData"],[8267,28,7115,28],[8267,29,7115,29,"operationType"],[8267,42,7115,42],[8267,44,7115,44,"authModular"],[8267,55,7115,55],[8267,57,7115,57],[8267,73,7115,73],[8267,74,7115,74],[8267,108,7115,108],[8267,109,7115,109],[8268,4,7116,4,"_assert"],[8268,11,7116,11],[8268,12,7116,12,"errorInternal"],[8268,25,7116,25],[8268,26,7116,26,"customData"],[8268,36,7116,36],[8268,37,7116,37,"_serverResponse"],[8268,52,7116,52],[8268,54,7116,54,"mfaPendingCredential"],[8268,74,7116,74],[8268,76,7116,76,"authModular"],[8268,87,7116,87],[8268,89,7116,89],[8268,105,7116,105],[8268,106,7116,106],[8268,140,7116,140],[8268,141,7116,141],[8269,4,7117,4],[8269,11,7117,11,"MultiFactorResolverImpl"],[8269,34,7117,34],[8269,35,7117,35,"_fromError"],[8269,45,7117,45],[8269,46,7117,46,"authModular"],[8269,57,7117,57],[8269,59,7117,59,"errorInternal"],[8269,72,7117,72],[8269,73,7117,73],[8270,2,7118,0],[8272,2,7120,0],[8273,0,7121,0],[8274,0,7122,0],[8275,0,7123,0],[8276,0,7124,0],[8277,0,7125,0],[8278,0,7126,0],[8279,0,7127,0],[8280,0,7128,0],[8281,0,7129,0],[8282,0,7130,0],[8283,0,7131,0],[8284,0,7132,0],[8285,0,7133,0],[8286,0,7134,0],[8287,0,7135,0],[8288,2,7136,0],[8288,11,7136,9,"startEnrollPhoneMfa"],[8288,30,7136,28,"startEnrollPhoneMfa"],[8288,31,7136,29,"auth"],[8288,35,7136,33],[8288,37,7136,35,"request"],[8288,44,7136,42],[8288,46,7136,44],[8289,4,7137,4],[8289,11,7137,11,"_performApiRequest"],[8289,29,7137,29],[8289,30,7137,30,"auth"],[8289,34,7137,34],[8289,36,7137,36],[8289,42,7137,42],[8289,43,7137,43],[8289,66,7137,66],[8289,100,7137,100],[8289,101,7137,101],[8289,138,7137,138,"_addTidIfNecessary"],[8289,156,7137,156],[8289,157,7137,157,"auth"],[8289,161,7137,161],[8289,163,7137,163,"request"],[8289,170,7137,170],[8289,171,7137,171],[8289,172,7137,172],[8290,2,7138,0],[8291,2,7139,0],[8291,11,7139,9,"finalizeEnrollPhoneMfa"],[8291,33,7139,31,"finalizeEnrollPhoneMfa"],[8291,34,7139,32,"auth"],[8291,38,7139,36],[8291,40,7139,38,"request"],[8291,47,7139,45],[8291,49,7139,47],[8292,4,7140,4],[8292,11,7140,11,"_performApiRequest"],[8292,29,7140,29],[8292,30,7140,30,"auth"],[8292,34,7140,34],[8292,36,7140,36],[8292,42,7140,42],[8292,43,7140,43],[8292,66,7140,66],[8292,103,7140,103],[8292,104,7140,104],[8292,144,7140,144,"_addTidIfNecessary"],[8292,162,7140,162],[8292,163,7140,163,"auth"],[8292,167,7140,167],[8292,169,7140,169,"request"],[8292,176,7140,176],[8292,177,7140,177],[8292,178,7140,178],[8293,2,7141,0],[8294,2,7142,0],[8294,11,7142,9,"startEnrollTotpMfa"],[8294,29,7142,27,"startEnrollTotpMfa"],[8294,30,7142,28,"auth"],[8294,34,7142,32],[8294,36,7142,34,"request"],[8294,43,7142,41],[8294,45,7142,43],[8295,4,7143,4],[8295,11,7143,11,"_performApiRequest"],[8295,29,7143,29],[8295,30,7143,30,"auth"],[8295,34,7143,34],[8295,36,7143,36],[8295,42,7143,42],[8295,43,7143,43],[8295,66,7143,66],[8295,100,7143,100],[8295,101,7143,101],[8295,138,7143,138,"_addTidIfNecessary"],[8295,156,7143,156],[8295,157,7143,157,"auth"],[8295,161,7143,161],[8295,163,7143,163,"request"],[8295,170,7143,170],[8295,171,7143,171],[8295,172,7143,172],[8296,2,7144,0],[8297,2,7145,0],[8297,11,7145,9,"finalizeEnrollTotpMfa"],[8297,32,7145,30,"finalizeEnrollTotpMfa"],[8297,33,7145,31,"auth"],[8297,37,7145,35],[8297,39,7145,37,"request"],[8297,46,7145,44],[8297,48,7145,46],[8298,4,7146,4],[8298,11,7146,11,"_performApiRequest"],[8298,29,7146,29],[8298,30,7146,30,"auth"],[8298,34,7146,34],[8298,36,7146,36],[8298,42,7146,42],[8298,43,7146,43],[8298,66,7146,66],[8298,103,7146,103],[8298,104,7146,104],[8298,144,7146,144,"_addTidIfNecessary"],[8298,162,7146,162],[8298,163,7146,163,"auth"],[8298,167,7146,167],[8298,169,7146,169,"request"],[8298,176,7146,176],[8298,177,7146,177],[8298,178,7146,178],[8299,2,7147,0],[8300,2,7148,0],[8300,11,7148,9,"withdrawMfa"],[8300,22,7148,20,"withdrawMfa"],[8300,23,7148,21,"auth"],[8300,27,7148,25],[8300,29,7148,27,"request"],[8300,36,7148,34],[8300,38,7148,36],[8301,4,7149,4],[8301,11,7149,11,"_performApiRequest"],[8301,29,7149,29],[8301,30,7149,30,"auth"],[8301,34,7149,34],[8301,36,7149,36],[8301,42,7149,42],[8301,43,7149,43],[8301,66,7149,66],[8301,103,7149,103],[8301,104,7149,104],[8301,133,7149,133,"_addTidIfNecessary"],[8301,151,7149,151],[8301,152,7149,152,"auth"],[8301,156,7149,156],[8301,158,7149,158,"request"],[8301,165,7149,165],[8301,166,7149,166],[8301,167,7149,167],[8302,2,7150,0],[8303,2,7150,1],[8303,6,7152,6,"MultiFactorUserImpl"],[8303,25,7152,25],[8304,4,7153,4],[8304,13,7153,4,"MultiFactorUserImpl"],[8304,33,7153,16,"user"],[8304,37,7153,20],[8304,39,7153,22],[8305,6,7153,22,"_classCallCheck"],[8305,21,7153,22],[8305,28,7153,22,"MultiFactorUserImpl"],[8305,47,7153,22],[8306,6,7154,8],[8306,10,7154,12],[8306,11,7154,13,"user"],[8306,15,7154,17],[8306,18,7154,20,"user"],[8306,22,7154,24],[8307,6,7155,8],[8307,10,7155,12],[8307,11,7155,13,"enrolledFactors"],[8307,26,7155,28],[8307,29,7155,31],[8307,31,7155,33],[8308,6,7156,8,"user"],[8308,10,7156,12],[8308,11,7156,13,"_onReload"],[8308,20,7156,22],[8308,21,7156,23,"userInfo"],[8308,29,7156,31],[8308,33,7156,35],[8309,8,7157,12],[8309,12,7157,16,"userInfo"],[8309,20,7157,24],[8309,21,7157,25,"mfaInfo"],[8309,28,7157,32],[8309,30,7157,34],[8310,10,7158,16],[8310,14,7158,20],[8310,15,7158,21,"enrolledFactors"],[8310,30,7158,36],[8310,33,7158,39,"userInfo"],[8310,41,7158,47],[8310,42,7158,48,"mfaInfo"],[8310,49,7158,55],[8310,50,7158,56,"map"],[8310,53,7158,59],[8310,54,7158,60,"enrollment"],[8310,64,7158,70],[8310,68,7158,74,"MultiFactorInfoImpl"],[8310,87,7158,93],[8310,88,7158,94,"_fromServerResponse"],[8310,107,7158,113],[8310,108,7158,114,"user"],[8310,112,7158,118],[8310,113,7158,119,"auth"],[8310,117,7158,123],[8310,119,7158,125,"enrollment"],[8310,129,7158,135],[8310,130,7158,136],[8310,131,7158,137],[8311,8,7159,12],[8312,6,7160,8],[8312,7,7160,9],[8312,8,7160,10],[8313,4,7161,4],[8314,4,7161,5],[8314,11,7161,5,"_createClass"],[8314,23,7161,5],[8314,24,7161,5,"MultiFactorUserImpl"],[8314,43,7161,5],[8315,6,7161,5,"key"],[8315,9,7161,5],[8316,6,7161,5,"value"],[8316,11,7161,5],[8317,8,7161,5],[8317,12,7161,5,"_getSession"],[8317,23,7161,5],[8317,26,7161,5,"_asyncToGenerator"],[8317,43,7161,5],[8317,44,7165,4],[8317,57,7165,23],[8318,10,7166,8],[8318,17,7166,15,"MultiFactorSessionImpl"],[8318,39,7166,37],[8318,40,7166,38,"_fromIdtoken"],[8318,52,7166,50],[8318,59,7166,57],[8318,63,7166,61],[8318,64,7166,62,"user"],[8318,68,7166,66],[8318,69,7166,67,"getIdToken"],[8318,79,7166,77],[8318,80,7166,78],[8318,81,7166,79],[8318,83,7166,81],[8318,87,7166,85],[8318,88,7166,86,"user"],[8318,92,7166,90],[8318,93,7166,91],[8319,8,7167,4],[8319,9,7167,5],[8320,8,7167,5],[8320,17,7165,10,"getSession"],[8320,27,7165,20,"getSession"],[8320,28,7165,20],[8321,10,7165,20],[8321,17,7165,20,"_getSession"],[8321,28,7165,20],[8321,29,7165,20,"apply"],[8321,34,7165,20],[8321,41,7165,20,"arguments"],[8321,50,7165,20],[8322,8,7165,20],[8323,8,7165,20],[8323,15,7165,10,"getSession"],[8323,25,7165,20],[8324,6,7165,20],[8325,4,7165,20],[8326,6,7165,20,"key"],[8326,9,7165,20],[8327,6,7165,20,"value"],[8327,11,7165,20],[8328,8,7165,20],[8328,12,7165,20,"_enroll"],[8328,19,7165,20],[8328,22,7165,20,"_asyncToGenerator"],[8328,39,7165,20],[8328,40,7168,4],[8328,51,7168,17,"assertionExtern"],[8328,66,7168,32],[8328,68,7168,34,"displayName"],[8328,79,7168,45],[8328,81,7168,47],[8329,10,7169,8],[8329,14,7169,14,"assertion"],[8329,23,7169,23],[8329,26,7169,26,"assertionExtern"],[8329,41,7169,41],[8330,10,7170,8],[8330,14,7170,14,"session"],[8330,21,7170,21],[8330,30,7170,31],[8330,34,7170,35],[8330,35,7170,36,"getSession"],[8330,45,7170,46],[8330,46,7170,47],[8330,47,7170,49],[8331,10,7171,8],[8331,14,7171,14,"finalizeMfaResponse"],[8331,33,7171,33],[8331,42,7171,42,"_logoutIfInvalidated"],[8331,62,7171,62],[8331,63,7171,63],[8331,67,7171,67],[8331,68,7171,68,"user"],[8331,72,7171,72],[8331,74,7171,74,"assertion"],[8331,83,7171,83],[8331,84,7171,84,"_process"],[8331,92,7171,92],[8331,93,7171,93],[8331,97,7171,97],[8331,98,7171,98,"user"],[8331,102,7171,102],[8331,103,7171,103,"auth"],[8331,107,7171,107],[8331,109,7171,109,"session"],[8331,116,7171,116],[8331,118,7171,118,"displayName"],[8331,129,7171,129],[8331,130,7171,130],[8331,131,7171,131],[8332,10,7172,8],[8333,10,7173,8],[8334,10,7174,8],[8334,16,7174,14],[8334,20,7174,18],[8334,21,7174,19,"user"],[8334,25,7174,23],[8334,26,7174,24,"_updateTokensIfNecessary"],[8334,50,7174,48],[8334,51,7174,49,"finalizeMfaResponse"],[8334,70,7174,68],[8334,71,7174,69],[8335,10,7175,8],[8336,10,7176,8],[8337,10,7177,8],[8338,10,7178,8],[8338,17,7178,15],[8338,21,7178,19],[8338,22,7178,20,"user"],[8338,26,7178,24],[8338,27,7178,25,"reload"],[8338,33,7178,31],[8338,34,7178,32],[8338,35,7178,33],[8339,8,7179,4],[8339,9,7179,5],[8340,8,7179,5],[8340,17,7168,10,"enroll"],[8340,23,7168,16,"enroll"],[8340,24,7168,16,"_x191"],[8340,29,7168,16],[8340,31,7168,16,"_x192"],[8340,36,7168,16],[8341,10,7168,16],[8341,17,7168,16,"_enroll"],[8341,24,7168,16],[8341,25,7168,16,"apply"],[8341,30,7168,16],[8341,37,7168,16,"arguments"],[8341,46,7168,16],[8342,8,7168,16],[8343,8,7168,16],[8343,15,7168,10,"enroll"],[8343,21,7168,16],[8344,6,7168,16],[8345,4,7168,16],[8346,6,7168,16,"key"],[8346,9,7168,16],[8347,6,7168,16,"value"],[8347,11,7168,16],[8348,8,7168,16],[8348,12,7168,16,"_unenroll"],[8348,21,7168,16],[8348,24,7168,16,"_asyncToGenerator"],[8348,41,7168,16],[8348,42,7180,4],[8348,53,7180,19,"infoOrUid"],[8348,62,7180,28],[8348,64,7180,30],[8349,10,7181,8],[8349,14,7181,14,"mfaEnrollmentId"],[8349,29,7181,29],[8349,32,7181,32],[8349,39,7181,39,"infoOrUid"],[8349,48,7181,48],[8349,53,7181,53],[8349,61,7181,61],[8349,64,7181,64,"infoOrUid"],[8349,73,7181,73],[8349,76,7181,76,"infoOrUid"],[8349,85,7181,85],[8349,86,7181,86,"uid"],[8349,89,7181,89],[8350,10,7182,8],[8350,14,7182,14,"idToken"],[8350,21,7182,21],[8350,30,7182,30],[8350,34,7182,34],[8350,35,7182,35,"user"],[8350,39,7182,39],[8350,40,7182,40,"getIdToken"],[8350,50,7182,50],[8350,51,7182,51],[8350,52,7182,52],[8351,10,7183,8],[8351,14,7183,12],[8352,12,7184,12],[8352,16,7184,18,"idTokenResponse"],[8352,31,7184,33],[8352,40,7184,42,"_logoutIfInvalidated"],[8352,60,7184,62],[8352,61,7184,63],[8352,65,7184,67],[8352,66,7184,68,"user"],[8352,70,7184,72],[8352,72,7184,74,"withdrawMfa"],[8352,83,7184,85],[8352,84,7184,86],[8352,88,7184,90],[8352,89,7184,91,"user"],[8352,93,7184,95],[8352,94,7184,96,"auth"],[8352,98,7184,100],[8352,100,7184,102],[8353,14,7185,16,"idToken"],[8353,21,7185,23],[8354,14,7186,16,"mfaEnrollmentId"],[8355,12,7187,12],[8355,13,7187,13],[8355,14,7187,14],[8355,15,7187,15],[8356,12,7188,12],[8357,12,7189,12],[8357,16,7189,16],[8357,17,7189,17,"enrolledFactors"],[8357,32,7189,32],[8357,35,7189,35],[8357,39,7189,39],[8357,40,7189,40,"enrolledFactors"],[8357,55,7189,55],[8357,56,7189,56,"filter"],[8357,62,7189,62],[8357,63,7189,63,"_ref21"],[8357,69,7189,63],[8358,14,7189,63],[8358,18,7189,66,"uid"],[8358,21,7189,69],[8358,24,7189,69,"_ref21"],[8358,30,7189,69],[8358,31,7189,66,"uid"],[8358,34,7189,69],[8359,14,7189,69],[8359,21,7189,76,"uid"],[8359,24,7189,79],[8359,29,7189,84,"mfaEnrollmentId"],[8359,44,7189,99],[8360,12,7189,99],[8360,14,7189,100],[8361,12,7190,12],[8362,12,7191,12],[8363,12,7192,12],[8364,12,7193,12],[8365,12,7194,12],[8365,18,7194,18],[8365,22,7194,22],[8365,23,7194,23,"user"],[8365,27,7194,27],[8365,28,7194,28,"_updateTokensIfNecessary"],[8365,52,7194,52],[8365,53,7194,53,"idTokenResponse"],[8365,68,7194,68],[8365,69,7194,69],[8366,12,7195,12],[8366,18,7195,18],[8366,22,7195,22],[8366,23,7195,23,"user"],[8366,27,7195,27],[8366,28,7195,28,"reload"],[8366,34,7195,34],[8366,35,7195,35],[8366,36,7195,36],[8367,10,7196,8],[8367,11,7196,9],[8367,12,7197,8],[8367,19,7197,15,"e"],[8367,20,7197,16],[8367,22,7197,18],[8368,12,7198,12],[8368,18,7198,18,"e"],[8368,19,7198,19],[8369,10,7199,8],[8370,8,7200,4],[8370,9,7200,5],[8371,8,7200,5],[8371,17,7180,10,"unenroll"],[8371,25,7180,18,"unenroll"],[8371,26,7180,18,"_x193"],[8371,31,7180,18],[8372,10,7180,18],[8372,17,7180,18,"_unenroll"],[8372,26,7180,18],[8372,27,7180,18,"apply"],[8372,32,7180,18],[8372,39,7180,18,"arguments"],[8372,48,7180,18],[8373,8,7180,18],[8374,8,7180,18],[8374,15,7180,10,"unenroll"],[8374,23,7180,18],[8375,6,7180,18],[8376,4,7180,18],[8377,6,7180,18,"key"],[8377,9,7180,18],[8378,6,7180,18,"value"],[8378,11,7180,18],[8378,13,7162,4],[8378,22,7162,11,"_fromUser"],[8378,31,7162,20,"_fromUser"],[8378,32,7162,21,"user"],[8378,36,7162,25],[8378,38,7162,27],[8379,8,7163,8],[8379,15,7163,15],[8379,19,7163,19,"MultiFactorUserImpl"],[8379,38,7163,38],[8379,39,7163,39,"user"],[8379,43,7163,43],[8379,44,7163,44],[8380,6,7164,4],[8381,4,7164,5],[8382,2,7164,5],[8383,2,7202,0],[8383,6,7202,6,"multiFactorUserCache"],[8383,26,7202,26],[8383,29,7202,29],[8383,33,7202,33,"WeakMap"],[8383,40,7202,40],[8383,41,7202,41],[8383,42,7202,42],[8384,2,7203,0],[8385,0,7204,0],[8386,0,7205,0],[8387,0,7206,0],[8388,0,7207,0],[8389,0,7208,0],[8390,0,7209,0],[8391,0,7210,0],[8392,0,7211,0],[8393,0,7212,0],[8394,2,7213,0],[8394,11,7213,9,"multiFactor"],[8394,22,7213,20,"multiFactor"],[8394,23,7213,21,"user"],[8394,27,7213,25],[8394,29,7213,27],[8395,4,7214,4],[8395,8,7214,10,"userModular"],[8395,19,7214,21],[8395,22,7214,24,"util"],[8395,26,7214,28],[8395,27,7214,29,"getModularInstance"],[8395,45,7214,47],[8395,46,7214,48,"user"],[8395,50,7214,52],[8395,51,7214,53],[8396,4,7215,4],[8396,8,7215,8],[8396,9,7215,9,"multiFactorUserCache"],[8396,29,7215,29],[8396,30,7215,30,"has"],[8396,33,7215,33],[8396,34,7215,34,"userModular"],[8396,45,7215,45],[8396,46,7215,46],[8396,48,7215,48],[8397,6,7216,8,"multiFactorUserCache"],[8397,26,7216,28],[8397,27,7216,29,"set"],[8397,30,7216,32],[8397,31,7216,33,"userModular"],[8397,42,7216,44],[8397,44,7216,46,"MultiFactorUserImpl"],[8397,63,7216,65],[8397,64,7216,66,"_fromUser"],[8397,73,7216,75],[8397,74,7216,76,"userModular"],[8397,85,7216,87],[8397,86,7216,88],[8397,87,7216,89],[8398,4,7217,4],[8399,4,7218,4],[8399,11,7218,11,"multiFactorUserCache"],[8399,31,7218,31],[8399,32,7218,32,"get"],[8399,35,7218,35],[8399,36,7218,36,"userModular"],[8399,47,7218,47],[8399,48,7218,48],[8400,2,7219,0],[8401,2,7221,0],[8401,6,7221,4,"name"],[8401,10,7221,8],[8401,13,7221,11],[8401,29,7221,27],[8402,2,7222,0],[8402,6,7222,4,"version"],[8402,13,7222,11],[8402,16,7222,14],[8402,24,7222,22],[8404,2,7224,0],[8405,0,7225,0],[8406,0,7226,0],[8407,0,7227,0],[8408,0,7228,0],[8409,0,7229,0],[8410,0,7230,0],[8411,0,7231,0],[8412,0,7232,0],[8413,0,7233,0],[8414,0,7234,0],[8415,0,7235,0],[8416,0,7236,0],[8417,0,7237,0],[8418,0,7238,0],[8419,0,7239,0],[8420,2,7224,0],[8420,6,7240,6,"AuthInterop"],[8420,17,7240,17],[8421,4,7241,4],[8421,13,7241,4,"AuthInterop"],[8421,25,7241,16,"auth"],[8421,29,7241,20],[8421,31,7241,22],[8422,6,7241,22,"_classCallCheck"],[8422,21,7241,22],[8422,28,7241,22,"AuthInterop"],[8422,39,7241,22],[8423,6,7242,8],[8423,10,7242,12],[8423,11,7242,13,"auth"],[8423,15,7242,17],[8423,18,7242,20,"auth"],[8423,22,7242,24],[8424,6,7243,8],[8424,10,7243,12],[8424,11,7243,13,"internalListeners"],[8424,28,7243,30],[8424,31,7243,33],[8424,35,7243,37,"Map"],[8424,38,7243,40],[8424,39,7243,41],[8424,40,7243,42],[8425,4,7244,4],[8426,4,7244,5],[8426,11,7244,5,"_createClass"],[8426,23,7244,5],[8426,24,7244,5,"AuthInterop"],[8426,35,7244,5],[8427,6,7244,5,"key"],[8427,9,7244,5],[8428,6,7244,5,"value"],[8428,11,7244,5],[8428,13,7245,4],[8428,22,7245,4,"getUid"],[8428,28,7245,10,"getUid"],[8428,29,7245,10],[8428,31,7245,13],[8429,8,7246,8],[8429,12,7246,12],[8429,13,7246,13,"assertAuthConfigured"],[8429,33,7246,33],[8429,34,7246,34],[8429,35,7246,35],[8430,8,7247,8],[8430,15,7247,15],[8430,19,7247,19],[8430,20,7247,20,"auth"],[8430,24,7247,24],[8430,25,7247,25,"currentUser"],[8430,36,7247,36],[8430,38,7247,38,"uid"],[8430,41,7247,41],[8430,45,7247,45],[8430,49,7247,49],[8431,6,7248,4],[8432,4,7248,5],[8433,6,7248,5,"key"],[8433,9,7248,5],[8434,6,7248,5,"value"],[8434,11,7248,5],[8435,8,7248,5],[8435,12,7248,5,"_getToken2"],[8435,22,7248,5],[8435,25,7248,5,"_asyncToGenerator"],[8435,42,7248,5],[8435,43,7249,4],[8435,54,7249,19,"forceRefresh"],[8435,66,7249,31],[8435,68,7249,33],[8436,10,7250,8],[8436,14,7250,12],[8436,15,7250,13,"assertAuthConfigured"],[8436,35,7250,33],[8436,36,7250,34],[8436,37,7250,35],[8437,10,7251,8],[8437,16,7251,14],[8437,20,7251,18],[8437,21,7251,19,"auth"],[8437,25,7251,23],[8437,26,7251,24,"_initializationPromise"],[8437,48,7251,46],[8438,10,7252,8],[8438,14,7252,12],[8438,15,7252,13],[8438,19,7252,17],[8438,20,7252,18,"auth"],[8438,24,7252,22],[8438,25,7252,23,"currentUser"],[8438,36,7252,34],[8438,38,7252,36],[8439,12,7253,12],[8439,19,7253,19],[8439,23,7253,23],[8440,10,7254,8],[8441,10,7255,8],[8441,14,7255,14,"accessToken"],[8441,25,7255,25],[8441,34,7255,34],[8441,38,7255,38],[8441,39,7255,39,"auth"],[8441,43,7255,43],[8441,44,7255,44,"currentUser"],[8441,55,7255,55],[8441,56,7255,56,"getIdToken"],[8441,66,7255,66],[8441,67,7255,67,"forceRefresh"],[8441,79,7255,79],[8441,80,7255,80],[8442,10,7256,8],[8442,17,7256,15],[8443,12,7256,17,"accessToken"],[8444,10,7256,29],[8444,11,7256,30],[8445,8,7257,4],[8445,9,7257,5],[8446,8,7257,5],[8446,17,7249,10,"getToken"],[8446,25,7249,18,"getToken"],[8446,26,7249,18,"_x194"],[8446,31,7249,18],[8447,10,7249,18],[8447,17,7249,18,"_getToken2"],[8447,27,7249,18],[8447,28,7249,18,"apply"],[8447,33,7249,18],[8447,40,7249,18,"arguments"],[8447,49,7249,18],[8448,8,7249,18],[8449,8,7249,18],[8449,15,7249,10,"getToken"],[8449,23,7249,18],[8450,6,7249,18],[8451,4,7249,18],[8452,6,7249,18,"key"],[8452,9,7249,18],[8453,6,7249,18,"value"],[8453,11,7249,18],[8453,13,7258,4],[8453,22,7258,4,"addAuthTokenListener"],[8453,42,7258,24,"addAuthTokenListener"],[8453,43,7258,25,"listener"],[8453,51,7258,33],[8453,53,7258,35],[8454,8,7259,8],[8454,12,7259,12],[8454,13,7259,13,"assertAuthConfigured"],[8454,33,7259,33],[8454,34,7259,34],[8454,35,7259,35],[8455,8,7260,8],[8455,12,7260,12],[8455,16,7260,16],[8455,17,7260,17,"internalListeners"],[8455,34,7260,34],[8455,35,7260,35,"has"],[8455,38,7260,38],[8455,39,7260,39,"listener"],[8455,47,7260,47],[8455,48,7260,48],[8455,50,7260,50],[8456,10,7261,12],[8457,8,7262,8],[8458,8,7263,8],[8458,12,7263,14,"unsubscribe"],[8458,23,7263,25],[8458,26,7263,28],[8458,30,7263,32],[8458,31,7263,33,"auth"],[8458,35,7263,37],[8458,36,7263,38,"onIdTokenChanged"],[8458,52,7263,54],[8458,53,7263,55,"user"],[8458,57,7263,59],[8458,61,7263,63],[8459,10,7264,12,"listener"],[8459,18,7264,20],[8459,19,7264,21,"user"],[8459,23,7264,25],[8459,25,7264,27,"stsTokenManager"],[8459,40,7264,42],[8459,41,7264,43,"accessToken"],[8459,52,7264,54],[8459,56,7264,58],[8459,60,7264,62],[8459,61,7264,63],[8460,8,7265,8],[8460,9,7265,9],[8460,10,7265,10],[8461,8,7266,8],[8461,12,7266,12],[8461,13,7266,13,"internalListeners"],[8461,30,7266,30],[8461,31,7266,31,"set"],[8461,34,7266,34],[8461,35,7266,35,"listener"],[8461,43,7266,43],[8461,45,7266,45,"unsubscribe"],[8461,56,7266,56],[8461,57,7266,57],[8462,8,7267,8],[8462,12,7267,12],[8462,13,7267,13,"updateProactiveRefresh"],[8462,35,7267,35],[8462,36,7267,36],[8462,37,7267,37],[8463,6,7268,4],[8464,4,7268,5],[8465,6,7268,5,"key"],[8465,9,7268,5],[8466,6,7268,5,"value"],[8466,11,7268,5],[8466,13,7269,4],[8466,22,7269,4,"removeAuthTokenListener"],[8466,45,7269,27,"removeAuthTokenListener"],[8466,46,7269,28,"listener"],[8466,54,7269,36],[8466,56,7269,38],[8467,8,7270,8],[8467,12,7270,12],[8467,13,7270,13,"assertAuthConfigured"],[8467,33,7270,33],[8467,34,7270,34],[8467,35,7270,35],[8468,8,7271,8],[8468,12,7271,14,"unsubscribe"],[8468,23,7271,25],[8468,26,7271,28],[8468,30,7271,32],[8468,31,7271,33,"internalListeners"],[8468,48,7271,50],[8468,49,7271,51,"get"],[8468,52,7271,54],[8468,53,7271,55,"listener"],[8468,61,7271,63],[8468,62,7271,64],[8469,8,7272,8],[8469,12,7272,12],[8469,13,7272,13,"unsubscribe"],[8469,24,7272,24],[8469,26,7272,26],[8470,10,7273,12],[8471,8,7274,8],[8472,8,7275,8],[8472,12,7275,12],[8472,13,7275,13,"internalListeners"],[8472,30,7275,30],[8472,31,7275,31,"delete"],[8472,37,7275,37],[8472,38,7275,38,"listener"],[8472,46,7275,46],[8472,47,7275,47],[8473,8,7276,8,"unsubscribe"],[8473,19,7276,19],[8473,20,7276,20],[8473,21,7276,21],[8474,8,7277,8],[8474,12,7277,12],[8474,13,7277,13,"updateProactiveRefresh"],[8474,35,7277,35],[8474,36,7277,36],[8474,37,7277,37],[8475,6,7278,4],[8476,4,7278,5],[8477,6,7278,5,"key"],[8477,9,7278,5],[8478,6,7278,5,"value"],[8478,11,7278,5],[8478,13,7279,4],[8478,22,7279,4,"assertAuthConfigured"],[8478,42,7279,24,"assertAuthConfigured"],[8478,43,7279,24],[8478,45,7279,27],[8479,8,7280,8,"_assert"],[8479,15,7280,15],[8479,16,7280,16],[8479,20,7280,20],[8479,21,7280,21,"auth"],[8479,25,7280,25],[8479,26,7280,26,"_initializationPromise"],[8479,48,7280,48],[8479,50,7280,50],[8479,89,7280,89],[8479,90,7280,90],[8479,140,7280,140],[8479,141,7280,141],[8480,6,7281,4],[8481,4,7281,5],[8482,6,7281,5,"key"],[8482,9,7281,5],[8483,6,7281,5,"value"],[8483,11,7281,5],[8483,13,7282,4],[8483,22,7282,4,"updateProactiveRefresh"],[8483,44,7282,26,"updateProactiveRefresh"],[8483,45,7282,26],[8483,47,7282,29],[8484,8,7283,8],[8484,12,7283,12],[8484,16,7283,16],[8484,17,7283,17,"internalListeners"],[8484,34,7283,34],[8484,35,7283,35,"size"],[8484,39,7283,39],[8484,42,7283,42],[8484,43,7283,43],[8484,45,7283,45],[8485,10,7284,12],[8485,14,7284,16],[8485,15,7284,17,"auth"],[8485,19,7284,21],[8485,20,7284,22,"_startProactiveRefresh"],[8485,42,7284,44],[8485,43,7284,45],[8485,44,7284,46],[8486,8,7285,8],[8486,9,7285,9],[8486,15,7286,13],[8487,10,7287,12],[8487,14,7287,16],[8487,15,7287,17,"auth"],[8487,19,7287,21],[8487,20,7287,22,"_stopProactiveRefresh"],[8487,41,7287,43],[8487,42,7287,44],[8487,43,7287,45],[8488,8,7288,8],[8489,6,7289,4],[8490,4,7289,5],[8491,2,7289,5],[8492,2,7292,0],[8493,0,7293,0],[8494,0,7294,0],[8495,0,7295,0],[8496,0,7296,0],[8497,0,7297,0],[8498,0,7298,0],[8499,0,7299,0],[8500,0,7300,0],[8501,0,7301,0],[8502,0,7302,0],[8503,0,7303,0],[8504,0,7304,0],[8505,0,7305,0],[8506,0,7306,0],[8507,0,7307,0],[8508,2,7308,0],[8508,11,7308,9,"getVersionForPlatform"],[8508,32,7308,30,"getVersionForPlatform"],[8508,33,7308,31,"clientPlatform"],[8508,47,7308,45],[8508,49,7308,47],[8509,4,7309,4],[8509,12,7309,12,"clientPlatform"],[8509,26,7309,26],[8510,6,7310,8],[8510,11,7310,13],[8510,17,7310,19],[8510,18,7310,20],[8511,8,7311,12],[8511,15,7311,19],[8511,21,7311,25],[8512,6,7312,8],[8512,11,7312,13],[8512,24,7312,26],[8512,25,7312,27],[8513,8,7313,12],[8513,15,7313,19],[8513,19,7313,23],[8514,6,7314,8],[8514,11,7314,13],[8514,19,7314,21],[8514,20,7314,22],[8515,8,7315,12],[8515,15,7315,19],[8515,26,7315,30],[8516,6,7316,8],[8516,11,7316,13],[8516,20,7316,22],[8516,21,7316,23],[8517,8,7317,12],[8517,15,7317,19],[8517,24,7317,28],[8518,6,7318,8],[8518,11,7318,13],[8518,25,7318,27],[8518,26,7318,28],[8519,8,7319,12],[8519,15,7319,19],[8519,30,7319,34],[8520,6,7320,8],[8521,8,7321,12],[8521,15,7321,19,"undefined"],[8521,24,7321,28],[8522,4,7322,4],[8523,2,7323,0],[8524,2,7324,0],[8525,2,7325,0],[8525,11,7325,9,"registerAuth"],[8525,23,7325,21,"registerAuth"],[8525,24,7325,22,"clientPlatform"],[8525,38,7325,36],[8525,40,7325,38],[8526,4,7326,4,"app"],[8526,7,7326,7],[8526,8,7326,8,"_registerComponent"],[8526,26,7326,26],[8526,27,7326,27],[8526,31,7326,31,"component"],[8526,40,7326,40],[8526,41,7326,41,"Component"],[8526,50,7326,50],[8526,51,7326,51],[8526,57,7326,57],[8526,58,7326,58],[8526,85,7326,85],[8526,86,7326,86,"container"],[8526,95,7326,95],[8526,97,7326,95,"_ref22"],[8526,103,7326,95],[8526,108,7326,119],[8527,6,7326,119],[8527,10,7326,108,"deps"],[8527,14,7326,112],[8527,17,7326,112,"_ref22"],[8527,23,7326,112],[8527,24,7326,99,"options"],[8527,31,7326,106],[8528,6,7327,8],[8528,10,7327,14,"app"],[8528,13,7327,17],[8528,16,7327,20,"container"],[8528,25,7327,29],[8528,26,7327,30,"getProvider"],[8528,37,7327,41],[8528,38,7327,42],[8528,43,7327,47],[8528,44,7327,48],[8528,45,7327,49,"getImmediate"],[8528,57,7327,61],[8528,58,7327,62],[8528,59,7327,63],[8529,6,7328,8],[8529,10,7328,14,"heartbeatServiceProvider"],[8529,34,7328,38],[8529,37,7328,41,"container"],[8529,46,7328,50],[8529,47,7328,51,"getProvider"],[8529,58,7328,62],[8529,59,7328,63],[8529,70,7328,74],[8529,71,7328,75],[8530,6,7329,8],[8530,10,7329,14,"appCheckServiceProvider"],[8530,33,7329,37],[8530,36,7329,40,"container"],[8530,45,7329,49],[8530,46,7329,50,"getProvider"],[8530,57,7329,61],[8530,58,7329,62],[8530,78,7329,82],[8530,79,7329,83],[8531,6,7330,8],[8531,10,7330,8,"_app$options"],[8531,22,7330,8],[8531,25,7330,39,"app"],[8531,28,7330,42],[8531,29,7330,43,"options"],[8531,36,7330,50],[8532,8,7330,16,"apiKey"],[8532,14,7330,22],[8532,17,7330,22,"_app$options"],[8532,29,7330,22],[8532,30,7330,16,"apiKey"],[8532,36,7330,22],[8533,8,7330,24,"authDomain"],[8533,18,7330,34],[8533,21,7330,34,"_app$options"],[8533,33,7330,34],[8533,34,7330,24,"authDomain"],[8533,44,7330,34],[8534,6,7331,8,"_assert"],[8534,13,7331,15],[8534,14,7331,16,"apiKey"],[8534,20,7331,22],[8534,24,7331,26],[8534,25,7331,27,"apiKey"],[8534,31,7331,33],[8534,32,7331,34,"includes"],[8534,40,7331,42],[8534,41,7331,43],[8534,44,7331,46],[8534,45,7331,47],[8534,47,7331,49],[8534,64,7331,66],[8534,65,7331,67],[8534,102,7331,104],[8535,8,7331,106,"appName"],[8535,15,7331,113],[8535,17,7331,115,"app"],[8535,20,7331,118],[8535,21,7331,119,"name"],[8536,6,7331,124],[8536,7,7331,125],[8536,8,7331,126],[8537,6,7332,8],[8537,10,7332,14,"config"],[8537,16,7332,20],[8537,19,7332,23],[8538,8,7333,12,"apiKey"],[8538,14,7333,18],[8539,8,7334,12,"authDomain"],[8539,18,7334,22],[8540,8,7335,12,"clientPlatform"],[8540,22,7335,26],[8541,8,7336,12,"apiHost"],[8541,15,7336,19],[8541,17,7336,21],[8541,49,7336,53],[8541,50,7336,54],[8542,8,7337,12,"tokenApiHost"],[8542,20,7337,24],[8542,22,7337,26],[8542,50,7337,54],[8542,51,7337,55],[8543,8,7338,12,"apiScheme"],[8543,17,7338,21],[8543,19,7338,23],[8543,26,7338,30],[8543,27,7338,31],[8544,8,7339,12,"sdkClientVersion"],[8544,24,7339,28],[8544,26,7339,30,"_getClientVersion"],[8544,43,7339,47],[8544,44,7339,48,"clientPlatform"],[8544,58,7339,62],[8545,6,7340,8],[8545,7,7340,9],[8546,6,7341,8],[8546,10,7341,14,"authInstance"],[8546,22,7341,26],[8546,25,7341,29],[8546,29,7341,33,"AuthImpl"],[8546,37,7341,41],[8546,38,7341,42,"app"],[8546,41,7341,45],[8546,43,7341,47,"heartbeatServiceProvider"],[8546,67,7341,71],[8546,69,7341,73,"appCheckServiceProvider"],[8546,92,7341,96],[8546,94,7341,98,"config"],[8546,100,7341,104],[8546,101,7341,105],[8547,6,7342,8,"_initializeAuthInstance"],[8547,29,7342,31],[8547,30,7342,32,"authInstance"],[8547,42,7342,44],[8547,44,7342,46,"deps"],[8547,48,7342,50],[8547,49,7342,51],[8548,6,7343,8],[8548,13,7343,15,"authInstance"],[8548,25,7343,27],[8549,4,7344,4],[8549,5,7344,5],[8549,7,7344,7],[8549,15,7344,15],[8549,16,7344,16],[8549,42,7344,42],[8550,4,7345,8],[8551,0,7346,0],[8552,0,7347,0],[8553,0,7348,0],[8553,7,7345,8],[8553,8,7349,9,"setInstantiationMode"],[8553,28,7349,29],[8553,29,7349,30],[8553,39,7349,40],[8553,40,7349,41],[8553,72,7349,73],[8554,4,7350,8],[8555,0,7351,0],[8556,0,7352,0],[8557,0,7353,0],[8557,7,7350,8],[8557,8,7354,9,"setInstanceCreatedCallback"],[8557,34,7354,35],[8557,35,7354,36],[8557,36,7354,37,"container"],[8557,45,7354,46],[8557,47,7354,48,"_instanceIdentifier"],[8557,66,7354,67],[8557,68,7354,69,"_instance"],[8557,77,7354,78],[8557,82,7354,83],[8558,6,7355,8],[8558,10,7355,14,"authInternalProvider"],[8558,30,7355,34],[8558,33,7355,37,"container"],[8558,42,7355,46],[8558,43,7355,47,"getProvider"],[8558,54,7355,58],[8558,55,7355,59],[8558,70,7355,74],[8558,71,7355,75],[8558,105,7355,109],[8558,106,7355,110],[8559,6,7356,8,"authInternalProvider"],[8559,26,7356,28],[8559,27,7356,29,"initialize"],[8559,37,7356,39],[8559,38,7356,40],[8559,39,7356,41],[8560,4,7357,4],[8560,5,7357,5],[8560,6,7357,6],[8560,7,7357,7],[8561,4,7358,4,"app"],[8561,7,7358,7],[8561,8,7358,8,"_registerComponent"],[8561,26,7358,26],[8561,27,7358,27],[8561,31,7358,31,"component"],[8561,40,7358,40],[8561,41,7358,41,"Component"],[8561,50,7358,50],[8561,51,7358,51],[8561,66,7358,66],[8561,67,7358,67],[8561,103,7358,103,"container"],[8561,112,7358,112],[8561,116,7358,116],[8562,6,7359,8],[8562,10,7359,14,"auth"],[8562,14,7359,18],[8562,17,7359,21,"_castAuth"],[8562,26,7359,30],[8562,27,7359,31,"container"],[8562,36,7359,40],[8562,37,7359,41,"getProvider"],[8562,48,7359,52],[8562,49,7359,53],[8562,55,7359,59],[8562,56,7359,60],[8562,81,7359,85],[8562,82,7359,86],[8562,83,7359,87,"getImmediate"],[8562,95,7359,99],[8562,96,7359,100],[8562,97,7359,101],[8562,98,7359,102],[8563,6,7360,8],[8563,13,7360,15],[8563,14,7360,16,"auth"],[8563,18,7360,20],[8563,22,7360,24],[8563,26,7360,28,"AuthInterop"],[8563,37,7360,39],[8563,38,7360,40,"auth"],[8563,42,7360,44],[8563,43,7360,45],[8563,45,7360,47,"auth"],[8563,49,7360,51],[8563,50,7360,52],[8564,4,7361,4],[8564,5,7361,5],[8564,7,7361,7],[8564,16,7361,16],[8564,17,7361,17],[8564,44,7361,44],[8564,45,7361,45],[8564,46,7361,46,"setInstantiationMode"],[8564,66,7361,66],[8564,67,7361,67],[8564,77,7361,77],[8564,78,7361,78],[8564,110,7361,110],[8564,111,7361,111],[8564,112,7361,112],[8565,4,7362,4,"app"],[8565,7,7362,7],[8565,8,7362,8,"registerVersion"],[8565,23,7362,23],[8565,24,7362,24,"name"],[8565,28,7362,28],[8565,30,7362,30,"version"],[8565,37,7362,37],[8565,39,7362,39,"getVersionForPlatform"],[8565,60,7362,60],[8565,61,7362,61,"clientPlatform"],[8565,75,7362,75],[8565,76,7362,76],[8565,77,7362,77],[8566,4,7363,4],[8567,4,7364,4,"app"],[8567,7,7364,7],[8567,8,7364,8,"registerVersion"],[8567,23,7364,23],[8567,24,7364,24,"name"],[8567,28,7364,28],[8567,30,7364,30,"version"],[8567,37,7364,37],[8567,39,7364,39],[8567,48,7364,48],[8567,49,7364,49],[8568,2,7365,0],[8570,2,7367,0],[8571,0,7368,0],[8572,0,7369,0],[8573,0,7370,0],[8574,0,7371,0],[8575,0,7372,0],[8576,0,7373,0],[8577,0,7374,0],[8578,0,7375,0],[8579,0,7376,0],[8580,0,7377,0],[8581,0,7378,0],[8582,0,7379,0],[8583,0,7380,0],[8584,0,7381,0],[8585,0,7382,0],[8586,2,7383,0],[8587,0,7384,0],[8588,0,7385,0],[8589,0,7386,0],[8590,0,7387,0],[8591,2,7388,0],[8591,6,7388,6,"FactorId"],[8591,14,7388,14],[8591,17,7388,17],[8592,4,7389,4],[8593,4,7390,4,"PHONE"],[8593,9,7390,9],[8593,11,7390,11],[8593,18,7390,18],[8594,4,7391,4,"TOTP"],[8594,8,7391,8],[8594,10,7391,10],[8595,2,7392,0],[8595,3,7392,1],[8596,2,7393,0],[8597,0,7394,0],[8598,0,7395,0],[8599,0,7396,0],[8600,0,7397,0],[8601,2,7398,0],[8601,6,7398,6,"ProviderId"],[8601,16,7398,16],[8601,19,7398,19],[8602,4,7399,4],[8603,4,7400,4,"FACEBOOK"],[8603,12,7400,12],[8603,14,7400,14],[8603,28,7400,28],[8604,4,7401,4],[8605,4,7402,4,"GITHUB"],[8605,10,7402,10],[8605,12,7402,12],[8605,24,7402,24],[8606,4,7403,4],[8607,4,7404,4,"GOOGLE"],[8607,10,7404,10],[8607,12,7404,12],[8607,24,7404,24],[8608,4,7405,4],[8609,4,7406,4,"PASSWORD"],[8609,12,7406,12],[8609,14,7406,14],[8609,24,7406,24],[8610,4,7407,4],[8611,4,7408,4,"PHONE"],[8611,9,7408,9],[8611,11,7408,11],[8611,18,7408,18],[8612,4,7409,4],[8613,4,7410,4,"TWITTER"],[8613,11,7410,11],[8613,13,7410,13],[8614,2,7411,0],[8614,3,7411,1],[8615,2,7412,0],[8616,0,7413,0],[8617,0,7414,0],[8618,0,7415,0],[8619,0,7416,0],[8620,2,7417,0],[8620,6,7417,6,"SignInMethod"],[8620,18,7417,18],[8620,21,7417,21],[8621,4,7418,4],[8622,4,7419,4,"EMAIL_LINK"],[8622,14,7419,14],[8622,16,7419,16],[8622,27,7419,27],[8623,4,7420,4],[8624,4,7421,4,"EMAIL_PASSWORD"],[8624,18,7421,18],[8624,20,7421,20],[8624,30,7421,30],[8625,4,7422,4],[8626,4,7423,4,"FACEBOOK"],[8626,12,7423,12],[8626,14,7423,14],[8626,28,7423,28],[8627,4,7424,4],[8628,4,7425,4,"GITHUB"],[8628,10,7425,10],[8628,12,7425,12],[8628,24,7425,24],[8629,4,7426,4],[8630,4,7427,4,"GOOGLE"],[8630,10,7427,10],[8630,12,7427,12],[8630,24,7427,24],[8631,4,7428,4],[8632,4,7429,4,"PHONE"],[8632,9,7429,9],[8632,11,7429,11],[8632,18,7429,18],[8633,4,7430,4],[8634,4,7431,4,"TWITTER"],[8634,11,7431,11],[8634,13,7431,13],[8635,2,7432,0],[8635,3,7432,1],[8636,2,7433,0],[8637,0,7434,0],[8638,0,7435,0],[8639,0,7436,0],[8640,0,7437,0],[8641,2,7438,0],[8641,6,7438,6,"OperationType"],[8641,19,7438,19],[8641,22,7438,22],[8642,4,7439,4],[8643,4,7440,4,"LINK"],[8643,8,7440,8],[8643,10,7440,10],[8643,16,7440,16],[8644,4,7441,4],[8645,4,7442,4,"REAUTHENTICATE"],[8645,18,7442,18],[8645,20,7442,20],[8645,36,7442,36],[8646,4,7443,4],[8647,4,7444,4,"SIGN_IN"],[8647,11,7444,11],[8647,13,7444,13],[8648,2,7445,0],[8648,3,7445,1],[8649,2,7446,0],[8650,0,7447,0],[8651,0,7448,0],[8652,0,7449,0],[8653,0,7450,0],[8654,2,7451,0],[8654,6,7451,6,"ActionCodeOperation"],[8654,25,7451,25],[8654,28,7451,28],[8655,4,7452,4],[8656,4,7453,4,"EMAIL_SIGNIN"],[8656,16,7453,16],[8656,18,7453,18],[8656,32,7453,32],[8657,4,7454,4],[8658,4,7455,4,"PASSWORD_RESET"],[8658,18,7455,18],[8658,20,7455,20],[8658,36,7455,36],[8659,4,7456,4],[8660,4,7457,4,"RECOVER_EMAIL"],[8660,17,7457,17],[8660,19,7457,19],[8660,34,7457,34],[8661,4,7458,4],[8662,4,7459,4,"REVERT_SECOND_FACTOR_ADDITION"],[8662,33,7459,33],[8662,35,7459,35],[8662,66,7459,66],[8663,4,7460,4],[8664,4,7461,4,"VERIFY_AND_CHANGE_EMAIL"],[8664,27,7461,27],[8664,29,7461,29],[8664,54,7461,54],[8665,4,7462,4],[8666,4,7463,4,"VERIFY_EMAIL"],[8666,16,7463,16],[8666,18,7463,18],[8667,2,7464,0],[8667,3,7464,1],[8669,2,7466,0],[8670,0,7467,0],[8671,0,7468,0],[8672,0,7469,0],[8673,0,7470,0],[8674,0,7471,0],[8675,0,7472,0],[8676,0,7473,0],[8677,0,7474,0],[8678,0,7475,0],[8679,0,7476,0],[8680,0,7477,0],[8681,0,7478,0],[8682,0,7479,0],[8683,0,7480,0],[8684,0,7481,0],[8685,2,7482,0],[8685,11,7482,9,"startSignInPhoneMfa"],[8685,30,7482,28,"startSignInPhoneMfa"],[8685,31,7482,29,"auth"],[8685,35,7482,33],[8685,37,7482,35,"request"],[8685,44,7482,42],[8685,46,7482,44],[8686,4,7483,4],[8686,11,7483,11,"_performApiRequest"],[8686,29,7483,29],[8686,30,7483,30,"auth"],[8686,34,7483,34],[8686,36,7483,36],[8686,42,7483,42],[8686,43,7483,43],[8686,66,7483,66],[8686,96,7483,96],[8686,97,7483,97],[8686,131,7483,131,"_addTidIfNecessary"],[8686,149,7483,149],[8686,150,7483,150,"auth"],[8686,154,7483,154],[8686,156,7483,156,"request"],[8686,163,7483,163],[8686,164,7483,164],[8686,165,7483,165],[8687,2,7484,0],[8688,2,7485,0],[8688,11,7485,9,"finalizeSignInPhoneMfa"],[8688,33,7485,31,"finalizeSignInPhoneMfa"],[8688,34,7485,32,"auth"],[8688,38,7485,36],[8688,40,7485,38,"request"],[8688,47,7485,45],[8688,49,7485,47],[8689,4,7486,4],[8689,11,7486,11,"_performApiRequest"],[8689,29,7486,29],[8689,30,7486,30,"auth"],[8689,34,7486,34],[8689,36,7486,36],[8689,42,7486,42],[8689,43,7486,43],[8689,66,7486,66],[8689,99,7486,99],[8689,100,7486,100],[8689,137,7486,137,"_addTidIfNecessary"],[8689,155,7486,155],[8689,156,7486,156,"auth"],[8689,160,7486,160],[8689,162,7486,162,"request"],[8689,169,7486,169],[8689,170,7486,170],[8689,171,7486,171],[8690,2,7487,0],[8691,2,7488,0],[8691,11,7488,9,"finalizeSignInTotpMfa"],[8691,32,7488,30,"finalizeSignInTotpMfa"],[8691,33,7488,31,"auth"],[8691,37,7488,35],[8691,39,7488,37,"request"],[8691,46,7488,44],[8691,48,7488,46],[8692,4,7489,4],[8692,11,7489,11,"_performApiRequest"],[8692,29,7489,29],[8692,30,7489,30,"auth"],[8692,34,7489,34],[8692,36,7489,36],[8692,42,7489,42],[8692,43,7489,43],[8692,66,7489,66],[8692,99,7489,99],[8692,100,7489,100],[8692,137,7489,137,"_addTidIfNecessary"],[8692,155,7489,155],[8692,156,7489,156,"auth"],[8692,160,7489,160],[8692,162,7489,162,"request"],[8692,169,7489,169],[8692,170,7489,170],[8692,171,7489,171],[8693,2,7490,0],[8695,2,7492,0],[8696,0,7493,0],[8697,0,7494,0],[8698,0,7495,0],[8699,0,7496,0],[8700,0,7497,0],[8701,0,7498,0],[8702,0,7499,0],[8703,0,7500,0],[8704,0,7501,0],[8705,0,7502,0],[8706,0,7503,0],[8707,0,7504,0],[8708,0,7505,0],[8709,0,7506,0],[8710,0,7507,0],[8711,2,7508,0],[8712,0,7509,0],[8713,0,7510,0],[8714,0,7511,0],[8715,2,7512,0],[8715,11,7512,9,"_window"],[8715,18,7512,16,"_window"],[8715,19,7512,16],[8715,21,7512,19],[8716,4,7513,4],[8716,11,7513,11,"window"],[8716,17,7513,17],[8717,2,7514,0],[8718,2,7515,0],[8718,11,7515,9,"_setWindowLocation"],[8718,29,7515,27,"_setWindowLocation"],[8718,30,7515,28,"url"],[8718,33,7515,31],[8718,35,7515,33],[8719,4,7516,4,"_window"],[8719,11,7516,11],[8719,12,7516,12],[8719,13,7516,13],[8719,14,7516,14,"location"],[8719,22,7516,22],[8719,23,7516,23,"href"],[8719,27,7516,27],[8719,30,7516,30,"url"],[8719,33,7516,33],[8720,2,7517,0],[8722,2,7519,0],[8723,0,7520,0],[8724,0,7521,0],[8725,0,7522,0],[8726,0,7523,0],[8727,0,7524,0],[8728,0,7525,0],[8729,0,7526,0],[8730,0,7527,0],[8731,0,7528,0],[8732,0,7529,0],[8733,0,7530,0],[8734,0,7531,0],[8735,0,7532,0],[8736,0,7533,0],[8737,0,7534,0],[8738,2,7535,0],[8738,11,7535,9,"_isWorker"],[8738,20,7535,18,"_isWorker"],[8738,21,7535,18],[8738,23,7535,21],[8739,4,7536,4],[8739,11,7536,12],[8739,18,7536,19,"_window"],[8739,25,7536,26],[8739,26,7536,27],[8739,27,7536,28],[8739,28,7536,29],[8739,47,7536,48],[8739,48,7536,49],[8739,53,7536,54],[8739,64,7536,65],[8739,68,7537,8],[8739,75,7537,15,"_window"],[8739,82,7537,22],[8739,83,7537,23],[8739,84,7537,24],[8739,85,7537,25],[8739,100,7537,40],[8739,101,7537,41],[8739,106,7537,46],[8739,116,7537,56],[8740,2,7538,0],[8741,2,7538,1],[8741,11,7539,15,"_getActiveServiceWorker"],[8741,34,7539,38,"_getActiveServiceWorker"],[8741,35,7539,38],[8742,4,7539,38],[8742,11,7539,38,"_getActiveServiceWorker2"],[8742,35,7539,38],[8742,36,7539,38,"apply"],[8742,41,7539,38],[8742,48,7539,38,"arguments"],[8742,57,7539,38],[8743,2,7539,38],[8744,2,7539,38],[8744,11,7539,38,"_getActiveServiceWorker2"],[8744,36,7539,38],[8745,4,7539,38,"_getActiveServiceWorker2"],[8745,28,7539,38],[8745,31,7539,38,"_asyncToGenerator"],[8745,48,7539,38],[8745,49,7539,0],[8745,62,7539,41],[8746,6,7540,4],[8746,10,7540,8],[8746,11,7540,9,"navigator"],[8746,20,7540,18],[8746,22,7540,20,"serviceWorker"],[8746,35,7540,33],[8746,37,7540,35],[8747,8,7541,8],[8747,15,7541,15],[8747,19,7541,19],[8748,6,7542,4],[8749,6,7543,4],[8749,10,7543,8],[8750,8,7544,8],[8750,12,7544,14,"registration"],[8750,24,7544,26],[8750,33,7544,35,"navigator"],[8750,42,7544,44],[8750,43,7544,45,"serviceWorker"],[8750,56,7544,58],[8750,57,7544,59,"ready"],[8750,62,7544,64],[8751,8,7545,8],[8751,15,7545,15,"registration"],[8751,27,7545,27],[8751,28,7545,28,"active"],[8751,34,7545,34],[8752,6,7546,4],[8752,7,7546,5],[8752,8,7547,4],[8752,14,7547,10],[8753,8,7548,8],[8753,15,7548,15],[8753,19,7548,19],[8754,6,7549,4],[8755,4,7550,0],[8755,5,7550,1],[8756,4,7550,1],[8756,11,7550,1,"_getActiveServiceWorker2"],[8756,35,7550,1],[8756,36,7550,1,"apply"],[8756,41,7550,1],[8756,48,7550,1,"arguments"],[8756,57,7550,1],[8757,2,7550,1],[8758,2,7551,0],[8758,11,7551,9,"_getServiceWorkerController"],[8758,38,7551,36,"_getServiceWorkerController"],[8758,39,7551,36],[8758,41,7551,39],[8759,4,7552,4],[8759,11,7552,11,"navigator"],[8759,20,7552,20],[8759,22,7552,22,"serviceWorker"],[8759,35,7552,35],[8759,37,7552,37,"controller"],[8759,47,7552,47],[8759,51,7552,51],[8759,55,7552,55],[8760,2,7553,0],[8761,2,7554,0],[8761,11,7554,9,"_getWorkerGlobalScope"],[8761,32,7554,30,"_getWorkerGlobalScope"],[8761,33,7554,30],[8761,35,7554,33],[8762,4,7555,4],[8762,11,7555,11,"_isWorker"],[8762,20,7555,20],[8762,21,7555,21],[8762,22,7555,22],[8762,25,7555,25,"self"],[8762,29,7555,29],[8762,32,7555,32],[8762,36,7555,36],[8763,2,7556,0],[8765,2,7558,0],[8766,0,7559,0],[8767,0,7560,0],[8768,0,7561,0],[8769,0,7562,0],[8770,0,7563,0],[8771,0,7564,0],[8772,0,7565,0],[8773,0,7566,0],[8774,0,7567,0],[8775,0,7568,0],[8776,0,7569,0],[8777,0,7570,0],[8778,0,7571,0],[8779,0,7572,0],[8780,0,7573,0],[8781,2,7574,0],[8782,2,7575,0],[8783,2,7576,0],[8783,6,7576,6,"_JSLOAD_CALLBACK"],[8783,22,7576,22],[8783,25,7576,25,"_generateCallbackName"],[8783,46,7576,46],[8783,47,7576,47],[8783,52,7576,52],[8783,53,7576,53],[8784,2,7577,0],[8784,6,7577,6,"NETWORK_TIMEOUT_DELAY"],[8784,27,7577,27],[8784,30,7577,30],[8784,34,7577,34,"Delay"],[8784,39,7577,39],[8784,40,7577,40],[8784,45,7577,45],[8784,47,7577,47],[8784,52,7577,52],[8784,53,7577,53],[8785,2,7578,0],[8786,0,7579,0],[8787,0,7580,0],[8788,2,7578,0],[8788,6,7581,6,"ReCaptchaLoaderImpl"],[8788,25,7581,25],[8789,4,7582,4],[8789,13,7582,4,"ReCaptchaLoaderImpl"],[8789,33,7582,4],[8789,35,7582,18],[8790,6,7582,18,"_classCallCheck"],[8790,21,7582,18],[8790,28,7582,18,"ReCaptchaLoaderImpl"],[8790,47,7582,18],[8791,6,7583,8],[8791,10,7583,12],[8791,11,7583,13,"hostLanguage"],[8791,23,7583,25],[8791,26,7583,28],[8791,28,7583,30],[8792,6,7584,8],[8792,10,7584,12],[8792,11,7584,13,"counter"],[8792,18,7584,20],[8792,21,7584,23],[8792,22,7584,24],[8793,6,7585,8],[8794,0,7586,0],[8795,0,7587,0],[8796,0,7588,0],[8797,0,7589,0],[8798,6,7590,8],[8798,10,7590,12],[8798,11,7590,13,"librarySeparatelyLoaded"],[8798,34,7590,36],[8798,37,7590,39],[8798,38,7590,40],[8798,39,7590,41,"_window"],[8798,46,7590,48],[8798,47,7590,49],[8798,48,7590,50],[8798,49,7590,51,"grecaptcha"],[8798,59,7590,61],[8798,61,7590,63,"render"],[8798,67,7590,69],[8799,4,7591,4],[8800,4,7591,5],[8800,11,7591,5,"_createClass"],[8800,23,7591,5],[8800,24,7591,5,"ReCaptchaLoaderImpl"],[8800,43,7591,5],[8801,6,7591,5,"key"],[8801,9,7591,5],[8802,6,7591,5,"value"],[8802,11,7591,5],[8802,13,7592,4],[8802,22,7592,4,"load"],[8802,26,7592,8,"load"],[8802,27,7592,9,"auth"],[8802,31,7592,13],[8802,33,7592,24],[8803,8,7592,24],[8803,12,7592,15,"hl"],[8803,14,7592,17],[8803,17,7592,17,"arguments"],[8803,26,7592,17],[8803,27,7592,17,"length"],[8803,33,7592,17],[8803,41,7592,17,"arguments"],[8803,50,7592,17],[8803,58,7592,17,"undefined"],[8803,67,7592,17],[8803,70,7592,17,"arguments"],[8803,79,7592,17],[8803,85,7592,20],[8803,87,7592,22],[8804,8,7593,8,"_assert"],[8804,15,7593,15],[8804,16,7593,16,"isHostLanguageValid"],[8804,35,7593,35],[8804,36,7593,36,"hl"],[8804,38,7593,38],[8804,39,7593,39],[8804,41,7593,41,"auth"],[8804,45,7593,45],[8804,47,7593,47],[8804,63,7593,63],[8804,64,7593,64],[8804,98,7593,98],[8804,99,7593,99],[8805,8,7594,8],[8805,12,7594,12],[8805,16,7594,16],[8805,17,7594,17,"shouldResolveImmediately"],[8805,41,7594,41],[8805,42,7594,42,"hl"],[8805,44,7594,44],[8805,45,7594,45],[8805,49,7594,49,"isV2"],[8805,53,7594,53],[8805,54,7594,54,"_window"],[8805,61,7594,61],[8805,62,7594,62],[8805,63,7594,63],[8805,64,7594,64,"grecaptcha"],[8805,74,7594,74],[8805,75,7594,75],[8805,77,7594,77],[8806,10,7595,12],[8806,17,7595,19,"Promise"],[8806,24,7595,26],[8806,25,7595,27,"resolve"],[8806,32,7595,34],[8806,33,7595,35,"_window"],[8806,40,7595,42],[8806,41,7595,43],[8806,42,7595,44],[8806,43,7595,45,"grecaptcha"],[8806,53,7595,55],[8806,54,7595,56],[8807,8,7596,8],[8808,8,7597,8],[8808,15,7597,15],[8808,19,7597,19,"Promise"],[8808,26,7597,26],[8808,27,7597,27],[8808,28,7597,28,"resolve"],[8808,35,7597,35],[8808,37,7597,37,"reject"],[8808,43,7597,43],[8808,48,7597,48],[8809,10,7598,12],[8809,14,7598,18,"networkTimeout"],[8809,28,7598,32],[8809,31,7598,35,"_window"],[8809,38,7598,42],[8809,39,7598,43],[8809,40,7598,44],[8809,41,7598,45,"setTimeout"],[8809,51,7598,55],[8809,52,7598,56],[8809,58,7598,62],[8810,12,7599,16,"reject"],[8810,18,7599,22],[8810,19,7599,23,"_createError"],[8810,31,7599,35],[8810,32,7599,36,"auth"],[8810,36,7599,40],[8810,38,7599,42],[8810,62,7599,66],[8810,63,7599,67],[8810,105,7599,109],[8810,106,7599,110],[8810,107,7599,111],[8811,10,7600,12],[8811,11,7600,13],[8811,13,7600,15,"NETWORK_TIMEOUT_DELAY"],[8811,34,7600,36],[8811,35,7600,37,"get"],[8811,38,7600,40],[8811,39,7600,41],[8811,40,7600,42],[8811,41,7600,43],[8812,10,7601,12,"_window"],[8812,17,7601,19],[8812,18,7601,20],[8812,19,7601,21],[8812,20,7601,22,"_JSLOAD_CALLBACK"],[8812,36,7601,38],[8812,37,7601,39],[8812,40,7601,42],[8812,46,7601,48],[8813,12,7602,16,"_window"],[8813,19,7602,23],[8813,20,7602,24],[8813,21,7602,25],[8813,22,7602,26,"clearTimeout"],[8813,34,7602,38],[8813,35,7602,39,"networkTimeout"],[8813,49,7602,53],[8813,50,7602,54],[8814,12,7603,16],[8814,19,7603,23,"_window"],[8814,26,7603,30],[8814,27,7603,31],[8814,28,7603,32],[8814,29,7603,33,"_JSLOAD_CALLBACK"],[8814,45,7603,49],[8814,46,7603,50],[8815,12,7604,16],[8815,16,7604,22,"recaptcha"],[8815,25,7604,31],[8815,28,7604,34,"_window"],[8815,35,7604,41],[8815,36,7604,42],[8815,37,7604,43],[8815,38,7604,44,"grecaptcha"],[8815,48,7604,54],[8816,12,7605,16],[8816,16,7605,20],[8816,17,7605,21,"recaptcha"],[8816,26,7605,30],[8816,30,7605,34],[8816,31,7605,35,"isV2"],[8816,35,7605,39],[8816,36,7605,40,"recaptcha"],[8816,45,7605,49],[8816,46,7605,50],[8816,48,7605,52],[8817,14,7606,20,"reject"],[8817,20,7606,26],[8817,21,7606,27,"_createError"],[8817,33,7606,39],[8817,34,7606,40,"auth"],[8817,38,7606,44],[8817,40,7606,46],[8817,56,7606,62],[8817,57,7606,63],[8817,91,7606,97],[8817,92,7606,98],[8817,93,7606,99],[8818,14,7607,20],[8819,12,7608,16],[8820,12,7609,16],[8821,12,7610,16],[8822,12,7611,16],[8822,16,7611,22,"render"],[8822,22,7611,28],[8822,25,7611,31,"recaptcha"],[8822,34,7611,40],[8822,35,7611,41,"render"],[8822,41,7611,47],[8823,12,7612,16,"recaptcha"],[8823,21,7612,25],[8823,22,7612,26,"render"],[8823,28,7612,32],[8823,31,7612,35],[8823,32,7612,36,"container"],[8823,41,7612,45],[8823,43,7612,47,"params"],[8823,49,7612,53],[8823,54,7612,58],[8824,14,7613,20],[8824,18,7613,26,"widgetId"],[8824,26,7613,34],[8824,29,7613,37,"render"],[8824,35,7613,43],[8824,36,7613,44,"container"],[8824,45,7613,53],[8824,47,7613,55,"params"],[8824,53,7613,61],[8824,54,7613,62],[8825,14,7614,20],[8825,18,7614,24],[8825,19,7614,25,"counter"],[8825,26,7614,32],[8825,28,7614,34],[8826,14,7615,20],[8826,21,7615,27,"widgetId"],[8826,29,7615,35],[8827,12,7616,16],[8827,13,7616,17],[8828,12,7617,16],[8828,16,7617,20],[8828,17,7617,21,"hostLanguage"],[8828,29,7617,33],[8828,32,7617,36,"hl"],[8828,34,7617,38],[8829,12,7618,16,"resolve"],[8829,19,7618,23],[8829,20,7618,24,"recaptcha"],[8829,29,7618,33],[8829,30,7618,34],[8830,10,7619,12],[8830,11,7619,13],[8831,10,7620,12],[8831,14,7620,18,"url"],[8831,17,7620,21],[8831,20,7620,24],[8831,23,7620,27,"_recaptchaV2ScriptUrl"],[8831,44,7620,48],[8831,45,7620,49],[8831,46,7620,50],[8831,50,7620,54,"util"],[8831,54,7620,58],[8831,55,7620,59,"querystring"],[8831,66,7620,70],[8831,67,7620,71],[8832,12,7621,16,"onload"],[8832,18,7621,22],[8832,20,7621,24,"_JSLOAD_CALLBACK"],[8832,36,7621,40],[8833,12,7622,16,"render"],[8833,18,7622,22],[8833,20,7622,24],[8833,30,7622,34],[8834,12,7623,16,"hl"],[8835,10,7624,12],[8835,11,7624,13],[8835,12,7624,14],[8835,14,7624,16],[8836,10,7625,12,"_loadJS"],[8836,17,7625,19],[8836,18,7625,20,"url"],[8836,21,7625,23],[8836,22,7625,24],[8836,23,7625,25,"catch"],[8836,28,7625,30],[8836,29,7625,31],[8836,35,7625,37],[8837,12,7626,16,"clearTimeout"],[8837,24,7626,28],[8837,25,7626,29,"networkTimeout"],[8837,39,7626,43],[8837,40,7626,44],[8838,12,7627,16,"reject"],[8838,18,7627,22],[8838,19,7627,23,"_createError"],[8838,31,7627,35],[8838,32,7627,36,"auth"],[8838,36,7627,40],[8838,38,7627,42],[8838,54,7627,58],[8838,55,7627,59],[8838,89,7627,93],[8838,90,7627,94],[8838,91,7627,95],[8839,10,7628,12],[8839,11,7628,13],[8839,12,7628,14],[8840,8,7629,8],[8840,9,7629,9],[8840,10,7629,10],[8841,6,7630,4],[8842,4,7630,5],[8843,6,7630,5,"key"],[8843,9,7630,5],[8844,6,7630,5,"value"],[8844,11,7630,5],[8844,13,7631,4],[8844,22,7631,4,"clearedOneInstance"],[8844,40,7631,22,"clearedOneInstance"],[8844,41,7631,22],[8844,43,7631,25],[8845,8,7632,8],[8845,12,7632,12],[8845,13,7632,13,"counter"],[8845,20,7632,20],[8845,22,7632,22],[8846,6,7633,4],[8847,4,7633,5],[8848,6,7633,5,"key"],[8848,9,7633,5],[8849,6,7633,5,"value"],[8849,11,7633,5],[8849,13,7634,4],[8849,22,7634,4,"shouldResolveImmediately"],[8849,46,7634,28,"shouldResolveImmediately"],[8849,47,7634,29,"hl"],[8849,49,7634,31],[8849,51,7634,33],[8850,8,7635,8],[8851,8,7636,8],[8852,8,7637,8],[8853,8,7638,8],[8854,8,7639,8],[8855,8,7640,8],[8856,8,7641,8],[8857,8,7642,8],[8857,15,7642,16],[8857,16,7642,17],[8857,17,7642,18,"_window"],[8857,24,7642,25],[8857,25,7642,26],[8857,26,7642,27],[8857,27,7642,28,"grecaptcha"],[8857,37,7642,38],[8857,39,7642,40,"render"],[8857,45,7642,46],[8857,50,7643,13,"hl"],[8857,52,7643,15],[8857,57,7643,20],[8857,61,7643,24],[8857,62,7643,25,"hostLanguage"],[8857,74,7643,37],[8857,78,7644,16],[8857,82,7644,20],[8857,83,7644,21,"counter"],[8857,90,7644,28],[8857,93,7644,31],[8857,94,7644,32],[8857,98,7645,16],[8857,102,7645,20],[8857,103,7645,21,"librarySeparatelyLoaded"],[8857,126,7645,44],[8857,127,7645,45],[8858,6,7646,4],[8859,4,7646,5],[8860,2,7646,5],[8861,2,7648,0],[8861,11,7648,9,"isHostLanguageValid"],[8861,30,7648,28,"isHostLanguageValid"],[8861,31,7648,29,"hl"],[8861,33,7648,31],[8861,35,7648,33],[8862,4,7649,4],[8862,11,7649,11,"hl"],[8862,13,7649,13],[8862,14,7649,14,"length"],[8862,20,7649,20],[8862,24,7649,24],[8862,25,7649,25],[8862,29,7649,29],[8862,53,7649,53],[8862,54,7649,54,"test"],[8862,58,7649,58],[8862,59,7649,59,"hl"],[8862,61,7649,61],[8862,62,7649,62],[8863,2,7650,0],[8864,2,7650,1],[8864,6,7651,6,"MockReCaptchaLoaderImpl"],[8864,29,7651,29],[8865,4,7651,29],[8865,13,7651,29,"MockReCaptchaLoaderImpl"],[8865,37,7651,29],[8866,6,7651,29,"_classCallCheck"],[8866,21,7651,29],[8866,28,7651,29,"MockReCaptchaLoaderImpl"],[8866,51,7651,29],[8867,4,7651,29],[8868,4,7651,29],[8868,11,7651,29,"_createClass"],[8868,23,7651,29],[8868,24,7651,29,"MockReCaptchaLoaderImpl"],[8868,47,7651,29],[8869,6,7651,29,"key"],[8869,9,7651,29],[8870,6,7651,29,"value"],[8870,11,7651,29],[8871,8,7651,29],[8871,12,7651,29,"_load"],[8871,17,7651,29],[8871,20,7651,29,"_asyncToGenerator"],[8871,37,7651,29],[8871,38,7652,4],[8871,49,7652,15,"auth"],[8871,53,7652,19],[8871,55,7652,21],[8872,10,7653,8],[8872,17,7653,15],[8872,21,7653,19,"MockReCaptcha"],[8872,34,7653,32],[8872,35,7653,33,"auth"],[8872,39,7653,37],[8872,40,7653,38],[8873,8,7654,4],[8873,9,7654,5],[8874,8,7654,5],[8874,17,7652,10,"load"],[8874,21,7652,14,"load"],[8874,22,7652,14,"_x195"],[8874,27,7652,14],[8875,10,7652,14],[8875,17,7652,14,"_load"],[8875,22,7652,14],[8875,23,7652,14,"apply"],[8875,28,7652,14],[8875,35,7652,14,"arguments"],[8875,44,7652,14],[8876,8,7652,14],[8877,8,7652,14],[8877,15,7652,10,"load"],[8877,19,7652,14],[8878,6,7652,14],[8879,4,7652,14],[8880,6,7652,14,"key"],[8880,9,7652,14],[8881,6,7652,14,"value"],[8881,11,7652,14],[8881,13,7655,4],[8881,22,7655,4,"clearedOneInstance"],[8881,40,7655,22,"clearedOneInstance"],[8881,41,7655,22],[8881,43,7655,25],[8881,44,7655,27],[8882,4,7655,28],[8883,2,7655,28],[8884,2,7658,0],[8885,0,7659,0],[8886,0,7660,0],[8887,0,7661,0],[8888,0,7662,0],[8889,0,7663,0],[8890,0,7664,0],[8891,0,7665,0],[8892,0,7666,0],[8893,0,7667,0],[8894,0,7668,0],[8895,0,7669,0],[8896,0,7670,0],[8897,0,7671,0],[8898,0,7672,0],[8899,0,7673,0],[8900,2,7674,0],[8900,6,7674,6,"RECAPTCHA_VERIFIER_TYPE"],[8900,29,7674,29],[8900,32,7674,32],[8900,43,7674,43],[8901,2,7675,0],[8901,6,7675,6,"DEFAULT_PARAMS"],[8901,20,7675,20],[8901,23,7675,23],[8902,4,7676,4,"theme"],[8902,9,7676,9],[8902,11,7676,11],[8902,18,7676,18],[8903,4,7677,4,"type"],[8903,8,7677,8],[8903,10,7677,10],[8904,2,7678,0],[8904,3,7678,1],[8905,2,7679,0],[8906,0,7680,0],[8907,0,7681,0],[8908,0,7682,0],[8909,0,7683,0],[8910,0,7684,0],[8911,0,7685,0],[8912,0,7686,0],[8913,2,7679,0],[8913,6,7687,6,"RecaptchaVerifier"],[8913,23,7687,23],[8914,4,7688,4],[8915,0,7689,0],[8916,0,7690,0],[8917,0,7691,0],[8918,0,7692,0],[8919,0,7693,0],[8920,0,7694,0],[8921,0,7695,0],[8922,0,7696,0],[8923,0,7697,0],[8924,0,7698,0],[8925,0,7699,0],[8926,0,7700,0],[8927,0,7701,0],[8928,0,7702,0],[8929,0,7703,0],[8930,0,7704,0],[8931,0,7705,0],[8932,0,7706,0],[8933,4,7707,4],[8933,13,7707,4,"RecaptchaVerifier"],[8933,31,7707,16,"authExtern"],[8933,41,7707,26],[8933,43,7707,28,"containerOrId"],[8933,56,7707,41],[8933,58,7709,7],[8934,6,7709,7],[8934,10,7707,43,"parameters"],[8934,20,7707,53],[8934,23,7707,53,"arguments"],[8934,32,7707,53],[8934,33,7707,53,"length"],[8934,39,7707,53],[8934,47,7707,53,"arguments"],[8934,56,7707,53],[8934,64,7707,53,"undefined"],[8934,73,7707,53],[8934,76,7707,53,"arguments"],[8934,85,7707,53],[8934,91,7707,56],[8935,8,7708,8],[8935,11,7708,11,"DEFAULT_PARAMS"],[8936,6,7709,4],[8936,7,7709,5],[8937,6,7709,5,"_classCallCheck"],[8937,21,7709,5],[8937,28,7709,5,"RecaptchaVerifier"],[8937,45,7709,5],[8938,6,7710,8],[8938,10,7710,12],[8938,11,7710,13,"parameters"],[8938,21,7710,23],[8938,24,7710,26,"parameters"],[8938,34,7710,36],[8939,6,7711,8],[8940,0,7712,0],[8941,0,7713,0],[8942,0,7714,0],[8943,0,7715,0],[8944,0,7716,0],[8945,6,7717,8],[8945,10,7717,12],[8945,11,7717,13,"type"],[8945,15,7717,17],[8945,18,7717,20,"RECAPTCHA_VERIFIER_TYPE"],[8945,41,7717,43],[8946,6,7718,8],[8946,10,7718,12],[8946,11,7718,13,"destroyed"],[8946,20,7718,22],[8946,23,7718,25],[8946,28,7718,30],[8947,6,7719,8],[8947,10,7719,12],[8947,11,7719,13,"widgetId"],[8947,19,7719,21],[8947,22,7719,24],[8947,26,7719,28],[8948,6,7720,8],[8948,10,7720,12],[8948,11,7720,13,"tokenChangeListeners"],[8948,31,7720,33],[8948,34,7720,36],[8948,38,7720,40,"Set"],[8948,41,7720,43],[8948,42,7720,44],[8948,43,7720,45],[8949,6,7721,8],[8949,10,7721,12],[8949,11,7721,13,"renderPromise"],[8949,24,7721,26],[8949,27,7721,29],[8949,31,7721,33],[8950,6,7722,8],[8950,10,7722,12],[8950,11,7722,13,"recaptcha"],[8950,20,7722,22],[8950,23,7722,25],[8950,27,7722,29],[8951,6,7723,8],[8951,10,7723,12],[8951,11,7723,13,"auth"],[8951,15,7723,17],[8951,18,7723,20,"_castAuth"],[8951,27,7723,29],[8951,28,7723,30,"authExtern"],[8951,38,7723,40],[8951,39,7723,41],[8952,6,7724,8],[8952,10,7724,12],[8952,11,7724,13,"isInvisible"],[8952,22,7724,24],[8952,25,7724,27],[8952,29,7724,31],[8952,30,7724,32,"parameters"],[8952,40,7724,42],[8952,41,7724,43,"size"],[8952,45,7724,47],[8952,50,7724,52],[8952,61,7724,63],[8953,6,7725,8,"_assert"],[8953,13,7725,15],[8953,14,7725,16],[8953,21,7725,23,"document"],[8953,29,7725,31],[8953,34,7725,36],[8953,45,7725,47],[8953,47,7725,49],[8953,51,7725,53],[8953,52,7725,54,"auth"],[8953,56,7725,58],[8953,58,7725,60],[8953,103,7725,105],[8953,104,7725,106],[8953,147,7725,149],[8953,148,7725,150],[8954,6,7726,8],[8954,10,7726,14,"container"],[8954,19,7726,23],[8954,22,7726,26],[8954,29,7726,33,"containerOrId"],[8954,42,7726,46],[8954,47,7726,51],[8954,55,7726,59],[8954,58,7727,14,"document"],[8954,66,7727,22],[8954,67,7727,23,"getElementById"],[8954,81,7727,37],[8954,82,7727,38,"containerOrId"],[8954,95,7727,51],[8954,96,7727,52],[8954,99,7728,14,"containerOrId"],[8954,112,7728,27],[8955,6,7729,8,"_assert"],[8955,13,7729,15],[8955,14,7729,16,"container"],[8955,23,7729,25],[8955,25,7729,27],[8955,29,7729,31],[8955,30,7729,32,"auth"],[8955,34,7729,36],[8955,36,7729,38],[8955,52,7729,54],[8955,53,7729,55],[8955,87,7729,89],[8955,88,7729,90],[8956,6,7730,8],[8956,10,7730,12],[8956,11,7730,13,"container"],[8956,20,7730,22],[8956,23,7730,25,"container"],[8956,32,7730,34],[8957,6,7731,8],[8957,10,7731,12],[8957,11,7731,13,"parameters"],[8957,21,7731,23],[8957,22,7731,24,"callback"],[8957,30,7731,32],[8957,33,7731,35],[8957,37,7731,39],[8957,38,7731,40,"makeTokenCallback"],[8957,55,7731,57],[8957,56,7731,58],[8957,60,7731,62],[8957,61,7731,63,"parameters"],[8957,71,7731,73],[8957,72,7731,74,"callback"],[8957,80,7731,82],[8957,81,7731,83],[8958,6,7732,8],[8958,10,7732,12],[8958,11,7732,13,"_recaptchaLoader"],[8958,27,7732,29],[8958,30,7732,32],[8958,34,7732,36],[8958,35,7732,37,"auth"],[8958,39,7732,41],[8958,40,7732,42,"settings"],[8958,48,7732,50],[8958,49,7732,51,"appVerificationDisabledForTesting"],[8958,82,7732,84],[8958,85,7733,14],[8958,89,7733,18,"MockReCaptchaLoaderImpl"],[8958,112,7733,41],[8958,113,7733,42],[8958,114,7733,43],[8958,117,7734,14],[8958,121,7734,18,"ReCaptchaLoaderImpl"],[8958,140,7734,37],[8958,141,7734,38],[8958,142,7734,39],[8959,6,7735,8],[8959,10,7735,12],[8959,11,7735,13,"validateStartingState"],[8959,32,7735,34],[8959,33,7735,35],[8959,34,7735,36],[8960,6,7736,8],[8961,4,7737,4],[8962,4,7738,4],[8963,0,7739,0],[8964,0,7740,0],[8965,0,7741,0],[8966,0,7742,0],[8967,4,7738,4],[8967,11,7738,4,"_createClass"],[8967,23,7738,4],[8967,24,7738,4,"RecaptchaVerifier"],[8967,41,7738,4],[8968,6,7738,4,"key"],[8968,9,7738,4],[8969,6,7738,4,"value"],[8969,11,7738,4],[8970,8,7738,4],[8970,12,7738,4,"_verify2"],[8970,20,7738,4],[8970,23,7738,4,"_asyncToGenerator"],[8970,40,7738,4],[8970,41,7743,4],[8970,54,7743,19],[8971,10,7744,8],[8971,14,7744,12],[8971,15,7744,13,"assertNotDestroyed"],[8971,33,7744,31],[8971,34,7744,32],[8971,35,7744,33],[8972,10,7745,8],[8972,14,7745,14,"id"],[8972,16,7745,16],[8972,25,7745,25],[8972,29,7745,29],[8972,30,7745,30,"render"],[8972,36,7745,36],[8972,37,7745,37],[8972,38,7745,38],[8973,10,7746,8],[8973,14,7746,14,"recaptcha"],[8973,23,7746,23],[8973,26,7746,26],[8973,30,7746,30],[8973,31,7746,31,"getAssertedRecaptcha"],[8973,51,7746,51],[8973,52,7746,52],[8973,53,7746,53],[8974,10,7747,8],[8974,14,7747,14,"response"],[8974,22,7747,22],[8974,25,7747,25,"recaptcha"],[8974,34,7747,34],[8974,35,7747,35,"getResponse"],[8974,46,7747,46],[8974,47,7747,47,"id"],[8974,49,7747,49],[8974,50,7747,50],[8975,10,7748,8],[8975,14,7748,12,"response"],[8975,22,7748,20],[8975,24,7748,22],[8976,12,7749,12],[8976,19,7749,19,"response"],[8976,27,7749,27],[8977,10,7750,8],[8978,10,7751,8],[8978,17,7751,15],[8978,21,7751,19,"Promise"],[8978,28,7751,26],[8978,29,7751,27,"resolve"],[8978,36,7751,34],[8978,40,7751,38],[8979,12,7752,12],[8979,16,7752,18,"tokenChange"],[8979,27,7752,29],[8979,30,7752,33,"token"],[8979,35,7752,38],[8979,39,7752,43],[8980,14,7753,16],[8980,18,7753,20],[8980,19,7753,21,"token"],[8980,24,7753,26],[8980,26,7753,28],[8981,16,7754,20],[8981,23,7754,27],[8981,24,7754,28],[8982,14,7755,16],[8983,14,7756,16],[8983,18,7756,20],[8983,19,7756,21,"tokenChangeListeners"],[8983,39,7756,41],[8983,40,7756,42,"delete"],[8983,46,7756,48],[8983,47,7756,49,"tokenChange"],[8983,58,7756,60],[8983,59,7756,61],[8984,14,7757,16,"resolve"],[8984,21,7757,23],[8984,22,7757,24,"token"],[8984,27,7757,29],[8984,28,7757,30],[8985,12,7758,12],[8985,13,7758,13],[8986,12,7759,12],[8986,16,7759,16],[8986,17,7759,17,"tokenChangeListeners"],[8986,37,7759,37],[8986,38,7759,38,"add"],[8986,41,7759,41],[8986,42,7759,42,"tokenChange"],[8986,53,7759,53],[8986,54,7759,54],[8987,12,7760,12],[8987,16,7760,16],[8987,20,7760,20],[8987,21,7760,21,"isInvisible"],[8987,32,7760,32],[8987,34,7760,34],[8988,14,7761,16,"recaptcha"],[8988,23,7761,25],[8988,24,7761,26,"execute"],[8988,31,7761,33],[8988,32,7761,34,"id"],[8988,34,7761,36],[8988,35,7761,37],[8989,12,7762,12],[8990,10,7763,8],[8990,11,7763,9],[8990,12,7763,10],[8991,8,7764,4],[8991,9,7764,5],[8992,8,7764,5],[8992,17,7743,10,"verify"],[8992,23,7743,16,"verify"],[8992,24,7743,16],[8993,10,7743,16],[8993,17,7743,16,"_verify2"],[8993,25,7743,16],[8993,26,7743,16,"apply"],[8993,31,7743,16],[8993,38,7743,16,"arguments"],[8993,47,7743,16],[8994,8,7743,16],[8995,8,7743,16],[8995,15,7743,10,"verify"],[8995,21,7743,16],[8996,6,7743,16],[8997,6,7765,4],[8998,0,7766,0],[8999,0,7767,0],[9000,0,7768,0],[9001,0,7769,0],[9002,6,7765,4],[9003,4,7765,4],[9004,6,7765,4,"key"],[9004,9,7765,4],[9005,6,7765,4,"value"],[9005,11,7765,4],[9005,13,7770,4],[9005,22,7770,4,"render"],[9005,28,7770,10,"render"],[9005,29,7770,10],[9005,31,7770,13],[9006,8,7771,8],[9006,12,7771,12],[9007,10,7772,12],[9007,14,7772,16],[9007,15,7772,17,"assertNotDestroyed"],[9007,33,7772,35],[9007,34,7772,36],[9007,35,7772,37],[9008,8,7773,8],[9008,9,7773,9],[9008,10,7774,8],[9008,17,7774,15,"e"],[9008,18,7774,16],[9008,20,7774,18],[9009,10,7775,12],[9010,10,7776,12],[9011,10,7777,12],[9012,10,7778,12],[9012,17,7778,19,"Promise"],[9012,24,7778,26],[9012,25,7778,27,"reject"],[9012,31,7778,33],[9012,32,7778,34,"e"],[9012,33,7778,35],[9012,34,7778,36],[9013,8,7779,8],[9014,8,7780,8],[9014,12,7780,12],[9014,16,7780,16],[9014,17,7780,17,"renderPromise"],[9014,30,7780,30],[9014,32,7780,32],[9015,10,7781,12],[9015,17,7781,19],[9015,21,7781,23],[9015,22,7781,24,"renderPromise"],[9015,35,7781,37],[9016,8,7782,8],[9017,8,7783,8],[9017,12,7783,12],[9017,13,7783,13,"renderPromise"],[9017,26,7783,26],[9017,29,7783,29],[9017,33,7783,33],[9017,34,7783,34,"makeRenderPromise"],[9017,51,7783,51],[9017,52,7783,52],[9017,53,7783,53],[9017,54,7783,54,"catch"],[9017,59,7783,59],[9017,60,7783,60,"e"],[9017,61,7783,61],[9017,65,7783,65],[9018,10,7784,12],[9018,14,7784,16],[9018,15,7784,17,"renderPromise"],[9018,28,7784,30],[9018,31,7784,33],[9018,35,7784,37],[9019,10,7785,12],[9019,16,7785,18,"e"],[9019,17,7785,19],[9020,8,7786,8],[9020,9,7786,9],[9020,10,7786,10],[9021,8,7787,8],[9021,15,7787,15],[9021,19,7787,19],[9021,20,7787,20,"renderPromise"],[9021,33,7787,33],[9022,6,7788,4],[9023,6,7789,4],[9024,4,7789,4],[9025,6,7789,4,"key"],[9025,9,7789,4],[9026,6,7789,4,"value"],[9026,11,7789,4],[9026,13,7790,4],[9026,22,7790,4,"_reset"],[9026,28,7790,10,"_reset"],[9026,29,7790,10],[9026,31,7790,13],[9027,8,7791,8],[9027,12,7791,12],[9027,13,7791,13,"assertNotDestroyed"],[9027,31,7791,31],[9027,32,7791,32],[9027,33,7791,33],[9028,8,7792,8],[9028,12,7792,12],[9028,16,7792,16],[9028,17,7792,17,"widgetId"],[9028,25,7792,25],[9028,30,7792,30],[9028,34,7792,34],[9028,36,7792,36],[9029,10,7793,12],[9029,14,7793,16],[9029,15,7793,17,"getAssertedRecaptcha"],[9029,35,7793,37],[9029,36,7793,38],[9029,37,7793,39],[9029,38,7793,40,"reset"],[9029,43,7793,45],[9029,44,7793,46],[9029,48,7793,50],[9029,49,7793,51,"widgetId"],[9029,57,7793,59],[9029,58,7793,60],[9030,8,7794,8],[9031,6,7795,4],[9032,6,7796,4],[9033,0,7797,0],[9034,0,7798,0],[9035,4,7796,4],[9036,6,7796,4,"key"],[9036,9,7796,4],[9037,6,7796,4,"value"],[9037,11,7796,4],[9037,13,7799,4],[9037,22,7799,4,"clear"],[9037,27,7799,9,"clear"],[9037,28,7799,9],[9037,30,7799,12],[9038,8,7800,8],[9038,12,7800,12],[9038,13,7800,13,"assertNotDestroyed"],[9038,31,7800,31],[9038,32,7800,32],[9038,33,7800,33],[9039,8,7801,8],[9039,12,7801,12],[9039,13,7801,13,"destroyed"],[9039,22,7801,22],[9039,25,7801,25],[9039,29,7801,29],[9040,8,7802,8],[9040,12,7802,12],[9040,13,7802,13,"_recaptchaLoader"],[9040,29,7802,29],[9040,30,7802,30,"clearedOneInstance"],[9040,48,7802,48],[9040,49,7802,49],[9040,50,7802,50],[9041,8,7803,8],[9041,12,7803,12],[9041,13,7803,13],[9041,17,7803,17],[9041,18,7803,18,"isInvisible"],[9041,29,7803,29],[9041,31,7803,31],[9042,10,7804,12],[9042,14,7804,16],[9042,15,7804,17,"container"],[9042,24,7804,26],[9042,25,7804,27,"childNodes"],[9042,35,7804,37],[9042,36,7804,38,"forEach"],[9042,43,7804,45],[9042,44,7804,46,"node"],[9042,48,7804,50],[9042,52,7804,54],[9043,12,7805,16],[9043,16,7805,20],[9043,17,7805,21,"container"],[9043,26,7805,30],[9043,27,7805,31,"removeChild"],[9043,38,7805,42],[9043,39,7805,43,"node"],[9043,43,7805,47],[9043,44,7805,48],[9044,10,7806,12],[9044,11,7806,13],[9044,12,7806,14],[9045,8,7807,8],[9046,6,7808,4],[9047,4,7808,5],[9048,6,7808,5,"key"],[9048,9,7808,5],[9049,6,7808,5,"value"],[9049,11,7808,5],[9049,13,7809,4],[9049,22,7809,4,"validateStartingState"],[9049,43,7809,25,"validateStartingState"],[9049,44,7809,25],[9049,46,7809,28],[9050,8,7810,8,"_assert"],[9050,15,7810,15],[9050,16,7810,16],[9050,17,7810,17],[9050,21,7810,21],[9050,22,7810,22,"parameters"],[9050,32,7810,32],[9050,33,7810,33,"sitekey"],[9050,40,7810,40],[9050,42,7810,42],[9050,46,7810,46],[9050,47,7810,47,"auth"],[9050,51,7810,51],[9050,53,7810,53],[9050,69,7810,69],[9050,70,7810,70],[9050,104,7810,104],[9050,105,7810,105],[9051,8,7811,8,"_assert"],[9051,15,7811,15],[9051,16,7811,16],[9051,20,7811,20],[9051,21,7811,21,"isInvisible"],[9051,32,7811,32],[9051,36,7811,36],[9051,37,7811,37],[9051,41,7811,41],[9051,42,7811,42,"container"],[9051,51,7811,51],[9051,52,7811,52,"hasChildNodes"],[9051,65,7811,65],[9051,66,7811,66],[9051,67,7811,67],[9051,69,7811,69],[9051,73,7811,73],[9051,74,7811,74,"auth"],[9051,78,7811,78],[9051,80,7811,80],[9051,96,7811,96],[9051,97,7811,97],[9051,131,7811,131],[9051,132,7811,132],[9052,8,7812,8,"_assert"],[9052,15,7812,15],[9052,16,7812,16],[9052,23,7812,23,"document"],[9052,31,7812,31],[9052,36,7812,36],[9052,47,7812,47],[9052,49,7812,49],[9052,53,7812,53],[9052,54,7812,54,"auth"],[9052,58,7812,58],[9052,60,7812,60],[9052,105,7812,105],[9052,106,7812,106],[9052,149,7812,149],[9052,150,7812,150],[9053,6,7813,4],[9054,4,7813,5],[9055,6,7813,5,"key"],[9055,9,7813,5],[9056,6,7813,5,"value"],[9056,11,7813,5],[9056,13,7814,4],[9056,22,7814,4,"makeTokenCallback"],[9056,39,7814,21,"makeTokenCallback"],[9056,40,7814,22,"existing"],[9056,48,7814,30],[9056,50,7814,32],[9057,8,7815,8],[9057,15,7815,15,"token"],[9057,20,7815,20],[9057,24,7815,24],[9058,10,7816,12],[9058,14,7816,16],[9058,15,7816,17,"tokenChangeListeners"],[9058,35,7816,37],[9058,36,7816,38,"forEach"],[9058,43,7816,45],[9058,44,7816,46,"listener"],[9058,52,7816,54],[9058,56,7816,58,"listener"],[9058,64,7816,66],[9058,65,7816,67,"token"],[9058,70,7816,72],[9058,71,7816,73],[9058,72,7816,74],[9059,10,7817,12],[9059,14,7817,16],[9059,21,7817,23,"existing"],[9059,29,7817,31],[9059,34,7817,36],[9059,44,7817,46],[9059,46,7817,48],[9060,12,7818,16,"existing"],[9060,20,7818,24],[9060,21,7818,25,"token"],[9060,26,7818,30],[9060,27,7818,31],[9061,10,7819,12],[9061,11,7819,13],[9061,17,7820,17],[9061,21,7820,21],[9061,28,7820,28,"existing"],[9061,36,7820,36],[9061,41,7820,41],[9061,49,7820,49],[9061,51,7820,51],[9062,12,7821,16],[9062,16,7821,22,"globalFunc"],[9062,26,7821,32],[9062,29,7821,35,"_window"],[9062,36,7821,42],[9062,37,7821,43],[9062,38,7821,44],[9062,39,7821,45,"existing"],[9062,47,7821,53],[9062,48,7821,54],[9063,12,7822,16],[9063,16,7822,20],[9063,23,7822,27,"globalFunc"],[9063,33,7822,37],[9063,38,7822,42],[9063,48,7822,52],[9063,50,7822,54],[9064,14,7823,20,"globalFunc"],[9064,24,7823,30],[9064,25,7823,31,"token"],[9064,30,7823,36],[9064,31,7823,37],[9065,12,7824,16],[9066,10,7825,12],[9067,8,7826,8],[9067,9,7826,9],[9068,6,7827,4],[9069,4,7827,5],[9070,6,7827,5,"key"],[9070,9,7827,5],[9071,6,7827,5,"value"],[9071,11,7827,5],[9071,13,7828,4],[9071,22,7828,4,"assertNotDestroyed"],[9071,40,7828,22,"assertNotDestroyed"],[9071,41,7828,22],[9071,43,7828,25],[9072,8,7829,8,"_assert"],[9072,15,7829,15],[9072,16,7829,16],[9072,17,7829,17],[9072,21,7829,21],[9072,22,7829,22,"destroyed"],[9072,31,7829,31],[9072,33,7829,33],[9072,37,7829,37],[9072,38,7829,38,"auth"],[9072,42,7829,42],[9072,44,7829,44],[9072,60,7829,60],[9072,61,7829,61],[9072,95,7829,95],[9072,96,7829,96],[9073,6,7830,4],[9074,4,7830,5],[9075,6,7830,5,"key"],[9075,9,7830,5],[9076,6,7830,5,"value"],[9076,11,7830,5],[9077,8,7830,5],[9077,12,7830,5,"_makeRenderPromise"],[9077,30,7830,5],[9077,33,7830,5,"_asyncToGenerator"],[9077,50,7830,5],[9077,51,7831,4],[9077,64,7831,30],[9078,10,7832,8],[9078,16,7832,14],[9078,20,7832,18],[9078,21,7832,19,"init"],[9078,25,7832,23],[9078,26,7832,24],[9078,27,7832,25],[9079,10,7833,8],[9079,14,7833,12],[9079,15,7833,13],[9079,19,7833,17],[9079,20,7833,18,"widgetId"],[9079,28,7833,26],[9079,30,7833,28],[9080,12,7834,12],[9080,16,7834,16,"container"],[9080,25,7834,25],[9080,28,7834,28],[9080,32,7834,32],[9080,33,7834,33,"container"],[9080,42,7834,42],[9081,12,7835,12],[9081,16,7835,16],[9081,17,7835,17],[9081,21,7835,21],[9081,22,7835,22,"isInvisible"],[9081,33,7835,33],[9081,35,7835,35],[9082,14,7836,16],[9082,18,7836,22,"guaranteedEmpty"],[9082,33,7836,37],[9082,36,7836,40,"document"],[9082,44,7836,48],[9082,45,7836,49,"createElement"],[9082,58,7836,62],[9082,59,7836,63],[9082,64,7836,68],[9082,65,7836,69],[9083,14,7837,16,"container"],[9083,23,7837,25],[9083,24,7837,26,"appendChild"],[9083,35,7837,37],[9083,36,7837,38,"guaranteedEmpty"],[9083,51,7837,53],[9083,52,7837,54],[9084,14,7838,16,"container"],[9084,23,7838,25],[9084,26,7838,28,"guaranteedEmpty"],[9084,41,7838,43],[9085,12,7839,12],[9086,12,7840,12],[9086,16,7840,16],[9086,17,7840,17,"widgetId"],[9086,25,7840,25],[9086,28,7840,28],[9086,32,7840,32],[9086,33,7840,33,"getAssertedRecaptcha"],[9086,53,7840,53],[9086,54,7840,54],[9086,55,7840,55],[9086,56,7840,56,"render"],[9086,62,7840,62],[9086,63,7840,63,"container"],[9086,72,7840,72],[9086,74,7840,74],[9086,78,7840,78],[9086,79,7840,79,"parameters"],[9086,89,7840,89],[9086,90,7840,90],[9087,10,7841,8],[9088,10,7842,8],[9088,17,7842,15],[9088,21,7842,19],[9088,22,7842,20,"widgetId"],[9088,30,7842,28],[9089,8,7843,4],[9089,9,7843,5],[9090,8,7843,5],[9090,17,7831,10,"makeRenderPromise"],[9090,34,7831,27,"makeRenderPromise"],[9090,35,7831,27],[9091,10,7831,27],[9091,17,7831,27,"_makeRenderPromise"],[9091,35,7831,27],[9091,36,7831,27,"apply"],[9091,41,7831,27],[9091,48,7831,27,"arguments"],[9091,57,7831,27],[9092,8,7831,27],[9093,8,7831,27],[9093,15,7831,10,"makeRenderPromise"],[9093,32,7831,27],[9094,6,7831,27],[9095,4,7831,27],[9096,6,7831,27,"key"],[9096,9,7831,27],[9097,6,7831,27,"value"],[9097,11,7831,27],[9098,8,7831,27],[9098,12,7831,27,"_init"],[9098,17,7831,27],[9098,20,7831,27,"_asyncToGenerator"],[9098,37,7831,27],[9098,38,7844,4],[9098,51,7844,17],[9099,10,7845,8,"_assert"],[9099,17,7845,15],[9099,18,7845,16,"_isHttpOrHttps"],[9099,32,7845,30],[9099,33,7845,31],[9099,34,7845,32],[9099,38,7845,36],[9099,39,7845,37,"_isWorker"],[9099,48,7845,46],[9099,49,7845,47],[9099,50,7845,48],[9099,52,7845,50],[9099,56,7845,54],[9099,57,7845,55,"auth"],[9099,61,7845,59],[9099,63,7845,61],[9099,79,7845,77],[9099,80,7845,78],[9099,114,7845,112],[9099,115,7845,113],[9100,10,7846,8],[9100,16,7846,14,"domReady"],[9100,24,7846,22],[9100,25,7846,23],[9100,26,7846,24],[9101,10,7847,8],[9101,14,7847,12],[9101,15,7847,13,"recaptcha"],[9101,24,7847,22],[9101,33,7847,31],[9101,37,7847,35],[9101,38,7847,36,"_recaptchaLoader"],[9101,54,7847,52],[9101,55,7847,53,"load"],[9101,59,7847,57],[9101,60,7847,58],[9101,64,7847,62],[9101,65,7847,63,"auth"],[9101,69,7847,67],[9101,71,7847,69],[9101,75,7847,73],[9101,76,7847,74,"auth"],[9101,80,7847,78],[9101,81,7847,79,"languageCode"],[9101,93,7847,91],[9101,97,7847,95,"undefined"],[9101,106,7847,104],[9101,107,7847,105],[9102,10,7848,8],[9102,14,7848,14,"siteKey"],[9102,21,7848,21],[9102,30,7848,30,"getRecaptchaParams"],[9102,48,7848,48],[9102,49,7848,49],[9102,53,7848,53],[9102,54,7848,54,"auth"],[9102,58,7848,58],[9102,59,7848,59],[9103,10,7849,8,"_assert"],[9103,17,7849,15],[9103,18,7849,16,"siteKey"],[9103,25,7849,23],[9103,27,7849,25],[9103,31,7849,29],[9103,32,7849,30,"auth"],[9103,36,7849,34],[9103,38,7849,36],[9103,54,7849,52],[9103,55,7849,53],[9103,89,7849,87],[9103,90,7849,88],[9104,10,7850,8],[9104,14,7850,12],[9104,15,7850,13,"parameters"],[9104,25,7850,23],[9104,26,7850,24,"sitekey"],[9104,33,7850,31],[9104,36,7850,34,"siteKey"],[9104,43,7850,41],[9105,8,7851,4],[9105,9,7851,5],[9106,8,7851,5],[9106,17,7844,10,"init"],[9106,21,7844,14,"init"],[9106,22,7844,14],[9107,10,7844,14],[9107,17,7844,14,"_init"],[9107,22,7844,14],[9107,23,7844,14,"apply"],[9107,28,7844,14],[9107,35,7844,14,"arguments"],[9107,44,7844,14],[9108,8,7844,14],[9109,8,7844,14],[9109,15,7844,10,"init"],[9109,19,7844,14],[9110,6,7844,14],[9111,4,7844,14],[9112,6,7844,14,"key"],[9112,9,7844,14],[9113,6,7844,14,"value"],[9113,11,7844,14],[9113,13,7852,4],[9113,22,7852,4,"getAssertedRecaptcha"],[9113,42,7852,24,"getAssertedRecaptcha"],[9113,43,7852,24],[9113,45,7852,27],[9114,8,7853,8,"_assert"],[9114,15,7853,15],[9114,16,7853,16],[9114,20,7853,20],[9114,21,7853,21,"recaptcha"],[9114,30,7853,30],[9114,32,7853,32],[9114,36,7853,36],[9114,37,7853,37,"auth"],[9114,41,7853,41],[9114,43,7853,43],[9114,59,7853,59],[9114,60,7853,60],[9114,94,7853,94],[9114,95,7853,95],[9115,8,7854,8],[9115,15,7854,15],[9115,19,7854,19],[9115,20,7854,20,"recaptcha"],[9115,29,7854,29],[9116,6,7855,4],[9117,4,7855,5],[9118,2,7855,5],[9119,2,7857,0],[9119,11,7857,9,"domReady"],[9119,19,7857,17,"domReady"],[9119,20,7857,17],[9119,22,7857,20],[9120,4,7858,4],[9120,8,7858,8,"resolver"],[9120,16,7858,16],[9120,19,7858,19],[9120,23,7858,23],[9121,4,7859,4],[9121,11,7859,11],[9121,15,7859,15,"Promise"],[9121,22,7859,22],[9121,23,7859,23,"resolve"],[9121,30,7859,30],[9121,34,7859,34],[9122,6,7860,8],[9122,10,7860,12,"document"],[9122,18,7860,20],[9122,19,7860,21,"readyState"],[9122,29,7860,31],[9122,34,7860,36],[9122,44,7860,46],[9122,46,7860,48],[9123,8,7861,12,"resolve"],[9123,15,7861,19],[9123,16,7861,20],[9123,17,7861,21],[9124,8,7862,12],[9125,6,7863,8],[9126,6,7864,8],[9127,6,7865,8],[9128,6,7866,8],[9129,6,7867,8,"resolver"],[9129,14,7867,16],[9129,17,7867,19,"resolver"],[9129,18,7867,19],[9129,23,7867,25,"resolve"],[9129,30,7867,32],[9129,31,7867,33],[9129,32,7867,34],[9130,6,7868,8,"window"],[9130,12,7868,14],[9130,13,7868,15,"addEventListener"],[9130,29,7868,31],[9130,30,7868,32],[9130,36,7868,38],[9130,38,7868,40,"resolver"],[9130,46,7868,48],[9130,47,7868,49],[9131,4,7869,4],[9131,5,7869,5],[9131,6,7869,6],[9131,7,7869,7,"catch"],[9131,12,7869,12],[9131,13,7869,13,"e"],[9131,14,7869,14],[9131,18,7869,18],[9132,6,7870,8],[9132,10,7870,12,"resolver"],[9132,18,7870,20],[9132,20,7870,22],[9133,8,7871,12,"window"],[9133,14,7871,18],[9133,15,7871,19,"removeEventListener"],[9133,34,7871,38],[9133,35,7871,39],[9133,41,7871,45],[9133,43,7871,47,"resolver"],[9133,51,7871,55],[9133,52,7871,56],[9134,6,7872,8],[9135,6,7873,8],[9135,12,7873,14,"e"],[9135,13,7873,15],[9136,4,7874,4],[9136,5,7874,5],[9136,6,7874,6],[9137,2,7875,0],[9139,2,7877,0],[9140,0,7878,0],[9141,0,7879,0],[9142,0,7880,0],[9143,0,7881,0],[9144,0,7882,0],[9145,0,7883,0],[9146,0,7884,0],[9147,0,7885,0],[9148,0,7886,0],[9149,0,7887,0],[9150,0,7888,0],[9151,0,7889,0],[9152,0,7890,0],[9153,0,7891,0],[9154,0,7892,0],[9155,2,7877,0],[9155,6,7893,6,"ConfirmationResultImpl"],[9155,28,7893,28],[9156,4,7894,4],[9156,13,7894,4,"ConfirmationResultImpl"],[9156,36,7894,16,"verificationId"],[9156,50,7894,30],[9156,52,7894,32,"onConfirmation"],[9156,66,7894,46],[9156,68,7894,48],[9157,6,7894,48,"_classCallCheck"],[9157,21,7894,48],[9157,28,7894,48,"ConfirmationResultImpl"],[9157,50,7894,48],[9158,6,7895,8],[9158,10,7895,12],[9158,11,7895,13,"verificationId"],[9158,25,7895,27],[9158,28,7895,30,"verificationId"],[9158,42,7895,44],[9159,6,7896,8],[9159,10,7896,12],[9159,11,7896,13,"onConfirmation"],[9159,25,7896,27],[9159,28,7896,30,"onConfirmation"],[9159,42,7896,44],[9160,4,7897,4],[9161,4,7897,5],[9161,11,7897,5,"_createClass"],[9161,23,7897,5],[9161,24,7897,5,"ConfirmationResultImpl"],[9161,46,7897,5],[9162,6,7897,5,"key"],[9162,9,7897,5],[9163,6,7897,5,"value"],[9163,11,7897,5],[9163,13,7898,4],[9163,22,7898,4,"confirm"],[9163,29,7898,11,"confirm"],[9163,30,7898,12,"verificationCode"],[9163,46,7898,28],[9163,48,7898,30],[9164,8,7899,8],[9164,12,7899,14,"authCredential"],[9164,26,7899,28],[9164,29,7899,31,"PhoneAuthCredential"],[9164,48,7899,50],[9164,49,7899,51,"_fromVerification"],[9164,66,7899,68],[9164,67,7899,69],[9164,71,7899,73],[9164,72,7899,74,"verificationId"],[9164,86,7899,88],[9164,88,7899,90,"verificationCode"],[9164,104,7899,106],[9164,105,7899,107],[9165,8,7900,8],[9165,15,7900,15],[9165,19,7900,19],[9165,20,7900,20,"onConfirmation"],[9165,34,7900,34],[9165,35,7900,35,"authCredential"],[9165,49,7900,49],[9165,50,7900,50],[9166,6,7901,4],[9167,4,7901,5],[9168,2,7901,5],[9169,2,7903,0],[9170,0,7904,0],[9171,0,7905,0],[9172,0,7906,0],[9173,0,7907,0],[9174,0,7908,0],[9175,0,7909,0],[9176,0,7910,0],[9177,0,7911,0],[9178,0,7912,0],[9179,0,7913,0],[9180,0,7914,0],[9181,0,7915,0],[9182,0,7916,0],[9183,0,7917,0],[9184,0,7918,0],[9185,0,7919,0],[9186,0,7920,0],[9187,0,7921,0],[9188,0,7922,0],[9189,0,7923,0],[9190,0,7924,0],[9191,0,7925,0],[9192,0,7926,0],[9193,0,7927,0],[9194,0,7928,0],[9195,0,7929,0],[9196,0,7930,0],[9197,0,7931,0],[9198,0,7932,0],[9199,0,7933,0],[9200,0,7934,0],[9201,0,7935,0],[9202,0,7936,0],[9203,0,7937,0],[9204,0,7938,0],[9205,2,7903,0],[9205,11,7939,15,"signInWithPhoneNumber"],[9205,32,7939,36,"signInWithPhoneNumber"],[9205,33,7939,36,"_x196"],[9205,38,7939,36],[9205,40,7939,36,"_x197"],[9205,45,7939,36],[9205,47,7939,36,"_x198"],[9205,52,7939,36],[9206,4,7939,36],[9206,11,7939,36,"_signInWithPhoneNumber"],[9206,33,7939,36],[9206,34,7939,36,"apply"],[9206,39,7939,36],[9206,46,7939,36,"arguments"],[9206,55,7939,36],[9207,2,7939,36],[9208,2,7947,0],[9209,0,7948,0],[9210,0,7949,0],[9211,0,7950,0],[9212,0,7951,0],[9213,0,7952,0],[9214,0,7953,0],[9215,0,7954,0],[9216,0,7955,0],[9217,0,7956,0],[9218,0,7957,0],[9219,0,7958,0],[9220,2,7947,0],[9220,11,7947,0,"_signInWithPhoneNumber"],[9220,34,7947,0],[9221,4,7947,0,"_signInWithPhoneNumber"],[9221,26,7947,0],[9221,29,7947,0,"_asyncToGenerator"],[9221,46,7947,0],[9221,47,7939,0],[9221,58,7939,37,"auth"],[9221,62,7939,41],[9221,64,7939,43,"phoneNumber"],[9221,75,7939,54],[9221,77,7939,56,"appVerifier"],[9221,88,7939,67],[9221,90,7939,69],[9222,6,7940,4],[9222,10,7940,8,"app"],[9222,13,7940,11],[9222,14,7940,12,"_isFirebaseServerApp"],[9222,34,7940,32],[9222,35,7940,33,"auth"],[9222,39,7940,37],[9222,40,7940,38,"app"],[9222,43,7940,41],[9222,44,7940,42],[9222,46,7940,44],[9223,8,7941,8],[9223,15,7941,15,"Promise"],[9223,22,7941,22],[9223,23,7941,23,"reject"],[9223,29,7941,29],[9223,30,7941,30,"_serverAppCurrentUserOperationNotSupportedError"],[9223,77,7941,77],[9223,78,7941,78,"auth"],[9223,82,7941,82],[9223,83,7941,83],[9223,84,7941,84],[9224,6,7942,4],[9225,6,7943,4],[9225,10,7943,10,"authInternal"],[9225,22,7943,22],[9225,25,7943,25,"_castAuth"],[9225,34,7943,34],[9225,35,7943,35,"auth"],[9225,39,7943,39],[9225,40,7943,40],[9226,6,7944,4],[9226,10,7944,10,"verificationId"],[9226,24,7944,24],[9226,33,7944,33,"_verifyPhoneNumber"],[9226,51,7944,51],[9226,52,7944,52,"authInternal"],[9226,64,7944,64],[9226,66,7944,66,"phoneNumber"],[9226,77,7944,77],[9226,79,7944,79,"util"],[9226,83,7944,83],[9226,84,7944,84,"getModularInstance"],[9226,102,7944,102],[9226,103,7944,103,"appVerifier"],[9226,114,7944,114],[9226,115,7944,115],[9226,116,7944,116],[9227,6,7945,4],[9227,13,7945,11],[9227,17,7945,15,"ConfirmationResultImpl"],[9227,39,7945,37],[9227,40,7945,38,"verificationId"],[9227,54,7945,52],[9227,56,7945,54,"cred"],[9227,60,7945,58],[9227,64,7945,62,"signInWithCredential"],[9227,84,7945,82],[9227,85,7945,83,"authInternal"],[9227,97,7945,95],[9227,99,7945,97,"cred"],[9227,103,7945,101],[9227,104,7945,102],[9227,105,7945,103],[9228,4,7946,0],[9228,5,7946,1],[9229,4,7946,1],[9229,11,7946,1,"_signInWithPhoneNumber"],[9229,33,7946,1],[9229,34,7946,1,"apply"],[9229,39,7946,1],[9229,46,7946,1,"arguments"],[9229,55,7946,1],[9230,2,7946,1],[9231,2,7946,1],[9231,11,7959,15,"linkWithPhoneNumber"],[9231,30,7959,34,"linkWithPhoneNumber"],[9231,31,7959,34,"_x199"],[9231,36,7959,34],[9231,38,7959,34,"_x200"],[9231,43,7959,34],[9231,45,7959,34,"_x201"],[9231,50,7959,34],[9232,4,7959,34],[9232,11,7959,34,"_linkWithPhoneNumber"],[9232,31,7959,34],[9232,32,7959,34,"apply"],[9232,37,7959,34],[9232,44,7959,34,"arguments"],[9232,53,7959,34],[9233,2,7959,34],[9234,2,7965,0],[9235,0,7966,0],[9236,0,7967,0],[9237,0,7968,0],[9238,0,7969,0],[9239,0,7970,0],[9240,0,7971,0],[9241,0,7972,0],[9242,0,7973,0],[9243,0,7974,0],[9244,0,7975,0],[9245,0,7976,0],[9246,0,7977,0],[9247,0,7978,0],[9248,0,7979,0],[9249,2,7965,0],[9249,11,7965,0,"_linkWithPhoneNumber"],[9249,32,7965,0],[9250,4,7965,0,"_linkWithPhoneNumber"],[9250,24,7965,0],[9250,27,7965,0,"_asyncToGenerator"],[9250,44,7965,0],[9250,45,7959,0],[9250,56,7959,35,"user"],[9250,60,7959,39],[9250,62,7959,41,"phoneNumber"],[9250,73,7959,52],[9250,75,7959,54,"appVerifier"],[9250,86,7959,65],[9250,88,7959,67],[9251,6,7960,4],[9251,10,7960,10,"userInternal"],[9251,22,7960,22],[9251,25,7960,25,"util"],[9251,29,7960,29],[9251,30,7960,30,"getModularInstance"],[9251,48,7960,48],[9251,49,7960,49,"user"],[9251,53,7960,53],[9251,54,7960,54],[9252,6,7961,4],[9252,12,7961,10,"_assertLinkedStatus"],[9252,31,7961,29],[9252,32,7961,30],[9252,37,7961,35],[9252,39,7961,37,"userInternal"],[9252,51,7961,49],[9252,53,7961,51],[9252,60,7961,58],[9252,61,7961,59],[9252,83,7961,81],[9252,84,7961,82],[9253,6,7962,4],[9253,10,7962,10,"verificationId"],[9253,24,7962,24],[9253,33,7962,33,"_verifyPhoneNumber"],[9253,51,7962,51],[9253,52,7962,52,"userInternal"],[9253,64,7962,64],[9253,65,7962,65,"auth"],[9253,69,7962,69],[9253,71,7962,71,"phoneNumber"],[9253,82,7962,82],[9253,84,7962,84,"util"],[9253,88,7962,88],[9253,89,7962,89,"getModularInstance"],[9253,107,7962,107],[9253,108,7962,108,"appVerifier"],[9253,119,7962,119],[9253,120,7962,120],[9253,121,7962,121],[9254,6,7963,4],[9254,13,7963,11],[9254,17,7963,15,"ConfirmationResultImpl"],[9254,39,7963,37],[9254,40,7963,38,"verificationId"],[9254,54,7963,52],[9254,56,7963,54,"cred"],[9254,60,7963,58],[9254,64,7963,62,"linkWithCredential"],[9254,82,7963,80],[9254,83,7963,81,"userInternal"],[9254,95,7963,93],[9254,97,7963,95,"cred"],[9254,101,7963,99],[9254,102,7963,100],[9254,103,7963,101],[9255,4,7964,0],[9255,5,7964,1],[9256,4,7964,1],[9256,11,7964,1,"_linkWithPhoneNumber"],[9256,31,7964,1],[9256,32,7964,1,"apply"],[9256,37,7964,1],[9256,44,7964,1,"arguments"],[9256,53,7964,1],[9257,2,7964,1],[9258,2,7964,1],[9258,11,7980,15,"reauthenticateWithPhoneNumber"],[9258,40,7980,44,"reauthenticateWithPhoneNumber"],[9258,41,7980,44,"_x202"],[9258,46,7980,44],[9258,48,7980,44,"_x203"],[9258,53,7980,44],[9258,55,7980,44,"_x204"],[9258,60,7980,44],[9259,4,7980,44],[9259,11,7980,44,"_reauthenticateWithPhoneNumber"],[9259,41,7980,44],[9259,42,7980,44,"apply"],[9259,47,7980,44],[9259,54,7980,44,"arguments"],[9259,63,7980,44],[9260,2,7980,44],[9261,2,7988,0],[9262,0,7989,0],[9263,0,7990,0],[9264,0,7991,0],[9265,2,7988,0],[9265,11,7988,0,"_reauthenticateWithPhoneNumber"],[9265,42,7988,0],[9266,4,7988,0,"_reauthenticateWithPhoneNumber"],[9266,34,7988,0],[9266,37,7988,0,"_asyncToGenerator"],[9266,54,7988,0],[9266,55,7980,0],[9266,66,7980,45,"user"],[9266,70,7980,49],[9266,72,7980,51,"phoneNumber"],[9266,83,7980,62],[9266,85,7980,64,"appVerifier"],[9266,96,7980,75],[9266,98,7980,77],[9267,6,7981,4],[9267,10,7981,10,"userInternal"],[9267,22,7981,22],[9267,25,7981,25,"util"],[9267,29,7981,29],[9267,30,7981,30,"getModularInstance"],[9267,48,7981,48],[9267,49,7981,49,"user"],[9267,53,7981,53],[9267,54,7981,54],[9268,6,7982,4],[9268,10,7982,8,"app"],[9268,13,7982,11],[9268,14,7982,12,"_isFirebaseServerApp"],[9268,34,7982,32],[9268,35,7982,33,"userInternal"],[9268,47,7982,45],[9268,48,7982,46,"auth"],[9268,52,7982,50],[9268,53,7982,51,"app"],[9268,56,7982,54],[9268,57,7982,55],[9268,59,7982,57],[9269,8,7983,8],[9269,15,7983,15,"Promise"],[9269,22,7983,22],[9269,23,7983,23,"reject"],[9269,29,7983,29],[9269,30,7983,30,"_serverAppCurrentUserOperationNotSupportedError"],[9269,77,7983,77],[9269,78,7983,78,"userInternal"],[9269,90,7983,90],[9269,91,7983,91,"auth"],[9269,95,7983,95],[9269,96,7983,96],[9269,97,7983,97],[9270,6,7984,4],[9271,6,7985,4],[9271,10,7985,10,"verificationId"],[9271,24,7985,24],[9271,33,7985,33,"_verifyPhoneNumber"],[9271,51,7985,51],[9271,52,7985,52,"userInternal"],[9271,64,7985,64],[9271,65,7985,65,"auth"],[9271,69,7985,69],[9271,71,7985,71,"phoneNumber"],[9271,82,7985,82],[9271,84,7985,84,"util"],[9271,88,7985,88],[9271,89,7985,89,"getModularInstance"],[9271,107,7985,107],[9271,108,7985,108,"appVerifier"],[9271,119,7985,119],[9271,120,7985,120],[9271,121,7985,121],[9272,6,7986,4],[9272,13,7986,11],[9272,17,7986,15,"ConfirmationResultImpl"],[9272,39,7986,37],[9272,40,7986,38,"verificationId"],[9272,54,7986,52],[9272,56,7986,54,"cred"],[9272,60,7986,58],[9272,64,7986,62,"reauthenticateWithCredential"],[9272,92,7986,90],[9272,93,7986,91,"userInternal"],[9272,105,7986,103],[9272,107,7986,105,"cred"],[9272,111,7986,109],[9272,112,7986,110],[9272,113,7986,111],[9273,4,7987,0],[9273,5,7987,1],[9274,4,7987,1],[9274,11,7987,1,"_reauthenticateWithPhoneNumber"],[9274,41,7987,1],[9274,42,7987,1,"apply"],[9274,47,7987,1],[9274,54,7987,1,"arguments"],[9274,63,7987,1],[9275,2,7987,1],[9276,2,7987,1],[9276,11,7992,15,"_verifyPhoneNumber"],[9276,29,7992,33,"_verifyPhoneNumber"],[9276,30,7992,33,"_x205"],[9276,35,7992,33],[9276,37,7992,33,"_x206"],[9276,42,7992,33],[9276,44,7992,33,"_x207"],[9276,49,7992,33],[9277,4,7992,33],[9277,11,7992,33,"_verifyPhoneNumber2"],[9277,30,7992,33],[9277,31,7992,33,"apply"],[9277,36,7992,33],[9277,43,7992,33,"arguments"],[9277,52,7992,33],[9278,2,7992,33],[9279,2,8094,0],[9280,0,8095,0],[9281,0,8096,0],[9282,0,8097,0],[9283,0,8098,0],[9284,0,8099,0],[9285,0,8100,0],[9286,0,8101,0],[9287,0,8102,0],[9288,0,8103,0],[9289,0,8104,0],[9290,0,8105,0],[9291,0,8106,0],[9292,0,8107,0],[9293,0,8108,0],[9294,0,8109,0],[9295,0,8110,0],[9296,0,8111,0],[9297,0,8112,0],[9298,0,8113,0],[9299,0,8114,0],[9300,0,8115,0],[9301,0,8116,0],[9302,2,8094,0],[9302,11,8094,0,"_verifyPhoneNumber2"],[9302,31,8094,0],[9303,4,8094,0,"_verifyPhoneNumber2"],[9303,23,8094,0],[9303,26,8094,0,"_asyncToGenerator"],[9303,43,8094,0],[9303,44,7992,0],[9303,55,7992,34,"auth"],[9303,59,7992,38],[9303,61,7992,40,"options"],[9303,68,7992,47],[9303,70,7992,49,"verifier"],[9303,78,7992,57],[9303,80,7992,59],[9304,6,7993,4],[9304,10,7993,8],[9304,11,7993,9,"auth"],[9304,15,7993,13],[9304,16,7993,14,"_getRecaptchaConfig"],[9304,35,7993,33],[9304,36,7993,34],[9304,37,7993,35],[9304,39,7993,37],[9305,8,7994,8],[9305,12,7994,12],[9306,10,7995,12],[9306,16,7995,18,"_initializeRecaptchaConfig"],[9306,42,7995,44],[9306,43,7995,45,"auth"],[9306,47,7995,49],[9306,48,7995,50],[9307,8,7996,8],[9307,9,7996,9],[9307,10,7997,8],[9307,17,7997,15,"error"],[9307,22,7997,20],[9307,24,7997,22],[9308,10,7998,12],[9309,10,7999,12],[9310,10,8000,12],[9311,10,8001,12],[9312,10,8002,12,"console"],[9312,17,8002,19],[9312,18,8002,20,"log"],[9312,21,8002,23],[9312,22,8002,24],[9312,115,8002,117],[9312,116,8002,118],[9313,8,8003,8],[9314,6,8004,4],[9315,6,8005,4],[9315,10,8005,8],[9316,8,8006,8],[9316,12,8006,12,"phoneInfoOptions"],[9316,28,8006,28],[9317,8,8007,8],[9317,12,8007,12],[9317,19,8007,19,"options"],[9317,26,8007,26],[9317,31,8007,31],[9317,39,8007,39],[9317,41,8007,41],[9318,10,8008,12,"phoneInfoOptions"],[9318,26,8008,28],[9318,29,8008,31],[9319,12,8009,16,"phoneNumber"],[9319,23,8009,27],[9319,25,8009,29,"options"],[9320,10,8010,12],[9320,11,8010,13],[9321,8,8011,8],[9321,9,8011,9],[9321,15,8012,13],[9322,10,8013,12,"phoneInfoOptions"],[9322,26,8013,28],[9322,29,8013,31,"options"],[9322,36,8013,38],[9323,8,8014,8],[9324,8,8015,8],[9324,12,8015,12],[9324,21,8015,21],[9324,25,8015,25,"phoneInfoOptions"],[9324,41,8015,41],[9324,43,8015,43],[9325,10,8016,12],[9325,14,8016,18,"session"],[9325,21,8016,25],[9325,24,8016,28,"phoneInfoOptions"],[9325,40,8016,44],[9325,41,8016,45,"session"],[9325,48,8016,52],[9326,10,8017,12],[9326,14,8017,16],[9326,27,8017,29],[9326,31,8017,33,"phoneInfoOptions"],[9326,47,8017,49],[9326,49,8017,51],[9327,12,8018,16,"_assert"],[9327,19,8018,23],[9327,20,8018,24,"session"],[9327,27,8018,31],[9327,28,8018,32,"type"],[9327,32,8018,36],[9327,37,8018,41],[9327,45,8018,49],[9327,46,8018,50],[9327,83,8018,87,"auth"],[9327,87,8018,91],[9327,89,8018,93],[9327,105,8018,109],[9327,106,8018,110],[9327,140,8018,144],[9327,141,8018,145],[9328,12,8019,16],[9328,16,8019,22,"startPhoneMfaEnrollmentRequest"],[9328,46,8019,52],[9328,49,8019,55],[9329,14,8020,20,"idToken"],[9329,21,8020,27],[9329,23,8020,29,"session"],[9329,30,8020,36],[9329,31,8020,37,"credential"],[9329,41,8020,47],[9330,14,8021,20,"phoneEnrollmentInfo"],[9330,33,8021,39],[9330,35,8021,41],[9331,16,8022,24,"phoneNumber"],[9331,27,8022,35],[9331,29,8022,37,"phoneInfoOptions"],[9331,45,8022,53],[9331,46,8022,54,"phoneNumber"],[9331,57,8022,65],[9332,16,8023,24,"clientType"],[9332,26,8023,34],[9332,28,8023,36],[9332,45,8023,53],[9332,46,8023,54],[9333,14,8024,20],[9334,12,8025,16],[9334,13,8025,17],[9335,12,8026,16],[9335,16,8026,22,"startEnrollPhoneMfaActionCallback"],[9335,49,8026,55],[9336,14,8026,55],[9336,18,8026,55,"_ref30"],[9336,24,8026,55],[9336,27,8026,55,"_asyncToGenerator"],[9336,44,8026,55],[9336,45,8026,58],[9336,56,8026,65,"authInstance"],[9336,68,8026,77],[9336,70,8026,79,"request"],[9336,77,8026,86],[9336,79,8026,91],[9337,16,8027,20],[9338,16,8028,20],[9338,20,8028,24,"request"],[9338,27,8028,31],[9338,28,8028,32,"phoneEnrollmentInfo"],[9338,47,8028,51],[9338,48,8028,52,"captchaResponse"],[9338,63,8028,67],[9338,68,8028,72,"FAKE_TOKEN"],[9338,78,8028,82],[9338,80,8028,84],[9339,18,8029,24,"_assert"],[9339,25,8029,31],[9339,26,8029,32,"verifier"],[9339,34,8029,40],[9339,36,8029,42,"type"],[9339,40,8029,46],[9339,45,8029,51,"RECAPTCHA_VERIFIER_TYPE"],[9339,68,8029,74],[9339,70,8029,76,"authInstance"],[9339,82,8029,88],[9339,84,8029,90],[9339,100,8029,106],[9339,101,8029,107],[9339,135,8029,141],[9339,136,8029,142],[9340,18,8030,24],[9340,22,8030,30,"requestWithRecaptchaV2"],[9340,44,8030,52],[9340,53,8030,61,"injectRecaptchaV2Token"],[9340,75,8030,83],[9340,76,8030,84,"authInstance"],[9340,88,8030,96],[9340,90,8030,98,"request"],[9340,97,8030,105],[9340,99,8030,107,"verifier"],[9340,107,8030,115],[9340,108,8030,116],[9341,18,8031,24],[9341,25,8031,31,"startEnrollPhoneMfa"],[9341,44,8031,50],[9341,45,8031,51,"authInstance"],[9341,57,8031,63],[9341,59,8031,65,"requestWithRecaptchaV2"],[9341,81,8031,87],[9341,82,8031,88],[9342,16,8032,20],[9343,16,8033,20],[9343,23,8033,27,"startEnrollPhoneMfa"],[9343,42,8033,46],[9343,43,8033,47,"authInstance"],[9343,55,8033,59],[9343,57,8033,61,"request"],[9343,64,8033,68],[9343,65,8033,69],[9344,14,8034,16],[9344,15,8034,17],[9345,14,8034,17],[9345,30,8026,22,"startEnrollPhoneMfaActionCallback"],[9345,63,8026,55,"startEnrollPhoneMfaActionCallback"],[9345,64,8026,55,"_x222"],[9345,69,8026,55],[9345,71,8026,55,"_x223"],[9345,76,8026,55],[9346,16,8026,55],[9346,23,8026,55,"_ref30"],[9346,29,8026,55],[9346,30,8026,55,"apply"],[9346,35,8026,55],[9346,42,8026,55,"arguments"],[9346,51,8026,55],[9347,14,8026,55],[9348,12,8026,55],[9348,15,8034,17],[9349,12,8035,16],[9349,16,8035,22,"startPhoneMfaEnrollmentResponse"],[9349,47,8035,53],[9349,50,8035,56,"handleRecaptchaFlow"],[9349,69,8035,75],[9349,70,8035,76,"auth"],[9349,74,8035,80],[9349,76,8035,82,"startPhoneMfaEnrollmentRequest"],[9349,106,8035,112],[9349,108,8035,114],[9349,126,8035,132],[9349,127,8035,133],[9349,173,8035,179,"startEnrollPhoneMfaActionCallback"],[9349,206,8035,212],[9349,208,8035,214],[9349,224,8035,230],[9349,225,8035,231],[9349,267,8035,273],[9349,268,8035,274],[9350,12,8036,16],[9350,16,8036,22,"response"],[9350,24,8036,30],[9350,33,8036,39,"startPhoneMfaEnrollmentResponse"],[9350,64,8036,70],[9350,65,8036,71,"catch"],[9350,70,8036,76],[9350,71,8036,77,"error"],[9350,76,8036,82],[9350,80,8036,86],[9351,14,8037,20],[9351,21,8037,27,"Promise"],[9351,28,8037,34],[9351,29,8037,35,"reject"],[9351,35,8037,41],[9351,36,8037,42,"error"],[9351,41,8037,47],[9351,42,8037,48],[9352,12,8038,16],[9352,13,8038,17],[9352,14,8038,18],[9353,12,8039,16],[9353,19,8039,23,"response"],[9353,27,8039,31],[9353,28,8039,32,"phoneSessionInfo"],[9353,44,8039,48],[9353,45,8039,49,"sessionInfo"],[9353,56,8039,60],[9354,10,8040,12],[9354,11,8040,13],[9354,17,8041,17],[9355,12,8042,16,"_assert"],[9355,19,8042,23],[9355,20,8042,24,"session"],[9355,27,8042,31],[9355,28,8042,32,"type"],[9355,32,8042,36],[9355,37,8042,41],[9355,45,8042,49],[9355,46,8042,50],[9355,84,8042,88,"auth"],[9355,88,8042,92],[9355,90,8042,94],[9355,106,8042,110],[9355,107,8042,111],[9355,141,8042,145],[9355,142,8042,146],[9356,12,8043,16],[9356,16,8043,22,"mfaEnrollmentId"],[9356,31,8043,37],[9356,34,8043,40,"phoneInfoOptions"],[9356,50,8043,56],[9356,51,8043,57,"multiFactorHint"],[9356,66,8043,72],[9356,68,8043,74,"uid"],[9356,71,8043,77],[9356,75,8044,20,"phoneInfoOptions"],[9356,91,8044,36],[9356,92,8044,37,"multiFactorUid"],[9356,106,8044,51],[9357,12,8045,16,"_assert"],[9357,19,8045,23],[9357,20,8045,24,"mfaEnrollmentId"],[9357,35,8045,39],[9357,37,8045,41,"auth"],[9357,41,8045,45],[9357,43,8045,47],[9357,70,8045,74],[9357,71,8045,75],[9357,107,8045,111],[9357,108,8045,112],[9358,12,8046,16],[9358,16,8046,22,"startPhoneMfaSignInRequest"],[9358,42,8046,48],[9358,45,8046,51],[9359,14,8047,20,"mfaPendingCredential"],[9359,34,8047,40],[9359,36,8047,42,"session"],[9359,43,8047,49],[9359,44,8047,50,"credential"],[9359,54,8047,60],[9360,14,8048,20,"mfaEnrollmentId"],[9360,29,8048,35],[9361,14,8049,20,"phoneSignInInfo"],[9361,29,8049,35],[9361,31,8049,37],[9362,16,8050,24,"clientType"],[9362,26,8050,34],[9362,28,8050,36],[9362,45,8050,53],[9362,46,8050,54],[9363,14,8051,20],[9364,12,8052,16],[9364,13,8052,17],[9365,12,8053,16],[9365,16,8053,22,"startSignInPhoneMfaActionCallback"],[9365,49,8053,55],[9366,14,8053,55],[9366,18,8053,55,"_ref31"],[9366,24,8053,55],[9366,27,8053,55,"_asyncToGenerator"],[9366,44,8053,55],[9366,45,8053,58],[9366,56,8053,65,"authInstance"],[9366,68,8053,77],[9366,70,8053,79,"request"],[9366,77,8053,86],[9366,79,8053,91],[9367,16,8054,20],[9368,16,8055,20],[9368,20,8055,24,"request"],[9368,27,8055,31],[9368,28,8055,32,"phoneSignInInfo"],[9368,43,8055,47],[9368,44,8055,48,"captchaResponse"],[9368,59,8055,63],[9368,64,8055,68,"FAKE_TOKEN"],[9368,74,8055,78],[9368,76,8055,80],[9369,18,8056,24,"_assert"],[9369,25,8056,31],[9369,26,8056,32,"verifier"],[9369,34,8056,40],[9369,36,8056,42,"type"],[9369,40,8056,46],[9369,45,8056,51,"RECAPTCHA_VERIFIER_TYPE"],[9369,68,8056,74],[9369,70,8056,76,"authInstance"],[9369,82,8056,88],[9369,84,8056,90],[9369,100,8056,106],[9369,101,8056,107],[9369,135,8056,141],[9369,136,8056,142],[9370,18,8057,24],[9370,22,8057,30,"requestWithRecaptchaV2"],[9370,44,8057,52],[9370,53,8057,61,"injectRecaptchaV2Token"],[9370,75,8057,83],[9370,76,8057,84,"authInstance"],[9370,88,8057,96],[9370,90,8057,98,"request"],[9370,97,8057,105],[9370,99,8057,107,"verifier"],[9370,107,8057,115],[9370,108,8057,116],[9371,18,8058,24],[9371,25,8058,31,"startSignInPhoneMfa"],[9371,44,8058,50],[9371,45,8058,51,"authInstance"],[9371,57,8058,63],[9371,59,8058,65,"requestWithRecaptchaV2"],[9371,81,8058,87],[9371,82,8058,88],[9372,16,8059,20],[9373,16,8060,20],[9373,23,8060,27,"startSignInPhoneMfa"],[9373,42,8060,46],[9373,43,8060,47,"authInstance"],[9373,55,8060,59],[9373,57,8060,61,"request"],[9373,64,8060,68],[9373,65,8060,69],[9374,14,8061,16],[9374,15,8061,17],[9375,14,8061,17],[9375,30,8053,22,"startSignInPhoneMfaActionCallback"],[9375,63,8053,55,"startSignInPhoneMfaActionCallback"],[9375,64,8053,55,"_x224"],[9375,69,8053,55],[9375,71,8053,55,"_x225"],[9375,76,8053,55],[9376,16,8053,55],[9376,23,8053,55,"_ref31"],[9376,29,8053,55],[9376,30,8053,55,"apply"],[9376,35,8053,55],[9376,42,8053,55,"arguments"],[9376,51,8053,55],[9377,14,8053,55],[9378,12,8053,55],[9378,15,8061,17],[9379,12,8062,16],[9379,16,8062,22,"startPhoneMfaSignInResponse"],[9379,43,8062,49],[9379,46,8062,52,"handleRecaptchaFlow"],[9379,65,8062,71],[9379,66,8062,72,"auth"],[9379,70,8062,76],[9379,72,8062,78,"startPhoneMfaSignInRequest"],[9379,98,8062,104],[9379,100,8062,106],[9379,114,8062,120],[9379,115,8062,121],[9379,157,8062,163,"startSignInPhoneMfaActionCallback"],[9379,190,8062,196],[9379,192,8062,198],[9379,208,8062,214],[9379,209,8062,215],[9379,251,8062,257],[9379,252,8062,258],[9380,12,8063,16],[9380,16,8063,22,"response"],[9380,25,8063,30],[9380,34,8063,39,"startPhoneMfaSignInResponse"],[9380,61,8063,66],[9380,62,8063,67,"catch"],[9380,67,8063,72],[9380,68,8063,73,"error"],[9380,73,8063,78],[9380,77,8063,82],[9381,14,8064,20],[9381,21,8064,27,"Promise"],[9381,28,8064,34],[9381,29,8064,35,"reject"],[9381,35,8064,41],[9381,36,8064,42,"error"],[9381,41,8064,47],[9381,42,8064,48],[9382,12,8065,16],[9382,13,8065,17],[9382,14,8065,18],[9383,12,8066,16],[9383,19,8066,23,"response"],[9383,28,8066,31],[9383,29,8066,32,"phoneResponseInfo"],[9383,46,8066,49],[9383,47,8066,50,"sessionInfo"],[9383,58,8066,61],[9384,10,8067,12],[9385,8,8068,8],[9385,9,8068,9],[9385,15,8069,13],[9386,10,8070,12],[9386,14,8070,18,"sendPhoneVerificationCodeRequest"],[9386,46,8070,50],[9386,49,8070,53],[9387,12,8071,16,"phoneNumber"],[9387,23,8071,27],[9387,25,8071,29,"phoneInfoOptions"],[9387,41,8071,45],[9387,42,8071,46,"phoneNumber"],[9387,53,8071,57],[9388,12,8072,16,"clientType"],[9388,22,8072,26],[9388,24,8072,28],[9388,41,8072,45],[9388,42,8072,46],[9389,10,8073,12],[9389,11,8073,13],[9390,10,8074,12],[9390,14,8074,18,"sendPhoneVerificationCodeActionCallback"],[9390,53,8074,57],[9391,12,8074,57],[9391,16,8074,57,"_ref32"],[9391,22,8074,57],[9391,25,8074,57,"_asyncToGenerator"],[9391,42,8074,57],[9391,43,8074,60],[9391,54,8074,67,"authInstance"],[9391,66,8074,79],[9391,68,8074,81,"request"],[9391,75,8074,88],[9391,77,8074,93],[9392,14,8075,16],[9393,14,8076,16],[9393,18,8076,20,"request"],[9393,25,8076,27],[9393,26,8076,28,"captchaResponse"],[9393,41,8076,43],[9393,46,8076,48,"FAKE_TOKEN"],[9393,56,8076,58],[9393,58,8076,60],[9394,16,8077,20,"_assert"],[9394,23,8077,27],[9394,24,8077,28,"verifier"],[9394,32,8077,36],[9394,34,8077,38,"type"],[9394,38,8077,42],[9394,43,8077,47,"RECAPTCHA_VERIFIER_TYPE"],[9394,66,8077,70],[9394,68,8077,72,"authInstance"],[9394,80,8077,84],[9394,82,8077,86],[9394,98,8077,102],[9394,99,8077,103],[9394,133,8077,137],[9394,134,8077,138],[9395,16,8078,20],[9395,20,8078,26,"requestWithRecaptchaV2"],[9395,42,8078,48],[9395,51,8078,57,"injectRecaptchaV2Token"],[9395,73,8078,79],[9395,74,8078,80,"authInstance"],[9395,86,8078,92],[9395,88,8078,94,"request"],[9395,95,8078,101],[9395,97,8078,103,"verifier"],[9395,105,8078,111],[9395,106,8078,112],[9396,16,8079,20],[9396,23,8079,27,"sendPhoneVerificationCode"],[9396,48,8079,52],[9396,49,8079,53,"authInstance"],[9396,61,8079,65],[9396,63,8079,67,"requestWithRecaptchaV2"],[9396,85,8079,89],[9396,86,8079,90],[9397,14,8080,16],[9398,14,8081,16],[9398,21,8081,23,"sendPhoneVerificationCode"],[9398,46,8081,48],[9398,47,8081,49,"authInstance"],[9398,59,8081,61],[9398,61,8081,63,"request"],[9398,68,8081,70],[9398,69,8081,71],[9399,12,8082,12],[9399,13,8082,13],[9400,12,8082,13],[9400,28,8074,18,"sendPhoneVerificationCodeActionCallback"],[9400,67,8074,57,"sendPhoneVerificationCodeActionCallback"],[9400,68,8074,57,"_x226"],[9400,73,8074,57],[9400,75,8074,57,"_x227"],[9400,80,8074,57],[9401,14,8074,57],[9401,21,8074,57,"_ref32"],[9401,27,8074,57],[9401,28,8074,57,"apply"],[9401,33,8074,57],[9401,40,8074,57,"arguments"],[9401,49,8074,57],[9402,12,8074,57],[9403,10,8074,57],[9403,13,8082,13],[9404,10,8083,12],[9404,14,8083,18,"sendPhoneVerificationCodeResponse"],[9404,47,8083,51],[9404,50,8083,54,"handleRecaptchaFlow"],[9404,69,8083,73],[9404,70,8083,74,"auth"],[9404,74,8083,78],[9404,76,8083,80,"sendPhoneVerificationCodeRequest"],[9404,108,8083,112],[9404,110,8083,114],[9404,132,8083,136],[9404,133,8083,137],[9404,183,8083,187,"sendPhoneVerificationCodeActionCallback"],[9404,222,8083,226],[9404,224,8083,228],[9404,240,8083,244],[9404,241,8083,245],[9404,283,8083,287],[9404,284,8083,288],[9405,10,8084,12],[9405,14,8084,18,"response"],[9405,24,8084,26],[9405,33,8084,35,"sendPhoneVerificationCodeResponse"],[9405,66,8084,68],[9405,67,8084,69,"catch"],[9405,72,8084,74],[9405,73,8084,75,"error"],[9405,78,8084,80],[9405,82,8084,84],[9406,12,8085,16],[9406,19,8085,23,"Promise"],[9406,26,8085,30],[9406,27,8085,31,"reject"],[9406,33,8085,37],[9406,34,8085,38,"error"],[9406,39,8085,43],[9406,40,8085,44],[9407,10,8086,12],[9407,11,8086,13],[9407,12,8086,14],[9408,10,8087,12],[9408,17,8087,19,"response"],[9408,27,8087,27],[9408,28,8087,28,"sessionInfo"],[9408,39,8087,39],[9409,8,8088,8],[9410,6,8089,4],[9410,7,8089,5],[9410,16,8090,12],[9411,8,8091,8,"verifier"],[9411,16,8091,16],[9411,18,8091,18,"_reset"],[9411,24,8091,24],[9411,25,8091,25],[9411,26,8091,26],[9412,6,8092,4],[9413,4,8093,0],[9413,5,8093,1],[9414,4,8093,1],[9414,11,8093,1,"_verifyPhoneNumber2"],[9414,30,8093,1],[9414,31,8093,1,"apply"],[9414,36,8093,1],[9414,43,8093,1,"arguments"],[9414,52,8093,1],[9415,2,8093,1],[9416,2,8093,1],[9416,11,8117,15,"updatePhoneNumber"],[9416,28,8117,32,"updatePhoneNumber"],[9416,29,8117,32,"_x208"],[9416,34,8117,32],[9416,36,8117,32,"_x209"],[9416,41,8117,32],[9417,4,8117,32],[9417,11,8117,32,"_updatePhoneNumber"],[9417,29,8117,32],[9417,30,8117,32,"apply"],[9417,35,8117,32],[9417,42,8117,32,"arguments"],[9417,51,8117,32],[9418,2,8117,32],[9418,4,8124,0],[9419,2,8124,0],[9419,11,8124,0,"_updatePhoneNumber"],[9419,30,8124,0],[9420,4,8124,0,"_updatePhoneNumber"],[9420,22,8124,0],[9420,25,8124,0,"_asyncToGenerator"],[9420,42,8124,0],[9420,43,8117,0],[9420,54,8117,33,"user"],[9420,58,8117,37],[9420,60,8117,39,"credential"],[9420,70,8117,49],[9420,72,8117,51],[9421,6,8118,4],[9421,10,8118,10,"userInternal"],[9421,22,8118,22],[9421,25,8118,25,"util"],[9421,29,8118,29],[9421,30,8118,30,"getModularInstance"],[9421,48,8118,48],[9421,49,8118,49,"user"],[9421,53,8118,53],[9421,54,8118,54],[9422,6,8119,4],[9422,10,8119,8,"app"],[9422,13,8119,11],[9422,14,8119,12,"_isFirebaseServerApp"],[9422,34,8119,32],[9422,35,8119,33,"userInternal"],[9422,47,8119,45],[9422,48,8119,46,"auth"],[9422,52,8119,50],[9422,53,8119,51,"app"],[9422,56,8119,54],[9422,57,8119,55],[9422,59,8119,57],[9423,8,8120,8],[9423,15,8120,15,"Promise"],[9423,22,8120,22],[9423,23,8120,23,"reject"],[9423,29,8120,29],[9423,30,8120,30,"_serverAppCurrentUserOperationNotSupportedError"],[9423,77,8120,77],[9423,78,8120,78,"userInternal"],[9423,90,8120,90],[9423,91,8120,91,"auth"],[9423,95,8120,95],[9423,96,8120,96],[9423,97,8120,97],[9424,6,8121,4],[9425,6,8122,4],[9425,12,8122,10,"_link"],[9425,17,8122,15],[9425,18,8122,16,"userInternal"],[9425,30,8122,28],[9425,32,8122,30,"credential"],[9425,42,8122,40],[9425,43,8122,41],[9426,4,8123,0],[9426,5,8123,1],[9427,4,8123,1],[9427,11,8123,1,"_updatePhoneNumber"],[9427,29,8123,1],[9427,30,8123,1,"apply"],[9427,35,8123,1],[9427,42,8123,1,"arguments"],[9427,51,8123,1],[9428,2,8123,1],[9429,2,8123,1],[9429,11,8125,15,"injectRecaptchaV2Token"],[9429,33,8125,37,"injectRecaptchaV2Token"],[9429,34,8125,37,"_x210"],[9429,39,8125,37],[9429,41,8125,37,"_x211"],[9429,46,8125,37],[9429,48,8125,37,"_x212"],[9429,53,8125,37],[9430,4,8125,37],[9430,11,8125,37,"_injectRecaptchaV2Token"],[9430,34,8125,37],[9430,35,8125,37,"apply"],[9430,40,8125,37],[9430,47,8125,37,"arguments"],[9430,56,8125,37],[9431,2,8125,37],[9432,2,8168,0],[9433,0,8169,0],[9434,0,8170,0],[9435,0,8171,0],[9436,0,8172,0],[9437,0,8173,0],[9438,0,8174,0],[9439,0,8175,0],[9440,0,8176,0],[9441,0,8177,0],[9442,0,8178,0],[9443,0,8179,0],[9444,0,8180,0],[9445,0,8181,0],[9446,0,8182,0],[9447,0,8183,0],[9448,2,8184,0],[9449,0,8185,0],[9450,0,8186,0],[9451,0,8187,0],[9452,0,8188,0],[9453,0,8189,0],[9454,0,8190,0],[9455,0,8191,0],[9456,0,8192,0],[9457,0,8193,0],[9458,0,8194,0],[9459,0,8195,0],[9460,0,8196,0],[9461,0,8197,0],[9462,0,8198,0],[9463,0,8199,0],[9464,0,8200,0],[9465,0,8201,0],[9466,0,8202,0],[9467,2,8184,0],[9467,11,8184,0,"_injectRecaptchaV2Token"],[9467,35,8184,0],[9468,4,8184,0,"_injectRecaptchaV2Token"],[9468,27,8184,0],[9468,30,8184,0,"_asyncToGenerator"],[9468,47,8184,0],[9468,48,8125,0],[9468,59,8125,38,"auth"],[9468,63,8125,42],[9468,65,8125,44,"request"],[9468,72,8125,51],[9468,74,8125,53,"recaptchaV2Verifier"],[9468,93,8125,72],[9468,95,8125,74],[9469,6,8126,4,"_assert"],[9469,13,8126,11],[9469,14,8126,12,"recaptchaV2Verifier"],[9469,33,8126,31],[9469,34,8126,32,"type"],[9469,38,8126,36],[9469,43,8126,41,"RECAPTCHA_VERIFIER_TYPE"],[9469,66,8126,64],[9469,68,8126,66,"auth"],[9469,72,8126,70],[9469,74,8126,72],[9469,90,8126,88],[9469,91,8126,89],[9469,125,8126,123],[9469,126,8126,124],[9470,6,8127,4],[9470,10,8127,10,"recaptchaV2Token"],[9470,26,8127,26],[9470,35,8127,35,"recaptchaV2Verifier"],[9470,54,8127,54],[9470,55,8127,55,"verify"],[9470,61,8127,61],[9470,62,8127,62],[9470,63,8127,63],[9471,6,8128,4,"_assert"],[9471,13,8128,11],[9471,14,8128,12],[9471,21,8128,19,"recaptchaV2Token"],[9471,37,8128,35],[9471,42,8128,40],[9471,50,8128,48],[9471,52,8128,50,"auth"],[9471,56,8128,54],[9471,58,8128,56],[9471,74,8128,72],[9471,75,8128,73],[9471,109,8128,107],[9471,110,8128,108],[9472,6,8129,4],[9472,10,8129,10,"newRequest"],[9472,20,8129,20],[9472,23,8129,23],[9473,8,8129,25],[9473,11,8129,28,"request"],[9474,6,8129,36],[9474,7,8129,37],[9475,6,8130,4],[9475,10,8130,8],[9475,31,8130,29],[9475,35,8130,33,"newRequest"],[9475,45,8130,43],[9475,47,8130,45],[9476,8,8131,8],[9476,12,8131,14,"phoneNumber"],[9476,23,8131,25],[9476,26,8131,28,"newRequest"],[9476,36,8131,38],[9476,37,8131,39,"phoneEnrollmentInfo"],[9476,56,8131,58],[9476,57,8131,59,"phoneNumber"],[9476,68,8131,70],[9477,8,8132,8],[9477,12,8132,14,"captchaResponse"],[9477,27,8132,29],[9477,30,8132,32,"newRequest"],[9477,40,8132,42],[9477,41,8132,43,"phoneEnrollmentInfo"],[9477,60,8132,62],[9477,61,8132,63,"captchaResponse"],[9477,76,8132,78],[9478,8,8133,8],[9478,12,8133,14,"clientType"],[9478,22,8133,24],[9478,25,8133,27,"newRequest"],[9478,35,8133,37],[9478,36,8134,13,"phoneEnrollmentInfo"],[9478,55,8134,32],[9478,56,8134,33,"clientType"],[9478,66,8134,43],[9479,8,8135,8],[9479,12,8135,14,"recaptchaVersion"],[9479,28,8135,30],[9479,31,8135,33,"newRequest"],[9479,41,8135,43],[9479,42,8135,44,"phoneEnrollmentInfo"],[9479,61,8135,63],[9479,62,8135,64,"recaptchaVersion"],[9479,78,8135,80],[9480,8,8136,8,"Object"],[9480,14,8136,14],[9480,15,8136,15,"assign"],[9480,21,8136,21],[9480,22,8136,22,"newRequest"],[9480,32,8136,32],[9480,34,8136,34],[9481,10,8137,12],[9481,31,8137,33],[9481,33,8137,35],[9482,12,8138,16,"phoneNumber"],[9482,23,8138,27],[9483,12,8139,16,"recaptchaToken"],[9483,26,8139,30],[9483,28,8139,32,"recaptchaV2Token"],[9483,44,8139,48],[9484,12,8140,16,"captchaResponse"],[9484,27,8140,31],[9485,12,8141,16,"clientType"],[9485,22,8141,26],[9486,12,8142,16,"recaptchaVersion"],[9487,10,8143,12],[9488,8,8144,8],[9488,9,8144,9],[9488,10,8144,10],[9489,8,8145,8],[9489,15,8145,15,"newRequest"],[9489,25,8145,25],[9490,6,8146,4],[9490,7,8146,5],[9490,13,8147,9],[9490,17,8147,13],[9490,34,8147,30],[9490,38,8147,34,"newRequest"],[9490,48,8147,44],[9490,50,8147,46],[9491,8,8148,8],[9491,12,8148,14,"captchaResponse"],[9491,28,8148,29],[9491,31,8148,32,"newRequest"],[9491,41,8148,42],[9491,42,8148,43,"phoneSignInInfo"],[9491,57,8148,58],[9491,58,8148,59,"captchaResponse"],[9491,73,8148,74],[9492,8,8149,8],[9492,12,8149,14,"clientType"],[9492,23,8149,24],[9492,26,8149,27,"newRequest"],[9492,36,8149,37],[9492,37,8150,13,"phoneSignInInfo"],[9492,52,8150,28],[9492,53,8150,29,"clientType"],[9492,63,8150,39],[9493,8,8151,8],[9493,12,8151,14,"recaptchaVersion"],[9493,29,8151,30],[9493,32,8151,33,"newRequest"],[9493,42,8151,43],[9493,43,8151,44,"phoneSignInInfo"],[9493,58,8151,59],[9493,59,8151,60,"recaptchaVersion"],[9493,75,8151,76],[9494,8,8152,8,"Object"],[9494,14,8152,14],[9494,15,8152,15,"assign"],[9494,21,8152,21],[9494,22,8152,22,"newRequest"],[9494,32,8152,32],[9494,34,8152,34],[9495,10,8153,12],[9495,27,8153,29],[9495,29,8153,31],[9496,12,8154,16,"recaptchaToken"],[9496,26,8154,30],[9496,28,8154,32,"recaptchaV2Token"],[9496,44,8154,48],[9497,12,8155,16,"captchaResponse"],[9497,27,8155,31],[9497,29,8155,16,"captchaResponse"],[9497,45,8155,31],[9498,12,8156,16,"clientType"],[9498,22,8156,26],[9498,24,8156,16,"clientType"],[9498,35,8156,26],[9499,12,8157,16,"recaptchaVersion"],[9499,28,8157,32],[9499,30,8157,16,"recaptchaVersion"],[9500,10,8158,12],[9501,8,8159,8],[9501,9,8159,9],[9501,10,8159,10],[9502,8,8160,8],[9502,15,8160,15,"newRequest"],[9502,25,8160,25],[9503,6,8161,4],[9503,7,8161,5],[9503,13,8162,9],[9504,8,8163,8,"Object"],[9504,14,8163,14],[9504,15,8163,15,"assign"],[9504,21,8163,21],[9504,22,8163,22,"newRequest"],[9504,32,8163,32],[9504,34,8163,34],[9505,10,8163,36],[9505,26,8163,52],[9505,28,8163,54,"recaptchaV2Token"],[9506,8,8163,71],[9506,9,8163,72],[9506,10,8163,73],[9507,8,8164,8],[9507,15,8164,15,"newRequest"],[9507,25,8164,25],[9508,6,8165,4],[9509,4,8166,0],[9509,5,8166,1],[9510,4,8166,1],[9510,11,8166,1,"_injectRecaptchaV2Token"],[9510,34,8166,1],[9510,35,8166,1,"apply"],[9510,40,8166,1],[9510,47,8166,1,"arguments"],[9510,56,8166,1],[9511,2,8166,1],[9512,2,8166,1],[9512,6,8203,6,"PhoneAuthProvider"],[9512,23,8203,23],[9513,4,8204,4],[9514,0,8205,0],[9515,0,8206,0],[9516,0,8207,0],[9517,4,8208,4],[9517,13,8208,4,"PhoneAuthProvider"],[9517,31,8208,16,"auth"],[9517,35,8208,20],[9517,37,8208,22],[9518,6,8208,22,"_classCallCheck"],[9518,21,8208,22],[9518,28,8208,22,"PhoneAuthProvider"],[9518,45,8208,22],[9519,6,8209,8],[9520,6,8210,8],[9520,10,8210,12],[9520,11,8210,13,"providerId"],[9520,21,8210,23],[9520,24,8210,26,"PhoneAuthProvider"],[9520,41,8210,43],[9520,42,8210,44,"PROVIDER_ID"],[9520,53,8210,55],[9521,6,8211,8],[9521,10,8211,12],[9521,11,8211,13,"auth"],[9521,15,8211,17],[9521,18,8211,20,"_castAuth"],[9521,27,8211,29],[9521,28,8211,30,"auth"],[9521,32,8211,34],[9521,33,8211,35],[9522,4,8212,4],[9523,4,8213,4],[9524,0,8214,0],[9525,0,8215,0],[9526,0,8216,0],[9527,0,8217,0],[9528,0,8218,0],[9529,0,8219,0],[9530,0,8220,0],[9531,0,8221,0],[9532,0,8222,0],[9533,0,8223,0],[9534,0,8224,0],[9535,0,8225,0],[9536,0,8226,0],[9537,0,8227,0],[9538,0,8228,0],[9539,0,8229,0],[9540,0,8230,0],[9541,0,8231,0],[9542,0,8232,0],[9543,0,8233,0],[9544,0,8234,0],[9545,0,8235,0],[9546,0,8236,0],[9547,0,8237,0],[9548,0,8238,0],[9549,0,8239,0],[9550,0,8240,0],[9551,0,8241,0],[9552,0,8242,0],[9553,0,8243,0],[9554,0,8244,0],[9555,0,8245,0],[9556,4,8213,4],[9556,11,8213,4,"_createClass"],[9556,23,8213,4],[9556,24,8213,4,"PhoneAuthProvider"],[9556,41,8213,4],[9557,6,8213,4,"key"],[9557,9,8213,4],[9558,6,8213,4,"value"],[9558,11,8213,4],[9558,13,8246,4],[9558,22,8246,4,"verifyPhoneNumber"],[9558,39,8246,21,"verifyPhoneNumber"],[9558,40,8246,22,"phoneOptions"],[9558,52,8246,34],[9558,54,8246,36,"applicationVerifier"],[9558,73,8246,55],[9558,75,8246,57],[9559,8,8247,8],[9559,15,8247,15,"_verifyPhoneNumber"],[9559,33,8247,33],[9559,34,8247,34],[9559,38,8247,38],[9559,39,8247,39,"auth"],[9559,43,8247,43],[9559,45,8247,45,"phoneOptions"],[9559,57,8247,57],[9559,59,8247,59,"util"],[9559,63,8247,63],[9559,64,8247,64,"getModularInstance"],[9559,82,8247,82],[9559,83,8247,83,"applicationVerifier"],[9559,102,8247,102],[9559,103,8247,103],[9559,104,8247,104],[9560,6,8248,4],[9561,6,8249,4],[9562,0,8250,0],[9563,0,8251,0],[9564,0,8252,0],[9565,0,8253,0],[9566,0,8254,0],[9567,0,8255,0],[9568,0,8256,0],[9569,0,8257,0],[9570,0,8258,0],[9571,0,8259,0],[9572,0,8260,0],[9573,0,8261,0],[9574,0,8262,0],[9575,0,8263,0],[9576,0,8264,0],[9577,0,8265,0],[9578,0,8266,0],[9579,0,8267,0],[9580,0,8268,0],[9581,0,8269,0],[9582,0,8270,0],[9583,0,8271,0],[9584,0,8272,0],[9585,0,8273,0],[9586,0,8274,0],[9587,0,8275,0],[9588,4,8249,4],[9589,6,8249,4,"key"],[9589,9,8249,4],[9590,6,8249,4,"value"],[9590,11,8249,4],[9590,13,8276,4],[9590,22,8276,11,"credential"],[9590,32,8276,21,"credential"],[9590,33,8276,22,"verificationId"],[9590,47,8276,36],[9590,49,8276,38,"verificationCode"],[9590,65,8276,54],[9590,67,8276,56],[9591,8,8277,8],[9591,15,8277,15,"PhoneAuthCredential"],[9591,34,8277,34],[9591,35,8277,35,"_fromVerification"],[9591,52,8277,52],[9591,53,8277,53,"verificationId"],[9591,67,8277,67],[9591,69,8277,69,"verificationCode"],[9591,85,8277,85],[9591,86,8277,86],[9592,6,8278,4],[9593,6,8279,4],[9594,0,8280,0],[9595,0,8281,0],[9596,0,8282,0],[9597,4,8279,4],[9598,6,8279,4,"key"],[9598,9,8279,4],[9599,6,8279,4,"value"],[9599,11,8279,4],[9599,13,8283,4],[9599,22,8283,11,"credentialFromResult"],[9599,42,8283,31,"credentialFromResult"],[9599,43,8283,32,"userCredential"],[9599,57,8283,46],[9599,59,8283,48],[9600,8,8284,8],[9600,12,8284,14,"credential"],[9600,22,8284,24],[9600,25,8284,27,"userCredential"],[9600,39,8284,41],[9601,8,8285,8],[9601,15,8285,15,"PhoneAuthProvider"],[9601,32,8285,32],[9601,33,8285,33,"credentialFromTaggedObject"],[9601,59,8285,59],[9601,60,8285,60,"credential"],[9601,70,8285,70],[9601,71,8285,71],[9602,6,8286,4],[9603,6,8287,4],[9604,0,8288,0],[9605,0,8289,0],[9606,0,8290,0],[9607,0,8291,0],[9608,0,8292,0],[9609,0,8293,0],[9610,0,8294,0],[9611,0,8295,0],[9612,0,8296,0],[9613,0,8297,0],[9614,0,8298,0],[9615,0,8299,0],[9616,0,8300,0],[9617,0,8301,0],[9618,0,8302,0],[9619,0,8303,0],[9620,0,8304,0],[9621,0,8305,0],[9622,0,8306,0],[9623,0,8307,0],[9624,0,8308,0],[9625,0,8309,0],[9626,0,8310,0],[9627,0,8311,0],[9628,0,8312,0],[9629,0,8313,0],[9630,0,8314,0],[9631,0,8315,0],[9632,0,8316,0],[9633,0,8317,0],[9634,0,8318,0],[9635,4,8287,4],[9636,6,8287,4,"key"],[9636,9,8287,4],[9637,6,8287,4,"value"],[9637,11,8287,4],[9637,13,8319,4],[9637,22,8319,11,"credentialFromError"],[9637,41,8319,30,"credentialFromError"],[9637,42,8319,31,"error"],[9637,47,8319,36],[9637,49,8319,38],[9638,8,8320,8],[9638,15,8320,15,"PhoneAuthProvider"],[9638,32,8320,32],[9638,33,8320,33,"credentialFromTaggedObject"],[9638,59,8320,59],[9638,60,8320,61,"error"],[9638,65,8320,66],[9638,66,8320,67,"customData"],[9638,76,8320,77],[9638,80,8320,81],[9638,81,8320,82],[9638,82,8320,84],[9638,83,8320,85],[9639,6,8321,4],[9640,4,8321,5],[9641,6,8321,5,"key"],[9641,9,8321,5],[9642,6,8321,5,"value"],[9642,11,8321,5],[9642,13,8322,4],[9642,22,8322,11,"credentialFromTaggedObject"],[9642,48,8322,37,"credentialFromTaggedObject"],[9642,49,8322,37,"_ref23"],[9642,55,8322,37],[9642,57,8322,73],[9643,8,8322,73],[9643,12,8322,56,"tokenResponse"],[9643,25,8322,69],[9643,28,8322,69,"_ref23"],[9643,34,8322,69],[9643,35,8322,40,"_tokenResponse"],[9643,49,8322,54],[9644,8,8323,8],[9644,12,8323,12],[9644,13,8323,13,"tokenResponse"],[9644,26,8323,26],[9644,28,8323,28],[9645,10,8324,12],[9645,17,8324,19],[9645,21,8324,23],[9646,8,8325,8],[9647,8,8326,8],[9647,12,8326,16,"phoneNumber"],[9647,23,8326,27],[9647,26,8326,48,"tokenResponse"],[9647,39,8326,61],[9647,40,8326,16,"phoneNumber"],[9647,51,8326,27],[9648,10,8326,29,"temporaryProof"],[9648,24,8326,43],[9648,27,8326,48,"tokenResponse"],[9648,40,8326,61],[9648,41,8326,29,"temporaryProof"],[9648,55,8326,43],[9649,8,8327,8],[9649,12,8327,12,"phoneNumber"],[9649,23,8327,23],[9649,27,8327,27,"temporaryProof"],[9649,41,8327,41],[9649,43,8327,43],[9650,10,8328,12],[9650,17,8328,19,"PhoneAuthCredential"],[9650,36,8328,38],[9650,37,8328,39,"_fromTokenResponse"],[9650,55,8328,57],[9650,56,8328,58,"phoneNumber"],[9650,67,8328,69],[9650,69,8328,71,"temporaryProof"],[9650,83,8328,85],[9650,84,8328,86],[9651,8,8329,8],[9652,8,8330,8],[9652,15,8330,15],[9652,19,8330,19],[9653,6,8331,4],[9654,4,8331,5],[9655,2,8331,5],[9656,2,8333,0],[9657,2,8334,0,"PhoneAuthProvider"],[9657,19,8334,17],[9657,20,8334,18,"PROVIDER_ID"],[9657,31,8334,29],[9657,34,8334,32],[9657,41,8334,39],[9657,42,8334,40],[9658,2,8335,0],[9659,2,8336,0,"PhoneAuthProvider"],[9659,19,8336,17],[9659,20,8336,18,"PHONE_SIGN_IN_METHOD"],[9659,40,8336,38],[9659,43,8336,41],[9659,50,8336,48],[9659,51,8336,49],[9660,2,8336,74],[9660,6,8338,6,"MultiFactorAssertionImpl"],[9660,30,8338,30],[9661,4,8339,4],[9661,13,8339,4,"MultiFactorAssertionImpl"],[9661,38,8339,16,"factorId"],[9661,46,8339,24],[9661,48,8339,26],[9662,6,8339,26,"_classCallCheck"],[9662,21,8339,26],[9662,28,8339,26,"MultiFactorAssertionImpl"],[9662,52,8339,26],[9663,6,8340,8],[9663,10,8340,12],[9663,11,8340,13,"factorId"],[9663,19,8340,21],[9663,22,8340,24,"factorId"],[9663,30,8340,32],[9664,4,8341,4],[9665,4,8341,5],[9665,11,8341,5,"_createClass"],[9665,23,8341,5],[9665,24,8341,5,"MultiFactorAssertionImpl"],[9665,48,8341,5],[9666,6,8341,5,"key"],[9666,9,8341,5],[9667,6,8341,5,"value"],[9667,11,8341,5],[9667,13,8342,4],[9667,22,8342,4,"_process"],[9667,30,8342,12,"_process"],[9667,31,8342,13,"auth"],[9667,35,8342,17],[9667,37,8342,19,"session"],[9667,44,8342,26],[9667,46,8342,28,"displayName"],[9667,57,8342,39],[9667,59,8342,41],[9668,8,8343,8],[9668,16,8343,16,"session"],[9668,23,8343,23],[9668,24,8343,24,"type"],[9668,28,8343,28],[9669,10,8344,12],[9669,15,8344,17],[9669,23,8344,25],[9669,24,8344,26],[9670,12,8345,16],[9670,19,8345,23],[9670,23,8345,27],[9670,24,8345,28,"_finalizeEnroll"],[9670,39,8345,43],[9670,40,8345,44,"auth"],[9670,44,8345,48],[9670,46,8345,50,"session"],[9670,53,8345,57],[9670,54,8345,58,"credential"],[9670,64,8345,68],[9670,66,8345,70,"displayName"],[9670,77,8345,81],[9670,78,8345,82],[9671,10,8346,12],[9671,15,8346,17],[9671,23,8346,25],[9671,24,8346,26],[9672,12,8347,16],[9672,19,8347,23],[9672,23,8347,27],[9672,24,8347,28,"_finalizeSignIn"],[9672,39,8347,43],[9672,40,8347,44,"auth"],[9672,44,8347,48],[9672,46,8347,50,"session"],[9672,53,8347,57],[9672,54,8347,58,"credential"],[9672,64,8347,68],[9672,65,8347,69],[9673,10,8348,12],[9674,12,8349,16],[9674,19,8349,23,"debugFail"],[9674,28,8349,32],[9674,29,8349,33],[9674,64,8349,68],[9674,65,8349,69],[9675,8,8350,8],[9676,6,8351,4],[9677,4,8351,5],[9678,2,8351,5],[9679,2,8354,0],[9680,0,8355,0],[9681,0,8356,0],[9682,0,8357,0],[9683,0,8358,0],[9684,2,8354,0],[9684,6,8359,6,"PhoneMultiFactorAssertionImpl"],[9684,35,8359,35],[9684,61,8359,35,"_MultiFactorAssertion"],[9684,82,8359,35],[9685,4,8360,4],[9685,13,8360,4,"PhoneMultiFactorAssertionImpl"],[9685,43,8360,16,"credential"],[9685,53,8360,26],[9685,55,8360,28],[9686,6,8360,28],[9686,10,8360,28,"_this13"],[9686,17,8360,28],[9687,6,8360,28,"_classCallCheck"],[9687,21,8360,28],[9687,28,8360,28,"PhoneMultiFactorAssertionImpl"],[9687,57,8360,28],[9688,6,8361,8,"_this13"],[9688,13,8361,8],[9688,16,8361,8,"_callSuper"],[9688,26,8361,8],[9688,33,8361,8,"PhoneMultiFactorAssertionImpl"],[9688,62,8361,8],[9688,65,8361,14],[9688,72,8361,21],[9688,73,8361,22],[9689,6,8362,8,"_this13"],[9689,13,8362,8],[9689,14,8362,13,"credential"],[9689,24,8362,23],[9689,27,8362,26,"credential"],[9689,37,8362,36],[9690,6,8362,37],[9690,13,8362,37,"_this13"],[9690,20,8362,37],[9691,4,8363,4],[9692,4,8364,4],[9693,4,8364,4,"_inherits"],[9693,13,8364,4],[9693,14,8364,4,"PhoneMultiFactorAssertionImpl"],[9693,43,8364,4],[9693,45,8364,4,"_MultiFactorAssertion"],[9693,66,8364,4],[9694,4,8364,4],[9694,11,8364,4,"_createClass"],[9694,23,8364,4],[9694,24,8364,4,"PhoneMultiFactorAssertionImpl"],[9694,53,8364,4],[9695,6,8364,4,"key"],[9695,9,8364,4],[9696,6,8364,4,"value"],[9696,11,8364,4],[9696,13,8368,4],[9697,6,8369,4],[9697,15,8369,4,"_finalizeEnroll"],[9697,30,8369,19,"_finalizeEnroll"],[9697,31,8369,20,"auth"],[9697,35,8369,24],[9697,37,8369,26,"idToken"],[9697,44,8369,33],[9697,46,8369,35,"displayName"],[9697,57,8369,46],[9697,59,8369,48],[9698,8,8370,8],[9698,15,8370,15,"finalizeEnrollPhoneMfa"],[9698,37,8370,37],[9698,38,8370,38,"auth"],[9698,42,8370,42],[9698,44,8370,44],[9699,10,8371,12,"idToken"],[9699,17,8371,19],[9700,10,8372,12,"displayName"],[9700,21,8372,23],[9701,10,8373,12,"phoneVerificationInfo"],[9701,31,8373,33],[9701,33,8373,35],[9701,37,8373,39],[9701,38,8373,40,"credential"],[9701,48,8373,50],[9701,49,8373,51,"_makeVerificationRequest"],[9701,73,8373,75],[9701,74,8373,76],[9702,8,8374,8],[9702,9,8374,9],[9702,10,8374,10],[9703,6,8375,4],[9704,6,8376,4],[9705,4,8376,4],[9706,6,8376,4,"key"],[9706,9,8376,4],[9707,6,8376,4,"value"],[9707,11,8376,4],[9707,13,8377,4],[9707,22,8377,4,"_finalizeSignIn"],[9707,37,8377,19,"_finalizeSignIn"],[9707,38,8377,20,"auth"],[9707,42,8377,24],[9707,44,8377,26,"mfaPendingCredential"],[9707,64,8377,46],[9707,66,8377,48],[9708,8,8378,8],[9708,15,8378,15,"finalizeSignInPhoneMfa"],[9708,37,8378,37],[9708,38,8378,38,"auth"],[9708,42,8378,42],[9708,44,8378,44],[9709,10,8379,12,"mfaPendingCredential"],[9709,30,8379,32],[9710,10,8380,12,"phoneVerificationInfo"],[9710,31,8380,33],[9710,33,8380,35],[9710,37,8380,39],[9710,38,8380,40,"credential"],[9710,48,8380,50],[9710,49,8380,51,"_makeVerificationRequest"],[9710,73,8380,75],[9710,74,8380,76],[9711,8,8381,8],[9711,9,8381,9],[9711,10,8381,10],[9712,6,8382,4],[9713,4,8382,5],[9714,6,8382,5,"key"],[9714,9,8382,5],[9715,6,8382,5,"value"],[9715,11,8382,5],[9715,13,8365,4],[9715,22,8365,11,"_fromCredential"],[9715,37,8365,26,"_fromCredential"],[9715,38,8365,27,"credential"],[9715,48,8365,37],[9715,50,8365,39],[9716,8,8366,8],[9716,15,8366,15],[9716,19,8366,19,"PhoneMultiFactorAssertionImpl"],[9716,48,8366,48],[9716,49,8366,49,"credential"],[9716,59,8366,59],[9716,60,8366,60],[9717,6,8367,4],[9718,4,8367,5],[9719,2,8367,5],[9719,4,8359,44,"MultiFactorAssertionImpl"],[9719,28,8359,68],[9720,2,8384,0],[9721,0,8385,0],[9722,0,8386,0],[9723,0,8387,0],[9724,0,8388,0],[9725,2,8384,0],[9725,6,8389,6,"PhoneMultiFactorGenerator"],[9725,31,8389,31],[9726,4,8390,4],[9726,13,8390,4,"PhoneMultiFactorGenerator"],[9726,39,8390,4],[9726,41,8390,18],[9727,6,8390,18,"_classCallCheck"],[9727,21,8390,18],[9727,28,8390,18,"PhoneMultiFactorGenerator"],[9727,53,8390,18],[9728,4,8390,20],[9729,4,8391,4],[9730,0,8392,0],[9731,0,8393,0],[9732,0,8394,0],[9733,0,8395,0],[9734,0,8396,0],[9735,0,8397,0],[9736,0,8398,0],[9737,0,8399,0],[9738,0,8400,0],[9739,4,8391,4],[9739,11,8391,4,"_createClass"],[9739,23,8391,4],[9739,24,8391,4,"PhoneMultiFactorGenerator"],[9739,49,8391,4],[9740,6,8391,4,"key"],[9740,9,8391,4],[9741,6,8391,4,"value"],[9741,11,8391,4],[9741,13,8401,4],[9741,22,8401,11,"assertion"],[9741,31,8401,20,"assertion"],[9741,32,8401,21,"credential"],[9741,42,8401,31],[9741,44,8401,33],[9742,8,8402,8],[9742,15,8402,15,"PhoneMultiFactorAssertionImpl"],[9742,44,8402,44],[9742,45,8402,45,"_fromCredential"],[9742,60,8402,60],[9742,61,8402,61,"credential"],[9742,71,8402,71],[9742,72,8402,72],[9743,6,8403,4],[9744,4,8403,5],[9745,2,8403,5],[9746,2,8405,0],[9747,0,8406,0],[9748,0,8407,0],[9749,2,8408,0,"PhoneMultiFactorGenerator"],[9749,27,8408,25],[9749,28,8408,26,"FACTOR_ID"],[9749,37,8408,35],[9749,40,8408,38],[9749,47,8408,45],[9751,2,8410,0],[9752,0,8411,0],[9753,0,8412,0],[9754,0,8413,0],[9755,0,8414,0],[9756,2,8410,0],[9756,6,8415,6,"TotpMultiFactorGenerator"],[9756,30,8415,30],[9757,4,8415,30],[9757,13,8415,30,"TotpMultiFactorGenerator"],[9757,38,8415,30],[9758,6,8415,30,"_classCallCheck"],[9758,21,8415,30],[9758,28,8415,30,"TotpMultiFactorGenerator"],[9758,52,8415,30],[9759,4,8415,30],[9760,4,8415,30],[9760,11,8415,30,"_createClass"],[9760,23,8415,30],[9760,24,8415,30,"TotpMultiFactorGenerator"],[9760,48,8415,30],[9761,6,8415,30,"key"],[9761,9,8415,30],[9762,6,8415,30,"value"],[9762,11,8415,30],[9763,6,8416,4],[9764,0,8417,0],[9765,0,8418,0],[9766,0,8419,0],[9767,0,8420,0],[9768,0,8421,0],[9769,0,8422,0],[9770,0,8423,0],[9771,0,8424,0],[9772,0,8425,0],[9773,6,8426,4],[9773,15,8426,11,"assertionForEnrollment"],[9773,37,8426,33,"assertionForEnrollment"],[9773,38,8426,34,"secret"],[9773,44,8426,40],[9773,46,8426,42,"oneTimePassword"],[9773,61,8426,57],[9773,63,8426,59],[9774,8,8427,8],[9774,15,8427,15,"TotpMultiFactorAssertionImpl"],[9774,43,8427,43],[9774,44,8427,44,"_fromSecret"],[9774,55,8427,55],[9774,56,8427,56,"secret"],[9774,62,8427,62],[9774,64,8427,64,"oneTimePassword"],[9774,79,8427,79],[9774,80,8427,80],[9775,6,8428,4],[9776,6,8429,4],[9777,0,8430,0],[9778,0,8431,0],[9779,0,8432,0],[9780,0,8433,0],[9781,0,8434,0],[9782,0,8435,0],[9783,0,8436,0],[9784,0,8437,0],[9785,4,8429,4],[9786,6,8429,4,"key"],[9786,9,8429,4],[9787,6,8429,4,"value"],[9787,11,8429,4],[9787,13,8438,4],[9787,22,8438,11,"assertionForSignIn"],[9787,40,8438,29,"assertionForSignIn"],[9787,41,8438,30,"enrollmentId"],[9787,53,8438,42],[9787,55,8438,44,"oneTimePassword"],[9787,70,8438,59],[9787,72,8438,61],[9788,8,8439,8],[9788,15,8439,15,"TotpMultiFactorAssertionImpl"],[9788,43,8439,43],[9788,44,8439,44,"_fromEnrollmentId"],[9788,61,8439,61],[9788,62,8439,62,"enrollmentId"],[9788,74,8439,74],[9788,76,8439,76,"oneTimePassword"],[9788,91,8439,91],[9788,92,8439,92],[9789,6,8440,4],[9790,6,8441,4],[9791,0,8442,0],[9792,0,8443,0],[9793,0,8444,0],[9794,0,8445,0],[9795,0,8446,0],[9796,0,8447,0],[9797,0,8448,0],[9798,0,8449,0],[9799,4,8441,4],[9800,6,8441,4,"key"],[9800,9,8441,4],[9801,6,8441,4,"value"],[9801,11,8441,4],[9802,8,8441,4],[9802,12,8441,4,"_generateSecret"],[9802,27,8441,4],[9802,30,8441,4,"_asyncToGenerator"],[9802,47,8441,4],[9802,48,8450,4],[9802,59,8450,32,"session"],[9802,66,8450,39],[9802,68,8450,41],[9803,10,8451,8],[9803,14,8451,14,"mfaSession"],[9803,24,8451,24],[9803,27,8451,27,"session"],[9803,34,8451,34],[9804,10,8452,8,"_assert"],[9804,17,8452,15],[9804,18,8452,16],[9804,25,8452,23,"mfaSession"],[9804,35,8452,33],[9804,36,8452,34,"user"],[9804,40,8452,38],[9804,42,8452,40,"auth"],[9804,46,8452,44],[9804,51,8452,49],[9804,62,8452,60],[9804,64,8452,62],[9804,80,8452,78],[9804,81,8452,79],[9804,115,8452,113],[9804,116,8452,114],[9805,10,8453,8],[9805,14,8453,14,"response"],[9805,22,8453,22],[9805,31,8453,31,"startEnrollTotpMfa"],[9805,49,8453,49],[9805,50,8453,50,"mfaSession"],[9805,60,8453,60],[9805,61,8453,61,"user"],[9805,65,8453,65],[9805,66,8453,66,"auth"],[9805,70,8453,70],[9805,72,8453,72],[9806,12,8454,12,"idToken"],[9806,19,8454,19],[9806,21,8454,21,"mfaSession"],[9806,31,8454,31],[9806,32,8454,32,"credential"],[9806,42,8454,42],[9807,12,8455,12,"totpEnrollmentInfo"],[9807,30,8455,30],[9807,32,8455,32],[9807,33,8455,33],[9808,10,8456,8],[9808,11,8456,9],[9808,12,8456,10],[9809,10,8457,8],[9809,17,8457,15,"TotpSecret"],[9809,27,8457,25],[9809,28,8457,26,"_fromStartTotpMfaEnrollmentResponse"],[9809,63,8457,61],[9809,64,8457,62,"response"],[9809,72,8457,70],[9809,74,8457,72,"mfaSession"],[9809,84,8457,82],[9809,85,8457,83,"user"],[9809,89,8457,87],[9809,90,8457,88,"auth"],[9809,94,8457,92],[9809,95,8457,93],[9810,8,8458,4],[9810,9,8458,5],[9811,8,8458,5],[9811,17,8450,17,"generateSecret"],[9811,31,8450,31,"generateSecret"],[9811,32,8450,31,"_x213"],[9811,37,8450,31],[9812,10,8450,31],[9812,17,8450,31,"_generateSecret"],[9812,32,8450,31],[9812,33,8450,31,"apply"],[9812,38,8450,31],[9812,45,8450,31,"arguments"],[9812,54,8450,31],[9813,8,8450,31],[9814,8,8450,31],[9814,15,8450,17,"generateSecret"],[9814,29,8450,31],[9815,6,8450,31],[9816,4,8450,31],[9817,2,8450,31],[9818,2,8460,0],[9819,0,8461,0],[9820,0,8462,0],[9821,2,8463,0,"TotpMultiFactorGenerator"],[9821,26,8463,24],[9821,27,8463,25,"FACTOR_ID"],[9821,36,8463,34],[9821,39,8463,37],[9821,45,8463,43],[9821,46,8463,44],[9822,2,8463,64],[9822,6,8464,6,"TotpMultiFactorAssertionImpl"],[9822,34,8464,34],[9822,60,8464,34,"_MultiFactorAssertion2"],[9822,82,8464,34],[9823,4,8465,4],[9823,13,8465,4,"TotpMultiFactorAssertionImpl"],[9823,42,8465,16,"otp"],[9823,45,8465,19],[9823,47,8465,21,"enrollmentId"],[9823,59,8465,33],[9823,61,8465,35,"secret"],[9823,67,8465,41],[9823,69,8465,43],[9824,6,8465,43],[9824,10,8465,43,"_this14"],[9824,17,8465,43],[9825,6,8465,43,"_classCallCheck"],[9825,21,8465,43],[9825,28,8465,43,"TotpMultiFactorAssertionImpl"],[9825,56,8465,43],[9826,6,8466,8,"_this14"],[9826,13,8466,8],[9826,16,8466,8,"_callSuper"],[9826,26,8466,8],[9826,33,8466,8,"TotpMultiFactorAssertionImpl"],[9826,61,8466,8],[9826,64,8466,14],[9826,70,8466,20],[9826,71,8466,21],[9827,6,8467,8,"_this14"],[9827,13,8467,8],[9827,14,8467,13,"otp"],[9827,17,8467,16],[9827,20,8467,19,"otp"],[9827,23,8467,22],[9828,6,8468,8,"_this14"],[9828,13,8468,8],[9828,14,8468,13,"enrollmentId"],[9828,26,8468,25],[9828,29,8468,28,"enrollmentId"],[9828,41,8468,40],[9829,6,8469,8,"_this14"],[9829,13,8469,8],[9829,14,8469,13,"secret"],[9829,20,8469,19],[9829,23,8469,22,"secret"],[9829,29,8469,28],[9830,6,8469,29],[9830,13,8469,29,"_this14"],[9830,20,8469,29],[9831,4,8470,4],[9832,4,8471,4],[9833,4,8471,4,"_inherits"],[9833,13,8471,4],[9833,14,8471,4,"TotpMultiFactorAssertionImpl"],[9833,42,8471,4],[9833,44,8471,4,"_MultiFactorAssertion2"],[9833,66,8471,4],[9834,4,8471,4],[9834,11,8471,4,"_createClass"],[9834,23,8471,4],[9834,24,8471,4,"TotpMultiFactorAssertionImpl"],[9834,52,8471,4],[9835,6,8471,4,"key"],[9835,9,8471,4],[9836,6,8471,4,"value"],[9836,11,8471,4],[9836,14,8479,4],[9837,8,8479,4],[9837,12,8479,4,"_finalizeEnroll2"],[9837,28,8479,4],[9837,31,8479,4,"_asyncToGenerator"],[9837,48,8479,4],[9837,49,8480,4],[9837,60,8480,26,"auth"],[9837,64,8480,30],[9837,66,8480,32,"idToken"],[9837,73,8480,39],[9837,75,8480,41,"displayName"],[9837,86,8480,52],[9837,88,8480,54],[9838,10,8481,8,"_assert"],[9838,17,8481,15],[9838,18,8481,16],[9838,25,8481,23],[9838,29,8481,27],[9838,30,8481,28,"secret"],[9838,36,8481,34],[9838,41,8481,39],[9838,52,8481,50],[9838,54,8481,52,"auth"],[9838,58,8481,56],[9838,60,8481,58],[9838,76,8481,74],[9838,77,8481,75],[9838,111,8481,109],[9838,112,8481,110],[9839,10,8482,8],[9839,17,8482,15,"finalizeEnrollTotpMfa"],[9839,38,8482,36],[9839,39,8482,37,"auth"],[9839,43,8482,41],[9839,45,8482,43],[9840,12,8483,12,"idToken"],[9840,19,8483,19],[9841,12,8484,12,"displayName"],[9841,23,8484,23],[9842,12,8485,12,"totpVerificationInfo"],[9842,32,8485,32],[9842,34,8485,34],[9842,38,8485,38],[9842,39,8485,39,"secret"],[9842,45,8485,45],[9842,46,8485,46,"_makeTotpVerificationInfo"],[9842,71,8485,71],[9842,72,8485,72],[9842,76,8485,76],[9842,77,8485,77,"otp"],[9842,80,8485,80],[9843,10,8486,8],[9843,11,8486,9],[9843,12,8486,10],[9844,8,8487,4],[9844,9,8487,5],[9845,8,8487,5],[9845,17,8480,10,"_finalizeEnroll"],[9845,32,8480,25,"_finalizeEnroll"],[9845,33,8480,25,"_x214"],[9845,38,8480,25],[9845,40,8480,25,"_x215"],[9845,45,8480,25],[9845,47,8480,25,"_x216"],[9845,52,8480,25],[9846,10,8480,25],[9846,17,8480,25,"_finalizeEnroll2"],[9846,33,8480,25],[9846,34,8480,25,"apply"],[9846,39,8480,25],[9846,46,8480,25,"arguments"],[9846,55,8480,25],[9847,8,8480,25],[9848,8,8480,25],[9848,15,8480,10,"_finalizeEnroll"],[9848,30,8480,25],[9849,6,8480,25],[9849,10,8488,4],[9850,4,8488,4],[9851,6,8488,4,"key"],[9851,9,8488,4],[9852,6,8488,4,"value"],[9852,11,8488,4],[9853,8,8488,4],[9853,12,8488,4,"_finalizeSignIn2"],[9853,28,8488,4],[9853,31,8488,4,"_asyncToGenerator"],[9853,48,8488,4],[9853,49,8489,4],[9853,60,8489,26,"auth"],[9853,64,8489,30],[9853,66,8489,32,"mfaPendingCredential"],[9853,86,8489,52],[9853,88,8489,54],[9854,10,8490,8,"_assert"],[9854,17,8490,15],[9854,18,8490,16],[9854,22,8490,20],[9854,23,8490,21,"enrollmentId"],[9854,35,8490,33],[9854,40,8490,38,"undefined"],[9854,49,8490,47],[9854,53,8490,51],[9854,57,8490,55],[9854,58,8490,56,"otp"],[9854,61,8490,59],[9854,66,8490,64,"undefined"],[9854,75,8490,73],[9854,77,8490,75,"auth"],[9854,81,8490,79],[9854,83,8490,81],[9854,99,8490,97],[9854,100,8490,98],[9854,134,8490,132],[9854,135,8490,133],[9855,10,8491,8],[9855,14,8491,14,"totpVerificationInfo"],[9855,34,8491,34],[9855,37,8491,37],[9856,12,8491,39,"verificationCode"],[9856,28,8491,55],[9856,30,8491,57],[9856,34,8491,61],[9856,35,8491,62,"otp"],[9857,10,8491,66],[9857,11,8491,67],[9858,10,8492,8],[9858,17,8492,15,"finalizeSignInTotpMfa"],[9858,38,8492,36],[9858,39,8492,37,"auth"],[9858,43,8492,41],[9858,45,8492,43],[9859,12,8493,12,"mfaPendingCredential"],[9859,32,8493,32],[9860,12,8494,12,"mfaEnrollmentId"],[9860,27,8494,27],[9860,29,8494,29],[9860,33,8494,33],[9860,34,8494,34,"enrollmentId"],[9860,46,8494,46],[9861,12,8495,12,"totpVerificationInfo"],[9862,10,8496,8],[9862,11,8496,9],[9862,12,8496,10],[9863,8,8497,4],[9863,9,8497,5],[9864,8,8497,5],[9864,17,8489,10,"_finalizeSignIn"],[9864,32,8489,25,"_finalizeSignIn"],[9864,33,8489,25,"_x217"],[9864,38,8489,25],[9864,40,8489,25,"_x218"],[9864,45,8489,25],[9865,10,8489,25],[9865,17,8489,25,"_finalizeSignIn2"],[9865,33,8489,25],[9865,34,8489,25,"apply"],[9865,39,8489,25],[9865,46,8489,25,"arguments"],[9865,55,8489,25],[9866,8,8489,25],[9867,8,8489,25],[9867,15,8489,10,"_finalizeSignIn"],[9867,30,8489,25],[9868,6,8489,25],[9869,4,8489,25],[9870,6,8489,25,"key"],[9870,9,8489,25],[9871,6,8489,25,"value"],[9871,11,8489,25],[9871,13,8472,4],[9871,22,8472,11,"_fromSecret"],[9871,33,8472,22,"_fromSecret"],[9871,34,8472,23,"secret"],[9871,40,8472,29],[9871,42,8472,31,"otp"],[9871,45,8472,34],[9871,47,8472,36],[9872,8,8473,8],[9872,15,8473,15],[9872,19,8473,19,"TotpMultiFactorAssertionImpl"],[9872,47,8473,47],[9872,48,8473,48,"otp"],[9872,51,8473,51],[9872,53,8473,53,"undefined"],[9872,62,8473,62],[9872,64,8473,64,"secret"],[9872,70,8473,70],[9872,71,8473,71],[9873,6,8474,4],[9874,6,8475,4],[9875,4,8475,4],[9876,6,8475,4,"key"],[9876,9,8475,4],[9877,6,8475,4,"value"],[9877,11,8475,4],[9877,13,8476,4],[9877,22,8476,11,"_fromEnrollmentId"],[9877,39,8476,28,"_fromEnrollmentId"],[9877,40,8476,29,"enrollmentId"],[9877,52,8476,41],[9877,54,8476,43,"otp"],[9877,57,8476,46],[9877,59,8476,48],[9878,8,8477,8],[9878,15,8477,15],[9878,19,8477,19,"TotpMultiFactorAssertionImpl"],[9878,47,8477,47],[9878,48,8477,48,"otp"],[9878,51,8477,51],[9878,53,8477,53,"enrollmentId"],[9878,65,8477,65],[9878,66,8477,66],[9879,6,8478,4],[9880,4,8478,5],[9881,2,8478,5],[9881,4,8464,43,"MultiFactorAssertionImpl"],[9881,28,8464,67],[9882,2,8499,0],[9883,0,8500,0],[9884,0,8501,0],[9885,0,8502,0],[9886,0,8503,0],[9887,0,8504,0],[9888,0,8505,0],[9889,2,8499,0],[9889,6,8506,6,"TotpSecret"],[9889,16,8506,16],[9890,4,8507,4],[9891,4,8508,4],[9891,13,8508,4,"TotpSecret"],[9891,24,8508,16,"secretKey"],[9891,33,8508,25],[9891,35,8508,27,"hashingAlgorithm"],[9891,51,8508,43],[9891,53,8508,45,"codeLength"],[9891,63,8508,55],[9891,65,8508,57,"codeIntervalSeconds"],[9891,84,8508,76],[9891,86,8508,78,"enrollmentCompletionDeadline"],[9891,114,8508,106],[9891,116,8508,108,"sessionInfo"],[9891,127,8508,119],[9891,129,8508,121,"auth"],[9891,133,8508,125],[9891,135,8508,127],[9892,6,8508,127,"_classCallCheck"],[9892,21,8508,127],[9892,28,8508,127,"TotpSecret"],[9892,38,8508,127],[9893,6,8509,8],[9893,10,8509,12],[9893,11,8509,13,"sessionInfo"],[9893,22,8509,24],[9893,25,8509,27,"sessionInfo"],[9893,36,8509,38],[9894,6,8510,8],[9894,10,8510,12],[9894,11,8510,13,"auth"],[9894,15,8510,17],[9894,18,8510,20,"auth"],[9894,22,8510,24],[9895,6,8511,8],[9895,10,8511,12],[9895,11,8511,13,"secretKey"],[9895,20,8511,22],[9895,23,8511,25,"secretKey"],[9895,32,8511,34],[9896,6,8512,8],[9896,10,8512,12],[9896,11,8512,13,"hashingAlgorithm"],[9896,27,8512,29],[9896,30,8512,32,"hashingAlgorithm"],[9896,46,8512,48],[9897,6,8513,8],[9897,10,8513,12],[9897,11,8513,13,"codeLength"],[9897,21,8513,23],[9897,24,8513,26,"codeLength"],[9897,34,8513,36],[9898,6,8514,8],[9898,10,8514,12],[9898,11,8514,13,"codeIntervalSeconds"],[9898,30,8514,32],[9898,33,8514,35,"codeIntervalSeconds"],[9898,52,8514,54],[9899,6,8515,8],[9899,10,8515,12],[9899,11,8515,13,"enrollmentCompletionDeadline"],[9899,39,8515,41],[9899,42,8515,44,"enrollmentCompletionDeadline"],[9899,70,8515,72],[9900,4,8516,4],[9901,4,8517,4],[9902,4,8517,4],[9902,11,8517,4,"_createClass"],[9902,23,8517,4],[9902,24,8517,4,"TotpSecret"],[9902,34,8517,4],[9903,6,8517,4,"key"],[9903,9,8517,4],[9904,6,8517,4,"value"],[9904,11,8517,4],[9904,13,8521,4],[9905,6,8522,4],[9905,15,8522,4,"_makeTotpVerificationInfo"],[9905,40,8522,29,"_makeTotpVerificationInfo"],[9905,41,8522,30,"otp"],[9905,44,8522,33],[9905,46,8522,35],[9906,8,8523,8],[9906,15,8523,15],[9907,10,8523,17,"sessionInfo"],[9907,21,8523,28],[9907,23,8523,30],[9907,27,8523,34],[9907,28,8523,35,"sessionInfo"],[9907,39,8523,46],[9908,10,8523,48,"verificationCode"],[9908,26,8523,64],[9908,28,8523,66,"otp"],[9909,8,8523,70],[9909,9,8523,71],[9910,6,8524,4],[9911,6,8525,4],[9912,0,8526,0],[9913,0,8527,0],[9914,0,8528,0],[9915,0,8529,0],[9916,0,8530,0],[9917,0,8531,0],[9918,0,8532,0],[9919,0,8533,0],[9920,0,8534,0],[9921,4,8525,4],[9922,6,8525,4,"key"],[9922,9,8525,4],[9923,6,8525,4,"value"],[9923,11,8525,4],[9923,13,8535,4],[9923,22,8535,4,"generateQrCodeUrl"],[9923,39,8535,21,"generateQrCodeUrl"],[9923,40,8535,22,"accountName"],[9923,51,8535,33],[9923,53,8535,35,"issuer"],[9923,59,8535,41],[9923,61,8535,43],[9924,8,8536,8],[9924,12,8536,12,"useDefaults"],[9924,23,8536,23],[9924,26,8536,26],[9924,31,8536,31],[9925,8,8537,8],[9925,12,8537,12,"_isEmptyString"],[9925,26,8537,26],[9925,27,8537,27,"accountName"],[9925,38,8537,38],[9925,39,8537,39],[9925,43,8537,43,"_isEmptyString"],[9925,57,8537,57],[9925,58,8537,58,"issuer"],[9925,64,8537,64],[9925,65,8537,65],[9925,67,8537,67],[9926,10,8538,12,"useDefaults"],[9926,21,8538,23],[9926,24,8538,26],[9926,28,8538,30],[9927,8,8539,8],[9928,8,8540,8],[9928,12,8540,12,"useDefaults"],[9928,23,8540,23],[9928,25,8540,25],[9929,10,8541,12],[9929,14,8541,16,"_isEmptyString"],[9929,28,8541,30],[9929,29,8541,31,"accountName"],[9929,40,8541,42],[9929,41,8541,43],[9929,43,8541,45],[9930,12,8542,16,"accountName"],[9930,23,8542,27],[9930,26,8542,30],[9930,30,8542,34],[9930,31,8542,35,"auth"],[9930,35,8542,39],[9930,36,8542,40,"currentUser"],[9930,47,8542,51],[9930,49,8542,53,"email"],[9930,54,8542,58],[9930,58,8542,62],[9930,71,8542,75],[9931,10,8543,12],[9932,10,8544,12],[9932,14,8544,16,"_isEmptyString"],[9932,28,8544,30],[9932,29,8544,31,"issuer"],[9932,35,8544,37],[9932,36,8544,38],[9932,38,8544,40],[9933,12,8545,16,"issuer"],[9933,18,8545,22],[9933,21,8545,25],[9933,25,8545,29],[9933,26,8545,30,"auth"],[9933,30,8545,34],[9933,31,8545,35,"name"],[9933,35,8545,39],[9934,10,8546,12],[9935,8,8547,8],[9936,8,8548,8],[9936,15,8548,15],[9936,33,8548,33,"issuer"],[9936,39,8548,39],[9936,43,8548,43,"accountName"],[9936,54,8548,54],[9936,65,8548,65],[9936,69,8548,69],[9936,70,8548,70,"secretKey"],[9936,79,8548,79],[9936,90,8548,90,"issuer"],[9936,96,8548,96],[9936,110,8548,110],[9936,114,8548,114],[9936,115,8548,115,"hashingAlgorithm"],[9936,131,8548,131],[9936,142,8548,142],[9936,146,8548,146],[9936,147,8548,147,"codeLength"],[9936,157,8548,157],[9936,159,8548,159],[9937,6,8549,4],[9938,4,8549,5],[9939,6,8549,5,"key"],[9939,9,8549,5],[9940,6,8549,5,"value"],[9940,11,8549,5],[9940,13,8518,4],[9940,22,8518,11,"_fromStartTotpMfaEnrollmentResponse"],[9940,57,8518,46,"_fromStartTotpMfaEnrollmentResponse"],[9940,58,8518,47,"response"],[9940,66,8518,55],[9940,68,8518,57,"auth"],[9940,72,8518,61],[9940,74,8518,63],[9941,8,8519,8],[9941,15,8519,15],[9941,19,8519,19,"TotpSecret"],[9941,29,8519,29],[9941,30,8519,30,"response"],[9941,38,8519,38],[9941,39,8519,39,"totpSessionInfo"],[9941,54,8519,54],[9941,55,8519,55,"sharedSecretKey"],[9941,70,8519,70],[9941,72,8519,72,"response"],[9941,80,8519,80],[9941,81,8519,81,"totpSessionInfo"],[9941,96,8519,96],[9941,97,8519,97,"hashingAlgorithm"],[9941,113,8519,113],[9941,115,8519,115,"response"],[9941,123,8519,123],[9941,124,8519,124,"totpSessionInfo"],[9941,139,8519,139],[9941,140,8519,140,"verificationCodeLength"],[9941,162,8519,162],[9941,164,8519,164,"response"],[9941,172,8519,172],[9941,173,8519,173,"totpSessionInfo"],[9941,188,8519,188],[9941,189,8519,189,"periodSec"],[9941,198,8519,198],[9941,200,8519,200],[9941,204,8519,204,"Date"],[9941,208,8519,208],[9941,209,8519,209,"response"],[9941,217,8519,217],[9941,218,8519,218,"totpSessionInfo"],[9941,233,8519,233],[9941,234,8519,234,"finalizeEnrollmentTime"],[9941,256,8519,256],[9941,257,8519,257],[9941,258,8519,258,"toUTCString"],[9941,269,8519,269],[9941,270,8519,270],[9941,271,8519,271],[9941,273,8519,273,"response"],[9941,281,8519,281],[9941,282,8519,282,"totpSessionInfo"],[9941,297,8519,297],[9941,298,8519,298,"sessionInfo"],[9941,309,8519,309],[9941,311,8519,311,"auth"],[9941,315,8519,315],[9941,316,8519,316],[9942,6,8520,4],[9943,4,8520,5],[9944,2,8520,5],[9945,2,8551,0],[9946,2,8552,0],[9946,11,8552,9,"_isEmptyString"],[9946,25,8552,23,"_isEmptyString"],[9946,26,8552,24,"input"],[9946,31,8552,29],[9946,33,8552,31],[9947,4,8553,4],[9947,11,8553,11],[9947,18,8553,18,"input"],[9947,23,8553,23],[9947,28,8553,28],[9947,39,8553,39],[9947,43,8553,43,"input"],[9947,48,8553,48],[9947,50,8553,50,"length"],[9947,56,8553,56],[9947,61,8553,61],[9947,62,8553,62],[9948,2,8554,0],[9949,2,8556,0],[9949,6,8556,6,"STORAGE_AVAILABLE_KEY"],[9949,27,8556,27],[9949,30,8556,30],[9949,37,8556,37],[9950,2,8558,0,"exports"],[9950,9,8558,7],[9950,10,8558,8,"AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY"],[9950,52,8558,50],[9950,55,8558,53,"AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY"],[9950,97,8558,95],[9951,2,8559,0,"exports"],[9951,9,8559,7],[9951,10,8559,8,"ActionCodeOperation"],[9951,29,8559,27],[9951,32,8559,30,"ActionCodeOperation"],[9951,51,8559,49],[9952,2,8560,0,"exports"],[9952,9,8560,7],[9952,10,8560,8,"ActionCodeURL"],[9952,23,8560,21],[9952,26,8560,24,"ActionCodeURL"],[9952,39,8560,37],[9953,2,8561,0,"exports"],[9953,9,8561,7],[9953,10,8561,8,"AuthCredential"],[9953,24,8561,22],[9953,27,8561,25,"AuthCredential"],[9953,41,8561,39],[9954,2,8562,0,"exports"],[9954,9,8562,7],[9954,10,8562,8,"AuthImpl"],[9954,18,8562,16],[9954,21,8562,19,"AuthImpl"],[9954,29,8562,27],[9955,2,8563,0,"exports"],[9955,9,8563,7],[9955,10,8563,8,"BaseOAuthProvider"],[9955,27,8563,25],[9955,30,8563,28,"BaseOAuthProvider"],[9955,47,8563,45],[9956,2,8564,0,"exports"],[9956,9,8564,7],[9956,10,8564,8,"Delay"],[9956,15,8564,13],[9956,18,8564,16,"Delay"],[9956,23,8564,21],[9957,2,8565,0,"exports"],[9957,9,8565,7],[9957,10,8565,8,"EmailAuthCredential"],[9957,29,8565,27],[9957,32,8565,30,"EmailAuthCredential"],[9957,51,8565,49],[9958,2,8566,0,"exports"],[9958,9,8566,7],[9958,10,8566,8,"EmailAuthProvider"],[9958,27,8566,25],[9958,30,8566,28,"EmailAuthProvider"],[9958,47,8566,45],[9959,2,8567,0,"exports"],[9959,9,8567,7],[9959,10,8567,8,"FacebookAuthProvider"],[9959,30,8567,28],[9959,33,8567,31,"FacebookAuthProvider"],[9959,53,8567,51],[9960,2,8568,0,"exports"],[9960,9,8568,7],[9960,10,8568,8,"FactorId"],[9960,18,8568,16],[9960,21,8568,19,"FactorId"],[9960,29,8568,27],[9961,2,8569,0,"exports"],[9961,9,8569,7],[9961,10,8569,8,"FederatedAuthProvider"],[9961,31,8569,29],[9961,34,8569,32,"FederatedAuthProvider"],[9961,55,8569,53],[9962,2,8570,0,"exports"],[9962,9,8570,7],[9962,10,8570,8,"FetchProvider"],[9962,23,8570,21],[9962,26,8570,24,"FetchProvider"],[9962,39,8570,37],[9963,2,8571,0,"exports"],[9963,9,8571,7],[9963,10,8571,8,"GithubAuthProvider"],[9963,28,8571,26],[9963,31,8571,29,"GithubAuthProvider"],[9963,49,8571,47],[9964,2,8572,0,"exports"],[9964,9,8572,7],[9964,10,8572,8,"GoogleAuthProvider"],[9964,28,8572,26],[9964,31,8572,29,"GoogleAuthProvider"],[9964,49,8572,47],[9965,2,8573,0,"exports"],[9965,9,8573,7],[9965,10,8573,8,"OAuthCredential"],[9965,25,8573,23],[9965,28,8573,26,"OAuthCredential"],[9965,43,8573,41],[9966,2,8574,0,"exports"],[9966,9,8574,7],[9966,10,8574,8,"OAuthProvider"],[9966,23,8574,21],[9966,26,8574,24,"OAuthProvider"],[9966,39,8574,37],[9967,2,8575,0,"exports"],[9967,9,8575,7],[9967,10,8575,8,"OperationType"],[9967,23,8575,21],[9967,26,8575,24,"OperationType"],[9967,39,8575,37],[9968,2,8576,0,"exports"],[9968,9,8576,7],[9968,10,8576,8,"PhoneAuthCredential"],[9968,29,8576,27],[9968,32,8576,30,"PhoneAuthCredential"],[9968,51,8576,49],[9969,2,8577,0,"exports"],[9969,9,8577,7],[9969,10,8577,8,"PhoneAuthProvider"],[9969,27,8577,25],[9969,30,8577,28,"PhoneAuthProvider"],[9969,47,8577,45],[9970,2,8578,0,"exports"],[9970,9,8578,7],[9970,10,8578,8,"PhoneMultiFactorGenerator"],[9970,35,8578,33],[9970,38,8578,36,"PhoneMultiFactorGenerator"],[9970,63,8578,61],[9971,2,8579,0,"exports"],[9971,9,8579,7],[9971,10,8579,8,"ProviderId"],[9971,20,8579,18],[9971,23,8579,21,"ProviderId"],[9971,33,8579,31],[9972,2,8580,0,"exports"],[9972,9,8580,7],[9972,10,8580,8,"RecaptchaVerifier"],[9972,27,8580,25],[9972,30,8580,28,"RecaptchaVerifier"],[9972,47,8580,45],[9973,2,8581,0,"exports"],[9973,9,8581,7],[9973,10,8581,8,"SAMLAuthCredential"],[9973,28,8581,26],[9973,31,8581,29,"SAMLAuthCredential"],[9973,49,8581,47],[9974,2,8582,0,"exports"],[9974,9,8582,7],[9974,10,8582,8,"SAMLAuthProvider"],[9974,26,8582,24],[9974,29,8582,27,"SAMLAuthProvider"],[9974,45,8582,43],[9975,2,8583,0,"exports"],[9975,9,8583,7],[9975,10,8583,8,"STORAGE_AVAILABLE_KEY"],[9975,31,8583,29],[9975,34,8583,32,"STORAGE_AVAILABLE_KEY"],[9975,55,8583,53],[9976,2,8584,0,"exports"],[9976,9,8584,7],[9976,10,8584,8,"SignInMethod"],[9976,22,8584,20],[9976,25,8584,23,"SignInMethod"],[9976,37,8584,35],[9977,2,8585,0,"exports"],[9977,9,8585,7],[9977,10,8585,8,"TotpMultiFactorGenerator"],[9977,34,8585,32],[9977,37,8585,35,"TotpMultiFactorGenerator"],[9977,61,8585,59],[9978,2,8586,0,"exports"],[9978,9,8586,7],[9978,10,8586,8,"TotpSecret"],[9978,20,8586,18],[9978,23,8586,21,"TotpSecret"],[9978,33,8586,31],[9979,2,8587,0,"exports"],[9979,9,8587,7],[9979,10,8587,8,"TwitterAuthProvider"],[9979,29,8587,27],[9979,32,8587,30,"TwitterAuthProvider"],[9979,51,8587,49],[9980,2,8588,0,"exports"],[9980,9,8588,7],[9980,10,8588,8,"UserImpl"],[9980,18,8588,16],[9980,21,8588,19,"UserImpl"],[9980,29,8588,27],[9981,2,8589,0,"exports"],[9981,9,8589,7],[9981,10,8589,8,"_assert"],[9981,17,8589,15],[9981,20,8589,18,"_assert"],[9981,27,8589,25],[9982,2,8590,0,"exports"],[9982,9,8590,7],[9982,10,8590,8,"_assertInstanceOf"],[9982,27,8590,25],[9982,30,8590,28,"_assertInstanceOf"],[9982,47,8590,45],[9983,2,8591,0,"exports"],[9983,9,8591,7],[9983,10,8591,8,"_assertLinkedStatus"],[9983,29,8591,27],[9983,32,8591,30,"_assertLinkedStatus"],[9983,51,8591,49],[9984,2,8592,0,"exports"],[9984,9,8592,7],[9984,10,8592,8,"_castAuth"],[9984,19,8592,17],[9984,22,8592,20,"_castAuth"],[9984,31,8592,29],[9985,2,8593,0,"exports"],[9985,9,8593,7],[9985,10,8593,8,"_createError"],[9985,22,8593,20],[9985,25,8593,23,"_createError"],[9985,37,8593,35],[9986,2,8594,0,"exports"],[9986,9,8594,7],[9986,10,8594,8,"_emulatorUrl"],[9986,22,8594,20],[9986,25,8594,23,"_emulatorUrl"],[9986,37,8594,35],[9987,2,8595,0,"exports"],[9987,9,8595,7],[9987,10,8595,8,"_fail"],[9987,15,8595,13],[9987,18,8595,16,"_fail"],[9987,23,8595,21],[9988,2,8596,0,"exports"],[9988,9,8596,7],[9988,10,8596,8,"_gapiScriptUrl"],[9988,24,8596,22],[9988,27,8596,25,"_gapiScriptUrl"],[9988,41,8596,39],[9989,2,8597,0,"exports"],[9989,9,8597,7],[9989,10,8597,8,"_generateCallbackName"],[9989,31,8597,29],[9989,34,8597,32,"_generateCallbackName"],[9989,55,8597,53],[9990,2,8598,0,"exports"],[9990,9,8598,7],[9990,10,8598,8,"_getActiveServiceWorker"],[9990,33,8598,31],[9990,36,8598,34,"_getActiveServiceWorker"],[9990,59,8598,57],[9991,2,8599,0,"exports"],[9991,9,8599,7],[9991,10,8599,8,"_getClientVersion"],[9991,27,8599,25],[9991,30,8599,28,"_getClientVersion"],[9991,47,8599,45],[9992,2,8600,0,"exports"],[9992,9,8600,7],[9992,10,8600,8,"_getCurrentUrl"],[9992,24,8600,22],[9992,27,8600,25,"_getCurrentUrl"],[9992,41,8600,39],[9993,2,8601,0,"exports"],[9993,9,8601,7],[9993,10,8601,8,"_getInstance"],[9993,22,8601,20],[9993,25,8601,23,"_getInstance"],[9993,37,8601,35],[9994,2,8602,0,"exports"],[9994,9,8602,7],[9994,10,8602,8,"_getServiceWorkerController"],[9994,37,8602,35],[9994,40,8602,38,"_getServiceWorkerController"],[9994,67,8602,65],[9995,2,8603,0,"exports"],[9995,9,8603,7],[9995,10,8603,8,"_getWorkerGlobalScope"],[9995,31,8603,29],[9995,34,8603,32,"_getWorkerGlobalScope"],[9995,55,8603,53],[9996,2,8604,0,"exports"],[9996,9,8604,7],[9996,10,8604,8,"_isAndroid"],[9996,20,8604,18],[9996,23,8604,21,"_isAndroid"],[9996,33,8604,31],[9997,2,8605,0,"exports"],[9997,9,8605,7],[9997,10,8605,8,"_isChromeIOS"],[9997,22,8605,20],[9997,25,8605,23,"_isChromeIOS"],[9997,37,8605,35],[9998,2,8606,0,"exports"],[9998,9,8606,7],[9998,10,8606,8,"_isFirefox"],[9998,20,8606,18],[9998,23,8606,21,"_isFirefox"],[9998,33,8606,31],[9999,2,8607,0,"exports"],[9999,9,8607,7],[9999,10,8607,8,"_isIE10"],[9999,17,8607,15],[9999,20,8607,18,"_isIE10"],[9999,27,8607,25],[10000,2,8608,0,"exports"],[10000,9,8608,7],[10000,10,8608,8,"_isIOS"],[10000,16,8608,14],[10000,19,8608,17,"_isIOS"],[10000,25,8608,23],[10001,2,8609,0,"exports"],[10001,9,8609,7],[10001,10,8609,8,"_isIOS7Or8"],[10001,20,8609,18],[10001,23,8609,21,"_isIOS7Or8"],[10001,33,8609,31],[10002,2,8610,0,"exports"],[10002,9,8610,7],[10002,10,8610,8,"_isIOSStandalone"],[10002,26,8610,24],[10002,29,8610,27,"_isIOSStandalone"],[10002,45,8610,43],[10003,2,8611,0,"exports"],[10003,9,8611,7],[10003,10,8611,8,"_isMobileBrowser"],[10003,26,8611,24],[10003,29,8611,27,"_isMobileBrowser"],[10003,45,8611,43],[10004,2,8612,0,"exports"],[10004,9,8612,7],[10004,10,8612,8,"_isSafari"],[10004,19,8612,17],[10004,22,8612,20,"_isSafari"],[10004,31,8612,29],[10005,2,8613,0,"exports"],[10005,9,8613,7],[10005,10,8613,8,"_isWorker"],[10005,19,8613,17],[10005,22,8613,20,"_isWorker"],[10005,31,8613,29],[10006,2,8614,0,"exports"],[10006,9,8614,7],[10006,10,8614,8,"_link"],[10006,15,8614,13],[10006,18,8614,16,"_link"],[10006,23,8614,21],[10007,2,8615,0,"exports"],[10007,9,8615,7],[10007,10,8615,8,"_loadJS"],[10007,17,8615,15],[10007,20,8615,18,"_loadJS"],[10007,27,8615,25],[10008,2,8616,0,"exports"],[10008,9,8616,7],[10008,10,8616,8,"_logWarn"],[10008,18,8616,16],[10008,21,8616,19,"_logWarn"],[10008,29,8616,27],[10009,2,8617,0,"exports"],[10009,9,8617,7],[10009,10,8617,8,"_performApiRequest"],[10009,28,8617,26],[10009,31,8617,29,"_performApiRequest"],[10009,49,8617,47],[10010,2,8618,0,"exports"],[10010,9,8618,7],[10010,10,8618,8,"_persistenceKeyName"],[10010,29,8618,27],[10010,32,8618,30,"_persistenceKeyName"],[10010,51,8618,49],[10011,2,8619,0,"exports"],[10011,9,8619,7],[10011,10,8619,8,"_reauthenticate"],[10011,25,8619,23],[10011,28,8619,26,"_reauthenticate"],[10011,43,8619,41],[10012,2,8620,0,"exports"],[10012,9,8620,7],[10012,10,8620,8,"_serverAppCurrentUserOperationNotSupportedError"],[10012,57,8620,55],[10012,60,8620,58,"_serverAppCurrentUserOperationNotSupportedError"],[10012,107,8620,105],[10013,2,8621,0,"exports"],[10013,9,8621,7],[10013,10,8621,8,"_setExternalJSProvider"],[10013,32,8621,30],[10013,35,8621,33,"_setExternalJSProvider"],[10013,57,8621,55],[10014,2,8622,0,"exports"],[10014,9,8622,7],[10014,10,8622,8,"_setWindowLocation"],[10014,28,8622,26],[10014,31,8622,29,"_setWindowLocation"],[10014,49,8622,47],[10015,2,8623,0,"exports"],[10015,9,8623,7],[10015,10,8623,8,"_signInWithCredential"],[10015,31,8623,29],[10015,34,8623,32,"_signInWithCredential"],[10015,55,8623,53],[10016,2,8624,0,"exports"],[10016,9,8624,7],[10016,10,8624,8,"_window"],[10016,17,8624,15],[10016,20,8624,18,"_window"],[10016,27,8624,25],[10017,2,8625,0,"exports"],[10017,9,8625,7],[10017,10,8625,8,"applyActionCode"],[10017,25,8625,23],[10017,28,8625,26,"applyActionCode"],[10017,43,8625,41],[10018,2,8626,0,"exports"],[10018,9,8626,7],[10018,10,8626,8,"beforeAuthStateChanged"],[10018,32,8626,30],[10018,35,8626,33,"beforeAuthStateChanged"],[10018,57,8626,55],[10019,2,8627,0,"exports"],[10019,9,8627,7],[10019,10,8627,8,"checkActionCode"],[10019,25,8627,23],[10019,28,8627,26,"checkActionCode"],[10019,43,8627,41],[10020,2,8628,0,"exports"],[10020,9,8628,7],[10020,10,8628,8,"confirmPasswordReset"],[10020,30,8628,28],[10020,33,8628,31,"confirmPasswordReset"],[10020,53,8628,51],[10021,2,8629,0,"exports"],[10021,9,8629,7],[10021,10,8629,8,"connectAuthEmulator"],[10021,29,8629,27],[10021,32,8629,30,"connectAuthEmulator"],[10021,51,8629,49],[10022,2,8630,0,"exports"],[10022,9,8630,7],[10022,10,8630,8,"createUserWithEmailAndPassword"],[10022,40,8630,38],[10022,43,8630,41,"createUserWithEmailAndPassword"],[10022,73,8630,71],[10023,2,8631,0,"exports"],[10023,9,8631,7],[10023,10,8631,8,"debugAssert"],[10023,21,8631,19],[10023,24,8631,22,"debugAssert"],[10023,35,8631,33],[10024,2,8632,0,"exports"],[10024,9,8632,7],[10024,10,8632,8,"debugErrorMap"],[10024,23,8632,21],[10024,26,8632,24,"debugErrorMap"],[10024,39,8632,37],[10025,2,8633,0,"exports"],[10025,9,8633,7],[10025,10,8633,8,"deleteUser"],[10025,20,8633,18],[10025,23,8633,21,"deleteUser"],[10025,33,8633,31],[10026,2,8634,0,"exports"],[10026,9,8634,7],[10026,10,8634,8,"fetchSignInMethodsForEmail"],[10026,36,8634,34],[10026,39,8634,37,"fetchSignInMethodsForEmail"],[10026,65,8634,63],[10027,2,8635,0,"exports"],[10027,9,8635,7],[10027,10,8635,8,"getAdditionalUserInfo"],[10027,31,8635,29],[10027,34,8635,32,"getAdditionalUserInfo"],[10027,55,8635,53],[10028,2,8636,0,"exports"],[10028,9,8636,7],[10028,10,8636,8,"getIdToken"],[10028,20,8636,18],[10028,23,8636,21,"getIdToken"],[10028,33,8636,31],[10029,2,8637,0,"exports"],[10029,9,8637,7],[10029,10,8637,8,"getIdTokenResult"],[10029,26,8637,24],[10029,29,8637,27,"getIdTokenResult"],[10029,47,8637,43],[10030,2,8638,0,"exports"],[10030,9,8638,7],[10030,10,8638,8,"getMultiFactorResolver"],[10030,32,8638,30],[10030,35,8638,33,"getMultiFactorResolver"],[10030,57,8638,55],[10031,2,8639,0,"exports"],[10031,9,8639,7],[10031,10,8639,8,"inMemoryPersistence"],[10031,29,8639,27],[10031,32,8639,30,"inMemoryPersistence"],[10031,51,8639,49],[10032,2,8640,0,"exports"],[10032,9,8640,7],[10032,10,8640,8,"initializeAuth"],[10032,24,8640,22],[10032,27,8640,25,"initializeAuth"],[10032,41,8640,39],[10033,2,8641,0,"exports"],[10033,9,8641,7],[10033,10,8641,8,"initializeRecaptchaConfig"],[10033,35,8641,33],[10033,38,8641,36,"initializeRecaptchaConfig"],[10033,63,8641,61],[10034,2,8642,0,"exports"],[10034,9,8642,7],[10034,10,8642,8,"isSignInWithEmailLink"],[10034,31,8642,29],[10034,34,8642,32,"isSignInWithEmailLink"],[10034,55,8642,53],[10035,2,8643,0,"exports"],[10035,9,8643,7],[10035,10,8643,8,"linkWithCredential"],[10035,28,8643,26],[10035,31,8643,29,"linkWithCredential"],[10035,49,8643,47],[10036,2,8644,0,"exports"],[10036,9,8644,7],[10036,10,8644,8,"linkWithPhoneNumber"],[10036,29,8644,27],[10036,32,8644,30,"linkWithPhoneNumber"],[10036,51,8644,49],[10037,2,8645,0,"exports"],[10037,9,8645,7],[10037,10,8645,8,"multiFactor"],[10037,21,8645,19],[10037,24,8645,22,"multiFactor"],[10037,35,8645,33],[10038,2,8646,0,"exports"],[10038,9,8646,7],[10038,10,8646,8,"onAuthStateChanged"],[10038,28,8646,26],[10038,31,8646,29,"onAuthStateChanged"],[10038,49,8646,47],[10039,2,8647,0,"exports"],[10039,9,8647,7],[10039,10,8647,8,"onIdTokenChanged"],[10039,26,8647,24],[10039,29,8647,27,"onIdTokenChanged"],[10039,45,8647,43],[10040,2,8648,0,"exports"],[10040,9,8648,7],[10040,10,8648,8,"parseActionCodeURL"],[10040,28,8648,26],[10040,31,8648,29,"parseActionCodeURL"],[10040,49,8648,47],[10041,2,8649,0,"exports"],[10041,9,8649,7],[10041,10,8649,8,"prodErrorMap"],[10041,22,8649,20],[10041,25,8649,23,"prodErrorMap"],[10041,37,8649,35],[10042,2,8650,0,"exports"],[10042,9,8650,7],[10042,10,8650,8,"reauthenticateWithCredential"],[10042,38,8650,36],[10042,41,8650,39,"reauthenticateWithCredential"],[10042,69,8650,67],[10043,2,8651,0,"exports"],[10043,9,8651,7],[10043,10,8651,8,"reauthenticateWithPhoneNumber"],[10043,39,8651,37],[10043,42,8651,40,"reauthenticateWithPhoneNumber"],[10043,71,8651,69],[10044,2,8652,0,"exports"],[10044,9,8652,7],[10044,10,8652,8,"registerAuth"],[10044,22,8652,20],[10044,25,8652,23,"registerAuth"],[10044,37,8652,35],[10045,2,8653,0,"exports"],[10045,9,8653,7],[10045,10,8653,8,"reload"],[10045,16,8653,14],[10045,19,8653,17,"reload"],[10045,27,8653,23],[10046,2,8654,0,"exports"],[10046,9,8654,7],[10046,10,8654,8,"revokeAccessToken"],[10046,27,8654,25],[10046,30,8654,28,"revokeAccessToken"],[10046,47,8654,45],[10047,2,8655,0,"exports"],[10047,9,8655,7],[10047,10,8655,8,"sendEmailVerification"],[10047,31,8655,29],[10047,34,8655,32,"sendEmailVerification"],[10047,55,8655,53],[10048,2,8656,0,"exports"],[10048,9,8656,7],[10048,10,8656,8,"sendPasswordResetEmail"],[10048,32,8656,30],[10048,35,8656,33,"sendPasswordResetEmail"],[10048,57,8656,55],[10049,2,8657,0,"exports"],[10049,9,8657,7],[10049,10,8657,8,"sendSignInLinkToEmail"],[10049,31,8657,29],[10049,34,8657,32,"sendSignInLinkToEmail"],[10049,55,8657,53],[10050,2,8658,0,"exports"],[10050,9,8658,7],[10050,10,8658,8,"setPersistence"],[10050,24,8658,22],[10050,27,8658,25,"setPersistence"],[10050,41,8658,39],[10051,2,8659,0,"exports"],[10051,9,8659,7],[10051,10,8659,8,"signInAnonymously"],[10051,27,8659,25],[10051,30,8659,28,"signInAnonymously"],[10051,47,8659,45],[10052,2,8660,0,"exports"],[10052,9,8660,7],[10052,10,8660,8,"signInWithCredential"],[10052,30,8660,28],[10052,33,8660,31,"signInWithCredential"],[10052,53,8660,51],[10053,2,8661,0,"exports"],[10053,9,8661,7],[10053,10,8661,8,"signInWithCustomToken"],[10053,31,8661,29],[10053,34,8661,32,"signInWithCustomToken"],[10053,55,8661,53],[10054,2,8662,0,"exports"],[10054,9,8662,7],[10054,10,8662,8,"signInWithEmailAndPassword"],[10054,36,8662,34],[10054,39,8662,37,"signInWithEmailAndPassword"],[10054,65,8662,63],[10055,2,8663,0,"exports"],[10055,9,8663,7],[10055,10,8663,8,"signInWithEmailLink"],[10055,29,8663,27],[10055,32,8663,30,"signInWithEmailLink"],[10055,51,8663,49],[10056,2,8664,0,"exports"],[10056,9,8664,7],[10056,10,8664,8,"signInWithIdp"],[10056,23,8664,21],[10056,26,8664,24,"signInWithIdp"],[10056,39,8664,37],[10057,2,8665,0,"exports"],[10057,9,8665,7],[10057,10,8665,8,"signInWithPhoneNumber"],[10057,31,8665,29],[10057,34,8665,32,"signInWithPhoneNumber"],[10057,55,8665,53],[10058,2,8666,0,"exports"],[10058,9,8666,7],[10058,10,8666,8,"signOut"],[10058,17,8666,15],[10058,20,8666,18,"signOut"],[10058,27,8666,25],[10059,2,8667,0,"exports"],[10059,9,8667,7],[10059,10,8667,8,"unlink"],[10059,16,8667,14],[10059,19,8667,17,"unlink"],[10059,25,8667,23],[10060,2,8668,0,"exports"],[10060,9,8668,7],[10060,10,8668,8,"updateCurrentUser"],[10060,27,8668,25],[10060,30,8668,28,"updateCurrentUser"],[10060,47,8668,45],[10061,2,8669,0,"exports"],[10061,9,8669,7],[10061,10,8669,8,"updateEmail"],[10061,21,8669,19],[10061,24,8669,22,"updateEmail"],[10061,35,8669,33],[10062,2,8670,0,"exports"],[10062,9,8670,7],[10062,10,8670,8,"updatePassword"],[10062,24,8670,22],[10062,27,8670,25,"updatePassword"],[10062,41,8670,39],[10063,2,8671,0,"exports"],[10063,9,8671,7],[10063,10,8671,8,"updatePhoneNumber"],[10063,27,8671,25],[10063,30,8671,28,"updatePhoneNumber"],[10063,47,8671,45],[10064,2,8672,0,"exports"],[10064,9,8672,7],[10064,10,8672,8,"updateProfile"],[10064,23,8672,21],[10064,26,8672,24,"updateProfile"],[10064,39,8672,37],[10065,2,8673,0,"exports"],[10065,9,8673,7],[10065,10,8673,8,"useDeviceLanguage"],[10065,27,8673,25],[10065,30,8673,28,"useDeviceLanguage"],[10065,47,8673,45],[10066,2,8674,0,"exports"],[10066,9,8674,7],[10066,10,8674,8,"validatePassword"],[10066,26,8674,24],[10066,29,8674,27,"validatePassword"],[10066,45,8674,43],[10067,2,8675,0,"exports"],[10067,9,8675,7],[10067,10,8675,8,"verifyBeforeUpdateEmail"],[10067,33,8675,31],[10067,36,8675,34,"verifyBeforeUpdateEmail"],[10067,59,8675,57],[10068,2,8676,0,"exports"],[10068,9,8676,7],[10068,10,8676,8,"verifyPasswordResetCode"],[10068,33,8676,31],[10068,36,8676,34,"verifyPasswordResetCode"],[10068,59,8676,57],[10069,0,8676,58],[10069,3]],"functionMap":{"names":["<global>","_debugErrorMap","_prodErrorMap","_logWarn","_logError","_fail","_createError","_errorWithCustomMessage","_serverAppCurrentUserOperationNotSupportedError","_assertInstanceOf","createErrorInternal","_assert","debugFail","debugAssert","_getCurrentUrl","_isHttpOrHttps","_getCurrentScheme","_isOnline","_getUserLanguage","Delay","Delay#constructor","Delay#get","_emulatorUrl","FetchProvider","FetchProvider.initialize","FetchProvider.fetch","FetchProvider.headers","FetchProvider.response","_addTidIfNecessary","_performApiRequest","_performFetchWithErrorHandling$argument_2","_performFetchWithErrorHandling","_performSignInRequest","_getFinalTarget","_parseEnforcementState","NetworkTimeout","NetworkTimeout#clearNetworkTimeout","NetworkTimeout#constructor","Promise$argument_0","setTimeout$argument_0","_makeTaggedError","isV2","isEnterprise","RecaptchaConfig","RecaptchaConfig#constructor","RecaptchaConfig#getProviderEnforcementState","RecaptchaConfig#isProviderEnabled","RecaptchaConfig#isAnyProviderEnabled","getRecaptchaParams","getRecaptchaConfig","deleteAccount","deleteLinkedAccounts","getAccountInfo","utcTimestampToDateString","getIdToken","getIdTokenResult","secondsStringToMilliseconds","_parseToken","_tokenExpiresIn","_logoutIfInvalidated","isUserInvalidated","ProactiveRefresh","ProactiveRefresh#constructor","ProactiveRefresh#_start","ProactiveRefresh#_stop","ProactiveRefresh#getInterval","ProactiveRefresh#schedule","ProactiveRefresh#iteration","UserMetadata","UserMetadata#constructor","UserMetadata#_initializeTime","UserMetadata#_copy","UserMetadata#toJSON","_reloadWithoutSaving","reload","mergeProviderData","original.filter$argument_0","newData.some$argument_0","extractProviderData","providers.map$argument_0","requestStsToken","revokeToken","StsTokenManager","StsTokenManager#constructor","StsTokenManager#get__isExpired","StsTokenManager#updateFromServerResponse","StsTokenManager#updateFromIdToken","StsTokenManager#getToken","StsTokenManager#clearRefreshToken","StsTokenManager#refresh","StsTokenManager#updateTokensAndExpiration","StsTokenManager.fromJSON","StsTokenManager#toJSON","StsTokenManager#_assign","StsTokenManager#_clone","StsTokenManager#_performRefresh","assertStringOrUndefined","UserImpl","UserImpl#constructor","UserImpl#getIdToken","UserImpl#getIdTokenResult","UserImpl#reload","UserImpl#_assign","user.providerData.map$argument_0","UserImpl#_clone","UserImpl#_onReload","UserImpl#_notifyReloadListener","UserImpl#_startProactiveRefresh","UserImpl#_stopProactiveRefresh","UserImpl#_updateTokensIfNecessary","UserImpl#_delete","UserImpl#toJSON","providerData.map$argument_0","UserImpl#get__refreshToken","UserImpl._fromJSON","UserImpl._fromIdTokenResponse","UserImpl._fromGetAccountInfoResponse","_getInstance","InMemoryPersistence","InMemoryPersistence#constructor","InMemoryPersistence#_isAvailable","InMemoryPersistence#_set","InMemoryPersistence#_get","InMemoryPersistence#_remove","InMemoryPersistence#_addListener","InMemoryPersistence#_removeListener","_persistenceKeyName","PersistenceUserManager","PersistenceUserManager#constructor","PersistenceUserManager#setCurrentUser","PersistenceUserManager#getCurrentUser","getAccountInfo._catch$argument_0","PersistenceUserManager#removeCurrentUser","PersistenceUserManager#savePersistenceForRedirect","PersistenceUserManager#setPersistence","PersistenceUserManager#_delete","PersistenceUserManager.create","persistenceHierarchy.map$argument_0","filter$argument_0","availablePersistences.filter$argument_0","_getBrowserName","_isFirefox","_isSafari","_isChromeIOS","_isIEMobile","_isAndroid","_isBlackBerry","_isWebOS","_isIOS","_isIOS7Or8","_isIOSStandalone","_isIE10","_isMobileBrowser","_getClientVersion","AuthMiddlewareQueue","AuthMiddlewareQueue#constructor","AuthMiddlewareQueue#pushCallback","wrappedCallback","<anonymous>","queue.index","AuthMiddlewareQueue#runMiddleware","_getPasswordPolicy","PasswordPolicyImpl","PasswordPolicyImpl#constructor","PasswordPolicyImpl#validatePassword","PasswordPolicyImpl#validatePasswordLengthOptions","PasswordPolicyImpl#validatePasswordCharacterOptions","PasswordPolicyImpl#updatePasswordCharacterOptionsStatuses","AuthImpl","AuthImpl#constructor","AuthImpl#_initializeWithPersistence","queue$argument_0","AuthImpl#_onStorageEvent","AuthImpl#initializeCurrentUserFromIdToken","AuthImpl#initializeCurrentUser","_popupRedirectResolver._overrideRedirectResult$argument_1","AuthImpl#tryRedirectSignIn","AuthImpl#reloadAndSetCurrentUserOrClear","AuthImpl#useDeviceLanguage","AuthImpl#_delete","AuthImpl#updateCurrentUser","AuthImpl#_updateCurrentUser","AuthImpl#signOut","AuthImpl#setPersistence","AuthImpl#_getRecaptchaConfig","AuthImpl#validatePassword","AuthImpl#_getPasswordPolicyInternal","AuthImpl#_updatePasswordPolicy","AuthImpl#_getPersistenceType","AuthImpl#_getPersistence","AuthImpl#_updateErrorMap","AuthImpl#onAuthStateChanged","AuthImpl#beforeAuthStateChanged","AuthImpl#onIdTokenChanged","AuthImpl#authStateReady","onAuthStateChanged$argument_0","AuthImpl#revokeAccessToken","AuthImpl#toJSON","AuthImpl#_setRedirectUser","AuthImpl#getOrInitRedirectPersistenceManager","AuthImpl#_redirectUserForId","AuthImpl#_persistUserIfCurrent","AuthImpl#_notifyListenersIfCurrent","AuthImpl#_key","AuthImpl#_startProactiveRefresh","AuthImpl#_stopProactiveRefresh","AuthImpl#get___currentUser","AuthImpl#notifyAuthListeners","AuthImpl#registerStateListener","promise.then$argument_0","AuthImpl#directlySetCurrentUser","AuthImpl#queue","AuthImpl#get__assertedPersistence","AuthImpl#_logFramework","AuthImpl#_getFrameworks","AuthImpl#_getAdditionalHeaders","AuthImpl#_getAppCheckToken","_castAuth","Subscription","Subscription#constructor","util.createSubscribe$argument_0","Subscription#get__next","externalJSProvider.loadJS","_setExternalJSProvider","_loadJS","_recaptchaV2ScriptUrl","_recaptchaEnterpriseScriptUrl","_gapiScriptUrl","_generateCallbackName","MockReCaptcha","MockReCaptcha#constructor","MockReCaptcha#render","MockReCaptcha#reset","MockReCaptcha#getResponse","MockReCaptcha#execute","MockGreCAPTCHATopLevel","MockGreCAPTCHATopLevel#constructor","MockGreCAPTCHATopLevel#ready","MockGreCAPTCHATopLevel#execute","MockGreCAPTCHATopLevel#render","MockGreCAPTCHA","MockGreCAPTCHA#ready","MockGreCAPTCHA#execute","MockGreCAPTCHA#render","MockWidget","MockWidget#constructor","clickHandler","MockWidget#getResponse","MockWidget#_delete","MockWidget#execute","window.setTimeout$argument_0","MockWidget#checkIfDeleted","generateRandomAlphaNumericString","RecaptchaEnterpriseVerifier","RecaptchaEnterpriseVerifier#constructor","RecaptchaEnterpriseVerifier#verify","retrieveSiteKey","getRecaptchaConfig.then$argument_0","getRecaptchaConfig.then._catch$argument_0","retrieveRecaptchaToken","grecaptcha.enterprise.ready$argument_0","grecaptcha.enterprise.execute.then$argument_0","grecaptcha.enterprise.execute.then._catch$argument_0","retrieveSiteKey.then$argument_0","_loadJS.then$argument_0","_loadJS.then._catch$argument_0","retrieveSiteKey.then._catch$argument_0","injectRecaptchaFields","handleRecaptchaFlow","actionMethod._catch$argument_0","_initializeRecaptchaConfig","initializeAuth","_initializeAuthInstance","connectAuthEmulator","extractProtocol","extractHostAndPort","parsePort","emitEmulatorWarning","attachBanner","AuthCredential","AuthCredential#constructor","AuthCredential#toJSON","AuthCredential#_getIdTokenResponse","AuthCredential#_linkToIdToken","AuthCredential#_getReauthenticationResolver","resetPassword","updateEmailPassword","linkEmailPassword","applyActionCode$1","signInWithPassword","sendOobCode","sendEmailVerification$1","sendPasswordResetEmail$1","sendSignInLinkToEmail$1","verifyAndChangeEmail","signInWithEmailLink$1","signInWithEmailLinkForLinking","EmailAuthCredential","EmailAuthCredential#constructor","EmailAuthCredential._fromEmailAndPassword","EmailAuthCredential._fromEmailAndCode","EmailAuthCredential#toJSON","EmailAuthCredential.fromJSON","EmailAuthCredential#_getIdTokenResponse","EmailAuthCredential#_linkToIdToken","EmailAuthCredential#_getReauthenticationResolver","signInWithIdp","OAuthCredential","OAuthCredential#constructor","OAuthCredential._fromParams","OAuthCredential#toJSON","OAuthCredential.fromJSON","OAuthCredential#_getIdTokenResponse","OAuthCredential#_linkToIdToken","OAuthCredential#_getReauthenticationResolver","OAuthCredential#buildRequest","sendPhoneVerificationCode","signInWithPhoneNumber$1","linkWithPhoneNumber$1","verifyPhoneNumberForExisting","PhoneAuthCredential","PhoneAuthCredential#constructor","PhoneAuthCredential._fromVerification","PhoneAuthCredential._fromTokenResponse","PhoneAuthCredential#_getIdTokenResponse","PhoneAuthCredential#_linkToIdToken","PhoneAuthCredential#_getReauthenticationResolver","PhoneAuthCredential#_makeVerificationRequest","PhoneAuthCredential#toJSON","PhoneAuthCredential.fromJSON","parseMode","parseDeepLink","ActionCodeURL","ActionCodeURL#constructor","ActionCodeURL.parseLink","parseActionCodeURL","EmailAuthProvider","EmailAuthProvider#constructor","EmailAuthProvider.credential","EmailAuthProvider.credentialWithLink","FederatedAuthProvider","FederatedAuthProvider#constructor","FederatedAuthProvider#setDefaultLanguage","FederatedAuthProvider#setCustomParameters","FederatedAuthProvider#getCustomParameters","BaseOAuthProvider","BaseOAuthProvider#constructor","BaseOAuthProvider#addScope","BaseOAuthProvider#getScopes","OAuthProvider","OAuthProvider.credentialFromJSON","OAuthProvider#credential","OAuthProvider#_credential","OAuthProvider.credentialFromResult","OAuthProvider.credentialFromError","OAuthProvider.oauthCredentialFromTaggedObject","FacebookAuthProvider","FacebookAuthProvider#constructor","FacebookAuthProvider.credential","FacebookAuthProvider.credentialFromResult","FacebookAuthProvider.credentialFromError","FacebookAuthProvider.credentialFromTaggedObject","GoogleAuthProvider","GoogleAuthProvider#constructor","GoogleAuthProvider.credential","GoogleAuthProvider.credentialFromResult","GoogleAuthProvider.credentialFromError","GoogleAuthProvider.credentialFromTaggedObject","GithubAuthProvider","GithubAuthProvider#constructor","GithubAuthProvider.credential","GithubAuthProvider.credentialFromResult","GithubAuthProvider.credentialFromError","GithubAuthProvider.credentialFromTaggedObject","SAMLAuthCredential","SAMLAuthCredential#constructor","SAMLAuthCredential#_getIdTokenResponse","SAMLAuthCredential#_linkToIdToken","SAMLAuthCredential#_getReauthenticationResolver","SAMLAuthCredential#toJSON","SAMLAuthCredential.fromJSON","SAMLAuthCredential._create","SAMLAuthCredential#buildRequest","SAMLAuthProvider","SAMLAuthProvider#constructor","SAMLAuthProvider.credentialFromResult","SAMLAuthProvider.credentialFromError","SAMLAuthProvider.credentialFromJSON","SAMLAuthProvider.samlCredentialFromTaggedObject","TwitterAuthProvider","TwitterAuthProvider#constructor","TwitterAuthProvider.credential","TwitterAuthProvider.credentialFromResult","TwitterAuthProvider.credentialFromError","TwitterAuthProvider.credentialFromTaggedObject","signUp","UserCredentialImpl","UserCredentialImpl#constructor","UserCredentialImpl._fromIdTokenResponse","UserCredentialImpl._forOperation","providerIdForResponse","signInAnonymously","MultiFactorError","MultiFactorError#constructor","MultiFactorError._fromErrorAndOperation","_processCredentialSavingMfaContextIfNecessary","idTokenProvider._catch$argument_0","providerDataAsNames","providerData.map.filter$argument_0","unlink","userInternal.providerData.filter$argument_0","_link","_assertLinkedStatus","_reauthenticate","_signInWithCredential","signInWithCredential","linkWithCredential","reauthenticateWithCredential","signInWithCustomToken$1","signInWithCustomToken","MultiFactorInfoImpl","MultiFactorInfoImpl#constructor","MultiFactorInfoImpl._fromServerResponse","PhoneMultiFactorInfoImpl","PhoneMultiFactorInfoImpl#constructor","PhoneMultiFactorInfoImpl._fromServerResponse","TotpMultiFactorInfoImpl","TotpMultiFactorInfoImpl#constructor","TotpMultiFactorInfoImpl._fromServerResponse","_setActionCodeSettingsOnRequest","recachePasswordPolicy","sendPasswordResetEmail","confirmPasswordReset","resetPassword._catch$argument_0","applyActionCode","checkActionCode","verifyPasswordResetCode","createUserWithEmailAndPassword","signUpResponse._catch$argument_0","signInWithEmailAndPassword","signInWithCredential._catch$argument_0","sendSignInLinkToEmail","setActionCodeSettings","isSignInWithEmailLink","signInWithEmailLink","createAuthUri","fetchSignInMethodsForEmail","sendEmailVerification","verifyBeforeUpdateEmail","updateProfile$1","updateProfile","userInternal.providerData.find$argument_0","updateEmail","updatePassword","updateEmailOrPassword","_fromIdTokenResponse","GenericAdditionalUserInfo","GenericAdditionalUserInfo#constructor","FederatedAdditionalUserInfoWithUsername","FederatedAdditionalUserInfoWithUsername#constructor","FacebookAdditionalUserInfo","FacebookAdditionalUserInfo#constructor","GithubAdditionalUserInfo","GithubAdditionalUserInfo#constructor","GoogleAdditionalUserInfo","GoogleAdditionalUserInfo#constructor","TwitterAdditionalUserInfo","TwitterAdditionalUserInfo#constructor","getAdditionalUserInfo","setPersistence","initializeRecaptchaConfig","validatePassword","onIdTokenChanged","beforeAuthStateChanged","onAuthStateChanged","useDeviceLanguage","updateCurrentUser","signOut","revokeAccessToken","deleteUser","MultiFactorSessionImpl","MultiFactorSessionImpl#constructor","MultiFactorSessionImpl._fromIdtoken","MultiFactorSessionImpl._fromMfaPendingCredential","MultiFactorSessionImpl#toJSON","MultiFactorSessionImpl.fromJSON","MultiFactorResolverImpl","MultiFactorResolverImpl#constructor","MultiFactorResolverImpl._fromError","map$argument_0","MultiFactorResolverImpl$argument_2","MultiFactorResolverImpl#resolveSignIn","getMultiFactorResolver","startEnrollPhoneMfa","finalizeEnrollPhoneMfa","startEnrollTotpMfa","finalizeEnrollTotpMfa","withdrawMfa","MultiFactorUserImpl","MultiFactorUserImpl#constructor","user._onReload$argument_0","userInfo.mfaInfo.map$argument_0","MultiFactorUserImpl._fromUser","MultiFactorUserImpl#getSession","MultiFactorUserImpl#enroll","MultiFactorUserImpl#unenroll","enrolledFactors.filter$argument_0","multiFactor","AuthInterop","AuthInterop#constructor","AuthInterop#getUid","AuthInterop#getToken","AuthInterop#addAuthTokenListener","auth.onIdTokenChanged$argument_0","AuthInterop#removeAuthTokenListener","AuthInterop#assertAuthConfigured","AuthInterop#updateProactiveRefresh","getVersionForPlatform","registerAuth","component.Component$argument_1","component.Component.setInstantiationMode.setInstanceCreatedCallback$argument_0","startSignInPhoneMfa","finalizeSignInPhoneMfa","finalizeSignInTotpMfa","_window","_setWindowLocation","_isWorker","_getActiveServiceWorker","_getServiceWorkerController","_getWorkerGlobalScope","ReCaptchaLoaderImpl","ReCaptchaLoaderImpl#constructor","ReCaptchaLoaderImpl#load","_window.setTimeout$argument_0","_window._JSLOAD_CALLBACK","recaptcha.render","_loadJS._catch$argument_0","ReCaptchaLoaderImpl#clearedOneInstance","ReCaptchaLoaderImpl#shouldResolveImmediately","isHostLanguageValid","MockReCaptchaLoaderImpl","MockReCaptchaLoaderImpl#load","MockReCaptchaLoaderImpl#clearedOneInstance","RecaptchaVerifier","RecaptchaVerifier#constructor","RecaptchaVerifier#verify","tokenChange","RecaptchaVerifier#render","makeRenderPromise._catch$argument_0","RecaptchaVerifier#_reset","RecaptchaVerifier#clear","container.childNodes.forEach$argument_0","RecaptchaVerifier#validateStartingState","RecaptchaVerifier#makeTokenCallback","tokenChangeListeners.forEach$argument_0","RecaptchaVerifier#assertNotDestroyed","RecaptchaVerifier#makeRenderPromise","RecaptchaVerifier#init","RecaptchaVerifier#getAssertedRecaptcha","domReady","resolver","Promise._catch$argument_0","ConfirmationResultImpl","ConfirmationResultImpl#constructor","ConfirmationResultImpl#confirm","signInWithPhoneNumber","ConfirmationResultImpl$argument_1","linkWithPhoneNumber","reauthenticateWithPhoneNumber","_verifyPhoneNumber","startEnrollPhoneMfaActionCallback","startPhoneMfaEnrollmentResponse._catch$argument_0","startSignInPhoneMfaActionCallback","startPhoneMfaSignInResponse._catch$argument_0","sendPhoneVerificationCodeActionCallback","sendPhoneVerificationCodeResponse._catch$argument_0","updatePhoneNumber","injectRecaptchaV2Token","PhoneAuthProvider","PhoneAuthProvider#constructor","PhoneAuthProvider#verifyPhoneNumber","PhoneAuthProvider.credential","PhoneAuthProvider.credentialFromResult","PhoneAuthProvider.credentialFromError","PhoneAuthProvider.credentialFromTaggedObject","MultiFactorAssertionImpl","MultiFactorAssertionImpl#constructor","MultiFactorAssertionImpl#_process","PhoneMultiFactorAssertionImpl","PhoneMultiFactorAssertionImpl#constructor","PhoneMultiFactorAssertionImpl._fromCredential","PhoneMultiFactorAssertionImpl#_finalizeEnroll","PhoneMultiFactorAssertionImpl#_finalizeSignIn","PhoneMultiFactorGenerator","PhoneMultiFactorGenerator#constructor","PhoneMultiFactorGenerator.assertion","TotpMultiFactorGenerator","TotpMultiFactorGenerator.assertionForEnrollment","TotpMultiFactorGenerator.assertionForSignIn","TotpMultiFactorGenerator.generateSecret","TotpMultiFactorAssertionImpl","TotpMultiFactorAssertionImpl#constructor","TotpMultiFactorAssertionImpl._fromSecret","TotpMultiFactorAssertionImpl._fromEnrollmentId","TotpMultiFactorAssertionImpl#_finalizeEnroll","TotpMultiFactorAssertionImpl#_finalizeSignIn","TotpSecret","TotpSecret#constructor","TotpSecret._fromStartTotpMfaEnrollmentResponse","TotpSecret#_makeTotpVerificationInfo","TotpSecret#generateQrCodeUrl","_isEmptyString"],"mappings":"AAA;ACuB;CDgK;AEC;CFS;AG0J;CHI;AIC;CJI;AKkB;CLE;AMC;CNE;AOC;CPS;AQC;CRE;ASC;CTS;AUC;CVU;AWC;CXI;AYO;CZS;AaQ;CbI;AckB;CdE;AeC;CfE;AgBC;ChBE;AiBqB;CjBe;AkBC;ClBa;AmBuB;ICC;KDM;IEC;KFU;CnBC;AsBkB;CtBO;AuBkB;ICC;KDQ;IEC;KFc;IGC;KHc;IIC;KJc;CvBC;A4ByH;C5BQ;A6BC;gECC;KDsC;C7BC;A+BC;C/BoD;AgCC;ChCQ;AiCC;CjCmB;AkCC;ClCW;AmCC;ICC;KDE;IEC;mCCM;oCCC;aDE;SDC;KFC;CnCC;AwCC;CxCc;AyCkB;CzCG;A0CC;C1CG;A2CC;ICC;KDe;IEO;KFY;IGO;KHI;IIO;KJG;C3CC;AgDkB;ChDE;AiDC;CjDE;AkDkB;ClDE;AmDC;CnDE;AoDC;CpDE;AqDkB;CrDiB;AsD8B;CtDE;AuDa;CvDgB;AwDC;CxDE;AyDC;CzDoB;A0DI;C1DM;A2DkB;C3De;A4DC;C5DG;A6DkB;ICC;KDS;IEC;KFM;IGC;KHQ;IIC;KJa;IKC;kC3BM;S2BE;KLC;IMC;KNa;C7DC;AoEkB;ICC;KDI;IEC;KFG;IGC;KHI;IIC;KJK;CpEC;AyEkB;CzEgC;A0EQ;C1EQ;A2EC;oCCC,mBC,kCD,CD;C3EE;A8EC;yBCC;KDS;C9EC;AgFkB;oElDC;KkDmB;ChFO;AiFC;CjFE;AkFwB;ICC;KDI;IEC;KFG;IGC;KHQ;IIC;KJI;IKC;KLU;IMC;KNE;IOC;KPG;IQC;KRI;ISC;KTsB;IUC;KVM;IWC;KXI;IYC;KZE;IaC;KbE;ClFC;AgGkB;ChGE;AiGC;ICC;KDmB;IEC;KFS;IGC;KHE;IIC;KJE;IKC;kDCY,6BD;KLG;IOC;KPQ;IQC;KRQ;ISC;KTQ;IUC;KVE;IWC;KXE;IYC;KZc;IaC;KbU;IcC;gDCU,6BD;KdY;IgBC;KhBE;IiBC;iDFsC,6BE;KjBM;IkBM;KlBa;ImBM;KnBgC;CjGC;AqHmB;CrHU;AsHkB;ICC;KDG;IEC;KFE;IGC;KHE;IIC;KJG;IKC;KLE;IMC;KNG;IOC;KPG;CtHC;A8HyB;C9HE;A+HC;ICC;KDS;IEC;KFE;IGC;sFCM,eD;KHO;IKC;KLE;IMC;KNE;IOC;KPU;IQC;KRE;ISC;kFCK;SDK,WE,0BF;iCLmB,eK;gEGoB,4BH;mDCc;SDO;KTE;C/HC;A4IqB;C5IiD;A6IC;C7IE;A8IC;C9IM;A+IC;C/IE;AgJC;ChJE;AiJC;CjJE;AkJC;ClJE;AmJC;CnJE;AoJC;CpJG;AqJC;CrJG;AsJC;CtJE;AuJC;CvJE;AwJC;CxJQ;AyJqB;CzJoB;A0JkB;ICC;KDG;IEC;gCCG,sBvH;SuHW,CD;eEK;gCCG,uBD;SFC;KFC;IMC;KNgC;C1JC;AiKyB;CjKE;AkKyB;ICC;KDoC;IEC;KFgB;IGO;KHS;IIO;KJmB;IKY;KLa;ClKC;AwKkB;ICC;wDnIuC,+DmI;KDC;IEC;iDCM;SD0B;KFE;III;KJqB;IKC;KLU;IMC;mCxIM;+BCC,2ED;iBwIC;8ECwC,uBD;KNoB;IQC;KR4B;ISC;KTa;IUC;KVE;IWC;KXE;IYC;KZa;IaC;0BVU;SUG;KbC;IcC;Kda;IeC;0BZI;SYE;KfC;IgBC;KhBO;IiBC;KjBa;IkBC;KlBO;ImBC;KnBS;IoBC;KpBE;IqBC;KrBE;IsBC;KtBE;IuBC;KvBE;IwBC;KxBE;IyBC;KzBE;I0BC;2B5JC;4D6JK;iB7JG;S4JE;K1BC;I4BI;K5Be;I6BC;K7BO;I8BC;K9BK;I+BC;K/BU;IgCC;6B7BI,e6B;KhCS;IiCC;8B9BE,6C8B;KjCE;IkCE;KlCI;ImCC;KnCE;IoCC;KpCK;IqCC;KrCK;IsCE;KtCE;IuCC;KvCU;IwCC;mBlDE,SkD;qBCY;SDK;mBlDG;akDG;mBlDI;akDG;KxCE;I0CM;K1Cc;I2CC;K3CK;I4CC;K5CG;I6CC;K7CS;I8CC;K9CE;I+CC;K/CuB;IgDC;KhDe;CxKC;AyNO;CzNE;A0NE;ICC;gDCG,sCD;KDC;IGC;KHG;C1NC;I8NmB;K9NE;A+NK;C/NE;AgOC;ChOE;AiOC;CjOE;AkOC;ClOE;AmOC;CnOE;AoOC;CpOE;AqOqB;ICC;KDI;IEC;KFK;IGC;KHI;IIC;KJG;IKC;KLI;CrOC;A2OC;ICC;KDE;IEC;KFE;IGC;KHI;IIC;KJI;C3OC;AgPC;ICC;KDE;IEC;KFI;IGC;KHI;ChPC;AoPC;ICC;4BCK;SDE;KDa;IGC;KHG;IIC;KJQ;IKC;yCCK;SDsB;KLC;IOC;KPI;CpPC;A4PC;C5PO;A6PK;ICM;KDM;IEM;QCC;+B1NU;0B2NK;iB3Nc;2B4NC;iB5NE;a0NC;SDC;QIC;4CCG;8BCG;qBDE;+BEC;qBFE;iBDC;SJK;2BzNM;sBiOE;8BCc;qBDE;+BEC;qBFE;ajOE;uBoOC;apOE;SyNC;KFC;C7PC;A2QC;C3QsD;A4QC;6DCS;aDS;0ECQ;aDoB;C5Qc;A8QC;C9QiB;A+Q2C;C/Qc;AgRC;ChRU;AiRwB;CjRuC;AkRC;ClRG;AmRC;CnRgB;AoRC;CpRS;AqRC;ICC;KDiB;CrRc;AuR0B;ICE;KDmB;IEM;KFE;IGE;KHE;IIE;KJE;IKE;KLE;CvRC;A6RkB;C7RE;A8RC;C9RE;A+RG;C/RE;AgSC;ChSE;AiSkB;CjSE;AkSC;ClSE;AmSC;CnSE;AoSC;CpSE;AqSC;CrSE;AsSC;CtSE;AuSkB;CvSE;AwSC;CxSE;AyS4B;ICE;KDW;IEE;KFE;IGE;KHE;IIE;KJO;IKS;KLW;IME;KNkB;IOE;KPoB;IQE;KRE;CzSC;AkTkB;ClTE;AmT2B;ICC;KDG;IEE;KF2B;IGE;KHU;IIU;KJa;IKE;KLG;IME;KNI;IOE;KPI;IQC;KR0B;CnTC;A4TkB;C5TE;A6TC;C7TE;A8TC;C9TM;A+TI;C/TM;AgUuB;ICC;KDG;IEE;KFE;IGE;KHE;IIE;KJE;IKE;KLK;IME;KNE;IOE;KPS;IQE;KRiB;ISE;KTiB;ChUC;A0UuB;C1UiB;A2UM;C3UY;A4UO;ICO;KDa;IEU;KFQ;C5UC;A+UO;C/UE;AgVuB;ICC;KDK;IEmB;KFE;IGuB;KHI;ChVC;AoVqC;ICM;KDM;IEM;KFE;IGW;KHG;III;KJE;CpVC;AyVwB;ICC;KDI;IEM;KFM;IGI;KHE;CzVC;A6VyC;ICK;KDI;IEsB;KFE;IGE;KHQ;IIM;KJE;IKO;KLE;IMC;KNyB;C7VC;AoWyD;ICC;KDE;IEa;KFM;IGM;KHE;IIO;KJE;IKC;KLa;CpWC;A0W+D;ICC;KDG;IEc;KFO;IGM;KHE;IIO;KJE;IKC;KLe;C1WC;AgXgE;ICC;KDE;IEM;KFM;IGM;KHE;IIO;KJE;IKC;KLa;ChXC;AsX0B;ICE;KDG;IEE;KFG;IGE;KHI;IIE;KJI;IKE;KLM;IMU;KNU;IOM;KPE;IQC;KRM;CtXC;A+XwB;ICK;KDG;IEiB;KFE;IGO;KHE;IIK;KJI;IKC;KLc;C/XC;AqYyD;ICC;KDE;IEO;KFO;IGM;KHE;IIO;KJE;IKC;KLc;CrYC;A2YsB;C3YE;A4YkB;ICC;KDK;IEC;KFU;IGC;KHS;C5YC;AgZC;ChZQ;AiZgC;CjZoB;AkZkB;ICC;KDY;IEC;KFE;ClZC;AqZC;iCCI;KDK;CrZC;AuZqB;avSE,8BuS;gBCC,YD;CvZC;AyZ0B;iECQ,sCD;CzZM;A2ZC;C3ZG;A4ZC;C5ZO;A6ZkB;C7ZsB;A8ZkB;C9ZW;A+Ze;C/ZE;AgaY;ChaI;AiaiB;CjaE;AkakB;ClaE;AmaqC;CnaY;AoakB;ICC;KDK;IEC;KFQ;CpaC;AuaC;ICC;KDG;IEC;KFE;CvaC;A0aC;ICC;KDE;IEC;KFE;C1aC;A6akB;C7aqB;A8a+B;C9aK;A+aoC;C/aW;AgbU;eCK;KDM;ChbE;AkbS;ClbE;AmbW;CnbwC;AobW;CpbI;AqbqB;gDCY;KDK;CrbI;AubwB;oHCI;KDK;CvbC;AybwD;ICO;KDK;CzbG;A2bS;C3bG;A4b0C;C5bU;A6bkB;C7bE;A8bsC;C9bW;A+b+B;C/bc;AgcmC;ChciB;AickB;CjcE;Akc0B;4DCgB,6CD;ClcM;AocyB;CpcM;Aqcc;CrcE;AscC;Ctce;AucsB;CvcuC;AwcC;ICC;KDI;CxcC;A0cC;ICC;KDG;C1cC;A4cC;ICC;KDE;C5cC;A8cC;ICC;KDE;C9cC;AgdC;ICC;KDE;ChdC;AkdC;ICC;KDE;CldC;AodQ;CpdY;Aqd2C;CrdE;Asd4B;CtdE;AudwB;CvdG;AwdiB;CxdE;AydW;CzdE;A0dgB;C1dE;A2dQ;C3dE;A4dsB;C5dE;A6dY;C7dE;A8dS;C9dG;A+da;C/dE;AgekB;ICC;KDI;IEC;KFE;IGC;KHE;IIC;KJS;IKC;KLU;CheC;AsekB;ICC;KDI;IEE;yDCG,uED;2DEG;SFuB;KFC;IKC;KLG;CteC;A4eW;C5eM;A6ekB;C7eE;A8eC;C9eE;A+eC;C/eE;AgfC;ChfE;AifC;CjfE;AkfE;ICC;uBCG;4DCE,4ED;SDE;KDC;IIC;KJE;IKC;KLE;IMC;KNW;IOC;+DCS,oCD;KPW;ClfC;A2fY;C3fM;A4fqB;ICC;KDG;IEC;KFG;IGC;KHQ;IIC;uDCK;SDE;KJG;IMC;KNS;IOC;KPE;IQC;KRO;C5fC;AqgBkB;CrgBe;AsgBE;qFCC;KDkB;oCEU;KFG;uGCC;gBzWE,6ByW;KDC;CtgBI;AygBqH;CzgBE;A0gBC;C1gBE;A2gBC;C3gBE;A4gBsB;C5gBE;A6gBC;C7gBE;A8gBkB;C9gBG;A+gBC;C/gBW;AghBC;ChhBE;AihBC;CjhBE;AkhByB;ICC;KDS;IEC;2B9eK;wD+eC;a/eE;0CgfC;mCCW;iBDI;ahfG;+BkfM;alfG;S8eC;KFC;IOC;KPE;IQC;KRY;ClhBC;A2hBC;C3hBE;A4hBC;ICC;KDE;IEC,wBF;C5hBC;A+hB+B;ICoB;KD8B;IEM;2B3fQ;gC4fC;a5fM;S2fK;KFC;IIM;4DCa;SDG;KJE;IME;KNK;IOI;8CCK;aDE;KPE;ISC;KTI;IUC;e3YC;8C4YC,2B5Y;S2YU;KVC;IYC;KZE;IaC;KbY;IcC;KdO;IeC;KfG;C/hBC;A+iBC;uBzgBE;mB0gBQ,e1gB;KygBE,QE;KFK;C/iBC;AkjBkB;ICC;KDG;IEC;KFG;CljBC;AqjBqC;sDCM,gDD;CrjBC;AujBa;sDDI,8CC;CvjBC;AwjBgB;sDFM,wDE;CxjBC;AyjBK;0DCkC;iBDQ;6EEE;iBFE;0DGe;iBHQ;yEIE;iBJE;4DKS;aLQ;2EME;aNE;CzjBO;AgkBwB;ChkBM;AikBE;CjkByC;AkkBqC;ICK;KDI;IEkC;KFE;IG4B;KHE;IIK;KJG;IKiC;KLE;IMC;KNS;ClkBC;AykBM;ICC;KDE;IEC;KFS;CzkBC;A4kBO;ICC;KDG;IEE;KFE;IGE;KHM;IIE;KJK;C5kBC;AilBM;ICC,iBD;IEW;KFE;CjlBC;AolBW;ICW;KDE;IEU;KFE;IGU;KHQ;CplBC;AwlBK;ICC;KDK;IEE;KFE;IGE;KHE;IIE;KJO;IKE;KLQ;CxlBC;A8lBQ;ICE;KDQ;IEE;KFE;IGE;KHE;IIW;KJc;C9lBC;AmmBE;CnmBE"},"hasCjsExports":true},"type":"js/module"}]}